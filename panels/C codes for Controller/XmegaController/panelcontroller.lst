
panelcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c0b8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000004e8  00802000  0000c0b8  0000c16c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000733  008024e8  008024e8  0000c654  2**0
                  ALLOC
  3 .eeprom       00000082  00810000  00810000  0000c654  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000d08  00000000  00000000  0000c6d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000070  00000000  00000000  0000d3e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000140  00000000  00000000  0000d450  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000e8a  00000000  00000000  0000d590  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00009b9b  00000000  00000000  0000e41a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001621  00000000  00000000  00017fb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00006971  00000000  00000000  000195d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000a80  00000000  00000000  0001ff48  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000021f4  00000000  00000000  000209c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00007b7a  00000000  00000000  00022bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000002a0  00000000  00000000  0002a736  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1d 09 	jmp	0x123a	; 0x123a <__ctors_end>
       4:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
       8:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
       c:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      10:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      14:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      18:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      1c:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      20:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      24:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      28:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      2c:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      30:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      34:	0c 94 60 23 	jmp	0x46c0	; 0x46c0 <__vector_13>
      38:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      3c:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      40:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      44:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      48:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      4c:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      50:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      54:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      58:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      5c:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      60:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      64:	0c 94 df 30 	jmp	0x61be	; 0x61be <__vector_25>
      68:	0c 94 2f 31 	jmp	0x625e	; 0x625e <__vector_26>
      6c:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      70:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      74:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      78:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      7c:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      80:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      84:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      88:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      8c:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      90:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      94:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      98:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      9c:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      a0:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      a4:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      a8:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      ac:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      b0:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      b4:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      b8:	0c 94 f6 22 	jmp	0x45ec	; 0x45ec <__vector_46>
      bc:	0c 94 a4 31 	jmp	0x6348	; 0x6348 <__vector_47>
      c0:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      c4:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      c8:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      cc:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      d0:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      d4:	0c 94 9f 56 	jmp	0xad3e	; 0xad3e <__vector_53>
      d8:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      dc:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      e0:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      e4:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      e8:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      ec:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      f0:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      f4:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      f8:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
      fc:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     100:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     104:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     108:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     10c:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     110:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     114:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     118:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     11c:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     120:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     124:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     128:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     12c:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     130:	0c 94 2b 23 	jmp	0x4656	; 0x4656 <__vector_76>
     134:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     138:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     13c:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     140:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     144:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     148:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     14c:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     150:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     154:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     158:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     15c:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     160:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     164:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     168:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     16c:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     170:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     174:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     178:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     17c:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     180:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     184:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     188:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     18c:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     190:	0c 94 0f 0e 	jmp	0x1c1e	; 0x1c1e <__vector_100>
     194:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     198:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     19c:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     1a0:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     1a4:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     1a8:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     1ac:	0c 94 c1 22 	jmp	0x4582	; 0x4582 <__vector_107>
     1b0:	0c 94 d5 57 	jmp	0xafaa	; 0xafaa <__vector_108>
     1b4:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     1b8:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     1bc:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     1c0:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     1c4:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     1c8:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     1cc:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     1d0:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     1d4:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     1d8:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     1dc:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     1e0:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     1e4:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     1e8:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     1ec:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     1f0:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__bad_interrupt>
     1f4:	16 1c       	adc	r1, r6
     1f6:	1b 1c       	adc	r1, r11
     1f8:	20 1c       	adc	r2, r0
     1fa:	24 1c       	adc	r2, r4
     1fc:	28 1c       	adc	r2, r8
     1fe:	2c 1c       	adc	r2, r12
     200:	35 1c       	adc	r3, r5
     202:	39 1c       	adc	r3, r9
     204:	3d 1c       	adc	r3, r13
     206:	56 1c       	adc	r5, r6
     208:	56 1c       	adc	r5, r6
     20a:	56 1c       	adc	r5, r6
     20c:	56 1c       	adc	r5, r6
     20e:	56 1c       	adc	r5, r6
     210:	56 1c       	adc	r5, r6
     212:	41 1c       	adc	r4, r1
     214:	03 55       	subi	r16, 0x53	; 83
     216:	0f 55       	subi	r16, 0x5F	; 95
     218:	70 55       	subi	r23, 0x50	; 80
     21a:	76 55       	subi	r23, 0x56	; 86
     21c:	00 55       	subi	r16, 0x50	; 80
     21e:	00 55       	subi	r16, 0x50	; 80
     220:	00 55       	subi	r16, 0x50	; 80
     222:	00 55       	subi	r16, 0x50	; 80
     224:	00 55       	subi	r16, 0x50	; 80
     226:	00 55       	subi	r16, 0x50	; 80
     228:	11 56       	subi	r17, 0x61	; 97
     22a:	16 56       	subi	r17, 0x66	; 102
     22c:	18 56       	subi	r17, 0x68	; 104
     22e:	26 56       	subi	r18, 0x66	; 102
     230:	45 56       	subi	r20, 0x65	; 101

00000232 <__c.5796>:
     232:	49 6e 74 33 20 63 61 74 63 68 65 73 20 61 20 72     Int3 catches a r
     242:	69 73 69 6e 67 20 65 64 67 65 20 74 72 69 67 67     ising edge trigg
     252:	65 72 21 0a 00                                      er!..

00000257 <__c.5767>:
     257:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     267:	53 44 49 6e 66 6f 2e 6d 61 74 2e 0a 00              SDInfo.mat...

00000274 <__c.5765>:
     274:	45 72 72 6f 72 20 66 5f 6c 73 65 65 6b 20 69 6e     Error f_lseek in
     284:	20 72 65 6d 61 69 6e 65 64 20 64 61 74 61 2e 0a      remained data..
	...

00000295 <__c.5760>:
     295:	45 72 72 6f 72 20 66 5f 6c 73 65 65 6b 20 69 6e     Error f_lseek in
     2a5:	20 53 44 49 6e 66 6f 2e 6d 61 74 2e 0a 00            SDInfo.mat...

000002b3 <__c.5711>:
     2b3:	45 72 72 6f 72 20 69 6e 20 66 5f 6c 73 65 65 6b     Error in f_lseek
     2c3:	20 69 6e 20 75 70 64 61 74 65 5f 66 75 6e 63 43      in update_funcC
     2d3:	6e 74 5f 79 20 6c 6f 61 64 20 6e 65 78 74 20 62     nt_y load next b
     2e3:	75 66 66 65 72 0a 00                                uffer..

000002ea <__c.5709>:
     2ea:	72 65 73 20 3d 20 20 25 75 0a 00                    res =  %u..

000002f5 <__c.5704>:
     2f5:	45 72 72 6f 72 20 69 6e 20 66 5f 72 65 61 64 20     Error in f_read 
     305:	69 6e 20 69 6e 20 75 70 64 61 74 65 5f 66 75 6e     in in update_fun
     315:	63 43 6e 74 5f 79 0a 00                             cCnt_y..

0000031d <__c.5702>:
     31d:	72 65 73 20 3d 20 20 25 75 0a 00                    res =  %u..

00000328 <__c.5700>:
     328:	52 69 6e 67 20 62 75 66 66 65 72 20 66 75 6e 63     Ring buffer func
     338:	74 69 6f 6e 5f 59 20 69 73 20 66 75 6c 6c 0a 00     tion_Y is full..

00000348 <__c.5653>:
     348:	52 69 6e 67 20 62 75 66 66 65 72 20 66 75 6e 63     Ring buffer func
     358:	74 69 6f 6e 5f 59 20 69 73 20 65 6d 70 74 79 0a     tion_Y is empty.
	...

00000369 <__c.5610>:
     369:	45 72 72 6f 72 20 69 6e 20 66 5f 6c 73 65 65 6b     Error in f_lseek
     379:	20 69 6e 20 66 65 74 63 68 5f 75 70 64 61 74 65      in fetch_update
     389:	5f 66 75 6e 63 58 0a 00                             _funcX..

00000391 <__c.5608>:
     391:	72 65 73 20 3d 20 20 25 75 0a 00                    res =  %u..

0000039c <__c.5603>:
     39c:	45 72 72 6f 72 20 69 6e 20 66 5f 72 65 61 64 20     Error in f_read 
     3ac:	69 6e 20 69 6e 20 66 65 74 63 68 5f 75 70 64 61     in in fetch_upda
     3bc:	74 65 5f 66 75 6e 63 58 0a 00                       te_funcX..

000003c6 <__c.5601>:
     3c6:	72 65 73 20 3d 20 20 25 75 0a 00                    res =  %u..

000003d1 <__c.5599>:
     3d1:	52 69 6e 67 20 62 75 66 66 65 72 20 66 75 6e 63     Ring buffer func
     3e1:	74 69 6f 6e 5f 78 20 69 73 20 66 75 6c 6c 0a 00     tion_x is full..

000003f1 <__c.5553>:
     3f1:	52 69 6e 67 20 62 75 66 66 65 72 20 66 75 6e 63     Ring buffer func
     401:	74 69 6f 6e 5f 78 20 69 73 20 65 6d 70 74 79 0a     tion_x is empty.
	...

00000412 <__c.5501>:
     412:	45 72 72 6f 72 20 69 6e 70 75 74 20 66 6f 72 20     Error input for 
     422:	66 75 6e 63 74 69 6f 6e 20 63 68 61 6e 6e 65 6c     function channel
     432:	2e 0a 00                                            ...

00000435 <__c.5498>:
     435:	6e 75 6d 5f 62 75 66 66 65 72 5f 6c 6f 61 64 5f     num_buffer_load_
     445:	79 20 3d 20 25 75 0a 00                             y = %u..

0000044d <__c.5496>:
     44d:	6c 61 73 74 5f 6c 6f 61 64 5f 79 20 3d 20 25 75     last_load_y = %u
     45d:	0a 00                                               ..

0000045f <__c.5494>:
     45f:	66 75 6e 63 53 69 7a 65 5f 79 20 3d 20 25 75 0a     funcSize_y = %u.
	...

00000470 <__c.5492>:
     470:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     480:	73 65 74 5f 76 65 6c 5f 66 75 6e 63 20 59 2e 0a     set_vel_func Y..
	...

00000491 <__c.5490>:
     491:	45 72 72 6f 72 20 66 5f 72 65 61 64 20 69 6e 20     Error f_read in 
     4a1:	73 65 74 5f 76 65 6c 5f 66 75 6e 63 20 59 2e 0a     set_vel_func Y..
	...

000004b2 <__c.5488>:
     4b2:	53 65 74 74 69 6e 67 20 76 65 6c 6f 63 69 74 79     Setting velocity
     4c2:	20 66 75 6e 63 74 69 6f 6e 20 25 75 20 66 6f 72      function %u for
     4d2:	20 59 0a 00                                          Y..

000004d6 <__c.5484>:
     4d6:	6e 75 6d 5f 62 75 66 66 65 72 5f 6c 6f 61 64 5f     num_buffer_load_
     4e6:	78 20 3d 20 25 75 0a 00                             x = %u..

000004ee <__c.5482>:
     4ee:	6c 61 73 74 5f 6c 6f 61 64 5f 78 20 3d 20 25 75     last_load_x = %u
     4fe:	0a 00                                               ..

00000500 <__c.5480>:
     500:	66 75 6e 63 53 69 7a 65 5f 78 20 3d 20 25 75 0a     funcSize_x = %u.
	...

00000511 <__c.5478>:
     511:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     521:	73 65 74 5f 76 65 6c 5f 66 75 6e 63 20 58 2e 0a     set_vel_func X..
	...

00000532 <__c.5476>:
     532:	45 72 72 6f 72 20 66 5f 72 65 61 64 20 69 6e 20     Error f_read in 
     542:	73 65 74 5f 76 65 6c 5f 66 75 6e 63 20 58 2e 0a     set_vel_func X..
	...

00000553 <__c.5474>:
     553:	53 65 74 74 69 6e 67 20 76 65 6c 6f 63 69 74 79     Setting velocity
     563:	20 66 75 6e 63 74 69 6f 6e 20 20 25 75 20 66 6f      function  %u fo
     573:	72 20 58 0a 00                                      r X..

00000578 <__c.5414>:
     578:	45 72 72 6f 72 20 69 6e 70 75 74 20 66 6f 72 20     Error input for 
     588:	66 75 6e 63 74 69 6f 6e 20 63 68 61 6e 6e 65 6c     function channel
     598:	2e 0a 00                                            ...

0000059b <__c.5411>:
     59b:	6e 75 6d 5f 62 75 66 66 65 72 5f 6c 6f 61 64 5f     num_buffer_load_
     5ab:	79 20 3d 20 25 75 0a 00                             y = %u..

000005b3 <__c.5409>:
     5b3:	6c 61 73 74 5f 6c 6f 61 64 5f 79 20 3d 20 25 75     last_load_y = %u
     5c3:	20 0a 00                                             ..

000005c6 <__c.5407>:
     5c6:	66 75 6e 63 53 69 7a 65 5f 79 20 3d 20 25 75 0a     funcSize_y = %u.
	...

000005d7 <__c.5405>:
     5d7:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     5e7:	73 65 74 5f 70 6f 73 5f 66 75 6e 63 20 59 2e 0a     set_pos_func Y..
	...

000005f8 <__c.5403>:
     5f8:	45 72 72 6f 72 20 66 5f 72 65 61 64 20 73 65 74     Error f_read set
     608:	5f 70 6f 73 5f 66 75 6e 63 20 59 2e 0a 00           _pos_func Y...

00000616 <__c.5401>:
     616:	53 65 74 74 69 6e 67 20 70 6f 73 69 74 69 6f 6e     Setting position
     626:	20 66 75 6e 63 74 69 6f 6e 20 25 75 20 66 6f 72      function %u for
     636:	20 59 0a 00                                          Y..

0000063a <__c.5397>:
     63a:	6e 75 6d 5f 62 75 66 66 65 72 5f 6c 6f 61 64 5f     num_buffer_load_
     64a:	78 20 3d 20 25 75 0a 00                             x = %u..

00000652 <__c.5395>:
     652:	6c 61 73 74 5f 6c 6f 61 64 5f 78 20 3d 20 25 75     last_load_x = %u
     662:	0a 00                                               ..

00000664 <__c.5393>:
     664:	66 75 6e 63 53 69 7a 65 5f 78 20 3d 20 25 75 0a     funcSize_x = %u.
	...

00000675 <__c.5391>:
     675:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     685:	73 65 74 5f 70 6f 73 5f 66 75 6e 63 20 58 2e 0a     set_pos_func X..
	...

00000696 <__c.5389>:
     696:	45 72 72 6f 72 20 66 5f 72 65 61 64 20 73 65 74     Error f_read set
     6a6:	5f 70 6f 73 5f 66 75 6e 63 20 58 0a 00              _pos_func X..

000006b3 <__c.5387>:
     6b3:	53 65 74 74 69 6e 67 20 70 6f 73 69 74 69 6f 6e     Setting position
     6c3:	20 66 75 6e 63 74 69 6f 6e 20 25 75 20 66 6f 72      function %u for
     6d3:	20 58 0a 00                                          X..

000006d7 <__c.5369>:
     6d7:	57 72 6f 6e 67 20 66 75 6e 63 74 69 6f 6e 20 63     Wrong function c
     6e7:	68 61 6e 6e 65 6c 20 6e 75 6d 62 65 72 2e 0a 00     hannel number...

000006f7 <__c.5363>:
     6f7:	53 65 74 74 69 6e 67 20 64 65 66 61 75 6c 74 20     Setting default 
     707:	66 75 6e 63 74 69 6f 6e 20 66 6f 72 20 59 2e 0a     function for Y..
	...

00000718 <__c.5356>:
     718:	53 65 74 74 69 6e 67 20 64 65 66 61 75 6c 74 20     Setting default 
     728:	66 75 6e 63 74 69 6f 6e 20 66 6f 72 20 58 2e 0a     function for X..
	...

00000739 <__c.5305>:
     739:	20 62 65 6e 63 68 5f 74 69 6d 65 20 3d 20 25 6c      bench_time = %l
     749:	75 20 6d 73 2c 20 66 72 61 6d 65 5f 72 61 74 65     u ms, frame_rate
     759:	20 3d 20 25 75 0a 00                                 = %u..

00000760 <__c.5282>:
     760:	43 61 6e 6e 6f 74 20 66 69 6e 64 20 74 68 65 20     Cannot find the 
     770:	68 61 72 64 77 61 72 65 20 63 6f 6e 66 69 67 20     hardware config 
     780:	66 69 6c 65 20 6f 6e 20 74 68 65 20 53 44 20 63     file on the SD c
     790:	61 72 64 2e 0a 00                                   ard...

00000796 <__c.5280>:
     796:	53 75 63 63 65 73 73 66 75 6c 6c 79 20 6c 6f 61     Successfully loa
     7a6:	64 20 74 68 65 20 68 61 72 64 77 61 72 65 20 63     d the hardware c
     7b6:	6f 6e 66 69 67 20 66 69 6c 65 20 74 6f 20 45 45     onfig file to EE
     7c6:	50 52 4f 4d 0a 00                                   PROM..

000007cc <__c.5229>:
     7cc:	45 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 70 61     Error opening pa
     7dc:	74 74 65 72 6e 20 66 69 6c 65 0a 00                 ttern file..

000007e8 <__c.5227>:
     7e8:	45 72 72 6f 72 20 72 65 61 64 69 6e 67 20 69 6e     Error reading in
     7f8:	20 70 61 74 74 65 72 6e 20 66 69 6c 65 0a 00         pattern file..

00000807 <__c.5225>:
     807:	20 20 78 5f 6e 75 6d 20 3d 20 25 75 0a 20 20 79       x_num = %u.  y
     817:	5f 6e 75 6d 20 3d 20 25 75 0a 20 20 6e 75 6d 5f     _num = %u.  num_
     827:	70 61 6e 65 6c 73 20 3d 20 25 75 0a 20 20 67 73     panels = %u.  gs
     837:	5f 76 61 6c 75 65 20 3d 20 25 75 0a 20 72 6f 77     _value = %u. row
     847:	5f 63 6f 6d 70 72 65 73 73 69 6f 6e 20 3d 20 25     _compression = %
     857:	75 0a 00                                            u..

0000085a <__c.5223>:
     85a:	53 65 74 74 69 6e 67 20 70 61 74 74 65 72 6e 20     Setting pattern 
     86a:	25 75 3a 0a 00                                      %u:..

0000086f <__c.4912>:
     86f:	52 45 53 20 3d 20 25 75 2c 20 66 5f 6e 75 6d 3d     RES = %u, f_num=
     87f:	20 25 75 2c 20 6f 66 66 73 65 74 20 3d 20 25 6c      %u, offset = %l
     88f:	75 0a 00                                            u..

00000892 <__c.4910>:
     892:	45 72 72 6f 72 20 69 6e 20 66 5f 6c 73 65 65 6b     Error in f_lseek
     8a2:	20 69 6e 20 66 65 74 63 68 5f 64 69 73 70 6c 61      in fetch_displa
     8b2:	79 5f 66 72 61 6d 65 21 0a 00                       y_frame!..

000008bc <__c.4908>:
     8bc:	52 45 53 20 3d 20 25 75 2c 20 66 5f 6e 75 6d 3d     RES = %u, f_num=
     8cc:	20 25 75 2c 20 63 6e 74 3d 20 25 75 0a 00            %u, cnt= %u..

000008da <__c.4906>:
     8da:	45 72 72 6f 72 20 69 6e 20 66 5f 72 65 61 64 20     Error in f_read 
     8ea:	69 6e 20 66 65 74 63 68 5f 64 69 73 70 6c 61 79     in fetch_display
     8fa:	5f 66 72 61 6d 65 21 0a 00                          _frame!..

00000903 <__c.4829>:
     903:	53 75 63 63 65 73 73 20 73 65 74 20 74 68 65 20     Success set the 
     913:	6e 65 77 20 6c 61 73 65 72 20 70 61 74 74 65 72     new laser patter
     923:	6e 2e 0a 00                                         n...

00000927 <__c.4759>:
     927:	73 65 74 5f 67 61 69 6e 5f 62 69 61 73 3a 20 67     set_gain_bias: g
     937:	61 69 6e 5f 78 3d 20 25 64 2c 20 20 62 69 61 73     ain_x= %d,  bias
     947:	5f 78 3d 20 25 64 2c 20 67 61 69 6e 5f 79 3d 20     _x= %d, gain_y= 
     957:	25 64 2c 20 62 69 61 73 5f 79 3d 25 64 0a 00        %d, bias_y=%d..

00000966 <__c.4755>:
     966:	73 65 74 5f 70 6f 73 69 74 69 6f 6e 3a 20 69 6e     set_position: in
     976:	64 65 78 5f 78 3d 20 25 75 2c 20 20 69 6e 64 65     dex_x= %u,  inde
     986:	78 5f 79 3d 20 25 75 2c 20 61 6e 64 20 66 72 61     x_y= %u, and fra
     996:	6d 65 5f 6e 75 6d 3d 20 25 75 0a 00                 me_num= %u..

000009a2 <__c.4692>:
     9a2:	66 75 6e 63 74 69 6f 6e 20 59 20 75 70 64 61 74     function Y updat
     9b2:	65 20 66 72 65 71 75 65 6e 63 79 20 3d 20 25 75     e frequency = %u
     9c2:	2e 0a 00                                            ...

000009c5 <__c.4689>:
     9c5:	66 75 6e 63 74 69 6f 6e 20 58 20 75 70 64 61 74     function X updat
     9d5:	65 20 66 72 65 71 75 65 6e 63 79 20 3d 20 25 75     e frequency = %u
     9e5:	2e 0a 00                                            ...

000009e8 <__c.4640>:
     9e8:	41 44 43 5f 76 61 6c 75 65 20 3d 20 20 25 64 3a     ADC_value =  %d:
     9f8:	0a 00                                               ..

000009fa <__c.4551>:
     9fa:	72 65 73 6f 6c 75 74 69 6f 6e 5f 79 20 3d 20 20     resolution_y =  
     a0a:	25 64 3a 0a 00                                      %d:..

00000a0f <__c.4549>:
     a0f:	72 65 73 6f 6c 75 74 69 6f 6e 5f 78 20 3d 20 20     resolution_x =  
     a1f:	25 64 3a 0a 00                                      %d:..

00000a24 <__c.4543>:
     a24:	44 69 73 61 62 6c 65 64 20 49 6e 74 33 20 65 78     Disabled Int3 ex
     a34:	74 65 72 6e 61 6c 20 74 72 69 67 67 65 72 20 6d     ternal trigger m
     a44:	6f 64 65 21 0a 00                                   ode!..

00000a4a <__c.4540>:
     a4a:	45 6e 61 62 6c 65 64 20 49 6e 74 33 20 65 78 74     Enabled Int3 ext
     a5a:	65 72 6e 61 6c 20 74 72 69 67 67 65 72 20 6d 6f     ernal trigger mo
     a6a:	64 65 20 69 73 20 6f 6e 21 0a 00                    de is on!..

00000a75 <__c.4537>:
     a75:	52 65 73 65 74 20 63 6f 6e 74 72 6f 6c 6c 65 72     Reset controller
     a85:	20 74 6f 20 77 6f 72 6b 20 69 6e 20 74 68 65 20      to work in the 
     a95:	50 43 20 64 75 6d 70 69 6e 67 20 6d 6f 64 65 21     PC dumping mode!
     aa5:	0a 00                                               ..

00000aa7 <__c.4534>:
     aa7:	52 65 73 65 74 20 63 6f 6e 74 72 6f 6c 6c 65 72     Reset controller
     ab7:	20 74 6f 20 77 6f 72 6b 20 69 6e 20 74 68 65 20      to work in the 
     ac7:	63 6f 6e 74 72 6f 6c 6c 65 72 20 6d 6f 64 65 21     controller mode!
     ad7:	0a 00                                               ..

00000ad9 <__c.4531>:
     ad9:	75 70 64 61 74 65 3a 20 25 64 20 25 64 20 25 64     update: %d %d %d
     ae9:	20 25 64 20 25 64 20 25 64 20 25 64 20 25 64 3a      %d %d %d %d %d:
     af9:	0a 00                                               ..

00000afb <__c.4522>:
     afb:	43 75 72 72 65 6e 74 20 76 65 72 73 69 6f 6e 20     Current version 
     b0b:	6e 75 6d 62 65 72 20 69 73 20 25 73 2e 0a 00        number is %s...

00000b1a <__c.4397>:
     b1a:	43 75 72 72 65 6e 74 20 77 6f 72 6b 69 6e 67 20     Current working 
     b2a:	6d 6f 64 65 20 69 73 20 74 68 65 20 50 43 20 64     mode is the PC d
     b3a:	75 6d 70 69 6e 67 20 6d 6f 64 65 21 0a 00           umping mode!..

00000b48 <__c.4384>:
     b48:	43 75 72 72 65 6e 74 20 77 6f 72 6b 69 6e 67 20     Current working 
     b58:	6d 6f 64 65 20 69 73 20 74 68 65 20 43 6f 6e 74     mode is the Cont
     b68:	72 6f 6c 6c 65 72 20 6d 6f 64 65 21 0a 00           roller mode!..

00000b76 <__c.4381>:
     b76:	3f 3f 3f 0a 00                                      ???..

00000b7b <__c.4378>:
     b7b:	20 4e 4f 54 20 52 45 41 44 59 21 0a 00               NOT READY!..

00000b88 <__c.4375>:
     b88:	20 57 52 49 54 45 20 50 52 4f 54 45 43 54 45 44      WRITE PROTECTED
     b98:	21 0a 00                                            !..

00000b9b <__c.4372>:
     b9b:	20 45 52 52 4f 52 21 0a 00                           ERROR!..

00000ba4 <__c.4368>:
     ba4:	20 46 41 54 20 4f 4b 21 0a 00                        FAT OK!..

00000bae <__c.4365>:
     bae:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 46 41 54     Initializing FAT
     bbe:	20 44 69 73 6b 2e 2e 2e 00                           Disk....

00000bc7 <__c.4363>:
     bc7:	3f 3f 3f 0a 00                                      ???..

00000bcc <__c.4360>:
     bcc:	53 44 48 43 0a 00                                   SDHC..

00000bd2 <__c.4357>:
     bd2:	42 4c 4b 0a 00                                      BLK..

00000bd7 <__c.4354>:
     bd7:	53 44 43 0a 00                                      SDC..

00000bdc <__c.4351>:
     bdc:	53 44 32 0a 00                                      SD2..

00000be1 <__c.4348>:
     be1:	53 44 0a 00                                         SD..

00000be5 <__c.4344>:
     be5:	4d 4d 43 0a 00                                      MMC..

00000bea <__c.4341>:
     bea:	43 61 72 64 20 74 79 70 65 3a 20 00                 Card type: .

00000bf6 <__c.4339>:
     bf6:	53 44 20 63 61 72 64 20 69 73 20 69 6e 69 74 69     SD card is initi
     c06:	61 6c 69 7a 65 64 0a 00                             alized..

00000c0e <__c.4331>:
     c0e:	49 6e 69 74 69 61 6c 69 7a 61 74 69 6f 6e 20 66     Initialization f
     c1e:	61 69 6c 65 64 21 21 21 0a 00                       ailed!!!..

00000c28 <__c.4326>:
     c28:	53 44 20 63 61 72 64 20 69 73 20 57 72 69 74 65     SD card is Write
     c38:	20 50 72 6f 74 65 63 74 65 64 21 0a 00               Protected!..

00000c45 <__c.4321>:
     c45:	49 6e 73 65 72 74 20 53 44 20 63 61 72 64 00        Insert SD card.

00000c54 <__c.4319>:
     c54:	0a 4d 61 69 6e 20 43 6f 6e 74 72 6f 6c 6c 65 72     .Main Controller
     c64:	20 57 6f 72 6b 73 0a 00                              Works..

00000c6c <__c.4518>:
     c6c:	43 61 6e 6e 6f 74 20 66 69 6e 64 20 74 68 65 20     Cannot find the 
     c7c:	70 61 6e 65 6c 20 25 64 2e 0a 00                    panel %d...

00000c87 <__c.4516>:
     c87:	42 61 64 20 65 78 69 74 20 63 6d 64 2c 20 72 65     Bad exit cmd, re
     c97:	73 75 6c 74 20 3d 20 25 75 0a 00                    sult = %u..

00000ca2 <__c.4510>:
     ca2:	64 6f 6e 27 74 20 6b 6e 6f 77 20 68 6f 77 20 74     don't know how t
     cb2:	6f 20 64 65 61 6c 20 77 69 74 68 20 72 65 63 74     o deal with rect
     cc2:	79 70 65 3d 25 64 20 61 74 20 6c 69 6e 65 20 25     ype=%d at line %
     cd2:	64 20 6f 66 20 65 65 70 72 6f 6d 2e 68 65 78 0a     d of eeprom.hex.
	...

00000ce3 <__c.4508>:
     ce3:	0a 00                                               ..

00000ce5 <__c.4506>:
     ce5:	76 65 72 69 66 79 20 6d 69 73 6d 61 74 63 68 20     verify mismatch 
     cf5:	66 6f 72 20 70 61 67 65 20 25 64 0a 00              for page %d..

00000d02 <__c.4501>:
     d02:	76 65 72 69 66 79 20 6d 69 73 6d 61 74 63 68 20     verify mismatch 
     d12:	66 6f 72 20 70 61 67 65 20 25 64 0a 00              for page %d..

00000d1f <__c.4499>:
     d1f:	63 68 65 63 6b 73 75 6d 3d 30 78 25 30 32 78 2c     checksum=0x%02x,
     d2f:	20 63 6f 6d 70 75 74 65 64 20 63 68 65 63 6b 73      computed checks
     d3f:	75 6d 3d 30 78 25 30 32 78 0a 00                    um=0x%02x..

00000d4a <__c.4497>:
     d4a:	45 52 52 4f 52 3a 20 63 68 65 63 6b 73 75 6d 20     ERROR: checksum 
     d5a:	6d 69 73 6d 61 74 63 68 20 61 74 20 6c 69 6e 65     mismatch at line
     d6a:	20 25 64 20 6f 66 20 65 65 70 72 6f 6d 2e 68 65      %d of eeprom.he
     d7a:	78 0a 00                                            x..

00000d7d <__c.4491>:
     d7d:	0a 76 65 72 69 66 79 69 6e 67 3a 20 00              .verifying: .

00000d8a <__c.4489>:
     d8a:	45 72 72 6f 72 20 66 5f 6c 73 65 65 6b 20 69 6e     Error f_lseek in
     d9a:	20 65 65 70 72 6f 6d 2e 68 65 78 2e 0a 00            eeprom.hex...

00000da8 <__c.4486>:
     da8:	64 6f 6e 27 74 20 6b 6e 6f 77 20 68 6f 77 20 74     don't know how t
     db8:	6f 20 64 65 61 6c 20 77 69 74 68 20 72 65 63 74     o deal with rect
     dc8:	79 70 65 3d 25 64 20 61 74 20 6c 69 6e 65 20 25     ype=%d at line %
     dd8:	64 20 6f 66 20 65 65 70 72 6f 6d 2e 68 65 78 2e     d of eeprom.hex.
     de8:	0a 00                                               ..

00000dea <__c.4481>:
     dea:	63 68 65 63 6b 73 75 6d 3d 30 78 25 30 32 78 2c     checksum=0x%02x,
     dfa:	20 63 6f 6d 70 75 74 65 64 20 63 68 65 63 6b 73      computed checks
     e0a:	75 6d 3d 30 78 25 30 32 78 0a 00                    um=0x%02x..

00000e15 <__c.4479>:
     e15:	45 52 52 4f 52 3a 20 63 68 65 63 6b 73 75 6d 20     ERROR: checksum 
     e25:	6d 69 73 6d 61 74 63 68 20 61 74 20 6c 69 6e 65     mismatch at line
     e35:	20 25 64 20 6f 66 20 65 65 70 72 6f 6d 2e 68 65      %d of eeprom.he
     e45:	78 2e 0a 00                                         x...

00000e49 <__c.4473>:
     e49:	0a 77 72 69 74 69 6e 67 3a 20 20 20 00              .writing:   .

00000e56 <__c.4471>:
     e56:	42 61 64 20 70 61 6e 65 6c 20 72 65 73 65 74 2c     Bad panel reset,
     e66:	20 72 65 73 75 6c 74 20 3d 20 25 75 0a 00            result = %u..

00000e74 <__c.4466>:
     e74:	65 65 70 72 6f 6d 20 70 61 6e 65 6c 20 25 75 2e     eeprom panel %u.
     e84:	0a 00                                               ..

00000e86 <__c.4464>:
     e86:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     e96:	65 65 70 72 6f 6d 2e 68 65 78 2e 0a 00              eeprom.hex...

00000ea3 <__c.4587>:
     ea3:	25 53 0a 00                                         %S..

00000ea7 <str.4573>:
     ea7:	4f 4b 00 44 49 53 4b 5f 45 52 52 00 49 4e 54 5f     OK.DISK_ERR.INT_
     eb7:	45 52 52 00 4e 4f 54 5f 52 45 41 44 59 00 4e 4f     ERR.NOT_READY.NO
     ec7:	5f 46 49 4c 45 00 4e 4f 5f 50 41 54 48 00 49 4e     _FILE.NO_PATH.IN
     ed7:	56 41 4c 49 44 5f 4e 41 4d 45 00 44 45 4e 49 45     VALID_NAME.DENIE
     ee7:	44 00 45 58 49 53 54 00 49 4e 56 41 4c 49 44 5f     D.EXIST.INVALID_
     ef7:	4f 42 4a 45 43 54 00 57 52 49 54 45 5f 50 52 4f     OBJECT.WRITE_PRO
     f07:	54 45 43 54 45 44 00 49 4e 56 41 4c 49 44 5f 44     TECTED.INVALID_D
     f17:	52 49 56 45 00 4e 4f 54 5f 45 4e 41 42 4c 45 44     RIVE.NOT_ENABLED
     f27:	00 4e 4f 5f 46 49 4c 45 5f 53 59 53 54 45 4d 00     .NO_FILE_SYSTEM.
     f37:	4d 4b 46 53 5f 41 42 4f 52 54 45 44 00 54 49 4d     MKFS_ABORTED.TIM
     f47:	45 4f 55 54 00 00                                   EOUT..

00000f4d <__c.4386>:
     f4d:	43 61 6e 6e 6f 74 20 66 69 6e 64 20 74 68 65 20     Cannot find the 
     f5d:	70 61 6e 65 6c 20 25 64 2e 0a 00                    panel %d...

00000f68 <__c.4384>:
     f68:	42 61 64 20 65 78 69 74 20 63 6d 64 2c 20 72 65     Bad exit cmd, re
     f78:	73 75 6c 74 20 3d 20 25 75 0a 00                    sult = %u..

00000f83 <__c.4378>:
     f83:	64 6f 6e 27 74 20 6b 6e 6f 77 20 68 6f 77 20 74     don't know how t
     f93:	6f 20 64 65 61 6c 20 77 69 74 68 20 72 65 63 74     o deal with rect
     fa3:	79 70 65 3d 25 64 20 61 74 20 6c 69 6e 65 20 25     ype=%d at line %
     fb3:	64 20 6f 66 20 70 61 6e 65 6c 2e 68 65 78 0a 00     d of panel.hex..

00000fc3 <__c.4376>:
     fc3:	0a 00                                               ..

00000fc5 <__c.4374>:
     fc5:	76 65 72 69 66 79 20 6d 69 73 6d 61 74 63 68 20     verify mismatch 
     fd5:	66 6f 72 20 70 61 67 65 20 25 64 0a 00              for page %d..

00000fe2 <__c.4369>:
     fe2:	76 65 72 69 66 79 20 6d 69 73 6d 61 74 63 68 20     verify mismatch 
     ff2:	66 6f 72 20 70 61 67 65 20 25 64 0a 00              for page %d..

00000fff <__c.4367>:
     fff:	63 68 65 63 6b 73 75 6d 3d 30 78 25 30 32 78 2c     checksum=0x%02x,
    100f:	20 63 6f 6d 70 75 74 65 64 20 63 68 65 63 6b 73      computed checks
    101f:	75 6d 3d 30 78 25 30 32 78 0a 00                    um=0x%02x..

0000102a <__c.4365>:
    102a:	45 52 52 4f 52 3a 20 63 68 65 63 6b 73 75 6d 20     ERROR: checksum 
    103a:	6d 69 73 6d 61 74 63 68 20 61 74 20 6c 69 6e 65     mismatch at line
    104a:	20 25 64 20 6f 66 20 70 61 6e 65 6c 2e 68 65 78      %d of panel.hex
    105a:	0a 00                                               ..

0000105c <__c.4359>:
    105c:	0a 76 65 72 69 66 79 69 6e 67 3a 20 00              .verifying: .

00001069 <__c.4357>:
    1069:	45 72 72 6f 72 20 66 5f 6c 73 65 65 6b 20 69 6e     Error f_lseek in
    1079:	20 70 61 6e 65 6c 2e 68 65 78 2e 0a 00               panel.hex...

00001086 <__c.4354>:
    1086:	64 6f 6e 27 74 20 6b 6e 6f 77 20 68 6f 77 20 74     don't know how t
    1096:	6f 20 64 65 61 6c 20 77 69 74 68 20 72 65 63 74     o deal with rect
    10a6:	79 70 65 3d 25 64 20 61 74 20 6c 69 6e 65 20 25     ype=%d at line %
    10b6:	64 20 6f 66 20 70 61 6e 65 6c 2e 68 65 78 0a 00     d of panel.hex..

000010c6 <__c.4349>:
    10c6:	63 68 65 63 6b 73 75 6d 3d 30 78 25 30 32 78 2c     checksum=0x%02x,
    10d6:	20 63 6f 6d 70 75 74 65 64 20 63 68 65 63 6b 73      computed checks
    10e6:	75 6d 3d 30 78 25 30 32 78 0a 00                    um=0x%02x..

000010f1 <__c.4347>:
    10f1:	45 52 52 4f 52 3a 20 63 68 65 63 6b 73 75 6d 20     ERROR: checksum 
    1101:	6d 69 73 6d 61 74 63 68 20 61 74 20 6c 69 6e 65     mismatch at line
    1111:	20 25 64 20 6f 66 20 70 61 6e 65 6c 2e 68 65 78      %d of panel.hex
    1121:	2e 0a 00                                            ...

00001124 <__c.4341>:
    1124:	0a 77 72 69 74 69 6e 67 3a 20 20 20 00              .writing:   .

00001131 <__c.4339>:
    1131:	42 61 64 20 70 61 6e 65 6c 20 72 65 73 65 74 2c     Bad panel reset,
    1141:	20 72 65 73 75 6c 74 20 3d 20 25 75 0a 00            result = %u..

0000114f <__c.4334>:
    114f:	66 6c 61 73 68 20 70 61 6e 65 6c 20 25 75 2e 0a     flash panel %u..
	...

00001160 <__c.4332>:
    1160:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
    1170:	70 61 6e 65 6c 2e 68 65 78 2e 0a 00                 panel.hex...

0000117c <__c.4282>:
    117c:	42 61 64 20 66 6c 61 73 68 20 72 65 61 64 2c 20     Bad flash read, 
    118c:	72 65 73 75 6c 74 20 3d 20 25 75 0a 00              result = %u..

00001199 <__c.4277>:
    1199:	23 00                                               #.

0000119b <__c.4247>:
    119b:	42 61 64 20 66 6c 61 73 68 20 72 65 61 64 2c 20     Bad flash read, 
    11ab:	72 65 73 75 6c 74 20 3d 20 25 75 0a 00              result = %u..

000011b8 <__c.4242>:
    11b8:	23 00                                               #.

000011ba <__c.4221>:
    11ba:	42 61 64 20 65 65 70 72 6f 6d 20 77 72 69 74 65     Bad eeprom write
    11ca:	2c 20 72 65 73 75 6c 74 20 3d 20 25 75 0a 00        , result = %u..

000011d9 <__c.4216>:
    11d9:	23 00                                               #.

000011db <__c.4185>:
    11db:	42 61 64 20 66 6c 61 73 68 20 72 65 61 64 2c 20     Bad flash read, 
    11eb:	72 65 73 75 6c 74 20 3d 20 25 75 0a 00              result = %u..

000011f8 <__c.4180>:
    11f8:	23 00                                               #.

000011fa <__c.4149>:
    11fa:	42 61 64 20 66 6c 61 73 68 20 72 65 61 64 2c 20     Bad flash read, 
    120a:	72 65 73 75 6c 74 20 3d 20 25 75 0a 00              result = %u..

00001217 <__c.4144>:
    1217:	23 00                                               #.

00001219 <__c.4122>:
    1219:	42 61 64 20 66 6c 61 73 68 20 77 72 69 74 65 2c     Bad flash write,
    1229:	20 72 65 73 75 6c 74 20 3d 20 25 75 0a 00            result = %u..

00001237 <__c.4117>:
    1237:	23 00 00                                            #..

0000123a <__ctors_end>:
    123a:	11 24       	eor	r1, r1
    123c:	1f be       	out	0x3f, r1	; 63
    123e:	cf ef       	ldi	r28, 0xFF	; 255
    1240:	df e3       	ldi	r29, 0x3F	; 63
    1242:	de bf       	out	0x3e, r29	; 62
    1244:	cd bf       	out	0x3d, r28	; 61
    1246:	00 e0       	ldi	r16, 0x00	; 0
    1248:	0c bf       	out	0x3c, r16	; 60
    124a:	18 be       	out	0x38, r1	; 56
    124c:	19 be       	out	0x39, r1	; 57
    124e:	1a be       	out	0x3a, r1	; 58
    1250:	1b be       	out	0x3b, r1	; 59

00001252 <__do_copy_data>:
    1252:	14 e2       	ldi	r17, 0x24	; 36
    1254:	a0 e0       	ldi	r26, 0x00	; 0
    1256:	b0 e2       	ldi	r27, 0x20	; 32
    1258:	e8 eb       	ldi	r30, 0xB8	; 184
    125a:	f0 ec       	ldi	r31, 0xC0	; 192
    125c:	00 e0       	ldi	r16, 0x00	; 0
    125e:	0b bf       	out	0x3b, r16	; 59
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <__do_copy_data+0x14>
    1262:	07 90       	elpm	r0, Z+
    1264:	0d 92       	st	X+, r0
    1266:	a8 3e       	cpi	r26, 0xE8	; 232
    1268:	b1 07       	cpc	r27, r17
    126a:	d9 f7       	brne	.-10     	; 0x1262 <__do_copy_data+0x10>
    126c:	1b be       	out	0x3b, r1	; 59

0000126e <__do_clear_bss>:
    126e:	1c e2       	ldi	r17, 0x2C	; 44
    1270:	a8 ee       	ldi	r26, 0xE8	; 232
    1272:	b4 e2       	ldi	r27, 0x24	; 36
    1274:	01 c0       	rjmp	.+2      	; 0x1278 <.do_clear_bss_start>

00001276 <.do_clear_bss_loop>:
    1276:	1d 92       	st	X+, r1

00001278 <.do_clear_bss_start>:
    1278:	ab 31       	cpi	r26, 0x1B	; 27
    127a:	b1 07       	cpc	r27, r17
    127c:	e1 f7       	brne	.-8      	; 0x1276 <.do_clear_bss_loop>
    127e:	0e 94 4d 20 	call	0x409a	; 0x409a <main>
    1282:	0c 94 5a 60 	jmp	0xc0b4	; 0xc0b4 <_exit>

00001286 <__bad_interrupt>:
    1286:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000128a <handle_message_length_62>:
//load laser trigger pattern first 62 byte data. Laer patter has 128 bytes, but since
//the value is either 0 or 1, we can combined them in 12 bytes to 
//save serial communicaiton time

void handle_message_length_62(uint8_t *msg_buffer)
{   
    128a:	ac 01       	movw	r20, r24
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;

	for (i = 0; i<62; i++)
	{
		laserPattern[i] = msg_buffer[i];
    1290:	f9 01       	movw	r30, r18
    1292:	e9 57       	subi	r30, 0x79	; 121
    1294:	f9 4d       	sbci	r31, 0xD9	; 217
    1296:	da 01       	movw	r26, r20
    1298:	a2 0f       	add	r26, r18
    129a:	b3 1f       	adc	r27, r19
    129c:	8c 91       	ld	r24, X
    129e:	80 83       	st	Z, r24
    12a0:	2f 5f       	subi	r18, 0xFF	; 255
    12a2:	3f 4f       	sbci	r19, 0xFF	; 255

void handle_message_length_62(uint8_t *msg_buffer)
{   
	uint8_t i;

	for (i = 0; i<62; i++)
    12a4:	2e 33       	cpi	r18, 0x3E	; 62
    12a6:	31 05       	cpc	r19, r1
    12a8:	99 f7       	brne	.-26     	; 0x1290 <handle_message_length_62+0x6>
	{
		laserPattern[i] = msg_buffer[i];
	}

}
    12aa:	08 95       	ret

000012ac <increment_index_x>:
}


void increment_index_x(void) {
    
    index_x++;
    12ac:	80 91 b9 27 	lds	r24, 0x27B9
    12b0:	90 91 ba 27 	lds	r25, 0x27BA
    12b4:	01 96       	adiw	r24, 0x01	; 1
    12b6:	80 93 b9 27 	sts	0x27B9, r24
    12ba:	90 93 ba 27 	sts	0x27BA, r25
    if (index_x >= x_num)
    12be:	80 91 b9 27 	lds	r24, 0x27B9
    12c2:	90 91 ba 27 	lds	r25, 0x27BA
    12c6:	40 91 23 28 	lds	r20, 0x2823
    12ca:	50 91 24 28 	lds	r21, 0x2824
    12ce:	84 17       	cp	r24, r20
    12d0:	95 07       	cpc	r25, r21
    12d2:	20 f0       	brcs	.+8      	; 0x12dc <increment_index_x+0x30>
		index_x = 0;
    12d4:	10 92 b9 27 	sts	0x27B9, r1
    12d8:	10 92 ba 27 	sts	0x27BA, r1
    
    
    frame_num = index_y*x_num + index_x;
    12dc:	80 91 6e 29 	lds	r24, 0x296E
    12e0:	90 91 6f 29 	lds	r25, 0x296F
    12e4:	20 91 b9 27 	lds	r18, 0x27B9
    12e8:	30 91 ba 27 	lds	r19, 0x27BA
    12ec:	bc 01       	movw	r22, r24
    12ee:	64 9f       	mul	r22, r20
    12f0:	c0 01       	movw	r24, r0
    12f2:	65 9f       	mul	r22, r21
    12f4:	90 0d       	add	r25, r0
    12f6:	74 9f       	mul	r23, r20
    12f8:	90 0d       	add	r25, r0
    12fa:	11 24       	eor	r1, r1
    12fc:	82 0f       	add	r24, r18
    12fe:	93 1f       	adc	r25, r19
    1300:	80 93 ed 24 	sts	0x24ED, r24
    1304:	90 93 ee 24 	sts	0x24EE, r25
	
    if (x_gt_y) display_flag++;
    1308:	80 91 e9 24 	lds	r24, 0x24E9
    130c:	88 23       	and	r24, r24
    130e:	29 f0       	breq	.+10     	; 0x131a <increment_index_x+0x6e>
    1310:	80 91 e8 24 	lds	r24, 0x24E8
    1314:	8f 5f       	subi	r24, 0xFF	; 255
    1316:	80 93 e8 24 	sts	0x24E8, r24
    131a:	08 95       	ret

0000131c <increment_index_y>:
}


void increment_index_y(void) {
    index_y++;
    131c:	80 91 6e 29 	lds	r24, 0x296E
    1320:	90 91 6f 29 	lds	r25, 0x296F
    1324:	01 96       	adiw	r24, 0x01	; 1
    1326:	80 93 6e 29 	sts	0x296E, r24
    132a:	90 93 6f 29 	sts	0x296F, r25
    if (index_y >= y_num)
    132e:	20 91 6e 29 	lds	r18, 0x296E
    1332:	30 91 6f 29 	lds	r19, 0x296F
    1336:	80 91 ab 25 	lds	r24, 0x25AB
    133a:	90 91 ac 25 	lds	r25, 0x25AC
    133e:	28 17       	cp	r18, r24
    1340:	39 07       	cpc	r19, r25
    1342:	20 f0       	brcs	.+8      	; 0x134c <increment_index_y+0x30>
    {index_y = 0;}
    1344:	10 92 6e 29 	sts	0x296E, r1
    1348:	10 92 6f 29 	sts	0x296F, r1
    
    frame_num = index_y*x_num + index_x;
    134c:	20 91 6e 29 	lds	r18, 0x296E
    1350:	30 91 6f 29 	lds	r19, 0x296F
    1354:	40 91 b9 27 	lds	r20, 0x27B9
    1358:	50 91 ba 27 	lds	r21, 0x27BA
    135c:	80 91 23 28 	lds	r24, 0x2823
    1360:	90 91 24 28 	lds	r25, 0x2824
    1364:	bc 01       	movw	r22, r24
    1366:	26 9f       	mul	r18, r22
    1368:	c0 01       	movw	r24, r0
    136a:	27 9f       	mul	r18, r23
    136c:	90 0d       	add	r25, r0
    136e:	36 9f       	mul	r19, r22
    1370:	90 0d       	add	r25, r0
    1372:	11 24       	eor	r1, r1
    1374:	84 0f       	add	r24, r20
    1376:	95 1f       	adc	r25, r21
    1378:	80 93 ed 24 	sts	0x24ED, r24
    137c:	90 93 ee 24 	sts	0x24EE, r25
	
    if (x_gt_y == 0) display_flag++;
    1380:	80 91 e9 24 	lds	r24, 0x24E9
    1384:	88 23       	and	r24, r24
    1386:	29 f4       	brne	.+10     	; 0x1392 <increment_index_y+0x76>
    1388:	80 91 e8 24 	lds	r24, 0x24E8
    138c:	8f 5f       	subi	r24, 0xFF	; 255
    138e:	80 93 e8 24 	sts	0x24E8, r24
    1392:	08 95       	ret

00001394 <decrement_index_x>:
}


void decrement_index_x(void) {
    
    if (index_x <= 0)    //just to be safe, use less than
    1394:	80 91 b9 27 	lds	r24, 0x27B9
    1398:	90 91 ba 27 	lds	r25, 0x27BA
    139c:	89 2b       	or	r24, r25
    139e:	29 f4       	brne	.+10     	; 0x13aa <decrement_index_x+0x16>
    {index_x = x_num - 1;}    //but these are unsigned
    13a0:	80 91 23 28 	lds	r24, 0x2823
    13a4:	90 91 24 28 	lds	r25, 0x2824
    13a8:	04 c0       	rjmp	.+8      	; 0x13b2 <decrement_index_x+0x1e>
    else
    {index_x--;}
    13aa:	80 91 b9 27 	lds	r24, 0x27B9
    13ae:	90 91 ba 27 	lds	r25, 0x27BA
    13b2:	01 97       	sbiw	r24, 0x01	; 1
    13b4:	80 93 b9 27 	sts	0x27B9, r24
    13b8:	90 93 ba 27 	sts	0x27BA, r25
    
    frame_num = index_y*x_num + index_x;
    13bc:	20 91 6e 29 	lds	r18, 0x296E
    13c0:	30 91 6f 29 	lds	r19, 0x296F
    13c4:	40 91 b9 27 	lds	r20, 0x27B9
    13c8:	50 91 ba 27 	lds	r21, 0x27BA
    13cc:	80 91 23 28 	lds	r24, 0x2823
    13d0:	90 91 24 28 	lds	r25, 0x2824
    13d4:	bc 01       	movw	r22, r24
    13d6:	26 9f       	mul	r18, r22
    13d8:	c0 01       	movw	r24, r0
    13da:	27 9f       	mul	r18, r23
    13dc:	90 0d       	add	r25, r0
    13de:	36 9f       	mul	r19, r22
    13e0:	90 0d       	add	r25, r0
    13e2:	11 24       	eor	r1, r1
    13e4:	84 0f       	add	r24, r20
    13e6:	95 1f       	adc	r25, r21
    13e8:	80 93 ed 24 	sts	0x24ED, r24
    13ec:	90 93 ee 24 	sts	0x24EE, r25
    if (x_gt_y) display_flag++;
    13f0:	80 91 e9 24 	lds	r24, 0x24E9
    13f4:	88 23       	and	r24, r24
    13f6:	29 f0       	breq	.+10     	; 0x1402 <decrement_index_x+0x6e>
    13f8:	80 91 e8 24 	lds	r24, 0x24E8
    13fc:	8f 5f       	subi	r24, 0xFF	; 255
    13fe:	80 93 e8 24 	sts	0x24E8, r24
    1402:	08 95       	ret

00001404 <decrement_index_y>:
}


void decrement_index_y(void) {
    if (index_y <= 0)    //just to be safe, use less than
    1404:	80 91 6e 29 	lds	r24, 0x296E
    1408:	90 91 6f 29 	lds	r25, 0x296F
    140c:	89 2b       	or	r24, r25
    140e:	29 f4       	brne	.+10     	; 0x141a <decrement_index_y+0x16>
    {index_y = y_num - 1;}    //but these are unsigned
    1410:	80 91 ab 25 	lds	r24, 0x25AB
    1414:	90 91 ac 25 	lds	r25, 0x25AC
    1418:	04 c0       	rjmp	.+8      	; 0x1422 <decrement_index_y+0x1e>
    else
    {index_y--;}
    141a:	80 91 6e 29 	lds	r24, 0x296E
    141e:	90 91 6f 29 	lds	r25, 0x296F
    1422:	01 97       	sbiw	r24, 0x01	; 1
    1424:	80 93 6e 29 	sts	0x296E, r24
    1428:	90 93 6f 29 	sts	0x296F, r25
    
    frame_num = index_y*x_num + index_x;
    142c:	20 91 6e 29 	lds	r18, 0x296E
    1430:	30 91 6f 29 	lds	r19, 0x296F
    1434:	40 91 b9 27 	lds	r20, 0x27B9
    1438:	50 91 ba 27 	lds	r21, 0x27BA
    143c:	80 91 23 28 	lds	r24, 0x2823
    1440:	90 91 24 28 	lds	r25, 0x2824
    1444:	bc 01       	movw	r22, r24
    1446:	26 9f       	mul	r18, r22
    1448:	c0 01       	movw	r24, r0
    144a:	27 9f       	mul	r18, r23
    144c:	90 0d       	add	r25, r0
    144e:	36 9f       	mul	r19, r22
    1450:	90 0d       	add	r25, r0
    1452:	11 24       	eor	r1, r1
    1454:	84 0f       	add	r24, r20
    1456:	95 1f       	adc	r25, r21
    1458:	80 93 ed 24 	sts	0x24ED, r24
    145c:	90 93 ee 24 	sts	0x24EE, r25
    if (x_gt_y == 0) display_flag++;
    1460:	80 91 e9 24 	lds	r24, 0x24E9
    1464:	88 23       	and	r24, r24
    1466:	29 f4       	brne	.+10     	; 0x1472 <decrement_index_y+0x6e>
    1468:	80 91 e8 24 	lds	r24, 0x24E8
    146c:	8f 5f       	subi	r24, 0xFF	; 255
    146e:	80 93 e8 24 	sts	0x24E8, r24
    1472:	08 95       	ret

00001474 <set_default_func>:
}

void set_default_func(uint8_t func_channel) {
    uint16_t funcCnt;
    
    switch (func_channel) {
    1474:	81 30       	cpi	r24, 0x01	; 1
    1476:	21 f0       	breq	.+8      	; 0x1480 <set_default_func+0xc>
    1478:	82 30       	cpi	r24, 0x02	; 2
    147a:	09 f0       	breq	.+2      	; 0x147e <set_default_func+0xa>
    147c:	65 c0       	rjmp	.+202    	; 0x1548 <set_default_func+0xd4>
    147e:	32 c0       	rjmp	.+100    	; 0x14e4 <set_default_func+0x70>
        case 1:
            if (quiet_mode_on == 0)
    1480:	80 91 b3 20 	lds	r24, 0x20B3
    1484:	88 23       	and	r24, r24
    1486:	21 f4       	brne	.+8      	; 0x1490 <set_default_func+0x1c>
                xputs(PSTR("Setting default function for X.\n"));
    1488:	88 e1       	ldi	r24, 0x18	; 24
    148a:	97 e0       	ldi	r25, 0x07	; 7
    148c:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
            
            //Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);//disable ISR
            func_ID_X = 0;
    1490:	10 92 f5 24 	sts	0x24F5, r1
    1494:	10 92 f6 24 	sts	0x24F6, r1
            funcSize_x = FUNCTION_LENGTH;
    1498:	84 e6       	ldi	r24, 0x64	; 100
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	a0 e0       	ldi	r26, 0x00	; 0
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	80 93 ab 20 	sts	0x20AB, r24
    14a4:	90 93 ac 20 	sts	0x20AC, r25
    14a8:	a0 93 ad 20 	sts	0x20AD, r26
    14ac:	b0 93 ae 20 	sts	0x20AE, r27
    14b0:	e5 e2       	ldi	r30, 0x25	; 37
    14b2:	f8 e2       	ldi	r31, 0x28	; 40
            for (funcCnt = 0; funcCnt < FUNCTION_LENGTH; funcCnt++)
				{ function_X[funcCnt] = 10; }
    14b4:	8a e0       	ldi	r24, 0x0A	; 10
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	81 93       	st	Z+, r24
    14ba:	91 93       	st	Z+, r25
                xputs(PSTR("Setting default function for X.\n"));
            
            //Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);//disable ISR
            func_ID_X = 0;
            funcSize_x = FUNCTION_LENGTH;
            for (funcCnt = 0; funcCnt < FUNCTION_LENGTH; funcCnt++)
    14bc:	28 e2       	ldi	r18, 0x28	; 40
    14be:	ed 3e       	cpi	r30, 0xED	; 237
    14c0:	f2 07       	cpc	r31, r18
    14c2:	d1 f7       	brne	.-12     	; 0x14b8 <set_default_func+0x44>
				{ function_X[funcCnt] = 10; }
            func_read_index_x = 0;
    14c4:	10 92 ef 24 	sts	0x24EF, r1
			default_func_x = 1;
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	80 93 a3 20 	sts	0x20A3, r24
			num_buffer_load_x = 1;
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	80 93 b4 20 	sts	0x20B4, r24
    14d6:	90 93 b5 20 	sts	0x20B5, r25
			last_load_x = 0;
    14da:	10 92 f9 24 	sts	0x24F9, r1
    14de:	10 92 fa 24 	sts	0x24FA, r1
    14e2:	08 95       	ret
            //Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1);//don't need to enable ISR
            break;
        case 2:
            if (quiet_mode_on == 0)
    14e4:	80 91 b3 20 	lds	r24, 0x20B3
    14e8:	88 23       	and	r24, r24
    14ea:	21 f4       	brne	.+8      	; 0x14f4 <set_default_func+0x80>
                xputs(PSTR("Setting default function for Y.\n"));
    14ec:	87 ef       	ldi	r24, 0xF7	; 247
    14ee:	96 e0       	ldi	r25, 0x06	; 6
    14f0:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0);//disable ISR
            func_ID_Y = 0;
    14f4:	10 92 f7 24 	sts	0x24F7, r1
    14f8:	10 92 f8 24 	sts	0x24F8, r1
            funcSize_y = FUNCTION_LENGTH;
    14fc:	84 e6       	ldi	r24, 0x64	; 100
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	a0 e0       	ldi	r26, 0x00	; 0
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	80 93 af 20 	sts	0x20AF, r24
    1508:	90 93 b0 20 	sts	0x20B0, r25
    150c:	a0 93 b1 20 	sts	0x20B1, r26
    1510:	b0 93 b2 20 	sts	0x20B2, r27
    1514:	ee ea       	ldi	r30, 0xAE	; 174
    1516:	f5 e2       	ldi	r31, 0x25	; 37
            for (funcCnt = 0; funcCnt < FUNCTION_LENGTH; funcCnt++)
            { function_Y[funcCnt] = 10; }
    1518:	8a e0       	ldi	r24, 0x0A	; 10
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	81 93       	st	Z+, r24
    151e:	91 93       	st	Z+, r25
            if (quiet_mode_on == 0)
                xputs(PSTR("Setting default function for Y.\n"));
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0);//disable ISR
            func_ID_Y = 0;
            funcSize_y = FUNCTION_LENGTH;
            for (funcCnt = 0; funcCnt < FUNCTION_LENGTH; funcCnt++)
    1520:	26 e2       	ldi	r18, 0x26	; 38
    1522:	e6 37       	cpi	r30, 0x76	; 118
    1524:	f2 07       	cpc	r31, r18
    1526:	d1 f7       	brne	.-12     	; 0x151c <set_default_func+0xa8>
            { function_Y[funcCnt] = 10; }
			func_read_index_y = 0;
    1528:	10 92 f0 24 	sts	0x24F0, r1
			default_func_y = 1;
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	80 93 a4 20 	sts	0x20A4, r24
			num_buffer_load_y = 1;
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	80 93 b6 20 	sts	0x20B6, r24
    153a:	90 93 b7 20 	sts	0x20B7, r25
			last_load_y = 0;
    153e:	10 92 fb 24 	sts	0x24FB, r1
    1542:	10 92 fc 24 	sts	0x24FC, r1
    1546:	08 95       	ret
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1);//don't need to enable ISR
            break;
        default:
            xputs(PSTR("Wrong function channel number.\n"));
    1548:	87 ed       	ldi	r24, 0xD7	; 215
    154a:	96 e0       	ldi	r25, 0x06	; 6
    154c:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
    1550:	08 95       	ret

00001552 <handle_message_length_63>:
//load laser trigger pattern second 63 byte data. Laer patter has 128 bytes, but since
//the value is either 0 or 1, we can combined them in 12 bytes to 
//save serial communicaiton time

void handle_message_length_63(uint8_t *msg_buffer)
{   
    1552:	ac 01       	movw	r20, r24
    1554:	20 e0       	ldi	r18, 0x00	; 0
    1556:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
	
	 for (i = 0; i<63; i++)
	{
	laserPattern[62 + i] = msg_buffer[i];
    1558:	f9 01       	movw	r30, r18
    155a:	e9 57       	subi	r30, 0x79	; 121
    155c:	f9 4d       	sbci	r31, 0xD9	; 217
    155e:	da 01       	movw	r26, r20
    1560:	a2 0f       	add	r26, r18
    1562:	b3 1f       	adc	r27, r19
    1564:	8c 91       	ld	r24, X
    1566:	86 af       	std	Z+62, r24	; 0x3e
    1568:	2f 5f       	subi	r18, 0xFF	; 255
    156a:	3f 4f       	sbci	r19, 0xFF	; 255

void handle_message_length_63(uint8_t *msg_buffer)
{   
	uint8_t i;
	
	 for (i = 0; i<63; i++)
    156c:	2f 33       	cpi	r18, 0x3F	; 63
    156e:	31 05       	cpc	r19, r1
    1570:	99 f7       	brne	.-26     	; 0x1558 <handle_message_length_63+0x6>
	{
	laserPattern[62 + i] = msg_buffer[i];
	}
	
	if (quiet_mode_on == 0)
    1572:	80 91 b3 20 	lds	r24, 0x20B3
    1576:	88 23       	and	r24, r24
    1578:	21 f4       	brne	.+8      	; 0x1582 <handle_message_length_63+0x30>
        xputs(PSTR("Success set the new laser pattern.\n"));
    157a:	83 e0       	ldi	r24, 0x03	; 3
    157c:	99 e0       	ldi	r25, 0x09	; 9
    157e:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
    1582:	08 95       	ret

00001584 <dump_mat>:
			xputs(PSTR("Error in f_lseek in update_funcCnt_y load next buffer\n"));
	}
} 

//synchronize the SD.mat from SD card to PC
void dump_mat(void) {
    1584:	a4 e3       	ldi	r26, 0x34	; 52
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e8 ec       	ldi	r30, 0xC8	; 200
    158a:	fa e0       	ldi	r31, 0x0A	; 10
    158c:	0c 94 fa 5a 	jmp	0xb5f4	; 0xb5f4 <__prologue_saves__+0x2>
    uint8_t res;
    uint16_t cnt;
    uint8_t matBuff[50];
    
    // try to read in the SD.mat filfil
    res = f_open(&file4, SDInfo, FA_OPEN_EXISTING | FA_READ);
    1590:	83 e0       	ldi	r24, 0x03	; 3
    1592:	98 e2       	ldi	r25, 0x28	; 40
    1594:	68 eb       	ldi	r22, 0xB8	; 184
    1596:	70 e2       	ldi	r23, 0x20	; 32
    1598:	41 e0       	ldi	r20, 0x01	; 1
    159a:	0e 94 68 4f 	call	0x9ed0	; 0x9ed0 <f_open>
    if (res == FR_OK) {
    159e:	88 23       	and	r24, r24
    15a0:	09 f0       	breq	.+2      	; 0x15a4 <dump_mat+0x20>
    15a2:	ad c0       	rjmp	.+346    	; 0x16fe <dump_mat+0x17a>
        // looks good
        iteration = file4.fsize/50;
    15a4:	80 90 0d 28 	lds	r8, 0x280D
    15a8:	70 91 0e 28 	lds	r23, 0x280E
    15ac:	68 2d       	mov	r22, r8
    15ae:	80 91 0f 28 	lds	r24, 0x280F
    15b2:	90 91 10 28 	lds	r25, 0x2810
    15b6:	22 e3       	ldi	r18, 0x32	; 50
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	40 e0       	ldi	r20, 0x00	; 0
    15bc:	50 e0       	ldi	r21, 0x00	; 0
    15be:	0e 94 bc 5a 	call	0xb578	; 0xb578 <__udivmodsi4>
    15c2:	79 01       	movw	r14, r18
    15c4:	8a 01       	movw	r16, r20
    15c6:	99 24       	eor	r9, r9
    15c8:	93 94       	inc	r9
        fileRemain = (uint8_t)(file4.fsize - iteration*50);
        //xprintf(PSTR("filesize = %lu, iteration = %lu, fileRemain = %u\n"), file4.fsize, iteration, fileRemain);
        
        // send 50 bytes data for iteration times
        for (b1=1; b1<= iteration; b1++){
            offset = (b1 -1)*50;
    15ca:	22 e3       	ldi	r18, 0x32	; 50
    15cc:	32 2e       	mov	r3, r18
            
            res = f_lseek(&file4, offset);
            if ((res == FR_OK) && (file4.fptr == offset)) {
                res = f_read(&file4, matBuff, 50, &cnt);
    15ce:	93 e0       	ldi	r25, 0x03	; 3
    15d0:	69 2e       	mov	r6, r25
    15d2:	71 2c       	mov	r7, r1
    15d4:	6c 0e       	add	r6, r28
    15d6:	7d 1e       	adc	r7, r29
    15d8:	2e 01       	movw	r4, r28
    15da:	08 94       	sec
    15dc:	41 1c       	adc	r4, r1
    15de:	51 1c       	adc	r5, r1
    15e0:	36 c0       	rjmp	.+108    	; 0x164e <dump_mat+0xca>
        fileRemain = (uint8_t)(file4.fsize - iteration*50);
        //xprintf(PSTR("filesize = %lu, iteration = %lu, fileRemain = %u\n"), file4.fsize, iteration, fileRemain);
        
        // send 50 bytes data for iteration times
        for (b1=1; b1<= iteration; b1++){
            offset = (b1 -1)*50;
    15e2:	93 9c       	mul	r9, r3
    15e4:	c0 01       	movw	r24, r0
    15e6:	11 24       	eor	r1, r1
    15e8:	c2 97       	sbiw	r24, 0x32	; 50
    15ea:	5c 01       	movw	r10, r24
    15ec:	cc 24       	eor	r12, r12
    15ee:	b7 fc       	sbrc	r11, 7
    15f0:	c0 94       	com	r12
    15f2:	dc 2c       	mov	r13, r12
            
            res = f_lseek(&file4, offset);
    15f4:	83 e0       	ldi	r24, 0x03	; 3
    15f6:	98 e2       	ldi	r25, 0x28	; 40
    15f8:	b6 01       	movw	r22, r12
    15fa:	a5 01       	movw	r20, r10
    15fc:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <f_lseek>
            if ((res == FR_OK) && (file4.fptr == offset)) {
    1600:	88 23       	and	r24, r24
    1602:	01 f5       	brne	.+64     	; 0x1644 <dump_mat+0xc0>
    1604:	80 91 09 28 	lds	r24, 0x2809
    1608:	90 91 0a 28 	lds	r25, 0x280A
    160c:	a0 91 0b 28 	lds	r26, 0x280B
    1610:	b0 91 0c 28 	lds	r27, 0x280C
    1614:	8a 15       	cp	r24, r10
    1616:	9b 05       	cpc	r25, r11
    1618:	ac 05       	cpc	r26, r12
    161a:	bd 05       	cpc	r27, r13
    161c:	99 f4       	brne	.+38     	; 0x1644 <dump_mat+0xc0>
                res = f_read(&file4, matBuff, 50, &cnt);
    161e:	83 e0       	ldi	r24, 0x03	; 3
    1620:	98 e2       	ldi	r25, 0x28	; 40
    1622:	b3 01       	movw	r22, r6
    1624:	42 e3       	ldi	r20, 0x32	; 50
    1626:	50 e0       	ldi	r21, 0x00	; 0
    1628:	92 01       	movw	r18, r4
    162a:	0e 94 7f 50 	call	0xa0fe	; 0xa0fe <f_read>
                if ((res == FR_OK) && (cnt == 50)) {
    162e:	88 23       	and	r24, r24
    1630:	69 f4       	brne	.+26     	; 0x164c <dump_mat+0xc8>
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	9a 81       	ldd	r25, Y+2	; 0x02
    1636:	c2 97       	sbiw	r24, 0x32	; 50
    1638:	49 f4       	brne	.+18     	; 0x164c <dump_mat+0xc8>
                    send_Tx_buffer(matBuff, 50);
    163a:	c3 01       	movw	r24, r6
    163c:	62 e3       	ldi	r22, 0x32	; 50
    163e:	0e 94 c3 30 	call	0x6186	; 0x6186 <send_Tx_buffer>
    1642:	04 c0       	rjmp	.+8      	; 0x164c <dump_mat+0xc8>
                }
            }else 
                xputs(PSTR("Error f_lseek in SDInfo.mat.\n"));
    1644:	85 e9       	ldi	r24, 0x95	; 149
    1646:	92 e0       	ldi	r25, 0x02	; 2
    1648:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
        iteration = file4.fsize/50;
        fileRemain = (uint8_t)(file4.fsize - iteration*50);
        //xprintf(PSTR("filesize = %lu, iteration = %lu, fileRemain = %u\n"), file4.fsize, iteration, fileRemain);
        
        // send 50 bytes data for iteration times
        for (b1=1; b1<= iteration; b1++){
    164c:	93 94       	inc	r9
    164e:	89 2d       	mov	r24, r9
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	a0 e0       	ldi	r26, 0x00	; 0
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e8 16       	cp	r14, r24
    1658:	f9 06       	cpc	r15, r25
    165a:	0a 07       	cpc	r16, r26
    165c:	1b 07       	cpc	r17, r27
    165e:	08 f0       	brcs	.+2      	; 0x1662 <dump_mat+0xde>
    1660:	c0 cf       	rjmp	.-128    	; 0x15e2 <dump_mat+0x5e>
                }
            }else 
                xputs(PSTR("Error f_lseek in SDInfo.mat.\n"));
        }
        //send the remained data
        offset = (b1-1)*50;
    1662:	82 e3       	ldi	r24, 0x32	; 50
    1664:	98 9e       	mul	r9, r24
    1666:	c0 01       	movw	r24, r0
    1668:	11 24       	eor	r1, r1
    166a:	c2 97       	sbiw	r24, 0x32	; 50
    166c:	5c 01       	movw	r10, r24
    166e:	cc 24       	eor	r12, r12
    1670:	b7 fc       	sbrc	r11, 7
    1672:	c0 94       	com	r12
    1674:	dc 2c       	mov	r13, r12
        res=f_lseek(&file4, offset);
    1676:	83 e0       	ldi	r24, 0x03	; 3
    1678:	98 e2       	ldi	r25, 0x28	; 40
    167a:	b6 01       	movw	r22, r12
    167c:	a5 01       	movw	r20, r10
    167e:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <f_lseek>
        if ((res == FR_OK) && (file4.fptr == offset)) {
    1682:	88 23       	and	r24, r24
    1684:	99 f5       	brne	.+102    	; 0x16ec <dump_mat+0x168>
    1686:	80 91 09 28 	lds	r24, 0x2809
    168a:	90 91 0a 28 	lds	r25, 0x280A
    168e:	a0 91 0b 28 	lds	r26, 0x280B
    1692:	b0 91 0c 28 	lds	r27, 0x280C
    1696:	8a 15       	cp	r24, r10
    1698:	9b 05       	cpc	r25, r11
    169a:	ac 05       	cpc	r26, r12
    169c:	bd 05       	cpc	r27, r13
    169e:	31 f5       	brne	.+76     	; 0x16ec <dump_mat+0x168>
    // try to read in the SD.mat filfil
    res = f_open(&file4, SDInfo, FA_OPEN_EXISTING | FA_READ);
    if (res == FR_OK) {
        // looks good
        iteration = file4.fsize/50;
        fileRemain = (uint8_t)(file4.fsize - iteration*50);
    16a0:	c8 01       	movw	r24, r16
    16a2:	b7 01       	movw	r22, r14
    16a4:	22 e3       	ldi	r18, 0x32	; 50
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	40 e0       	ldi	r20, 0x00	; 0
    16aa:	50 e0       	ldi	r21, 0x00	; 0
    16ac:	0e 94 76 5a 	call	0xb4ec	; 0xb4ec <__mulsi3>
    16b0:	d8 2c       	mov	r13, r8
    16b2:	d6 1a       	sub	r13, r22
        }
        //send the remained data
        offset = (b1-1)*50;
        res=f_lseek(&file4, offset);
        if ((res == FR_OK) && (file4.fptr == offset)) {
            res = f_read(&file4, matBuff, fileRemain, &cnt);
    16b4:	0d 2d       	mov	r16, r13
    16b6:	10 e0       	ldi	r17, 0x00	; 0
    16b8:	83 e0       	ldi	r24, 0x03	; 3
    16ba:	e8 2e       	mov	r14, r24
    16bc:	f1 2c       	mov	r15, r1
    16be:	ec 0e       	add	r14, r28
    16c0:	fd 1e       	adc	r15, r29
    16c2:	83 e0       	ldi	r24, 0x03	; 3
    16c4:	98 e2       	ldi	r25, 0x28	; 40
    16c6:	b7 01       	movw	r22, r14
    16c8:	a8 01       	movw	r20, r16
    16ca:	9e 01       	movw	r18, r28
    16cc:	2f 5f       	subi	r18, 0xFF	; 255
    16ce:	3f 4f       	sbci	r19, 0xFF	; 255
    16d0:	0e 94 7f 50 	call	0xa0fe	; 0xa0fe <f_read>
            if ((res == FR_OK) && (cnt == fileRemain)) {
    16d4:	88 23       	and	r24, r24
    16d6:	71 f4       	brne	.+28     	; 0x16f4 <dump_mat+0x170>
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	9a 81       	ldd	r25, Y+2	; 0x02
    16dc:	80 17       	cp	r24, r16
    16de:	91 07       	cpc	r25, r17
    16e0:	49 f4       	brne	.+18     	; 0x16f4 <dump_mat+0x170>
                send_Tx_buffer(matBuff, fileRemain);
    16e2:	c7 01       	movw	r24, r14
    16e4:	6d 2d       	mov	r22, r13
    16e6:	0e 94 c3 30 	call	0x6186	; 0x6186 <send_Tx_buffer>
    16ea:	04 c0       	rjmp	.+8      	; 0x16f4 <dump_mat+0x170>
            }
        }else
            xputs(PSTR("Error f_lseek in remained data.\n"));
    16ec:	84 e7       	ldi	r24, 0x74	; 116
    16ee:	92 e0       	ldi	r25, 0x02	; 2
    16f0:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
        
        f_close(&file4);
    16f4:	83 e0       	ldi	r24, 0x03	; 3
    16f6:	98 e2       	ldi	r25, 0x28	; 40
    16f8:	0e 94 ac 4b 	call	0x9758	; 0x9758 <f_close>
    16fc:	04 c0       	rjmp	.+8      	; 0x1706 <dump_mat+0x182>
    } else 
            xputs(PSTR("Error f_open in SDInfo.mat.\n"));//end if (res == FR_OK
    16fe:	87 e5       	ldi	r24, 0x57	; 87
    1700:	92 e0       	ldi	r25, 0x02	; 2
    1702:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
    
}
    1706:	e4 96       	adiw	r28, 0x34	; 52
    1708:	e1 e1       	ldi	r30, 0x11	; 17
    170a:	0c 94 16 5b 	jmp	0xb62c	; 0xb62c <__epilogue_restores__+0x2>

0000170e <fetch_update_funcY>:
			break;
		
    }
}

void fetch_update_funcY(uint8_t fReset, uint8_t num_of_load_y) {
    170e:	a6 e6       	ldi	r26, 0x66	; 102
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	ed e8       	ldi	r30, 0x8D	; 141
    1714:	fb e0       	ldi	r31, 0x0B	; 11
    1716:	0c 94 04 5b 	jmp	0xb608	; 0xb608 <__prologue_saves__+0x16>
    171a:	98 2f       	mov	r25, r24
    171c:	d6 2e       	mov	r13, r22
	uint8_t res;
	//uint8_t funcXBuff[2*FUNCTION_LENGTH];
	uint8_t tempBuff[FUNCTION_LENGTH];
    uint16_t loadYBufferSize;
    //xprintf(PSTR("num_of_load_y =  %u\n"), num_of_load_y);		
	if (func_buffer_size_y >= BUFFER_LENGTH/2){
    171e:	80 91 f4 24 	lds	r24, 0x24F4
    1722:	84 36       	cpi	r24, 0x64	; 100
    1724:	18 f0       	brcs	.+6      	; 0x172c <fetch_update_funcY+0x1e>
		xputs(PSTR("Ring buffer function_Y is full\n"));
    1726:	88 e2       	ldi	r24, 0x28	; 40
    1728:	93 e0       	ldi	r25, 0x03	; 3
    172a:	ae c0       	rjmp	.+348    	; 0x1888 <fetch_update_funcY+0x17a>
		return;
		}
		
	if (fReset == 1){
    172c:	91 30       	cpi	r25, 0x01	; 1
    172e:	31 f4       	brne	.+12     	; 0x173c <fetch_update_funcY+0x2e>
        func_buffer_size_y = 0;
    1730:	10 92 f4 24 	sts	0x24F4, r1
		func_read_index_y = 0;
    1734:	10 92 f0 24 	sts	0x24F0, r1
		func_write_index_y = 0;        
    1738:	10 92 f2 24 	sts	0x24F2, r1
	}
	
	offset = 512 + num_of_load_y * FUNCTION_LENGTH;
            
	res = f_lseek(&file3, offset);
    173c:	84 e6       	ldi	r24, 0x64	; 100
    173e:	d8 9e       	mul	r13, r24
    1740:	c0 01       	movw	r24, r0
    1742:	11 24       	eor	r1, r1
    1744:	80 50       	subi	r24, 0x00	; 0
    1746:	9e 4f       	sbci	r25, 0xFE	; 254
    1748:	7c 01       	movw	r14, r24
    174a:	00 e0       	ldi	r16, 0x00	; 0
    174c:	10 e0       	ldi	r17, 0x00	; 0
    174e:	86 e0       	ldi	r24, 0x06	; 6
    1750:	97 e2       	ldi	r25, 0x27	; 39
    1752:	b8 01       	movw	r22, r16
    1754:	a7 01       	movw	r20, r14
    1756:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <f_lseek>
    175a:	28 2f       	mov	r18, r24
	if ((res == FR_OK) && (file3.fptr == offset)) {
    175c:	88 23       	and	r24, r24
    175e:	09 f0       	breq	.+2      	; 0x1762 <fetch_update_funcY+0x54>
    1760:	7c c0       	rjmp	.+248    	; 0x185a <fetch_update_funcY+0x14c>
    1762:	80 91 0c 27 	lds	r24, 0x270C
    1766:	90 91 0d 27 	lds	r25, 0x270D
    176a:	a0 91 0e 27 	lds	r26, 0x270E
    176e:	b0 91 0f 27 	lds	r27, 0x270F
    1772:	8e 15       	cp	r24, r14
    1774:	9f 05       	cpc	r25, r15
    1776:	a0 07       	cpc	r26, r16
    1778:	b1 07       	cpc	r27, r17
    177a:	09 f0       	breq	.+2      	; 0x177e <fetch_update_funcY+0x70>
    177c:	6e c0       	rjmp	.+220    	; 0x185a <fetch_update_funcY+0x14c>
		
		if ((num_of_load_y ==  num_buffer_load_y - 1) && (last_load_y != 0))
    177e:	2d 2d       	mov	r18, r13
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	80 91 b6 20 	lds	r24, 0x20B6
    1786:	90 91 b7 20 	lds	r25, 0x20B7
    178a:	01 97       	sbiw	r24, 0x01	; 1
    178c:	28 17       	cp	r18, r24
    178e:	39 07       	cpc	r19, r25
    1790:	39 f4       	brne	.+14     	; 0x17a0 <fetch_update_funcY+0x92>
    1792:	00 91 fb 24 	lds	r16, 0x24FB
    1796:	10 91 fc 24 	lds	r17, 0x24FC
    179a:	01 15       	cp	r16, r1
    179c:	11 05       	cpc	r17, r1
    179e:	11 f4       	brne	.+4      	; 0x17a4 <fetch_update_funcY+0x96>
    17a0:	04 e6       	ldi	r16, 0x64	; 100
    17a2:	10 e0       	ldi	r17, 0x00	; 0
			loadYBufferSize = last_load_y;
		else 
			loadYBufferSize = FUNCTION_LENGTH;
		
		//load 100 bytes data to temBuff
		res = f_read(&file3, tempBuff, loadYBufferSize, &cnt);
    17a4:	86 e0       	ldi	r24, 0x06	; 6
    17a6:	97 e2       	ldi	r25, 0x27	; 39
    17a8:	be 01       	movw	r22, r28
    17aa:	6d 5f       	subi	r22, 0xFD	; 253
    17ac:	7f 4f       	sbci	r23, 0xFF	; 255
    17ae:	a8 01       	movw	r20, r16
    17b0:	9e 01       	movw	r18, r28
    17b2:	2f 5f       	subi	r18, 0xFF	; 255
    17b4:	3f 4f       	sbci	r19, 0xFF	; 255
    17b6:	0e 94 7f 50 	call	0xa0fe	; 0xa0fe <f_read>
    17ba:	28 2f       	mov	r18, r24
		if (!((res == FR_OK) && (cnt == loadYBufferSize))) {
    17bc:	88 23       	and	r24, r24
    17be:	29 f4       	brne	.+10     	; 0x17ca <fetch_update_funcY+0xbc>
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	9a 81       	ldd	r25, Y+2	; 0x02
    17c4:	80 17       	cp	r24, r16
    17c6:	91 07       	cpc	r25, r17
    17c8:	c9 f0       	breq	.+50     	; 0x17fc <fetch_update_funcY+0xee>
		
			xprintf(PSTR("res =  %u\n"), res);
    17ca:	00 d0       	rcall	.+0      	; 0x17cc <fetch_update_funcY+0xbe>
    17cc:	0f 92       	push	r0
    17ce:	ed b7       	in	r30, 0x3d	; 61
    17d0:	fe b7       	in	r31, 0x3e	; 62
    17d2:	31 96       	adiw	r30, 0x01	; 1
    17d4:	8d e1       	ldi	r24, 0x1D	; 29
    17d6:	93 e0       	ldi	r25, 0x03	; 3
    17d8:	ad b7       	in	r26, 0x3d	; 61
    17da:	be b7       	in	r27, 0x3e	; 62
    17dc:	11 96       	adiw	r26, 0x01	; 1
    17de:	8d 93       	st	X+, r24
    17e0:	9c 93       	st	X, r25
    17e2:	12 97       	sbiw	r26, 0x02	; 2
    17e4:	22 83       	std	Z+2, r18	; 0x02
    17e6:	13 82       	std	Z+3, r1	; 0x03
    17e8:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
			xputs(PSTR("Error in f_read in in update_funcCnt_y\n"));
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	85 ef       	ldi	r24, 0xF5	; 245
    17f6:	92 e0       	ldi	r25, 0x02	; 2
    17f8:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
		}
		
		for (j = 0; j< cnt; j+=2){
    17fc:	69 81       	ldd	r22, Y+1	; 0x01
    17fe:	7a 81       	ldd	r23, Y+2	; 0x02
    1800:	de 01       	movw	r26, r28
    1802:	13 96       	adiw	r26, 0x03	; 3
    1804:	40 e0       	ldi	r20, 0x00	; 0
    1806:	50 e0       	ldi	r21, 0x00	; 0
    1808:	24 c0       	rjmp	.+72     	; 0x1852 <fetch_update_funcY+0x144>
			function_Y[func_write_index_y] = (uint16_t)tempBuff[j] + tempBuff[j+1]*256; 
    180a:	e0 91 f2 24 	lds	r30, 0x24F2
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	ee 0f       	add	r30, r30
    1812:	ff 1f       	adc	r31, r31
    1814:	e2 55       	subi	r30, 0x52	; 82
    1816:	fa 4d       	sbci	r31, 0xDA	; 218
    1818:	11 96       	adiw	r26, 0x01	; 1
    181a:	3c 91       	ld	r19, X
    181c:	11 97       	sbiw	r26, 0x01	; 1
    181e:	20 e0       	ldi	r18, 0x00	; 0
    1820:	8c 91       	ld	r24, X
    1822:	89 01       	movw	r16, r18
    1824:	08 0f       	add	r16, r24
    1826:	11 1d       	adc	r17, r1
    1828:	00 83       	st	Z, r16
    182a:	11 83       	std	Z+1, r17	; 0x01
			func_write_index_y++; 
    182c:	80 91 f2 24 	lds	r24, 0x24F2
    1830:	8f 5f       	subi	r24, 0xFF	; 255
    1832:	80 93 f2 24 	sts	0x24F2, r24
			if (func_write_index_y >= BUFFER_LENGTH/2)
    1836:	80 91 f2 24 	lds	r24, 0x24F2
    183a:	84 36       	cpi	r24, 0x64	; 100
    183c:	10 f0       	brcs	.+4      	; 0x1842 <fetch_update_funcY+0x134>
				func_write_index_y = 0;
    183e:	10 92 f2 24 	sts	0x24F2, r1
			func_buffer_size_y++;  //atomic operation
    1842:	80 91 f4 24 	lds	r24, 0x24F4
    1846:	8f 5f       	subi	r24, 0xFF	; 255
    1848:	80 93 f4 24 	sts	0x24F4, r24
		
			xprintf(PSTR("res =  %u\n"), res);
			xputs(PSTR("Error in f_read in in update_funcCnt_y\n"));
		}
		
		for (j = 0; j< cnt; j+=2){
    184c:	4e 5f       	subi	r20, 0xFE	; 254
    184e:	5f 4f       	sbci	r21, 0xFF	; 255
    1850:	12 96       	adiw	r26, 0x02	; 2
    1852:	46 17       	cp	r20, r22
    1854:	57 07       	cpc	r21, r23
    1856:	c8 f2       	brcs	.-78     	; 0x180a <fetch_update_funcY+0xfc>
    1858:	19 c0       	rjmp	.+50     	; 0x188c <fetch_update_funcY+0x17e>
				func_write_index_y = 0;
			func_buffer_size_y++;  //atomic operation
		}
//xprintf(PSTR("func_write_index_y =  %u\n"), func_write_index_y);			
	} else {
			xprintf(PSTR("res =  %u\n"), res);
    185a:	00 d0       	rcall	.+0      	; 0x185c <fetch_update_funcY+0x14e>
    185c:	0f 92       	push	r0
    185e:	ed b7       	in	r30, 0x3d	; 61
    1860:	fe b7       	in	r31, 0x3e	; 62
    1862:	31 96       	adiw	r30, 0x01	; 1
    1864:	8a ee       	ldi	r24, 0xEA	; 234
    1866:	92 e0       	ldi	r25, 0x02	; 2
    1868:	ad b7       	in	r26, 0x3d	; 61
    186a:	be b7       	in	r27, 0x3e	; 62
    186c:	11 96       	adiw	r26, 0x01	; 1
    186e:	8d 93       	st	X+, r24
    1870:	9c 93       	st	X, r25
    1872:	12 97       	sbiw	r26, 0x02	; 2
    1874:	22 83       	std	Z+2, r18	; 0x02
    1876:	13 82       	std	Z+3, r1	; 0x03
    1878:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
			xputs(PSTR("Error in f_lseek in update_funcCnt_y load next buffer\n"));
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	83 eb       	ldi	r24, 0xB3	; 179
    1886:	92 e0       	ldi	r25, 0x02	; 2
    1888:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
	}
} 
    188c:	ca 59       	subi	r28, 0x9A	; 154
    188e:	df 4f       	sbci	r29, 0xFF	; 255
    1890:	e7 e0       	ldi	r30, 0x07	; 7
    1892:	0c 94 20 5b 	jmp	0xb640	; 0xb640 <__epilogue_restores__+0x16>

00001896 <fetch_update_funcX>:
			break;
		
    }
}

void fetch_update_funcX(uint8_t fReset, uint8_t num_of_load_x) {
    1896:	a6 e6       	ldi	r26, 0x66	; 102
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	e1 e5       	ldi	r30, 0x51	; 81
    189c:	fc e0       	ldi	r31, 0x0C	; 12
    189e:	0c 94 04 5b 	jmp	0xb608	; 0xb608 <__prologue_saves__+0x16>
    18a2:	98 2f       	mov	r25, r24
    18a4:	d6 2e       	mov	r13, r22
	//uint8_t funcXBuff[2*FUNCTION_LENGTH];
	uint8_t tempBuff[FUNCTION_LENGTH];
	uint16_t loadXBufferSize;
				
    //xprintf(PSTR("num_of_load_x =  %u\n"), num_of_load_x);			
	if (func_buffer_size_x >= BUFFER_LENGTH/2){
    18a6:	80 91 f3 24 	lds	r24, 0x24F3
    18aa:	84 36       	cpi	r24, 0x64	; 100
    18ac:	18 f0       	brcs	.+6      	; 0x18b4 <fetch_update_funcX+0x1e>
		xputs(PSTR("Ring buffer function_x is full\n"));
    18ae:	81 ed       	ldi	r24, 0xD1	; 209
    18b0:	93 e0       	ldi	r25, 0x03	; 3
    18b2:	ae c0       	rjmp	.+348    	; 0x1a10 <fetch_update_funcX+0x17a>
		return;
		}
		
	if (fReset == 1){ 
    18b4:	91 30       	cpi	r25, 0x01	; 1
    18b6:	31 f4       	brne	.+12     	; 0x18c4 <fetch_update_funcX+0x2e>
		func_read_index_x = 0;
    18b8:	10 92 ef 24 	sts	0x24EF, r1
		func_write_index_x = 0;
    18bc:	10 92 f1 24 	sts	0x24F1, r1
		func_buffer_size_x = 0;       
    18c0:	10 92 f3 24 	sts	0x24F3, r1
	}
	
	offset = 512 + num_of_load_x * FUNCTION_LENGTH;
            
	res = f_lseek(&file2, offset);
    18c4:	84 e6       	ldi	r24, 0x64	; 100
    18c6:	d8 9e       	mul	r13, r24
    18c8:	c0 01       	movw	r24, r0
    18ca:	11 24       	eor	r1, r1
    18cc:	80 50       	subi	r24, 0x00	; 0
    18ce:	9e 4f       	sbci	r25, 0xFE	; 254
    18d0:	7c 01       	movw	r14, r24
    18d2:	00 e0       	ldi	r16, 0x00	; 0
    18d4:	10 e0       	ldi	r17, 0x00	; 0
    18d6:	8b e7       	ldi	r24, 0x7B	; 123
    18d8:	95 e2       	ldi	r25, 0x25	; 37
    18da:	b8 01       	movw	r22, r16
    18dc:	a7 01       	movw	r20, r14
    18de:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <f_lseek>
    18e2:	28 2f       	mov	r18, r24
	if ((res == FR_OK) && (file2.fptr == offset)) {
    18e4:	88 23       	and	r24, r24
    18e6:	09 f0       	breq	.+2      	; 0x18ea <fetch_update_funcX+0x54>
    18e8:	7c c0       	rjmp	.+248    	; 0x19e2 <fetch_update_funcX+0x14c>
    18ea:	80 91 81 25 	lds	r24, 0x2581
    18ee:	90 91 82 25 	lds	r25, 0x2582
    18f2:	a0 91 83 25 	lds	r26, 0x2583
    18f6:	b0 91 84 25 	lds	r27, 0x2584
    18fa:	8e 15       	cp	r24, r14
    18fc:	9f 05       	cpc	r25, r15
    18fe:	a0 07       	cpc	r26, r16
    1900:	b1 07       	cpc	r27, r17
    1902:	09 f0       	breq	.+2      	; 0x1906 <fetch_update_funcX+0x70>
    1904:	6e c0       	rjmp	.+220    	; 0x19e2 <fetch_update_funcX+0x14c>
		//num_of_load_x ranges from 0 to num_buffer_load_x - 1
		if ((num_of_load_x ==  num_buffer_load_x - 1) && (last_load_x != 0))
    1906:	2d 2d       	mov	r18, r13
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	80 91 b4 20 	lds	r24, 0x20B4
    190e:	90 91 b5 20 	lds	r25, 0x20B5
    1912:	01 97       	sbiw	r24, 0x01	; 1
    1914:	28 17       	cp	r18, r24
    1916:	39 07       	cpc	r19, r25
    1918:	39 f4       	brne	.+14     	; 0x1928 <fetch_update_funcX+0x92>
    191a:	00 91 f9 24 	lds	r16, 0x24F9
    191e:	10 91 fa 24 	lds	r17, 0x24FA
    1922:	01 15       	cp	r16, r1
    1924:	11 05       	cpc	r17, r1
    1926:	11 f4       	brne	.+4      	; 0x192c <fetch_update_funcX+0x96>
    1928:	04 e6       	ldi	r16, 0x64	; 100
    192a:	10 e0       	ldi	r17, 0x00	; 0
			loadXBufferSize = last_load_x;
		else 
			loadXBufferSize = FUNCTION_LENGTH;
		
		//load 100 bytes data to temBuff
		res = f_read(&file2, tempBuff, loadXBufferSize, &cnt);
    192c:	8b e7       	ldi	r24, 0x7B	; 123
    192e:	95 e2       	ldi	r25, 0x25	; 37
    1930:	be 01       	movw	r22, r28
    1932:	6d 5f       	subi	r22, 0xFD	; 253
    1934:	7f 4f       	sbci	r23, 0xFF	; 255
    1936:	a8 01       	movw	r20, r16
    1938:	9e 01       	movw	r18, r28
    193a:	2f 5f       	subi	r18, 0xFF	; 255
    193c:	3f 4f       	sbci	r19, 0xFF	; 255
    193e:	0e 94 7f 50 	call	0xa0fe	; 0xa0fe <f_read>
    1942:	28 2f       	mov	r18, r24
		if (!((res == FR_OK) && (cnt == loadXBufferSize))) {
    1944:	88 23       	and	r24, r24
    1946:	29 f4       	brne	.+10     	; 0x1952 <fetch_update_funcX+0xbc>
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	9a 81       	ldd	r25, Y+2	; 0x02
    194c:	80 17       	cp	r24, r16
    194e:	91 07       	cpc	r25, r17
    1950:	c9 f0       	breq	.+50     	; 0x1984 <fetch_update_funcX+0xee>
			xprintf(PSTR("res =  %u\n"), res);
    1952:	00 d0       	rcall	.+0      	; 0x1954 <fetch_update_funcX+0xbe>
    1954:	0f 92       	push	r0
    1956:	ed b7       	in	r30, 0x3d	; 61
    1958:	fe b7       	in	r31, 0x3e	; 62
    195a:	31 96       	adiw	r30, 0x01	; 1
    195c:	86 ec       	ldi	r24, 0xC6	; 198
    195e:	93 e0       	ldi	r25, 0x03	; 3
    1960:	ad b7       	in	r26, 0x3d	; 61
    1962:	be b7       	in	r27, 0x3e	; 62
    1964:	11 96       	adiw	r26, 0x01	; 1
    1966:	8d 93       	st	X+, r24
    1968:	9c 93       	st	X, r25
    196a:	12 97       	sbiw	r26, 0x02	; 2
    196c:	22 83       	std	Z+2, r18	; 0x02
    196e:	13 82       	std	Z+3, r1	; 0x03
    1970:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
			xputs(PSTR("Error in f_read in in fetch_update_funcX\n"));
    1974:	0f 90       	pop	r0
    1976:	0f 90       	pop	r0
    1978:	0f 90       	pop	r0
    197a:	0f 90       	pop	r0
    197c:	8c e9       	ldi	r24, 0x9C	; 156
    197e:	93 e0       	ldi	r25, 0x03	; 3
    1980:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
		}
		
		for (j = 0; j< cnt; j+=2){
    1984:	69 81       	ldd	r22, Y+1	; 0x01
    1986:	7a 81       	ldd	r23, Y+2	; 0x02
    1988:	de 01       	movw	r26, r28
    198a:	13 96       	adiw	r26, 0x03	; 3
    198c:	40 e0       	ldi	r20, 0x00	; 0
    198e:	50 e0       	ldi	r21, 0x00	; 0
    1990:	24 c0       	rjmp	.+72     	; 0x19da <fetch_update_funcX+0x144>
			function_X[func_write_index_x] = (uint16_t)tempBuff[j] + (uint16_t)tempBuff[j+1]*256 ; 		
    1992:	e0 91 f1 24 	lds	r30, 0x24F1
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	ee 0f       	add	r30, r30
    199a:	ff 1f       	adc	r31, r31
    199c:	eb 5d       	subi	r30, 0xDB	; 219
    199e:	f7 4d       	sbci	r31, 0xD7	; 215
    19a0:	11 96       	adiw	r26, 0x01	; 1
    19a2:	3c 91       	ld	r19, X
    19a4:	11 97       	sbiw	r26, 0x01	; 1
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	8c 91       	ld	r24, X
    19aa:	89 01       	movw	r16, r18
    19ac:	08 0f       	add	r16, r24
    19ae:	11 1d       	adc	r17, r1
    19b0:	00 83       	st	Z, r16
    19b2:	11 83       	std	Z+1, r17	; 0x01
			func_write_index_x++;  
    19b4:	80 91 f1 24 	lds	r24, 0x24F1
    19b8:	8f 5f       	subi	r24, 0xFF	; 255
    19ba:	80 93 f1 24 	sts	0x24F1, r24
			if (func_write_index_x >= BUFFER_LENGTH/2) //0-127
    19be:	80 91 f1 24 	lds	r24, 0x24F1
    19c2:	84 36       	cpi	r24, 0x64	; 100
    19c4:	10 f0       	brcs	.+4      	; 0x19ca <fetch_update_funcX+0x134>
				func_write_index_x = 0;
    19c6:	10 92 f1 24 	sts	0x24F1, r1
				
			func_buffer_size_x ++;  //atomic operation
    19ca:	80 91 f3 24 	lds	r24, 0x24F3
    19ce:	8f 5f       	subi	r24, 0xFF	; 255
    19d0:	80 93 f3 24 	sts	0x24F3, r24
		if (!((res == FR_OK) && (cnt == loadXBufferSize))) {
			xprintf(PSTR("res =  %u\n"), res);
			xputs(PSTR("Error in f_read in in fetch_update_funcX\n"));
		}
		
		for (j = 0; j< cnt; j+=2){
    19d4:	4e 5f       	subi	r20, 0xFE	; 254
    19d6:	5f 4f       	sbci	r21, 0xFF	; 255
    19d8:	12 96       	adiw	r26, 0x02	; 2
    19da:	46 17       	cp	r20, r22
    19dc:	57 07       	cpc	r21, r23
    19de:	c8 f2       	brcs	.-78     	; 0x1992 <fetch_update_funcX+0xfc>
    19e0:	19 c0       	rjmp	.+50     	; 0x1a14 <fetch_update_funcX+0x17e>
			func_buffer_size_x ++;  //atomic operation
		}
		
            //xprintf(PSTR("func_write_index_x =  %u\n"), func_write_index_x);
	} else {
			xprintf(PSTR("res =  %u\n"), res);
    19e2:	00 d0       	rcall	.+0      	; 0x19e4 <fetch_update_funcX+0x14e>
    19e4:	0f 92       	push	r0
    19e6:	ed b7       	in	r30, 0x3d	; 61
    19e8:	fe b7       	in	r31, 0x3e	; 62
    19ea:	31 96       	adiw	r30, 0x01	; 1
    19ec:	81 e9       	ldi	r24, 0x91	; 145
    19ee:	93 e0       	ldi	r25, 0x03	; 3
    19f0:	ad b7       	in	r26, 0x3d	; 61
    19f2:	be b7       	in	r27, 0x3e	; 62
    19f4:	11 96       	adiw	r26, 0x01	; 1
    19f6:	8d 93       	st	X+, r24
    19f8:	9c 93       	st	X, r25
    19fa:	12 97       	sbiw	r26, 0x02	; 2
    19fc:	22 83       	std	Z+2, r18	; 0x02
    19fe:	13 82       	std	Z+3, r1	; 0x03
    1a00:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
			xputs(PSTR("Error in f_lseek in fetch_update_funcX\n"));
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	89 e6       	ldi	r24, 0x69	; 105
    1a0e:	93 e0       	ldi	r25, 0x03	; 3
    1a10:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
	}
}
    1a14:	ca 59       	subi	r28, 0x9A	; 154
    1a16:	df 4f       	sbci	r29, 0xFF	; 255
    1a18:	e7 e0       	ldi	r30, 0x07	; 7
    1a1a:	0c 94 20 5b 	jmp	0xb640	; 0xb640 <__epilogue_restores__+0x16>

00001a1e <update_funcCnt_y>:
void update_funcCnt_y(void) {
    int16_t Y_dac_val;
    int16_t temp_ADC_val;

	
	if (!func_buffer_size_y){
    1a1e:	80 91 f4 24 	lds	r24, 0x24F4
    1a22:	88 23       	and	r24, r24
    1a24:	29 f4       	brne	.+10     	; 0x1a30 <update_funcCnt_y+0x12>
		xputs(PSTR("Ring buffer function_Y is empty\n"));
    1a26:	88 e4       	ldi	r24, 0x48	; 72
    1a28:	93 e0       	ldi	r25, 0x03	; 3
    1a2a:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
    1a2e:	08 95       	ret
		return;
		}
	
    func_read_index_y++; 
    1a30:	80 91 f0 24 	lds	r24, 0x24F0
    1a34:	8f 5f       	subi	r24, 0xFF	; 255
    1a36:	80 93 f0 24 	sts	0x24F0, r24
	if (func_read_index_y >= BUFFER_LENGTH/2)
    1a3a:	80 91 f0 24 	lds	r24, 0x24F0
    1a3e:	84 36       	cpi	r24, 0x64	; 100
    1a40:	10 f0       	brcs	.+4      	; 0x1a46 <update_funcCnt_y+0x28>
		func_read_index_y = 0;
    1a42:	10 92 f0 24 	sts	0x24F0, r1
	func_buffer_size_y--;
    1a46:	80 91 f4 24 	lds	r24, 0x24F4
    1a4a:	81 50       	subi	r24, 0x01	; 1
    1a4c:	80 93 f4 24 	sts	0x24F4, r24
    
	switch(y_mode){
    1a50:	80 91 01 28 	lds	r24, 0x2801
    1a54:	84 30       	cpi	r24, 0x04	; 4
    1a56:	21 f0       	breq	.+8      	; 0x1a60 <update_funcCnt_y+0x42>
    1a58:	85 30       	cpi	r24, 0x05	; 5
    1a5a:	09 f0       	breq	.+2      	; 0x1a5e <update_funcCnt_y+0x40>
    1a5c:	5f c0       	rjmp	.+190    	; 0x1b1c <update_funcCnt_y+0xfe>
    1a5e:	4a c0       	rjmp	.+148    	; 0x1af4 <update_funcCnt_y+0xd6>
		case 3:
			break;
			
        case 4:
            //only use temp_ADC_val as a temp variable, just not to create an additional one
            temp_ADC_val = (Y_pos_index + function_Y[func_read_index_y]);
    1a60:	e0 91 f0 24 	lds	r30, 0x24F0
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	ee 0f       	add	r30, r30
    1a68:	ff 1f       	adc	r31, r31
    1a6a:	e2 55       	subi	r30, 0x52	; 82
    1a6c:	fa 4d       	sbci	r31, 0xDA	; 218
    1a6e:	01 90       	ld	r0, Z+
    1a70:	f0 81       	ld	r31, Z
    1a72:	e0 2d       	mov	r30, r0
    1a74:	80 91 76 26 	lds	r24, 0x2676
    1a78:	90 91 77 26 	lds	r25, 0x2677
    1a7c:	e8 0f       	add	r30, r24
    1a7e:	f9 1f       	adc	r31, r25
    1a80:	20 91 ab 25 	lds	r18, 0x25AB
    1a84:	30 91 ac 25 	lds	r19, 0x25AC
            if (temp_ADC_val >= 0) {index_y = temp_ADC_val%y_num; }
    1a88:	f7 fd       	sbrc	r31, 7
    1a8a:	09 c0       	rjmp	.+18     	; 0x1a9e <update_funcCnt_y+0x80>
    1a8c:	cf 01       	movw	r24, r30
    1a8e:	b9 01       	movw	r22, r18
    1a90:	0e 94 95 5a 	call	0xb52a	; 0xb52a <__udivmodhi4>
    1a94:	80 93 6e 29 	sts	0x296E, r24
    1a98:	90 93 6f 29 	sts	0x296F, r25
    1a9c:	10 c0       	rjmp	.+32     	; 0x1abe <update_funcCnt_y+0xa0>
            if (temp_ADC_val < 0) {index_y = y_num - ((abs(temp_ADC_val))%y_num) - 1;  } //index_y should always smaller than y_num
    1a9e:	88 27       	eor	r24, r24
    1aa0:	99 27       	eor	r25, r25
    1aa2:	8e 1b       	sub	r24, r30
    1aa4:	9f 0b       	sbc	r25, r31
    1aa6:	b9 01       	movw	r22, r18
    1aa8:	0e 94 95 5a 	call	0xb52a	; 0xb52a <__udivmodhi4>
    1aac:	21 50       	subi	r18, 0x01	; 1
    1aae:	30 40       	sbci	r19, 0x00	; 0
    1ab0:	a9 01       	movw	r20, r18
    1ab2:	48 1b       	sub	r20, r24
    1ab4:	59 0b       	sbc	r21, r25
    1ab6:	40 93 6e 29 	sts	0x296E, r20
    1aba:	50 93 6f 29 	sts	0x296F, r21
            frame_num = index_y*x_num + index_x;
    1abe:	20 91 6e 29 	lds	r18, 0x296E
    1ac2:	30 91 6f 29 	lds	r19, 0x296F
    1ac6:	40 91 b9 27 	lds	r20, 0x27B9
    1aca:	50 91 ba 27 	lds	r21, 0x27BA
    1ace:	80 91 23 28 	lds	r24, 0x2823
    1ad2:	90 91 24 28 	lds	r25, 0x2824
    1ad6:	bc 01       	movw	r22, r24
    1ad8:	26 9f       	mul	r18, r22
    1ada:	c0 01       	movw	r24, r0
    1adc:	27 9f       	mul	r18, r23
    1ade:	90 0d       	add	r25, r0
    1ae0:	36 9f       	mul	r19, r22
    1ae2:	90 0d       	add	r25, r0
    1ae4:	11 24       	eor	r1, r1
    1ae6:	84 0f       	add	r24, r20
    1ae8:	95 1f       	adc	r25, r21
    1aea:	80 93 ed 24 	sts	0x24ED, r24
    1aee:	90 93 ee 24 	sts	0x24EE, r25
    1af2:	08 95       	ret
            break;
	
		case 5:   // in function DBG mode - show the function gen
			//3277 is converted to 1V by DAC, we amplify function value so value 100 is about 1V 
			Y_dac_val = function_Y[func_read_index_y]*33;  
    1af4:	e0 91 f0 24 	lds	r30, 0x24F0
			analogWrite(1, Y_dac_val); // make it a value in the range -32767 - 32767 (-10V - 10V)
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	ee 0f       	add	r30, r30
    1afc:	ff 1f       	adc	r31, r31
    1afe:	e2 55       	subi	r30, 0x52	; 82
    1b00:	fa 4d       	sbci	r31, 0xDA	; 218
    1b02:	80 81       	ld	r24, Z
    1b04:	91 81       	ldd	r25, Z+1	; 0x01
    1b06:	bc 01       	movw	r22, r24
    1b08:	25 e0       	ldi	r18, 0x05	; 5
    1b0a:	66 0f       	add	r22, r22
    1b0c:	77 1f       	adc	r23, r23
    1b0e:	2a 95       	dec	r18
    1b10:	e1 f7       	brne	.-8      	; 0x1b0a <update_funcCnt_y+0xec>
    1b12:	68 0f       	add	r22, r24
    1b14:	79 1f       	adc	r23, r25
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <analogWrite>
    1b1c:	08 95       	ret

00001b1e <update_funcCnt_x>:
    int16_t X_dac_val;
    int16_t temp_ADC_val;


	
	if (!func_buffer_size_x){
    1b1e:	80 91 f3 24 	lds	r24, 0x24F3
    1b22:	88 23       	and	r24, r24
    1b24:	29 f4       	brne	.+10     	; 0x1b30 <update_funcCnt_x+0x12>
		xputs(PSTR("Ring buffer function_x is empty\n"));
    1b26:	81 ef       	ldi	r24, 0xF1	; 241
    1b28:	93 e0       	ldi	r25, 0x03	; 3
    1b2a:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
    1b2e:	08 95       	ret
		return;
	}
	

    func_read_index_x++; 
    1b30:	80 91 ef 24 	lds	r24, 0x24EF
    1b34:	8f 5f       	subi	r24, 0xFF	; 255
    1b36:	80 93 ef 24 	sts	0x24EF, r24
	if (func_read_index_x >= BUFFER_LENGTH/2)
    1b3a:	80 91 ef 24 	lds	r24, 0x24EF
    1b3e:	84 36       	cpi	r24, 0x64	; 100
    1b40:	10 f0       	brcs	.+4      	; 0x1b46 <update_funcCnt_x+0x28>
		func_read_index_x = 0;
    1b42:	10 92 ef 24 	sts	0x24EF, r1
		
    func_buffer_size_x--;
    1b46:	80 91 f3 24 	lds	r24, 0x24F3
    1b4a:	81 50       	subi	r24, 0x01	; 1
    1b4c:	80 93 f3 24 	sts	0x24F3, r24
	
	switch(x_mode){
    1b50:	80 91 b7 27 	lds	r24, 0x27B7
    1b54:	84 30       	cpi	r24, 0x04	; 4
    1b56:	21 f0       	breq	.+8      	; 0x1b60 <update_funcCnt_x+0x42>
    1b58:	85 30       	cpi	r24, 0x05	; 5
    1b5a:	09 f0       	breq	.+2      	; 0x1b5e <update_funcCnt_x+0x40>
    1b5c:	5f c0       	rjmp	.+190    	; 0x1c1c <update_funcCnt_x+0xfe>
    1b5e:	4a c0       	rjmp	.+148    	; 0x1bf4 <update_funcCnt_x+0xd6>
		case 2:
		case 3:
			break;
			
		case 4:
			temp_ADC_val = X_pos_index + function_X[func_read_index_x];
    1b60:	e0 91 ef 24 	lds	r30, 0x24EF
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	ee 0f       	add	r30, r30
    1b68:	ff 1f       	adc	r31, r31
    1b6a:	eb 5d       	subi	r30, 0xDB	; 219
    1b6c:	f7 4d       	sbci	r31, 0xD7	; 215
    1b6e:	01 90       	ld	r0, Z+
    1b70:	f0 81       	ld	r31, Z
    1b72:	e0 2d       	mov	r30, r0
    1b74:	80 91 04 27 	lds	r24, 0x2704
    1b78:	90 91 05 27 	lds	r25, 0x2705
    1b7c:	e8 0f       	add	r30, r24
    1b7e:	f9 1f       	adc	r31, r25
    1b80:	20 91 23 28 	lds	r18, 0x2823
    1b84:	30 91 24 28 	lds	r19, 0x2824
			if (temp_ADC_val >= 0) {index_x = temp_ADC_val%x_num; }
    1b88:	f7 fd       	sbrc	r31, 7
    1b8a:	09 c0       	rjmp	.+18     	; 0x1b9e <update_funcCnt_x+0x80>
    1b8c:	cf 01       	movw	r24, r30
    1b8e:	b9 01       	movw	r22, r18
    1b90:	0e 94 95 5a 	call	0xb52a	; 0xb52a <__udivmodhi4>
    1b94:	80 93 b9 27 	sts	0x27B9, r24
    1b98:	90 93 ba 27 	sts	0x27BA, r25
    1b9c:	10 c0       	rjmp	.+32     	; 0x1bbe <update_funcCnt_x+0xa0>
			if (temp_ADC_val < 0) {index_x = x_num - ((abs(temp_ADC_val))%x_num) -1;} //index_x should already smaller than x_num
    1b9e:	88 27       	eor	r24, r24
    1ba0:	99 27       	eor	r25, r25
    1ba2:	8e 1b       	sub	r24, r30
    1ba4:	9f 0b       	sbc	r25, r31
    1ba6:	b9 01       	movw	r22, r18
    1ba8:	0e 94 95 5a 	call	0xb52a	; 0xb52a <__udivmodhi4>
    1bac:	21 50       	subi	r18, 0x01	; 1
    1bae:	30 40       	sbci	r19, 0x00	; 0
    1bb0:	a9 01       	movw	r20, r18
    1bb2:	48 1b       	sub	r20, r24
    1bb4:	59 0b       	sbc	r21, r25
    1bb6:	40 93 b9 27 	sts	0x27B9, r20
    1bba:	50 93 ba 27 	sts	0x27BA, r21
			frame_num = index_y*x_num + index_x;
    1bbe:	20 91 6e 29 	lds	r18, 0x296E
    1bc2:	30 91 6f 29 	lds	r19, 0x296F
    1bc6:	40 91 b9 27 	lds	r20, 0x27B9
    1bca:	50 91 ba 27 	lds	r21, 0x27BA
    1bce:	80 91 23 28 	lds	r24, 0x2823
    1bd2:	90 91 24 28 	lds	r25, 0x2824
    1bd6:	bc 01       	movw	r22, r24
    1bd8:	26 9f       	mul	r18, r22
    1bda:	c0 01       	movw	r24, r0
    1bdc:	27 9f       	mul	r18, r23
    1bde:	90 0d       	add	r25, r0
    1be0:	36 9f       	mul	r19, r22
    1be2:	90 0d       	add	r25, r0
    1be4:	11 24       	eor	r1, r1
    1be6:	84 0f       	add	r24, r20
    1be8:	95 1f       	adc	r25, r21
    1bea:	80 93 ed 24 	sts	0x24ED, r24
    1bee:	90 93 ee 24 	sts	0x24EE, r25
    1bf2:	08 95       	ret
			break;
			
		case 5:   // in function DBG mode - show the function gen
			//3277 is converted to 1V by DAC, we amplify function value so value 100 is about 1V 
			X_dac_val = function_X[func_read_index_x]*33;
    1bf4:	e0 91 ef 24 	lds	r30, 0x24EF
			analogWrite(0, X_dac_val); // make it a value in the range -32767 - 32767 (-10V - 10V)
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	ee 0f       	add	r30, r30
    1bfc:	ff 1f       	adc	r31, r31
    1bfe:	eb 5d       	subi	r30, 0xDB	; 219
    1c00:	f7 4d       	sbci	r31, 0xD7	; 215
    1c02:	80 81       	ld	r24, Z
    1c04:	91 81       	ldd	r25, Z+1	; 0x01
    1c06:	bc 01       	movw	r22, r24
    1c08:	55 e0       	ldi	r21, 0x05	; 5
    1c0a:	66 0f       	add	r22, r22
    1c0c:	77 1f       	adc	r23, r23
    1c0e:	5a 95       	dec	r21
    1c10:	e1 f7       	brne	.-8      	; 0x1c0a <update_funcCnt_x+0xec>
    1c12:	68 0f       	add	r22, r24
    1c14:	79 1f       	adc	r23, r25
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <analogWrite>
    1c1c:	08 95       	ret

00001c1e <__vector_100>:
}

//external trigger mode for Int3 to start playing pattern

ISR(PORTK_INT0_vect)
{
    1c1e:	1f 92       	push	r1
    1c20:	0f 92       	push	r0
    1c22:	0f b6       	in	r0, 0x3f	; 63
    1c24:	0f 92       	push	r0
    1c26:	08 b6       	in	r0, 0x38	; 56
    1c28:	0f 92       	push	r0
    1c2a:	09 b6       	in	r0, 0x39	; 57
    1c2c:	0f 92       	push	r0
    1c2e:	0b b6       	in	r0, 0x3b	; 59
    1c30:	0f 92       	push	r0
    1c32:	11 24       	eor	r1, r1
    1c34:	18 be       	out	0x38, r1	; 56
    1c36:	19 be       	out	0x39, r1	; 57
    1c38:	1b be       	out	0x3b, r1	; 59
    1c3a:	0f 93       	push	r16
    1c3c:	2f 93       	push	r18
    1c3e:	3f 93       	push	r19
    1c40:	4f 93       	push	r20
    1c42:	5f 93       	push	r21
    1c44:	6f 93       	push	r22
    1c46:	7f 93       	push	r23
    1c48:	8f 93       	push	r24
    1c4a:	9f 93       	push	r25
    1c4c:	af 93       	push	r26
    1c4e:	bf 93       	push	r27
    1c50:	ef 93       	push	r30
    1c52:	ff 93       	push	r31

//set these to zero so that start at beginning of function - useful for putting in a set amount of expansion
func_read_index_x = 0;
    1c54:	10 92 ef 24 	sts	0x24EF, r1
func_read_index_y = 0;
    1c58:	10 92 f0 24 	sts	0x24F0, r1
Stop = 0;
    1c5c:	10 92 9c 20 	sts	0x209C, r1
display_flag = 0;  //clear the display flag
    1c60:	10 92 e8 24 	sts	0x24E8, r1
Reg_Handler(Update_display, UPDATE_RATE, 1, 1);
    1c64:	88 eb       	ldi	r24, 0xB8	; 184
    1c66:	94 e1       	ldi	r25, 0x14	; 20
    1c68:	4e e4       	ldi	r20, 0x4E	; 78
    1c6a:	50 e0       	ldi	r21, 0x00	; 0
    1c6c:	60 e0       	ldi	r22, 0x00	; 0
    1c6e:	70 e0       	ldi	r23, 0x00	; 0
    1c70:	21 e0       	ldi	r18, 0x01	; 1
    1c72:	01 e0       	ldi	r16, 0x01	; 1
    1c74:	0e 94 25 32 	call	0x644a	; 0x644a <Reg_Handler>
Reg_Handler(increment_index_x, UPDATE_RATE, 2, 0); //initilize the 2 and 3 priority interupts to a fast rate so that
    1c78:	86 e5       	ldi	r24, 0x56	; 86
    1c7a:	99 e0       	ldi	r25, 0x09	; 9
    1c7c:	4e e4       	ldi	r20, 0x4E	; 78
    1c7e:	50 e0       	ldi	r21, 0x00	; 0
    1c80:	60 e0       	ldi	r22, 0x00	; 0
    1c82:	70 e0       	ldi	r23, 0x00	; 0
    1c84:	22 e0       	ldi	r18, 0x02	; 2
    1c86:	00 e0       	ldi	r16, 0x00	; 0
    1c88:	0e 94 25 32 	call	0x644a	; 0x644a <Reg_Handler>
Reg_Handler(increment_index_y, UPDATE_RATE, 3, 0); // the countdown is fast until the setting of the next rate
    1c8c:	8e e8       	ldi	r24, 0x8E	; 142
    1c8e:	99 e0       	ldi	r25, 0x09	; 9
    1c90:	4e e4       	ldi	r20, 0x4E	; 78
    1c92:	50 e0       	ldi	r21, 0x00	; 0
    1c94:	60 e0       	ldi	r22, 0x00	; 0
    1c96:	70 e0       	ldi	r23, 0x00	; 0
    1c98:	23 e0       	ldi	r18, 0x03	; 3
    1c9a:	0e 94 25 32 	call	0x644a	; 0x644a <Reg_Handler>
													//by the Update_display interupt.
if (default_func_x)
    1c9e:	80 91 a3 20 	lds	r24, 0x20A3
    1ca2:	88 23       	and	r24, r24
    1ca4:	51 f0       	breq	.+20     	; 0x1cba <__vector_100+0x9c>
	Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);
    1ca6:	40 91 a5 20 	lds	r20, 0x20A5
    1caa:	50 91 a6 20 	lds	r21, 0x20A6
    1cae:	60 e0       	ldi	r22, 0x00	; 0
    1cb0:	70 e0       	ldi	r23, 0x00	; 0
    1cb2:	8f e8       	ldi	r24, 0x8F	; 143
    1cb4:	9d e0       	ldi	r25, 0x0D	; 13
    1cb6:	24 e0       	ldi	r18, 0x04	; 4
    1cb8:	0c c0       	rjmp	.+24     	; 0x1cd2 <__vector_100+0xb4>
else{
	update_funcCnt_x();//add this because the function cnt is updated without delay
    1cba:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <update_funcCnt_x>
	Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1);
    1cbe:	40 91 a5 20 	lds	r20, 0x20A5
    1cc2:	50 91 a6 20 	lds	r21, 0x20A6
    1cc6:	60 e0       	ldi	r22, 0x00	; 0
    1cc8:	70 e0       	ldi	r23, 0x00	; 0
    1cca:	8f e8       	ldi	r24, 0x8F	; 143
    1ccc:	9d e0       	ldi	r25, 0x0D	; 13
    1cce:	24 e0       	ldi	r18, 0x04	; 4
    1cd0:	01 e0       	ldi	r16, 0x01	; 1
    1cd2:	0e 94 25 32 	call	0x644a	; 0x644a <Reg_Handler>
	}
	
if (default_func_y)
    1cd6:	80 91 a4 20 	lds	r24, 0x20A4
    1cda:	88 23       	and	r24, r24
    1cdc:	59 f0       	breq	.+22     	; 0x1cf4 <__vector_100+0xd6>
	Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); 
    1cde:	40 91 a7 20 	lds	r20, 0x20A7
    1ce2:	50 91 a8 20 	lds	r21, 0x20A8
    1ce6:	60 e0       	ldi	r22, 0x00	; 0
    1ce8:	70 e0       	ldi	r23, 0x00	; 0
    1cea:	8f e0       	ldi	r24, 0x0F	; 15
    1cec:	9d e0       	ldi	r25, 0x0D	; 13
    1cee:	25 e0       	ldi	r18, 0x05	; 5
    1cf0:	00 e0       	ldi	r16, 0x00	; 0
    1cf2:	0c c0       	rjmp	.+24     	; 0x1d0c <__vector_100+0xee>
else{
	update_funcCnt_y();//add this because the function cnt is updated without delay
    1cf4:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <update_funcCnt_y>
	Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1); 			
    1cf8:	40 91 a7 20 	lds	r20, 0x20A7
    1cfc:	50 91 a8 20 	lds	r21, 0x20A8
    1d00:	60 e0       	ldi	r22, 0x00	; 0
    1d02:	70 e0       	ldi	r23, 0x00	; 0
    1d04:	8f e0       	ldi	r24, 0x0F	; 15
    1d06:	9d e0       	ldi	r25, 0x0D	; 13
    1d08:	25 e0       	ldi	r18, 0x05	; 5
    1d0a:	01 e0       	ldi	r16, 0x01	; 1
    1d0c:	0e 94 25 32 	call	0x644a	; 0x644a <Reg_Handler>
	}
			

xputs(PSTR("Int3 catches a rising edge trigger!\n"));
    1d10:	82 e3       	ldi	r24, 0x32	; 50
    1d12:	92 e0       	ldi	r25, 0x02	; 2
    1d14:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
}
    1d18:	ff 91       	pop	r31
    1d1a:	ef 91       	pop	r30
    1d1c:	bf 91       	pop	r27
    1d1e:	af 91       	pop	r26
    1d20:	9f 91       	pop	r25
    1d22:	8f 91       	pop	r24
    1d24:	7f 91       	pop	r23
    1d26:	6f 91       	pop	r22
    1d28:	5f 91       	pop	r21
    1d2a:	4f 91       	pop	r20
    1d2c:	3f 91       	pop	r19
    1d2e:	2f 91       	pop	r18
    1d30:	0f 91       	pop	r16
    1d32:	0f 90       	pop	r0
    1d34:	0b be       	out	0x3b, r0	; 59
    1d36:	0f 90       	pop	r0
    1d38:	09 be       	out	0x39, r0	; 57
    1d3a:	0f 90       	pop	r0
    1d3c:	08 be       	out	0x38, r0	; 56
    1d3e:	0f 90       	pop	r0
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	0f 90       	pop	r0
    1d44:	1f 90       	pop	r1
    1d46:	18 95       	reti

00001d48 <set_vel_func>:
            break;
    }
}


void set_vel_func(uint8_t func_channel, uint8_t func_id) {
    1d48:	ae e0       	ldi	r26, 0x0E	; 14
    1d4a:	b2 e0       	ldi	r27, 0x02	; 2
    1d4c:	ea ea       	ldi	r30, 0xAA	; 170
    1d4e:	fe e0       	ldi	r31, 0x0E	; 14
    1d50:	0c 94 05 5b 	jmp	0xb60a	; 0xb60a <__prologue_saves__+0x18>
    1d54:	08 2f       	mov	r16, r24
    1d56:	16 2f       	mov	r17, r22
    //uint8_t func_name_y[100];
    uint8_t res, func_name_len;
    uint8_t velFuncBuff[512];
    
    
    if (func_id < 10)
    1d58:	6a 30       	cpi	r22, 0x0A	; 10
    1d5a:	80 f4       	brcc	.+32     	; 0x1d7c <set_vel_func+0x34>
        sprintf(str, "vel000%d.fun\0", func_id);
    1d5c:	00 d0       	rcall	.+0      	; 0x1d5e <set_vel_func+0x16>
    1d5e:	00 d0       	rcall	.+0      	; 0x1d60 <set_vel_func+0x18>
    1d60:	ed b7       	in	r30, 0x3d	; 61
    1d62:	fe b7       	in	r31, 0x3e	; 62
    1d64:	31 96       	adiw	r30, 0x01	; 1
    1d66:	ce 01       	movw	r24, r28
    1d68:	03 96       	adiw	r24, 0x03	; 3
    1d6a:	ad b7       	in	r26, 0x3d	; 61
    1d6c:	be b7       	in	r27, 0x3e	; 62
    1d6e:	11 96       	adiw	r26, 0x01	; 1
    1d70:	8d 93       	st	X+, r24
    1d72:	9c 93       	st	X, r25
    1d74:	12 97       	sbiw	r26, 0x02	; 2
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	90 e2       	ldi	r25, 0x20	; 32
    1d7a:	1f c0       	rjmp	.+62     	; 0x1dba <set_vel_func+0x72>
    1d7c:	ce 01       	movw	r24, r28
    1d7e:	03 96       	adiw	r24, 0x03	; 3
    else if (func_id < 100)
    1d80:	64 36       	cpi	r22, 0x64	; 100
    1d82:	70 f4       	brcc	.+28     	; 0x1da0 <set_vel_func+0x58>
        sprintf(str, "vel00%d.fun\0", func_id);
    1d84:	00 d0       	rcall	.+0      	; 0x1d86 <set_vel_func+0x3e>
    1d86:	00 d0       	rcall	.+0      	; 0x1d88 <set_vel_func+0x40>
    1d88:	ed b7       	in	r30, 0x3d	; 61
    1d8a:	fe b7       	in	r31, 0x3e	; 62
    1d8c:	31 96       	adiw	r30, 0x01	; 1
    1d8e:	ad b7       	in	r26, 0x3d	; 61
    1d90:	be b7       	in	r27, 0x3e	; 62
    1d92:	11 96       	adiw	r26, 0x01	; 1
    1d94:	8d 93       	st	X+, r24
    1d96:	9c 93       	st	X, r25
    1d98:	12 97       	sbiw	r26, 0x02	; 2
    1d9a:	8e e0       	ldi	r24, 0x0E	; 14
    1d9c:	90 e2       	ldi	r25, 0x20	; 32
    1d9e:	0d c0       	rjmp	.+26     	; 0x1dba <set_vel_func+0x72>
    else if (func_id < 1000)
        sprintf(str, "vel0%d.fun\0", func_id);
    1da0:	00 d0       	rcall	.+0      	; 0x1da2 <set_vel_func+0x5a>
    1da2:	00 d0       	rcall	.+0      	; 0x1da4 <set_vel_func+0x5c>
    1da4:	ed b7       	in	r30, 0x3d	; 61
    1da6:	fe b7       	in	r31, 0x3e	; 62
    1da8:	31 96       	adiw	r30, 0x01	; 1
    1daa:	ad b7       	in	r26, 0x3d	; 61
    1dac:	be b7       	in	r27, 0x3e	; 62
    1dae:	11 96       	adiw	r26, 0x01	; 1
    1db0:	8d 93       	st	X+, r24
    1db2:	9c 93       	st	X, r25
    1db4:	12 97       	sbiw	r26, 0x02	; 2
    1db6:	8b e1       	ldi	r24, 0x1B	; 27
    1db8:	90 e2       	ldi	r25, 0x20	; 32
    1dba:	82 83       	std	Z+2, r24	; 0x02
    1dbc:	93 83       	std	Z+3, r25	; 0x03
    1dbe:	14 83       	std	Z+4, r17	; 0x04
    1dc0:	15 82       	std	Z+5, r1	; 0x05
    1dc2:	0e 94 59 5d 	call	0xbab2	; 0xbab2 <sprintf>
    1dc6:	ed b7       	in	r30, 0x3d	; 61
    1dc8:	fe b7       	in	r31, 0x3e	; 62
    1dca:	36 96       	adiw	r30, 0x06	; 6
    1dcc:	ed bf       	out	0x3d, r30	; 61
    1dce:	fe bf       	out	0x3e, r31	; 62
    else
        xputs(PSTR("function id is too big.\n"));
    
    switch(func_channel) {
    1dd0:	01 30       	cpi	r16, 0x01	; 1
    1dd2:	21 f0       	breq	.+8      	; 0x1ddc <set_vel_func+0x94>
    1dd4:	02 30       	cpi	r16, 0x02	; 2
    1dd6:	09 f0       	breq	.+2      	; 0x1dda <set_vel_func+0x92>
    1dd8:	90 c1       	rjmp	.+800    	; 0x20fa <set_vel_func+0x3b2>
    1dda:	c7 c0       	rjmp	.+398    	; 0x1f6a <set_vel_func+0x222>
        case 1:    //channel x
            //Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0); //disable ISR
            //read the header block and send back the function name
            res = f_close(&file2);
    1ddc:	8b e7       	ldi	r24, 0x7B	; 123
    1dde:	95 e2       	ldi	r25, 0x25	; 37
    1de0:	0e 94 ac 4b 	call	0x9758	; 0x9758 <f_close>
            
            res = f_open(&file2, str, FA_OPEN_EXISTING | FA_READ);
    1de4:	8b e7       	ldi	r24, 0x7B	; 123
    1de6:	95 e2       	ldi	r25, 0x25	; 37
    1de8:	be 01       	movw	r22, r28
    1dea:	6d 5f       	subi	r22, 0xFD	; 253
    1dec:	7f 4f       	sbci	r23, 0xFF	; 255
    1dee:	41 e0       	ldi	r20, 0x01	; 1
    1df0:	0e 94 68 4f 	call	0x9ed0	; 0x9ed0 <f_open>
            
            if (res == FR_OK) {
    1df4:	88 23       	and	r24, r24
    1df6:	09 f0       	breq	.+2      	; 0x1dfa <set_vel_func+0xb2>
    1df8:	44 c0       	rjmp	.+136    	; 0x1e82 <set_vel_func+0x13a>
                
                res = f_read(&file2, velFuncBuff, 512, &cnt);
    1dfa:	8b e7       	ldi	r24, 0x7B	; 123
    1dfc:	95 e2       	ldi	r25, 0x25	; 37
    1dfe:	be 01       	movw	r22, r28
    1e00:	61 5f       	subi	r22, 0xF1	; 241
    1e02:	7f 4f       	sbci	r23, 0xFF	; 255
    1e04:	40 e0       	ldi	r20, 0x00	; 0
    1e06:	52 e0       	ldi	r21, 0x02	; 2
    1e08:	9e 01       	movw	r18, r28
    1e0a:	2f 5f       	subi	r18, 0xFF	; 255
    1e0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e0e:	0e 94 7f 50 	call	0xa0fe	; 0xa0fe <f_read>
                
                if ((res == FR_OK) && (cnt == 512)) {
    1e12:	88 23       	and	r24, r24
    1e14:	99 f5       	brne	.+102    	; 0x1e7c <set_vel_func+0x134>
    1e16:	89 81       	ldd	r24, Y+1	; 0x01
    1e18:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1a:	80 50       	subi	r24, 0x00	; 0
    1e1c:	92 40       	sbci	r25, 0x02	; 2
    1e1e:	71 f5       	brne	.+92     	; 0x1e7c <set_vel_func+0x134>
                    
                    // get the test header info
                    ((uint8_t*)&funcSize_x)[0] = velFuncBuff[0];
    1e20:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e22:	80 93 ab 20 	sts	0x20AB, r24
                    ((uint8_t*)&funcSize_x)[1] = velFuncBuff[1];
    1e26:	88 89       	ldd	r24, Y+16	; 0x10
    1e28:	80 93 ac 20 	sts	0x20AC, r24
                    ((uint8_t*)&funcSize_x)[2] = velFuncBuff[2];
    1e2c:	89 89       	ldd	r24, Y+17	; 0x11
    1e2e:	80 93 ad 20 	sts	0x20AD, r24
                    ((uint8_t*)&funcSize_x)[3] = velFuncBuff[3];
    1e32:	8a 89       	ldd	r24, Y+18	; 0x12
    1e34:	80 93 ae 20 	sts	0x20AE, r24
                    func_name_len = velFuncBuff[4];
                    
                    func_ID_X = func_id;
    1e38:	10 93 f5 24 	sts	0x24F5, r17
    1e3c:	10 92 f6 24 	sts	0x24F6, r1
                    
                    Stop = 1;
    1e40:	00 93 9c 20 	sts	0x209C, r16
                    display_flag = 0;  //clear the display flag
    1e44:	10 92 e8 24 	sts	0x24E8, r1
                    if (quiet_mode_on == 0)
    1e48:	80 91 b3 20 	lds	r24, 0x20B3
    1e4c:	88 23       	and	r24, r24
    1e4e:	e9 f4       	brne	.+58     	; 0x1e8a <set_vel_func+0x142>
                        xprintf(PSTR("Setting velocity function  %u for X\n"), func_id);
    1e50:	00 d0       	rcall	.+0      	; 0x1e52 <set_vel_func+0x10a>
    1e52:	0f 92       	push	r0
    1e54:	ed b7       	in	r30, 0x3d	; 61
    1e56:	fe b7       	in	r31, 0x3e	; 62
    1e58:	31 96       	adiw	r30, 0x01	; 1
    1e5a:	83 e5       	ldi	r24, 0x53	; 83
    1e5c:	95 e0       	ldi	r25, 0x05	; 5
    1e5e:	ad b7       	in	r26, 0x3d	; 61
    1e60:	be b7       	in	r27, 0x3e	; 62
    1e62:	11 96       	adiw	r26, 0x01	; 1
    1e64:	8d 93       	st	X+, r24
    1e66:	9c 93       	st	X, r25
    1e68:	12 97       	sbiw	r26, 0x02	; 2
    1e6a:	12 83       	std	Z+2, r17	; 0x02
    1e6c:	13 82       	std	Z+3, r1	; 0x03
    1e6e:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	07 c0       	rjmp	.+14     	; 0x1e8a <set_vel_func+0x142>
                    
                } else {
                        xputs(PSTR("Error f_read in set_vel_func X.\n"));
    1e7c:	82 e3       	ldi	r24, 0x32	; 50
    1e7e:	95 e0       	ldi	r25, 0x05	; 5
    1e80:	02 c0       	rjmp	.+4      	; 0x1e86 <set_vel_func+0x13e>
                }
            } else {
                    xputs(PSTR("Error f_open in set_vel_func X.\n"));
    1e82:	81 e1       	ldi	r24, 0x11	; 17
    1e84:	95 e0       	ldi	r25, 0x05	; 5
    1e86:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
            }
			
			last_load_x = funcSize_x % FUNCTION_LENGTH;
    1e8a:	e0 90 ab 20 	lds	r14, 0x20AB
    1e8e:	f0 90 ac 20 	lds	r15, 0x20AC
    1e92:	00 91 ad 20 	lds	r16, 0x20AD
    1e96:	10 91 ae 20 	lds	r17, 0x20AE
    1e9a:	c8 01       	movw	r24, r16
    1e9c:	b7 01       	movw	r22, r14
    1e9e:	24 e6       	ldi	r18, 0x64	; 100
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	40 e0       	ldi	r20, 0x00	; 0
    1ea4:	50 e0       	ldi	r21, 0x00	; 0
    1ea6:	0e 94 bc 5a 	call	0xb578	; 0xb578 <__udivmodsi4>
    1eaa:	60 93 f9 24 	sts	0x24F9, r22
    1eae:	70 93 fa 24 	sts	0x24FA, r23
			
			if(last_load_x == 0)
    1eb2:	67 2b       	or	r22, r23
    1eb4:	49 f4       	brne	.+18     	; 0x1ec8 <set_vel_func+0x180>
					num_buffer_load_x = funcSize_x/FUNCTION_LENGTH;
    1eb6:	c8 01       	movw	r24, r16
    1eb8:	b7 01       	movw	r22, r14
    1eba:	24 e6       	ldi	r18, 0x64	; 100
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	40 e0       	ldi	r20, 0x00	; 0
    1ec0:	50 e0       	ldi	r21, 0x00	; 0
    1ec2:	0e 94 bc 5a 	call	0xb578	; 0xb578 <__udivmodsi4>
    1ec6:	0a c0       	rjmp	.+20     	; 0x1edc <set_vel_func+0x194>
			else
					num_buffer_load_x = funcSize_x / FUNCTION_LENGTH + 1;
    1ec8:	c8 01       	movw	r24, r16
    1eca:	b7 01       	movw	r22, r14
    1ecc:	24 e6       	ldi	r18, 0x64	; 100
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	40 e0       	ldi	r20, 0x00	; 0
    1ed2:	50 e0       	ldi	r21, 0x00	; 0
    1ed4:	0e 94 bc 5a 	call	0xb578	; 0xb578 <__udivmodsi4>
    1ed8:	2f 5f       	subi	r18, 0xFF	; 255
    1eda:	3f 4f       	sbci	r19, 0xFF	; 255
    1edc:	20 93 b4 20 	sts	0x20B4, r18
    1ee0:	30 93 b5 20 	sts	0x20B5, r19
				
			
			if (quiet_mode_on == 0)
    1ee4:	80 91 b3 20 	lds	r24, 0x20B3
    1ee8:	88 23       	and	r24, r24
    1eea:	c1 f5       	brne	.+112    	; 0x1f5c <set_vel_func+0x214>
			{
				xprintf(PSTR("funcSize_x = %u\n"), funcSize_x);
    1eec:	00 d0       	rcall	.+0      	; 0x1eee <set_vel_func+0x1a6>
    1eee:	00 d0       	rcall	.+0      	; 0x1ef0 <set_vel_func+0x1a8>
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	95 e0       	ldi	r25, 0x05	; 5
    1ef4:	ed b7       	in	r30, 0x3d	; 61
    1ef6:	fe b7       	in	r31, 0x3e	; 62
    1ef8:	81 83       	std	Z+1, r24	; 0x01
    1efa:	92 83       	std	Z+2, r25	; 0x02
    1efc:	ad b7       	in	r26, 0x3d	; 61
    1efe:	be b7       	in	r27, 0x3e	; 62
    1f00:	13 96       	adiw	r26, 0x03	; 3
    1f02:	ed 92       	st	X+, r14
    1f04:	fd 92       	st	X+, r15
    1f06:	0d 93       	st	X+, r16
    1f08:	1c 93       	st	X, r17
    1f0a:	16 97       	sbiw	r26, 0x06	; 6
    1f0c:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
				xprintf(PSTR("last_load_x = %u\n"), last_load_x);
    1f10:	0f 90       	pop	r0
    1f12:	0f 90       	pop	r0
    1f14:	8e ee       	ldi	r24, 0xEE	; 238
    1f16:	94 e0       	ldi	r25, 0x04	; 4
    1f18:	ed b7       	in	r30, 0x3d	; 61
    1f1a:	fe b7       	in	r31, 0x3e	; 62
    1f1c:	81 83       	std	Z+1, r24	; 0x01
    1f1e:	92 83       	std	Z+2, r25	; 0x02
    1f20:	80 91 f9 24 	lds	r24, 0x24F9
    1f24:	90 91 fa 24 	lds	r25, 0x24FA
    1f28:	83 83       	std	Z+3, r24	; 0x03
    1f2a:	94 83       	std	Z+4, r25	; 0x04
    1f2c:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
				xprintf(PSTR("num_buffer_load_x = %u\n"), num_buffer_load_x);			
    1f30:	86 ed       	ldi	r24, 0xD6	; 214
    1f32:	94 e0       	ldi	r25, 0x04	; 4
    1f34:	ad b7       	in	r26, 0x3d	; 61
    1f36:	be b7       	in	r27, 0x3e	; 62
    1f38:	11 96       	adiw	r26, 0x01	; 1
    1f3a:	8d 93       	st	X+, r24
    1f3c:	9c 93       	st	X, r25
    1f3e:	12 97       	sbiw	r26, 0x02	; 2
    1f40:	80 91 b4 20 	lds	r24, 0x20B4
    1f44:	90 91 b5 20 	lds	r25, 0x20B5
    1f48:	13 96       	adiw	r26, 0x03	; 3
    1f4a:	8d 93       	st	X+, r24
    1f4c:	9c 93       	st	X, r25
    1f4e:	14 97       	sbiw	r26, 0x04	; 4
    1f50:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	0f 90       	pop	r0
    1f5a:	0f 90       	pop	r0
			}
			
			default_func_x = 0;
    1f5c:	10 92 a3 20 	sts	0x20A3, r1
			
			//update the function buffer
			fetch_update_funcX(1,0);
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	60 e0       	ldi	r22, 0x00	; 0
    1f64:	0e 94 4b 0c 	call	0x1896	; 0x1896 <fetch_update_funcX>
    1f68:	cc c0       	rjmp	.+408    	; 0x2102 <set_vel_func+0x3ba>
            
        case 2:
            
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); //disable ISR
            
            res = f_close(&file3);
    1f6a:	86 e0       	ldi	r24, 0x06	; 6
    1f6c:	97 e2       	ldi	r25, 0x27	; 39
    1f6e:	0e 94 ac 4b 	call	0x9758	; 0x9758 <f_close>
            
            //read the header block and send back the function name
            res = f_open(&file3, str, FA_OPEN_EXISTING | FA_READ);
    1f72:	86 e0       	ldi	r24, 0x06	; 6
    1f74:	97 e2       	ldi	r25, 0x27	; 39
    1f76:	be 01       	movw	r22, r28
    1f78:	6d 5f       	subi	r22, 0xFD	; 253
    1f7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7c:	41 e0       	ldi	r20, 0x01	; 1
    1f7e:	0e 94 68 4f 	call	0x9ed0	; 0x9ed0 <f_open>
            
            if (res == FR_OK) {
    1f82:	88 23       	and	r24, r24
    1f84:	09 f0       	breq	.+2      	; 0x1f88 <set_vel_func+0x240>
    1f86:	45 c0       	rjmp	.+138    	; 0x2012 <set_vel_func+0x2ca>
                
                res = f_read(&file3, velFuncBuff, 512, &cnt);
    1f88:	86 e0       	ldi	r24, 0x06	; 6
    1f8a:	97 e2       	ldi	r25, 0x27	; 39
    1f8c:	be 01       	movw	r22, r28
    1f8e:	61 5f       	subi	r22, 0xF1	; 241
    1f90:	7f 4f       	sbci	r23, 0xFF	; 255
    1f92:	40 e0       	ldi	r20, 0x00	; 0
    1f94:	52 e0       	ldi	r21, 0x02	; 2
    1f96:	9e 01       	movw	r18, r28
    1f98:	2f 5f       	subi	r18, 0xFF	; 255
    1f9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f9c:	0e 94 7f 50 	call	0xa0fe	; 0xa0fe <f_read>
                
                if ((res == FR_OK) && (cnt == 512)) {
    1fa0:	88 23       	and	r24, r24
    1fa2:	a1 f5       	brne	.+104    	; 0x200c <set_vel_func+0x2c4>
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa8:	80 50       	subi	r24, 0x00	; 0
    1faa:	92 40       	sbci	r25, 0x02	; 2
    1fac:	79 f5       	brne	.+94     	; 0x200c <set_vel_func+0x2c4>
                    // get the test header info
                    ((uint8_t*)&funcSize_y)[0] = velFuncBuff[0];
    1fae:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fb0:	80 93 af 20 	sts	0x20AF, r24
                    ((uint8_t*)&funcSize_y)[1] = velFuncBuff[1];
    1fb4:	88 89       	ldd	r24, Y+16	; 0x10
    1fb6:	80 93 b0 20 	sts	0x20B0, r24
                    ((uint8_t*)&funcSize_y)[2] = velFuncBuff[2];
    1fba:	89 89       	ldd	r24, Y+17	; 0x11
    1fbc:	80 93 b1 20 	sts	0x20B1, r24
                    ((uint8_t*)&funcSize_y)[3] = velFuncBuff[3];
    1fc0:	8a 89       	ldd	r24, Y+18	; 0x12
    1fc2:	80 93 b2 20 	sts	0x20B2, r24
                    func_name_len = velFuncBuff[4];
                    
                    func_ID_Y = func_id;
    1fc6:	10 93 f7 24 	sts	0x24F7, r17
    1fca:	10 92 f8 24 	sts	0x24F8, r1
                    
                    Stop = 1;
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	80 93 9c 20 	sts	0x209C, r24
                    display_flag = 0;  //clear the display flag
    1fd4:	10 92 e8 24 	sts	0x24E8, r1
                    if (quiet_mode_on == 0)
    1fd8:	80 91 b3 20 	lds	r24, 0x20B3
    1fdc:	88 23       	and	r24, r24
    1fde:	e9 f4       	brne	.+58     	; 0x201a <set_vel_func+0x2d2>
                        xprintf(PSTR("Setting velocity function %u for Y\n"), func_id);
    1fe0:	00 d0       	rcall	.+0      	; 0x1fe2 <set_vel_func+0x29a>
    1fe2:	0f 92       	push	r0
    1fe4:	ed b7       	in	r30, 0x3d	; 61
    1fe6:	fe b7       	in	r31, 0x3e	; 62
    1fe8:	31 96       	adiw	r30, 0x01	; 1
    1fea:	82 eb       	ldi	r24, 0xB2	; 178
    1fec:	94 e0       	ldi	r25, 0x04	; 4
    1fee:	ad b7       	in	r26, 0x3d	; 61
    1ff0:	be b7       	in	r27, 0x3e	; 62
    1ff2:	11 96       	adiw	r26, 0x01	; 1
    1ff4:	8d 93       	st	X+, r24
    1ff6:	9c 93       	st	X, r25
    1ff8:	12 97       	sbiw	r26, 0x02	; 2
    1ffa:	12 83       	std	Z+2, r17	; 0x02
    1ffc:	13 82       	std	Z+3, r1	; 0x03
    1ffe:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
    2006:	0f 90       	pop	r0
    2008:	0f 90       	pop	r0
    200a:	07 c0       	rjmp	.+14     	; 0x201a <set_vel_func+0x2d2>
                    
                } else {
                        xputs(PSTR("Error f_read in set_vel_func Y.\n"));
    200c:	81 e9       	ldi	r24, 0x91	; 145
    200e:	94 e0       	ldi	r25, 0x04	; 4
    2010:	02 c0       	rjmp	.+4      	; 0x2016 <set_vel_func+0x2ce>
                }
            } else {
                    xputs(PSTR("Error f_open in set_vel_func Y.\n"));
    2012:	80 e7       	ldi	r24, 0x70	; 112
    2014:	94 e0       	ldi	r25, 0x04	; 4
    2016:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
            }
			
			last_load_y = funcSize_y % FUNCTION_LENGTH;
    201a:	e0 90 af 20 	lds	r14, 0x20AF
    201e:	f0 90 b0 20 	lds	r15, 0x20B0
    2022:	00 91 b1 20 	lds	r16, 0x20B1
    2026:	10 91 b2 20 	lds	r17, 0x20B2
    202a:	c8 01       	movw	r24, r16
    202c:	b7 01       	movw	r22, r14
    202e:	24 e6       	ldi	r18, 0x64	; 100
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	40 e0       	ldi	r20, 0x00	; 0
    2034:	50 e0       	ldi	r21, 0x00	; 0
    2036:	0e 94 bc 5a 	call	0xb578	; 0xb578 <__udivmodsi4>
    203a:	60 93 fb 24 	sts	0x24FB, r22
    203e:	70 93 fc 24 	sts	0x24FC, r23
			
			if (last_load_y == 0)
    2042:	67 2b       	or	r22, r23
    2044:	49 f4       	brne	.+18     	; 0x2058 <set_vel_func+0x310>
				num_buffer_load_y = funcSize_y / FUNCTION_LENGTH;		
    2046:	c8 01       	movw	r24, r16
    2048:	b7 01       	movw	r22, r14
    204a:	24 e6       	ldi	r18, 0x64	; 100
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	40 e0       	ldi	r20, 0x00	; 0
    2050:	50 e0       	ldi	r21, 0x00	; 0
    2052:	0e 94 bc 5a 	call	0xb578	; 0xb578 <__udivmodsi4>
    2056:	0a c0       	rjmp	.+20     	; 0x206c <set_vel_func+0x324>
			else
				num_buffer_load_y = funcSize_y / FUNCTION_LENGTH + 1;
    2058:	c8 01       	movw	r24, r16
    205a:	b7 01       	movw	r22, r14
    205c:	24 e6       	ldi	r18, 0x64	; 100
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e0       	ldi	r20, 0x00	; 0
    2062:	50 e0       	ldi	r21, 0x00	; 0
    2064:	0e 94 bc 5a 	call	0xb578	; 0xb578 <__udivmodsi4>
    2068:	2f 5f       	subi	r18, 0xFF	; 255
    206a:	3f 4f       	sbci	r19, 0xFF	; 255
    206c:	20 93 b6 20 	sts	0x20B6, r18
    2070:	30 93 b7 20 	sts	0x20B7, r19
			
		
			if (quiet_mode_on == 0){
    2074:	80 91 b3 20 	lds	r24, 0x20B3
    2078:	88 23       	and	r24, r24
    207a:	c1 f5       	brne	.+112    	; 0x20ec <set_vel_func+0x3a4>
				xprintf(PSTR("funcSize_y = %u\n"), funcSize_y);
    207c:	00 d0       	rcall	.+0      	; 0x207e <set_vel_func+0x336>
    207e:	00 d0       	rcall	.+0      	; 0x2080 <set_vel_func+0x338>
    2080:	8f e5       	ldi	r24, 0x5F	; 95
    2082:	94 e0       	ldi	r25, 0x04	; 4
    2084:	ed b7       	in	r30, 0x3d	; 61
    2086:	fe b7       	in	r31, 0x3e	; 62
    2088:	81 83       	std	Z+1, r24	; 0x01
    208a:	92 83       	std	Z+2, r25	; 0x02
    208c:	ad b7       	in	r26, 0x3d	; 61
    208e:	be b7       	in	r27, 0x3e	; 62
    2090:	13 96       	adiw	r26, 0x03	; 3
    2092:	ed 92       	st	X+, r14
    2094:	fd 92       	st	X+, r15
    2096:	0d 93       	st	X+, r16
    2098:	1c 93       	st	X, r17
    209a:	16 97       	sbiw	r26, 0x06	; 6
    209c:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
				xprintf(PSTR("last_load_y = %u\n"), last_load_y);
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	8d e4       	ldi	r24, 0x4D	; 77
    20a6:	94 e0       	ldi	r25, 0x04	; 4
    20a8:	ed b7       	in	r30, 0x3d	; 61
    20aa:	fe b7       	in	r31, 0x3e	; 62
    20ac:	81 83       	std	Z+1, r24	; 0x01
    20ae:	92 83       	std	Z+2, r25	; 0x02
    20b0:	80 91 fb 24 	lds	r24, 0x24FB
    20b4:	90 91 fc 24 	lds	r25, 0x24FC
    20b8:	83 83       	std	Z+3, r24	; 0x03
    20ba:	94 83       	std	Z+4, r25	; 0x04
    20bc:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
				xprintf(PSTR("num_buffer_load_y = %u\n"), num_buffer_load_y);			
    20c0:	85 e3       	ldi	r24, 0x35	; 53
    20c2:	94 e0       	ldi	r25, 0x04	; 4
    20c4:	ad b7       	in	r26, 0x3d	; 61
    20c6:	be b7       	in	r27, 0x3e	; 62
    20c8:	11 96       	adiw	r26, 0x01	; 1
    20ca:	8d 93       	st	X+, r24
    20cc:	9c 93       	st	X, r25
    20ce:	12 97       	sbiw	r26, 0x02	; 2
    20d0:	80 91 b6 20 	lds	r24, 0x20B6
    20d4:	90 91 b7 20 	lds	r25, 0x20B7
    20d8:	13 96       	adiw	r26, 0x03	; 3
    20da:	8d 93       	st	X+, r24
    20dc:	9c 93       	st	X, r25
    20de:	14 97       	sbiw	r26, 0x04	; 4
    20e0:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    20e4:	0f 90       	pop	r0
    20e6:	0f 90       	pop	r0
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
			}
			
			default_func_y = 0;
    20ec:	10 92 a4 20 	sts	0x20A4, r1
			
			//update function buffer
            fetch_update_funcY(1,0);
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	60 e0       	ldi	r22, 0x00	; 0
    20f4:	0e 94 87 0b 	call	0x170e	; 0x170e <fetch_update_funcY>
    20f8:	04 c0       	rjmp	.+8      	; 0x2102 <set_vel_func+0x3ba>
			
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1); //enable ISR
            break;
            
        default:
                xputs(PSTR("Error input for function channel.\n"));
    20fa:	82 e1       	ldi	r24, 0x12	; 18
    20fc:	94 e0       	ldi	r25, 0x04	; 4
    20fe:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
            break;
    }
}
    2102:	c2 5f       	subi	r28, 0xF2	; 242
    2104:	dd 4f       	sbci	r29, 0xFD	; 253
    2106:	e6 e0       	ldi	r30, 0x06	; 6
    2108:	0c 94 21 5b 	jmp	0xb642	; 0xb642 <__epilogue_restores__+0x18>

0000210c <set_pos_func>:
    }
    
}


void set_pos_func(uint8_t func_channel, uint8_t func_id) {
    210c:	ae e0       	ldi	r26, 0x0E	; 14
    210e:	b2 e0       	ldi	r27, 0x02	; 2
    2110:	ec e8       	ldi	r30, 0x8C	; 140
    2112:	f0 e1       	ldi	r31, 0x10	; 16
    2114:	0c 94 05 5b 	jmp	0xb60a	; 0xb60a <__prologue_saves__+0x18>
    2118:	08 2f       	mov	r16, r24
    211a:	16 2f       	mov	r17, r22
    //uint8_t func_name_y[100];
    uint8_t res, func_name_len;
    uint8_t posFuncBuff[512];
    
    
    if (func_id < 10)
    211c:	6a 30       	cpi	r22, 0x0A	; 10
    211e:	80 f4       	brcc	.+32     	; 0x2140 <set_pos_func+0x34>
        sprintf(str, "pos000%d.fun\0", func_id);
    2120:	00 d0       	rcall	.+0      	; 0x2122 <set_pos_func+0x16>
    2122:	00 d0       	rcall	.+0      	; 0x2124 <set_pos_func+0x18>
    2124:	ed b7       	in	r30, 0x3d	; 61
    2126:	fe b7       	in	r31, 0x3e	; 62
    2128:	31 96       	adiw	r30, 0x01	; 1
    212a:	ce 01       	movw	r24, r28
    212c:	03 96       	adiw	r24, 0x03	; 3
    212e:	ad b7       	in	r26, 0x3d	; 61
    2130:	be b7       	in	r27, 0x3e	; 62
    2132:	11 96       	adiw	r26, 0x01	; 1
    2134:	8d 93       	st	X+, r24
    2136:	9c 93       	st	X, r25
    2138:	12 97       	sbiw	r26, 0x02	; 2
    213a:	87 e2       	ldi	r24, 0x27	; 39
    213c:	90 e2       	ldi	r25, 0x20	; 32
    213e:	1f c0       	rjmp	.+62     	; 0x217e <set_pos_func+0x72>
    2140:	ce 01       	movw	r24, r28
    2142:	03 96       	adiw	r24, 0x03	; 3
    else if (func_id < 100)
    2144:	64 36       	cpi	r22, 0x64	; 100
    2146:	70 f4       	brcc	.+28     	; 0x2164 <set_pos_func+0x58>
        sprintf(str, "pos00%d.fun\0", func_id);
    2148:	00 d0       	rcall	.+0      	; 0x214a <set_pos_func+0x3e>
    214a:	00 d0       	rcall	.+0      	; 0x214c <set_pos_func+0x40>
    214c:	ed b7       	in	r30, 0x3d	; 61
    214e:	fe b7       	in	r31, 0x3e	; 62
    2150:	31 96       	adiw	r30, 0x01	; 1
    2152:	ad b7       	in	r26, 0x3d	; 61
    2154:	be b7       	in	r27, 0x3e	; 62
    2156:	11 96       	adiw	r26, 0x01	; 1
    2158:	8d 93       	st	X+, r24
    215a:	9c 93       	st	X, r25
    215c:	12 97       	sbiw	r26, 0x02	; 2
    215e:	85 e3       	ldi	r24, 0x35	; 53
    2160:	90 e2       	ldi	r25, 0x20	; 32
    2162:	0d c0       	rjmp	.+26     	; 0x217e <set_pos_func+0x72>
    else if (func_id < 1000)
        sprintf(str, "pos0%d.fun\0", func_id);
    2164:	00 d0       	rcall	.+0      	; 0x2166 <set_pos_func+0x5a>
    2166:	00 d0       	rcall	.+0      	; 0x2168 <set_pos_func+0x5c>
    2168:	ed b7       	in	r30, 0x3d	; 61
    216a:	fe b7       	in	r31, 0x3e	; 62
    216c:	31 96       	adiw	r30, 0x01	; 1
    216e:	ad b7       	in	r26, 0x3d	; 61
    2170:	be b7       	in	r27, 0x3e	; 62
    2172:	11 96       	adiw	r26, 0x01	; 1
    2174:	8d 93       	st	X+, r24
    2176:	9c 93       	st	X, r25
    2178:	12 97       	sbiw	r26, 0x02	; 2
    217a:	82 e4       	ldi	r24, 0x42	; 66
    217c:	90 e2       	ldi	r25, 0x20	; 32
    217e:	82 83       	std	Z+2, r24	; 0x02
    2180:	93 83       	std	Z+3, r25	; 0x03
    2182:	14 83       	std	Z+4, r17	; 0x04
    2184:	15 82       	std	Z+5, r1	; 0x05
    2186:	0e 94 59 5d 	call	0xbab2	; 0xbab2 <sprintf>
    218a:	ed b7       	in	r30, 0x3d	; 61
    218c:	fe b7       	in	r31, 0x3e	; 62
    218e:	36 96       	adiw	r30, 0x06	; 6
    2190:	ed bf       	out	0x3d, r30	; 61
    2192:	fe bf       	out	0x3e, r31	; 62
    else
        xputs(PSTR("function id is too big.\n"));
    
    switch(func_channel) {
    2194:	01 30       	cpi	r16, 0x01	; 1
    2196:	21 f0       	breq	.+8      	; 0x21a0 <set_pos_func+0x94>
    2198:	02 30       	cpi	r16, 0x02	; 2
    219a:	09 f0       	breq	.+2      	; 0x219e <set_pos_func+0x92>
    219c:	94 c1       	rjmp	.+808    	; 0x24c6 <set_pos_func+0x3ba>
    219e:	c7 c0       	rjmp	.+398    	; 0x232e <set_pos_func+0x222>
        case 1:    //channel x
            //read the header block and send back the function name
            //Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);//disable ISR
            
            res = f_close(&file2);
    21a0:	8b e7       	ldi	r24, 0x7B	; 123
    21a2:	95 e2       	ldi	r25, 0x25	; 37
    21a4:	0e 94 ac 4b 	call	0x9758	; 0x9758 <f_close>
            
            res = f_open(&file2, str, FA_OPEN_EXISTING | FA_READ);
    21a8:	8b e7       	ldi	r24, 0x7B	; 123
    21aa:	95 e2       	ldi	r25, 0x25	; 37
    21ac:	be 01       	movw	r22, r28
    21ae:	6d 5f       	subi	r22, 0xFD	; 253
    21b0:	7f 4f       	sbci	r23, 0xFF	; 255
    21b2:	41 e0       	ldi	r20, 0x01	; 1
    21b4:	0e 94 68 4f 	call	0x9ed0	; 0x9ed0 <f_open>
            if (res == FR_OK) {
    21b8:	88 23       	and	r24, r24
    21ba:	09 f0       	breq	.+2      	; 0x21be <set_pos_func+0xb2>
    21bc:	44 c0       	rjmp	.+136    	; 0x2246 <set_pos_func+0x13a>
                res = f_read(&file2, posFuncBuff, 512, &cnt);
    21be:	8b e7       	ldi	r24, 0x7B	; 123
    21c0:	95 e2       	ldi	r25, 0x25	; 37
    21c2:	be 01       	movw	r22, r28
    21c4:	61 5f       	subi	r22, 0xF1	; 241
    21c6:	7f 4f       	sbci	r23, 0xFF	; 255
    21c8:	40 e0       	ldi	r20, 0x00	; 0
    21ca:	52 e0       	ldi	r21, 0x02	; 2
    21cc:	9e 01       	movw	r18, r28
    21ce:	2f 5f       	subi	r18, 0xFF	; 255
    21d0:	3f 4f       	sbci	r19, 0xFF	; 255
    21d2:	0e 94 7f 50 	call	0xa0fe	; 0xa0fe <f_read>
                if ((res == FR_OK) && (cnt == 512)) {
    21d6:	88 23       	and	r24, r24
    21d8:	99 f5       	brne	.+102    	; 0x2240 <set_pos_func+0x134>
    21da:	89 81       	ldd	r24, Y+1	; 0x01
    21dc:	9a 81       	ldd	r25, Y+2	; 0x02
    21de:	80 50       	subi	r24, 0x00	; 0
    21e0:	92 40       	sbci	r25, 0x02	; 2
    21e2:	71 f5       	brne	.+92     	; 0x2240 <set_pos_func+0x134>
                    // get the test header info
                    ((uint8_t*)&funcSize_x)[0] = posFuncBuff[0];
    21e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    21e6:	80 93 ab 20 	sts	0x20AB, r24
                    ((uint8_t*)&funcSize_x)[1] = posFuncBuff[1];
    21ea:	88 89       	ldd	r24, Y+16	; 0x10
    21ec:	80 93 ac 20 	sts	0x20AC, r24
                    ((uint8_t*)&funcSize_x)[2] = posFuncBuff[2];
    21f0:	89 89       	ldd	r24, Y+17	; 0x11
    21f2:	80 93 ad 20 	sts	0x20AD, r24
                    ((uint8_t*)&funcSize_x)[3] = posFuncBuff[3];
    21f6:	8a 89       	ldd	r24, Y+18	; 0x12
    21f8:	80 93 ae 20 	sts	0x20AE, r24
                    
                    //for (tmpCnt=0; tmpCnt<func_name_len; tmpCnt++)
                    //	{func_name_x[tmpCnt] = posFuncBuff[tmpCnt+5];}
                    //func_name_x[func_name_len] = '\0';
                    
                    func_ID_X = func_id;
    21fc:	10 93 f5 24 	sts	0x24F5, r17
    2200:	10 92 f6 24 	sts	0x24F6, r1
                    
                    Stop = 1;
    2204:	00 93 9c 20 	sts	0x209C, r16
                    display_flag = 0;  //clear the display flag
    2208:	10 92 e8 24 	sts	0x24E8, r1
                    if (quiet_mode_on == 0)
    220c:	80 91 b3 20 	lds	r24, 0x20B3
    2210:	88 23       	and	r24, r24
    2212:	e9 f4       	brne	.+58     	; 0x224e <set_pos_func+0x142>
                        xprintf(PSTR("Setting position function %u for X\n"), func_id);
    2214:	00 d0       	rcall	.+0      	; 0x2216 <set_pos_func+0x10a>
    2216:	0f 92       	push	r0
    2218:	ed b7       	in	r30, 0x3d	; 61
    221a:	fe b7       	in	r31, 0x3e	; 62
    221c:	31 96       	adiw	r30, 0x01	; 1
    221e:	83 eb       	ldi	r24, 0xB3	; 179
    2220:	96 e0       	ldi	r25, 0x06	; 6
    2222:	ad b7       	in	r26, 0x3d	; 61
    2224:	be b7       	in	r27, 0x3e	; 62
    2226:	11 96       	adiw	r26, 0x01	; 1
    2228:	8d 93       	st	X+, r24
    222a:	9c 93       	st	X, r25
    222c:	12 97       	sbiw	r26, 0x02	; 2
    222e:	12 83       	std	Z+2, r17	; 0x02
    2230:	13 82       	std	Z+3, r1	; 0x03
    2232:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    2236:	0f 90       	pop	r0
    2238:	0f 90       	pop	r0
    223a:	0f 90       	pop	r0
    223c:	0f 90       	pop	r0
    223e:	07 c0       	rjmp	.+14     	; 0x224e <set_pos_func+0x142>
                    //xprintf(PSTR("fun X: %s\n function X size: %lu bytes\n"),
                    //        func_name_x, funcSize_x);
                    
                } else 
                        xputs(PSTR("Error f_read set_pos_func X\n"));
    2240:	86 e9       	ldi	r24, 0x96	; 150
    2242:	96 e0       	ldi	r25, 0x06	; 6
    2244:	02 c0       	rjmp	.+4      	; 0x224a <set_pos_func+0x13e>
            } else 
                    xputs(PSTR("Error f_open in set_pos_func X.\n"));
    2246:	85 e7       	ldi	r24, 0x75	; 117
    2248:	96 e0       	ldi	r25, 0x06	; 6
    224a:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
					
	
			last_load_x = funcSize_x % FUNCTION_LENGTH;
    224e:	e0 90 ab 20 	lds	r14, 0x20AB
    2252:	f0 90 ac 20 	lds	r15, 0x20AC
    2256:	00 91 ad 20 	lds	r16, 0x20AD
    225a:	10 91 ae 20 	lds	r17, 0x20AE
    225e:	c8 01       	movw	r24, r16
    2260:	b7 01       	movw	r22, r14
    2262:	24 e6       	ldi	r18, 0x64	; 100
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	40 e0       	ldi	r20, 0x00	; 0
    2268:	50 e0       	ldi	r21, 0x00	; 0
    226a:	0e 94 bc 5a 	call	0xb578	; 0xb578 <__udivmodsi4>
    226e:	60 93 f9 24 	sts	0x24F9, r22
    2272:	70 93 fa 24 	sts	0x24FA, r23
			if (last_load_x == 0)
    2276:	67 2b       	or	r22, r23
    2278:	49 f4       	brne	.+18     	; 0x228c <set_pos_func+0x180>
				num_buffer_load_x = funcSize_x / FUNCTION_LENGTH;
    227a:	c8 01       	movw	r24, r16
    227c:	b7 01       	movw	r22, r14
    227e:	24 e6       	ldi	r18, 0x64	; 100
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	40 e0       	ldi	r20, 0x00	; 0
    2284:	50 e0       	ldi	r21, 0x00	; 0
    2286:	0e 94 bc 5a 	call	0xb578	; 0xb578 <__udivmodsi4>
    228a:	0a c0       	rjmp	.+20     	; 0x22a0 <set_pos_func+0x194>
			else
				num_buffer_load_x = funcSize_x / FUNCTION_LENGTH + 1;
    228c:	c8 01       	movw	r24, r16
    228e:	b7 01       	movw	r22, r14
    2290:	24 e6       	ldi	r18, 0x64	; 100
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	40 e0       	ldi	r20, 0x00	; 0
    2296:	50 e0       	ldi	r21, 0x00	; 0
    2298:	0e 94 bc 5a 	call	0xb578	; 0xb578 <__udivmodsi4>
    229c:	2f 5f       	subi	r18, 0xFF	; 255
    229e:	3f 4f       	sbci	r19, 0xFF	; 255
    22a0:	20 93 b4 20 	sts	0x20B4, r18
    22a4:	30 93 b5 20 	sts	0x20B5, r19
			
			if (quiet_mode_on == 0)
    22a8:	80 91 b3 20 	lds	r24, 0x20B3
    22ac:	88 23       	and	r24, r24
    22ae:	c1 f5       	brne	.+112    	; 0x2320 <set_pos_func+0x214>
			{
				xprintf(PSTR("funcSize_x = %u\n"), funcSize_x);
    22b0:	00 d0       	rcall	.+0      	; 0x22b2 <set_pos_func+0x1a6>
    22b2:	00 d0       	rcall	.+0      	; 0x22b4 <set_pos_func+0x1a8>
    22b4:	84 e6       	ldi	r24, 0x64	; 100
    22b6:	96 e0       	ldi	r25, 0x06	; 6
    22b8:	ed b7       	in	r30, 0x3d	; 61
    22ba:	fe b7       	in	r31, 0x3e	; 62
    22bc:	81 83       	std	Z+1, r24	; 0x01
    22be:	92 83       	std	Z+2, r25	; 0x02
    22c0:	ad b7       	in	r26, 0x3d	; 61
    22c2:	be b7       	in	r27, 0x3e	; 62
    22c4:	13 96       	adiw	r26, 0x03	; 3
    22c6:	ed 92       	st	X+, r14
    22c8:	fd 92       	st	X+, r15
    22ca:	0d 93       	st	X+, r16
    22cc:	1c 93       	st	X, r17
    22ce:	16 97       	sbiw	r26, 0x06	; 6
    22d0:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
				xprintf(PSTR("last_load_x = %u\n"), last_load_x);
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	82 e5       	ldi	r24, 0x52	; 82
    22da:	96 e0       	ldi	r25, 0x06	; 6
    22dc:	ed b7       	in	r30, 0x3d	; 61
    22de:	fe b7       	in	r31, 0x3e	; 62
    22e0:	81 83       	std	Z+1, r24	; 0x01
    22e2:	92 83       	std	Z+2, r25	; 0x02
    22e4:	80 91 f9 24 	lds	r24, 0x24F9
    22e8:	90 91 fa 24 	lds	r25, 0x24FA
    22ec:	83 83       	std	Z+3, r24	; 0x03
    22ee:	94 83       	std	Z+4, r25	; 0x04
    22f0:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
				xprintf(PSTR("num_buffer_load_x = %u\n"), num_buffer_load_x);
    22f4:	8a e3       	ldi	r24, 0x3A	; 58
    22f6:	96 e0       	ldi	r25, 0x06	; 6
    22f8:	ad b7       	in	r26, 0x3d	; 61
    22fa:	be b7       	in	r27, 0x3e	; 62
    22fc:	11 96       	adiw	r26, 0x01	; 1
    22fe:	8d 93       	st	X+, r24
    2300:	9c 93       	st	X, r25
    2302:	12 97       	sbiw	r26, 0x02	; 2
    2304:	80 91 b4 20 	lds	r24, 0x20B4
    2308:	90 91 b5 20 	lds	r25, 0x20B5
    230c:	13 96       	adiw	r26, 0x03	; 3
    230e:	8d 93       	st	X+, r24
    2310:	9c 93       	st	X, r25
    2312:	14 97       	sbiw	r26, 0x04	; 4
    2314:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    2318:	0f 90       	pop	r0
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	0f 90       	pop	r0
			}
			
			default_func_x = 0;
    2320:	10 92 a3 20 	sts	0x20A3, r1
			
			//update the function buffer
			fetch_update_funcX(1,0);
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	60 e0       	ldi	r22, 0x00	; 0
    2328:	0e 94 4b 0c 	call	0x1896	; 0x1896 <fetch_update_funcX>
    232c:	d0 c0       	rjmp	.+416    	; 0x24ce <set_pos_func+0x3c2>
            break;
            
        case 2:
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); //disable ISR
            //read the header block and send back the function name
            res = f_close(&file3);
    232e:	86 e0       	ldi	r24, 0x06	; 6
    2330:	97 e2       	ldi	r25, 0x27	; 39
    2332:	0e 94 ac 4b 	call	0x9758	; 0x9758 <f_close>
            
            res = f_open(&file3, str, FA_OPEN_EXISTING | FA_READ);
    2336:	86 e0       	ldi	r24, 0x06	; 6
    2338:	97 e2       	ldi	r25, 0x27	; 39
    233a:	be 01       	movw	r22, r28
    233c:	6d 5f       	subi	r22, 0xFD	; 253
    233e:	7f 4f       	sbci	r23, 0xFF	; 255
    2340:	41 e0       	ldi	r20, 0x01	; 1
    2342:	0e 94 68 4f 	call	0x9ed0	; 0x9ed0 <f_open>
            if (res == FR_OK) {
    2346:	88 23       	and	r24, r24
    2348:	09 f0       	breq	.+2      	; 0x234c <set_pos_func+0x240>
    234a:	45 c0       	rjmp	.+138    	; 0x23d6 <set_pos_func+0x2ca>
                res = f_read(&file3, posFuncBuff, 512, &cnt);
    234c:	86 e0       	ldi	r24, 0x06	; 6
    234e:	97 e2       	ldi	r25, 0x27	; 39
    2350:	be 01       	movw	r22, r28
    2352:	61 5f       	subi	r22, 0xF1	; 241
    2354:	7f 4f       	sbci	r23, 0xFF	; 255
    2356:	40 e0       	ldi	r20, 0x00	; 0
    2358:	52 e0       	ldi	r21, 0x02	; 2
    235a:	9e 01       	movw	r18, r28
    235c:	2f 5f       	subi	r18, 0xFF	; 255
    235e:	3f 4f       	sbci	r19, 0xFF	; 255
    2360:	0e 94 7f 50 	call	0xa0fe	; 0xa0fe <f_read>
                if ((res == FR_OK) && (cnt == 512)) {
    2364:	88 23       	and	r24, r24
    2366:	a1 f5       	brne	.+104    	; 0x23d0 <set_pos_func+0x2c4>
    2368:	89 81       	ldd	r24, Y+1	; 0x01
    236a:	9a 81       	ldd	r25, Y+2	; 0x02
    236c:	80 50       	subi	r24, 0x00	; 0
    236e:	92 40       	sbci	r25, 0x02	; 2
    2370:	79 f5       	brne	.+94     	; 0x23d0 <set_pos_func+0x2c4>
                    // get the test header info
                    // get the test header info
                    ((uint8_t*)&funcSize_y)[0] = posFuncBuff[0];
    2372:	8f 85       	ldd	r24, Y+15	; 0x0f
    2374:	80 93 af 20 	sts	0x20AF, r24
                    ((uint8_t*)&funcSize_y)[1] = posFuncBuff[1];
    2378:	88 89       	ldd	r24, Y+16	; 0x10
    237a:	80 93 b0 20 	sts	0x20B0, r24
                    ((uint8_t*)&funcSize_y)[2] = posFuncBuff[2];
    237e:	89 89       	ldd	r24, Y+17	; 0x11
    2380:	80 93 b1 20 	sts	0x20B1, r24
                    ((uint8_t*)&funcSize_y)[3] = posFuncBuff[3];
    2384:	8a 89       	ldd	r24, Y+18	; 0x12
    2386:	80 93 b2 20 	sts	0x20B2, r24
                    func_name_len = posFuncBuff[4];
                    
                    func_ID_Y = func_id;
    238a:	10 93 f7 24 	sts	0x24F7, r17
    238e:	10 92 f8 24 	sts	0x24F8, r1
                    
                    Stop = 1;
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	80 93 9c 20 	sts	0x209C, r24
                    display_flag = 0;  //clear the display flag
    2398:	10 92 e8 24 	sts	0x24E8, r1
                    if (quiet_mode_on == 0)
    239c:	80 91 b3 20 	lds	r24, 0x20B3
    23a0:	88 23       	and	r24, r24
    23a2:	09 f5       	brne	.+66     	; 0x23e6 <set_pos_func+0x2da>
                        xprintf(PSTR("Setting position function %u for Y\n"), func_id);
    23a4:	00 d0       	rcall	.+0      	; 0x23a6 <set_pos_func+0x29a>
    23a6:	0f 92       	push	r0
    23a8:	ed b7       	in	r30, 0x3d	; 61
    23aa:	fe b7       	in	r31, 0x3e	; 62
    23ac:	31 96       	adiw	r30, 0x01	; 1
    23ae:	86 e1       	ldi	r24, 0x16	; 22
    23b0:	96 e0       	ldi	r25, 0x06	; 6
    23b2:	ad b7       	in	r26, 0x3d	; 61
    23b4:	be b7       	in	r27, 0x3e	; 62
    23b6:	11 96       	adiw	r26, 0x01	; 1
    23b8:	8d 93       	st	X+, r24
    23ba:	9c 93       	st	X, r25
    23bc:	12 97       	sbiw	r26, 0x02	; 2
    23be:	12 83       	std	Z+2, r17	; 0x02
    23c0:	13 82       	std	Z+3, r1	; 0x03
    23c2:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    23c6:	0f 90       	pop	r0
    23c8:	0f 90       	pop	r0
    23ca:	0f 90       	pop	r0
    23cc:	0f 90       	pop	r0
    23ce:	0b c0       	rjmp	.+22     	; 0x23e6 <set_pos_func+0x2da>
                    //xprintf(PSTR("fun Y: %s\n function Y size: %lu bytes\n"),
                    //       func_name_y, funcSize_y);
                    
                } else {
                        xputs(PSTR("Error f_read set_pos_func Y.\n"));
    23d0:	88 ef       	ldi	r24, 0xF8	; 248
    23d2:	95 e0       	ldi	r25, 0x05	; 5
    23d4:	06 c0       	rjmp	.+12     	; 0x23e2 <set_pos_func+0x2d6>
                }
            } else {
                if (quiet_mode_on == 0)
    23d6:	80 91 b3 20 	lds	r24, 0x20B3
    23da:	88 23       	and	r24, r24
    23dc:	21 f4       	brne	.+8      	; 0x23e6 <set_pos_func+0x2da>
                    xputs(PSTR("Error f_open in set_pos_func Y.\n"));
    23de:	87 ed       	ldi	r24, 0xD7	; 215
    23e0:	95 e0       	ldi	r25, 0x05	; 5
    23e2:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
            }
			
			last_load_y = funcSize_y % FUNCTION_LENGTH;
    23e6:	e0 90 af 20 	lds	r14, 0x20AF
    23ea:	f0 90 b0 20 	lds	r15, 0x20B0
    23ee:	00 91 b1 20 	lds	r16, 0x20B1
    23f2:	10 91 b2 20 	lds	r17, 0x20B2
    23f6:	c8 01       	movw	r24, r16
    23f8:	b7 01       	movw	r22, r14
    23fa:	24 e6       	ldi	r18, 0x64	; 100
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	40 e0       	ldi	r20, 0x00	; 0
    2400:	50 e0       	ldi	r21, 0x00	; 0
    2402:	0e 94 bc 5a 	call	0xb578	; 0xb578 <__udivmodsi4>
    2406:	60 93 fb 24 	sts	0x24FB, r22
    240a:	70 93 fc 24 	sts	0x24FC, r23
			if (last_load_y == 0)
    240e:	67 2b       	or	r22, r23
    2410:	49 f4       	brne	.+18     	; 0x2424 <set_pos_func+0x318>
				num_buffer_load_y = funcSize_y / FUNCTION_LENGTH;
    2412:	c8 01       	movw	r24, r16
    2414:	b7 01       	movw	r22, r14
    2416:	24 e6       	ldi	r18, 0x64	; 100
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	40 e0       	ldi	r20, 0x00	; 0
    241c:	50 e0       	ldi	r21, 0x00	; 0
    241e:	0e 94 bc 5a 	call	0xb578	; 0xb578 <__udivmodsi4>
    2422:	0a c0       	rjmp	.+20     	; 0x2438 <set_pos_func+0x32c>
			else
				num_buffer_load_y = funcSize_y / FUNCTION_LENGTH + 1;
    2424:	c8 01       	movw	r24, r16
    2426:	b7 01       	movw	r22, r14
    2428:	24 e6       	ldi	r18, 0x64	; 100
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	40 e0       	ldi	r20, 0x00	; 0
    242e:	50 e0       	ldi	r21, 0x00	; 0
    2430:	0e 94 bc 5a 	call	0xb578	; 0xb578 <__udivmodsi4>
    2434:	2f 5f       	subi	r18, 0xFF	; 255
    2436:	3f 4f       	sbci	r19, 0xFF	; 255
    2438:	20 93 b6 20 	sts	0x20B6, r18
    243c:	30 93 b7 20 	sts	0x20B7, r19
		
	
			if (quiet_mode_on == 0){
    2440:	80 91 b3 20 	lds	r24, 0x20B3
    2444:	88 23       	and	r24, r24
    2446:	c1 f5       	brne	.+112    	; 0x24b8 <set_pos_func+0x3ac>
				xprintf(PSTR("funcSize_y = %u\n"), funcSize_y);
    2448:	00 d0       	rcall	.+0      	; 0x244a <set_pos_func+0x33e>
    244a:	00 d0       	rcall	.+0      	; 0x244c <set_pos_func+0x340>
    244c:	86 ec       	ldi	r24, 0xC6	; 198
    244e:	95 e0       	ldi	r25, 0x05	; 5
    2450:	ed b7       	in	r30, 0x3d	; 61
    2452:	fe b7       	in	r31, 0x3e	; 62
    2454:	81 83       	std	Z+1, r24	; 0x01
    2456:	92 83       	std	Z+2, r25	; 0x02
    2458:	ad b7       	in	r26, 0x3d	; 61
    245a:	be b7       	in	r27, 0x3e	; 62
    245c:	13 96       	adiw	r26, 0x03	; 3
    245e:	ed 92       	st	X+, r14
    2460:	fd 92       	st	X+, r15
    2462:	0d 93       	st	X+, r16
    2464:	1c 93       	st	X, r17
    2466:	16 97       	sbiw	r26, 0x06	; 6
    2468:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
				xprintf(PSTR("last_load_y = %u \n"), last_load_y);
    246c:	0f 90       	pop	r0
    246e:	0f 90       	pop	r0
    2470:	83 eb       	ldi	r24, 0xB3	; 179
    2472:	95 e0       	ldi	r25, 0x05	; 5
    2474:	ed b7       	in	r30, 0x3d	; 61
    2476:	fe b7       	in	r31, 0x3e	; 62
    2478:	81 83       	std	Z+1, r24	; 0x01
    247a:	92 83       	std	Z+2, r25	; 0x02
    247c:	80 91 fb 24 	lds	r24, 0x24FB
    2480:	90 91 fc 24 	lds	r25, 0x24FC
    2484:	83 83       	std	Z+3, r24	; 0x03
    2486:	94 83       	std	Z+4, r25	; 0x04
    2488:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
				xprintf(PSTR("num_buffer_load_y = %u\n"), num_buffer_load_y);				
    248c:	8b e9       	ldi	r24, 0x9B	; 155
    248e:	95 e0       	ldi	r25, 0x05	; 5
    2490:	ad b7       	in	r26, 0x3d	; 61
    2492:	be b7       	in	r27, 0x3e	; 62
    2494:	11 96       	adiw	r26, 0x01	; 1
    2496:	8d 93       	st	X+, r24
    2498:	9c 93       	st	X, r25
    249a:	12 97       	sbiw	r26, 0x02	; 2
    249c:	80 91 b6 20 	lds	r24, 0x20B6
    24a0:	90 91 b7 20 	lds	r25, 0x20B7
    24a4:	13 96       	adiw	r26, 0x03	; 3
    24a6:	8d 93       	st	X+, r24
    24a8:	9c 93       	st	X, r25
    24aa:	14 97       	sbiw	r26, 0x04	; 4
    24ac:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    24b0:	0f 90       	pop	r0
    24b2:	0f 90       	pop	r0
    24b4:	0f 90       	pop	r0
    24b6:	0f 90       	pop	r0
			}
			
			default_func_y = 0;
    24b8:	10 92 a4 20 	sts	0x20A4, r1
			
			//update the function buffer
			fetch_update_funcY(1,0);
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	60 e0       	ldi	r22, 0x00	; 0
    24c0:	0e 94 87 0b 	call	0x170e	; 0x170e <fetch_update_funcY>
    24c4:	04 c0       	rjmp	.+8      	; 0x24ce <set_pos_func+0x3c2>
			
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1);//enable ISR
            break;
            
        default:
                xputs(PSTR("Error input for function channel.\n"));
    24c6:	88 e7       	ldi	r24, 0x78	; 120
    24c8:	95 e0       	ldi	r25, 0x05	; 5
    24ca:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
            break;
    }
}
    24ce:	c2 5f       	subi	r28, 0xF2	; 242
    24d0:	dd 4f       	sbci	r29, 0xFD	; 253
    24d2:	e6 e0       	ldi	r30, 0x06	; 6
    24d4:	0c 94 21 5b 	jmp	0xb642	; 0xb642 <__epilogue_restores__+0x18>

000024d8 <i2cMasterSend>:
    bench_time = timer_coarse_toc();
    frame_rate = ((uint32_t)num_frames*1000)/bench_time;
    xprintf(PSTR(" bench_time = %lu ms, frame_rate = %u\n"), bench_time, frame_rate);
}

void i2cMasterSend(uint8_t panel, uint8_t len, uint8_t *data) {
    24d8:	1f 93       	push	r17
    24da:	cf 93       	push	r28
    24dc:	df 93       	push	r29
    24de:	16 2f       	mov	r17, r22
    24e0:	ea 01       	movw	r28, r20
    uint8_t ch;
    uint8_t addr;
    TWI_Master_t *twi;
    
    if (panel == 0) {
    24e2:	88 23       	and	r24, r24
    24e4:	49 f5       	brne	.+82     	; 0x2538 <i2cMasterSend+0x60>
        while (twi1.status != TWIM_STATUS_READY);
    24e6:	80 91 85 26 	lds	r24, 0x2685
    24ea:	88 23       	and	r24, r24
    24ec:	e1 f7       	brne	.-8      	; 0x24e6 <i2cMasterSend+0xe>
        TWI_MasterWrite(&twi1, 0, data, len);
    24ee:	88 e7       	ldi	r24, 0x78	; 120
    24f0:	96 e2       	ldi	r25, 0x26	; 38
    24f2:	60 e0       	ldi	r22, 0x00	; 0
    24f4:	ae 01       	movw	r20, r28
    24f6:	21 2f       	mov	r18, r17
    24f8:	0e 94 fd 32 	call	0x65fa	; 0x65fa <TWI_MasterWrite>
        while (twi2.status != TWIM_STATUS_READY);
    24fc:	80 91 9d 29 	lds	r24, 0x299D
    2500:	88 23       	and	r24, r24
    2502:	e1 f7       	brne	.-8      	; 0x24fc <i2cMasterSend+0x24>
        TWI_MasterWrite(&twi2, 0, data, len);
    2504:	80 e9       	ldi	r24, 0x90	; 144
    2506:	99 e2       	ldi	r25, 0x29	; 41
    2508:	60 e0       	ldi	r22, 0x00	; 0
    250a:	ae 01       	movw	r20, r28
    250c:	21 2f       	mov	r18, r17
    250e:	0e 94 fd 32 	call	0x65fa	; 0x65fa <TWI_MasterWrite>
        while (twi3.status != TWIM_STATUS_READY);
    2512:	80 91 33 27 	lds	r24, 0x2733
    2516:	88 23       	and	r24, r24
    2518:	e1 f7       	brne	.-8      	; 0x2512 <i2cMasterSend+0x3a>
        TWI_MasterWrite(&twi3, 0, data, len);
    251a:	86 e2       	ldi	r24, 0x26	; 38
    251c:	97 e2       	ldi	r25, 0x27	; 39
    251e:	60 e0       	ldi	r22, 0x00	; 0
    2520:	ae 01       	movw	r20, r28
    2522:	21 2f       	mov	r18, r17
    2524:	0e 94 fd 32 	call	0x65fa	; 0x65fa <TWI_MasterWrite>
        while (twi4.status != TWIM_STATUS_READY);
    2528:	80 91 a9 25 	lds	r24, 0x25A9
    252c:	88 23       	and	r24, r24
    252e:	e1 f7       	brne	.-8      	; 0x2528 <i2cMasterSend+0x50>
        TWI_MasterWrite(&twi4, 0, data, len);
    2530:	8c e9       	ldi	r24, 0x9C	; 156
    2532:	95 e2       	ldi	r25, 0x25	; 37
    2534:	60 e0       	ldi	r22, 0x00	; 0
    2536:	22 c0       	rjmp	.+68     	; 0x257c <i2cMasterSend+0xa4>
    }
    else {
        // look up the actual panel address and channel
        ch = chMap[panel];
    2538:	e8 2f       	mov	r30, r24
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	df 01       	movw	r26, r30
    253e:	aa 5c       	subi	r26, 0xCA	; 202
    2540:	b8 4d       	sbci	r27, 0xD8	; 216
    2542:	ac 91       	ld	r26, X
        addr = adrMap[panel];
    2544:	e3 51       	subi	r30, 0x13	; 19
    2546:	f7 4d       	sbci	r31, 0xD7	; 215
    2548:	60 81       	ld	r22, Z
        if (ch != 0){
    254a:	aa 23       	and	r26, r26
    254c:	d9 f0       	breq	.+54     	; 0x2584 <i2cMasterSend+0xac>
            
            switch (ch) {
    254e:	a3 30       	cpi	r26, 0x03	; 3
    2550:	51 f0       	breq	.+20     	; 0x2566 <i2cMasterSend+0x8e>
    2552:	a4 30       	cpi	r26, 0x04	; 4
    2554:	59 f0       	breq	.+22     	; 0x256c <i2cMasterSend+0x94>
    2556:	a2 30       	cpi	r26, 0x02	; 2
    2558:	19 f4       	brne	.+6      	; 0x2560 <i2cMasterSend+0x88>
    255a:	a0 e9       	ldi	r26, 0x90	; 144
    255c:	b9 e2       	ldi	r27, 0x29	; 41
    255e:	08 c0       	rjmp	.+16     	; 0x2570 <i2cMasterSend+0x98>
    2560:	a8 e7       	ldi	r26, 0x78	; 120
    2562:	b6 e2       	ldi	r27, 0x26	; 38
    2564:	05 c0       	rjmp	.+10     	; 0x2570 <i2cMasterSend+0x98>
    2566:	a6 e2       	ldi	r26, 0x26	; 38
    2568:	b7 e2       	ldi	r27, 0x27	; 39
    256a:	02 c0       	rjmp	.+4      	; 0x2570 <i2cMasterSend+0x98>
                case 2:
                    twi = &twi2;
                    break;
                case 3:
                    twi = &twi3;
                    break;
    256c:	ac e9       	ldi	r26, 0x9C	; 156
    256e:	b5 e2       	ldi	r27, 0x25	; 37
                default: // send to twi1
                    twi = &twi1;
                    break;
            }
            
            while (twi->status != TWIM_STATUS_READY);
    2570:	1d 96       	adiw	r26, 0x0d	; 13
    2572:	8c 91       	ld	r24, X
    2574:	1d 97       	sbiw	r26, 0x0d	; 13
    2576:	88 23       	and	r24, r24
    2578:	d9 f7       	brne	.-10     	; 0x2570 <i2cMasterSend+0x98>
            TWI_MasterWrite(twi, addr, data, len);
    257a:	cd 01       	movw	r24, r26
    257c:	ae 01       	movw	r20, r28
    257e:	21 2f       	mov	r18, r17
    2580:	0e 94 fd 32 	call	0x65fa	; 0x65fa <TWI_MasterWrite>
        }
    }
}
    2584:	df 91       	pop	r29
    2586:	cf 91       	pop	r28
    2588:	1f 91       	pop	r17
    258a:	08 95       	ret

0000258c <handle_message_length_4>:
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[3]);
    }
}

void handle_message_length_4(uint8_t *msg_buffer) {
    258c:	fc 01       	movw	r30, r24
    int16_t setVal;
	//'set_ao'
    switch(msg_buffer[0]) {
    258e:	80 81       	ld	r24, Z
    2590:	80 31       	cpi	r24, 0x10	; 16
    2592:	19 f0       	breq	.+6      	; 0x259a <handle_message_length_4+0xe>
    2594:	81 31       	cpi	r24, 0x11	; 17
    2596:	a9 f4       	brne	.+42     	; 0x25c2 <handle_message_length_4+0x36>
    2598:	07 c0       	rjmp	.+14     	; 0x25a8 <handle_message_length_4+0x1c>
        case 0x10: //set a value ranging from 0-32767 (0-10V) to one of the DAC1~4. 
		    setVal = (int16_t) msg_buffer[2] + (256*msg_buffer[3]);
            analogWrite(msg_buffer[1] - 1, setVal);
    259a:	81 81       	ldd	r24, Z+1	; 0x01
    259c:	73 81       	ldd	r23, Z+3	; 0x03
    259e:	60 e0       	ldi	r22, 0x00	; 0
    25a0:	92 81       	ldd	r25, Z+2	; 0x02
    25a2:	69 0f       	add	r22, r25
    25a4:	71 1d       	adc	r23, r1
    25a6:	09 c0       	rjmp	.+18     	; 0x25ba <handle_message_length_4+0x2e>
            break;
		case 0x11:  //set a value ranging from -32767 to 0(-10V-0)  to one of the DAC1-4 
			setVal = (int16_t) msg_buffer[2] + (256*msg_buffer[3]);
    25a8:	73 81       	ldd	r23, Z+3	; 0x03
    25aa:	60 e0       	ldi	r22, 0x00	; 0
    25ac:	82 81       	ldd	r24, Z+2	; 0x02
    25ae:	68 0f       	add	r22, r24
    25b0:	71 1d       	adc	r23, r1
			setVal = -setVal;
            analogWrite(msg_buffer[1] - 1, setVal);
    25b2:	81 81       	ldd	r24, Z+1	; 0x01
    25b4:	70 95       	com	r23
    25b6:	61 95       	neg	r22
    25b8:	7f 4f       	sbci	r23, 0xFF	; 255
    25ba:	81 50       	subi	r24, 0x01	; 1
    25bc:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <analogWrite>
    25c0:	08 95       	ret
            break;
        default:   
			i2cMasterSend(0x00, 8, ERROR_CODES[4]);
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	68 e0       	ldi	r22, 0x08	; 8
    25c6:	40 ee       	ldi	r20, 0xE0	; 224
    25c8:	50 e2       	ldi	r21, 0x20	; 32
    25ca:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <i2cMasterSend>
    25ce:	08 95       	ret

000025d0 <handle_message_length_3>:
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[2]);
    }
}

void handle_message_length_3(uint8_t *msg_buffer) {
    25d0:	a2 e0       	ldi	r26, 0x02	; 2
    25d2:	b0 e0       	ldi	r27, 0x00	; 0
    25d4:	ee ee       	ldi	r30, 0xEE	; 238
    25d6:	f2 e1       	ldi	r31, 0x12	; 18
    25d8:	0c 94 06 5b 	jmp	0xb60c	; 0xb60c <__prologue_saves__+0x1a>
    25dc:	8c 01       	movw	r16, r24
    uint8_t target_panel_addr;
    uint8_t CMD[2];
    uint16_t funcX_freq, funcY_freq;
    
    switch(msg_buffer[0]) {
    25de:	fc 01       	movw	r30, r24
    25e0:	80 81       	ld	r24, Z
    25e2:	85 32       	cpi	r24, 0x25	; 37
    25e4:	09 f4       	brne	.+2      	; 0x25e8 <handle_message_length_3+0x18>
    25e6:	b5 c0       	rjmp	.+362    	; 0x2752 <handle_message_length_3+0x182>
    25e8:	86 32       	cpi	r24, 0x26	; 38
    25ea:	50 f4       	brcc	.+20     	; 0x2600 <handle_message_length_3+0x30>
    25ec:	85 31       	cpi	r24, 0x15	; 21
    25ee:	09 f4       	brne	.+2      	; 0x25f2 <handle_message_length_3+0x22>
    25f0:	9a c0       	rjmp	.+308    	; 0x2726 <handle_message_length_3+0x156>
    25f2:	80 32       	cpi	r24, 0x20	; 32
    25f4:	09 f4       	brne	.+2      	; 0x25f8 <handle_message_length_3+0x28>
    25f6:	a0 c0       	rjmp	.+320    	; 0x2738 <handle_message_length_3+0x168>
    25f8:	80 31       	cpi	r24, 0x10	; 16
    25fa:	09 f0       	breq	.+2      	; 0x25fe <handle_message_length_3+0x2e>
    25fc:	1d c1       	rjmp	.+570    	; 0x2838 <handle_message_length_3+0x268>
    25fe:	8b c0       	rjmp	.+278    	; 0x2716 <handle_message_length_3+0x146>
    2600:	85 33       	cpi	r24, 0x35	; 53
    2602:	09 f4       	brne	.+2      	; 0x2606 <handle_message_length_3+0x36>
    2604:	ee c0       	rjmp	.+476    	; 0x27e2 <handle_message_length_3+0x212>
    2606:	8f 3f       	cpi	r24, 0xFF	; 255
    2608:	21 f0       	breq	.+8      	; 0x2612 <handle_message_length_3+0x42>
    260a:	80 33       	cpi	r24, 0x30	; 48
    260c:	09 f0       	breq	.+2      	; 0x2610 <handle_message_length_3+0x40>
    260e:	14 c1       	rjmp	.+552    	; 0x2838 <handle_message_length_3+0x268>
    2610:	be c0       	rjmp	.+380    	; 0x278e <handle_message_length_3+0x1be>
        case 0xFF:  //address panel
            target_panel_addr = msg_buffer[1];  //put in error check, in range < 127
    2612:	f8 01       	movw	r30, r16
    2614:	f1 80       	ldd	r15, Z+1	; 0x01
            //sends a reset command out to panel at taget address
            
            //Since the panel can be located in any of the four channels, so the command should be sent to all channels
            while (twi1.status != TWIM_STATUS_READY);
    2616:	80 91 85 26 	lds	r24, 0x2685
    261a:	88 23       	and	r24, r24
    261c:	e1 f7       	brne	.-8      	; 0x2616 <handle_message_length_3+0x46>
            TWI_MasterWrite(&twi1, target_panel_addr, RESET, 2);
    261e:	88 e7       	ldi	r24, 0x78	; 120
    2620:	96 e2       	ldi	r25, 0x26	; 38
    2622:	6f 2d       	mov	r22, r15
    2624:	40 e0       	ldi	r20, 0x00	; 0
    2626:	51 e2       	ldi	r21, 0x21	; 33
    2628:	22 e0       	ldi	r18, 0x02	; 2
    262a:	0e 94 fd 32 	call	0x65fa	; 0x65fa <TWI_MasterWrite>
            while (twi2.status != TWIM_STATUS_READY);
    262e:	80 91 9d 29 	lds	r24, 0x299D
    2632:	88 23       	and	r24, r24
    2634:	e1 f7       	brne	.-8      	; 0x262e <handle_message_length_3+0x5e>
            TWI_MasterWrite(&twi2, target_panel_addr, RESET, 2);
    2636:	80 e9       	ldi	r24, 0x90	; 144
    2638:	99 e2       	ldi	r25, 0x29	; 41
    263a:	6f 2d       	mov	r22, r15
    263c:	40 e0       	ldi	r20, 0x00	; 0
    263e:	51 e2       	ldi	r21, 0x21	; 33
    2640:	22 e0       	ldi	r18, 0x02	; 2
    2642:	0e 94 fd 32 	call	0x65fa	; 0x65fa <TWI_MasterWrite>
            while (twi3.status != TWIM_STATUS_READY);
    2646:	80 91 33 27 	lds	r24, 0x2733
    264a:	88 23       	and	r24, r24
    264c:	e1 f7       	brne	.-8      	; 0x2646 <handle_message_length_3+0x76>
            TWI_MasterWrite(&twi3, target_panel_addr, RESET, 2);
    264e:	86 e2       	ldi	r24, 0x26	; 38
    2650:	97 e2       	ldi	r25, 0x27	; 39
    2652:	6f 2d       	mov	r22, r15
    2654:	40 e0       	ldi	r20, 0x00	; 0
    2656:	51 e2       	ldi	r21, 0x21	; 33
    2658:	22 e0       	ldi	r18, 0x02	; 2
    265a:	0e 94 fd 32 	call	0x65fa	; 0x65fa <TWI_MasterWrite>
            while (twi4.status != TWIM_STATUS_READY);
    265e:	80 91 a9 25 	lds	r24, 0x25A9
    2662:	88 23       	and	r24, r24
    2664:	e1 f7       	brne	.-8      	; 0x265e <handle_message_length_3+0x8e>
            TWI_MasterWrite(&twi4, target_panel_addr, RESET, 2);
    2666:	8c e9       	ldi	r24, 0x9C	; 156
    2668:	95 e2       	ldi	r25, 0x25	; 37
    266a:	6f 2d       	mov	r22, r15
    266c:	40 e0       	ldi	r20, 0x00	; 0
    266e:	51 e2       	ldi	r21, 0x21	; 33
    2670:	22 e0       	ldi	r18, 0x02	; 2
    2672:	0e 94 fd 32 	call	0x65fa	; 0x65fa <TWI_MasterWrite>
    2676:	80 ef       	ldi	r24, 0xF0	; 240
    2678:	95 e5       	ldi	r25, 0x55	; 85
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    267a:	20 e2       	ldi	r18, 0x20	; 32
    267c:	33 e0       	ldi	r19, 0x03	; 3
    267e:	f9 01       	movw	r30, r18
    2680:	31 97       	sbiw	r30, 0x01	; 1
    2682:	f1 f7       	brne	.-4      	; 0x2680 <handle_message_length_3+0xb0>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2684:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2686:	d9 f7       	brne	.-10     	; 0x267e <handle_message_length_3+0xae>
            //i2cMasterSend(target_panel_addr, 2, RESET);
            
            _delay_ms(2200);
            CMD[0] = 0xFF; CMD[1] = msg_buffer[2];   //send change address command
    2688:	8f ef       	ldi	r24, 0xFF	; 255
    268a:	89 83       	std	Y+1, r24	; 0x01
    268c:	f8 01       	movw	r30, r16
    268e:	92 81       	ldd	r25, Z+2	; 0x02
            
            //Since the panel can be located in any of the four channels, so the command should be sent to all channels
            while (twi1.status != TWIM_STATUS_READY);
    2690:	80 91 85 26 	lds	r24, 0x2685
    2694:	88 23       	and	r24, r24
    2696:	e1 f7       	brne	.-8      	; 0x2690 <handle_message_length_3+0xc0>
            while (twi4.status != TWIM_STATUS_READY);
            TWI_MasterWrite(&twi4, target_panel_addr, RESET, 2);
            //i2cMasterSend(target_panel_addr, 2, RESET);
            
            _delay_ms(2200);
            CMD[0] = 0xFF; CMD[1] = msg_buffer[2];   //send change address command
    2698:	9a 83       	std	Y+2, r25	; 0x02
            
            //Since the panel can be located in any of the four channels, so the command should be sent to all channels
            while (twi1.status != TWIM_STATUS_READY);
            TWI_MasterWrite(&twi1, target_panel_addr, CMD, 2);
    269a:	88 e7       	ldi	r24, 0x78	; 120
    269c:	96 e2       	ldi	r25, 0x26	; 38
    269e:	6f 2d       	mov	r22, r15
    26a0:	ae 01       	movw	r20, r28
    26a2:	4f 5f       	subi	r20, 0xFF	; 255
    26a4:	5f 4f       	sbci	r21, 0xFF	; 255
    26a6:	22 e0       	ldi	r18, 0x02	; 2
    26a8:	0e 94 fd 32 	call	0x65fa	; 0x65fa <TWI_MasterWrite>
            while (twi2.status != TWIM_STATUS_READY);
    26ac:	80 91 9d 29 	lds	r24, 0x299D
    26b0:	88 23       	and	r24, r24
    26b2:	e1 f7       	brne	.-8      	; 0x26ac <handle_message_length_3+0xdc>
            TWI_MasterWrite(&twi2, target_panel_addr, CMD, 2);
    26b4:	80 e9       	ldi	r24, 0x90	; 144
    26b6:	99 e2       	ldi	r25, 0x29	; 41
    26b8:	6f 2d       	mov	r22, r15
    26ba:	ae 01       	movw	r20, r28
    26bc:	4f 5f       	subi	r20, 0xFF	; 255
    26be:	5f 4f       	sbci	r21, 0xFF	; 255
    26c0:	22 e0       	ldi	r18, 0x02	; 2
    26c2:	0e 94 fd 32 	call	0x65fa	; 0x65fa <TWI_MasterWrite>
            while (twi3.status != TWIM_STATUS_READY);
    26c6:	80 91 33 27 	lds	r24, 0x2733
    26ca:	88 23       	and	r24, r24
    26cc:	e1 f7       	brne	.-8      	; 0x26c6 <handle_message_length_3+0xf6>
            TWI_MasterWrite(&twi3, target_panel_addr, CMD, 2);
    26ce:	86 e2       	ldi	r24, 0x26	; 38
    26d0:	97 e2       	ldi	r25, 0x27	; 39
    26d2:	6f 2d       	mov	r22, r15
    26d4:	ae 01       	movw	r20, r28
    26d6:	4f 5f       	subi	r20, 0xFF	; 255
    26d8:	5f 4f       	sbci	r21, 0xFF	; 255
    26da:	22 e0       	ldi	r18, 0x02	; 2
    26dc:	0e 94 fd 32 	call	0x65fa	; 0x65fa <TWI_MasterWrite>
            while (twi4.status != TWIM_STATUS_READY);
    26e0:	80 91 a9 25 	lds	r24, 0x25A9
    26e4:	88 23       	and	r24, r24
    26e6:	e1 f7       	brne	.-8      	; 0x26e0 <handle_message_length_3+0x110>
            TWI_MasterWrite(&twi4, target_panel_addr, CMD, 2);
    26e8:	8c e9       	ldi	r24, 0x9C	; 156
    26ea:	95 e2       	ldi	r25, 0x25	; 37
    26ec:	6f 2d       	mov	r22, r15
    26ee:	ae 01       	movw	r20, r28
    26f0:	4f 5f       	subi	r20, 0xFF	; 255
    26f2:	5f 4f       	sbci	r21, 0xFF	; 255
    26f4:	22 e0       	ldi	r18, 0x02	; 2
    26f6:	0e 94 fd 32 	call	0x65fa	; 0x65fa <TWI_MasterWrite>
    26fa:	84 ef       	ldi	r24, 0xF4	; 244
    26fc:	91 e0       	ldi	r25, 0x01	; 1
    26fe:	20 e2       	ldi	r18, 0x20	; 32
    2700:	33 e0       	ldi	r19, 0x03	; 3
    2702:	f9 01       	movw	r30, r18
    2704:	31 97       	sbiw	r30, 0x01	; 1
    2706:	f1 f7       	brne	.-4      	; 0x2704 <handle_message_length_3+0x134>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2708:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    270a:	d9 f7       	brne	.-10     	; 0x2702 <handle_message_length_3+0x132>
            //i2cMasterSend(target_panel_addr, 2, CMD);
            
            _delay_ms(50);
            //reset all panels again
            i2cMasterSend(0, 2, RESET);
    270c:	80 e0       	ldi	r24, 0x00	; 0
    270e:	62 e0       	ldi	r22, 0x02	; 2
    2710:	40 e0       	ldi	r20, 0x00	; 0
    2712:	51 e2       	ldi	r21, 0x21	; 33
    2714:	95 c0       	rjmp	.+298    	; 0x2840 <handle_message_length_3+0x270>
            
            break;
            
        case 0x10:
            x_mode = msg_buffer[1];
    2716:	f8 01       	movw	r30, r16
    2718:	81 81       	ldd	r24, Z+1	; 0x01
    271a:	80 93 b7 27 	sts	0x27B7, r24
            y_mode = msg_buffer[2];
    271e:	82 81       	ldd	r24, Z+2	; 0x02
    2720:	80 93 01 28 	sts	0x2801, r24
    2724:	8f c0       	rjmp	.+286    	; 0x2844 <handle_message_length_3+0x274>
            //put in an error message if value is not 0, 1, or 2.
            break;
            
        case 0x15:   //this is a set position function
            if (msg_buffer[2] == 0){
    2726:	f8 01       	movw	r30, r16
    2728:	62 81       	ldd	r22, Z+2	; 0x02
    272a:	66 23       	and	r22, r22
    272c:	49 f0       	breq	.+18     	; 0x2740 <handle_message_length_3+0x170>
                set_default_func(msg_buffer[1]);}
            else
                set_pos_func(msg_buffer[1], msg_buffer[2]);
    272e:	f8 01       	movw	r30, r16
    2730:	81 81       	ldd	r24, Z+1	; 0x01
    2732:	0e 94 86 10 	call	0x210c	; 0x210c <set_pos_func>
    2736:	86 c0       	rjmp	.+268    	; 0x2844 <handle_message_length_3+0x274>
            break;
            
        case 0x20:   //this is a set velocity function
            if (msg_buffer[2] == 0){
    2738:	f8 01       	movw	r30, r16
    273a:	62 81       	ldd	r22, Z+2	; 0x02
    273c:	66 23       	and	r22, r22
    273e:	21 f4       	brne	.+8      	; 0x2748 <handle_message_length_3+0x178>
                set_default_func(msg_buffer[1]);}
    2740:	81 81       	ldd	r24, Z+1	; 0x01
    2742:	0e 94 3a 0a 	call	0x1474	; 0x1474 <set_default_func>
    2746:	7e c0       	rjmp	.+252    	; 0x2844 <handle_message_length_3+0x274>
            else
                set_vel_func(msg_buffer[1], msg_buffer[2]);
    2748:	f8 01       	movw	r30, r16
    274a:	81 81       	ldd	r24, Z+1	; 0x01
    274c:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <set_vel_func>
    2750:	79 c0       	rjmp	.+242    	; 0x2844 <handle_message_length_3+0x274>
            break;
            
        case 0x25: // this is a set function generator frequency
            funcX_freq = (uint16_t) msg_buffer[1] + (256*msg_buffer[2]);
    2752:	f8 01       	movw	r30, r16
    2754:	92 81       	ldd	r25, Z+2	; 0x02
    2756:	80 e0       	ldi	r24, 0x00	; 0
    2758:	21 81       	ldd	r18, Z+1	; 0x01
    275a:	8c 01       	movw	r16, r24
    275c:	02 0f       	add	r16, r18
    275e:	11 1d       	adc	r17, r1
            functionX_rate = OVERFLOW_RATE/funcX_freq;
    2760:	98 01       	movw	r18, r16
    2762:	40 e0       	ldi	r20, 0x00	; 0
    2764:	50 e0       	ldi	r21, 0x00	; 0
    2766:	62 e1       	ldi	r22, 0x12	; 18
    2768:	7a e7       	ldi	r23, 0x7A	; 122
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	0e 94 de 5a 	call	0xb5bc	; 0xb5bc <__divmodsi4>
    2772:	20 93 a5 20 	sts	0x20A5, r18
    2776:	30 93 a6 20 	sts	0x20A6, r19
            if (quiet_mode_on == 0)
    277a:	80 91 b3 20 	lds	r24, 0x20B3
    277e:	88 23       	and	r24, r24
    2780:	09 f0       	breq	.+2      	; 0x2784 <handle_message_length_3+0x1b4>
    2782:	60 c0       	rjmp	.+192    	; 0x2844 <handle_message_length_3+0x274>
                xprintf(PSTR("function X update frequency = %u.\n"), funcX_freq);
    2784:	00 d0       	rcall	.+0      	; 0x2786 <handle_message_length_3+0x1b6>
    2786:	0f 92       	push	r0
    2788:	85 ec       	ldi	r24, 0xC5	; 197
    278a:	99 e0       	ldi	r25, 0x09	; 9
    278c:	1d c0       	rjmp	.+58     	; 0x27c8 <handle_message_length_3+0x1f8>
            break;
            
        case 0x30: // this is a set function generator frequency
            funcY_freq = (uint16_t) msg_buffer[1] + (256*msg_buffer[2]);
    278e:	f8 01       	movw	r30, r16
    2790:	92 81       	ldd	r25, Z+2	; 0x02
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	21 81       	ldd	r18, Z+1	; 0x01
    2796:	8c 01       	movw	r16, r24
    2798:	02 0f       	add	r16, r18
    279a:	11 1d       	adc	r17, r1
            functionY_rate = OVERFLOW_RATE/funcY_freq;
    279c:	98 01       	movw	r18, r16
    279e:	40 e0       	ldi	r20, 0x00	; 0
    27a0:	50 e0       	ldi	r21, 0x00	; 0
    27a2:	62 e1       	ldi	r22, 0x12	; 18
    27a4:	7a e7       	ldi	r23, 0x7A	; 122
    27a6:	80 e0       	ldi	r24, 0x00	; 0
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	0e 94 de 5a 	call	0xb5bc	; 0xb5bc <__divmodsi4>
    27ae:	20 93 a7 20 	sts	0x20A7, r18
    27b2:	30 93 a8 20 	sts	0x20A8, r19
            if (quiet_mode_on == 0)
    27b6:	80 91 b3 20 	lds	r24, 0x20B3
    27ba:	88 23       	and	r24, r24
    27bc:	09 f0       	breq	.+2      	; 0x27c0 <handle_message_length_3+0x1f0>
    27be:	42 c0       	rjmp	.+132    	; 0x2844 <handle_message_length_3+0x274>
                xprintf(PSTR("function Y update frequency = %u.\n"), funcY_freq);
    27c0:	00 d0       	rcall	.+0      	; 0x27c2 <handle_message_length_3+0x1f2>
    27c2:	0f 92       	push	r0
    27c4:	82 ea       	ldi	r24, 0xA2	; 162
    27c6:	99 e0       	ldi	r25, 0x09	; 9
    27c8:	ed b7       	in	r30, 0x3d	; 61
    27ca:	fe b7       	in	r31, 0x3e	; 62
    27cc:	81 83       	std	Z+1, r24	; 0x01
    27ce:	92 83       	std	Z+2, r25	; 0x02
    27d0:	03 83       	std	Z+3, r16	; 0x03
    27d2:	14 83       	std	Z+4, r17	; 0x04
    27d4:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    27d8:	0f 90       	pop	r0
    27da:	0f 90       	pop	r0
    27dc:	0f 90       	pop	r0
    27de:	0f 90       	pop	r0
    27e0:	31 c0       	rjmp	.+98     	; 0x2844 <handle_message_length_3+0x274>
            break;
			
		case 0x35: //set resoultion_x and resolution_y	
			resolution_x = (uint32_t)msg_buffer[1] * 4095/10;
    27e2:	f8 01       	movw	r30, r16
    27e4:	61 81       	ldd	r22, Z+1	; 0x01
    27e6:	70 e0       	ldi	r23, 0x00	; 0
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	2f ef       	ldi	r18, 0xFF	; 255
    27ee:	3f e0       	ldi	r19, 0x0F	; 15
    27f0:	40 e0       	ldi	r20, 0x00	; 0
    27f2:	50 e0       	ldi	r21, 0x00	; 0
    27f4:	0e 94 76 5a 	call	0xb4ec	; 0xb4ec <__mulsi3>
    27f8:	2a e0       	ldi	r18, 0x0A	; 10
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	40 e0       	ldi	r20, 0x00	; 0
    27fe:	50 e0       	ldi	r21, 0x00	; 0
    2800:	0e 94 bc 5a 	call	0xb578	; 0xb578 <__udivmodsi4>
    2804:	20 93 9d 20 	sts	0x209D, r18
    2808:	30 93 9e 20 	sts	0x209E, r19
			resolution_y = (uint32_t)msg_buffer[2] * 4095/10;
    280c:	f8 01       	movw	r30, r16
    280e:	62 81       	ldd	r22, Z+2	; 0x02
    2810:	70 e0       	ldi	r23, 0x00	; 0
    2812:	80 e0       	ldi	r24, 0x00	; 0
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	2f ef       	ldi	r18, 0xFF	; 255
    2818:	3f e0       	ldi	r19, 0x0F	; 15
    281a:	40 e0       	ldi	r20, 0x00	; 0
    281c:	50 e0       	ldi	r21, 0x00	; 0
    281e:	0e 94 76 5a 	call	0xb4ec	; 0xb4ec <__mulsi3>
    2822:	2a e0       	ldi	r18, 0x0A	; 10
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	40 e0       	ldi	r20, 0x00	; 0
    2828:	50 e0       	ldi	r21, 0x00	; 0
    282a:	0e 94 bc 5a 	call	0xb578	; 0xb578 <__udivmodsi4>
    282e:	20 93 9f 20 	sts	0x209F, r18
    2832:	30 93 a0 20 	sts	0x20A0, r19
    2836:	06 c0       	rjmp	.+12     	; 0x2844 <handle_message_length_3+0x274>
			break;
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[3]);
    2838:	80 e0       	ldi	r24, 0x00	; 0
    283a:	68 e0       	ldi	r22, 0x08	; 8
    283c:	48 ed       	ldi	r20, 0xD8	; 216
    283e:	50 e2       	ldi	r21, 0x20	; 32
    2840:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <i2cMasterSend>
    }
}
    2844:	22 96       	adiw	r28, 0x02	; 2
    2846:	e5 e0       	ldi	r30, 0x05	; 5
    2848:	0c 94 22 5b 	jmp	0xb644	; 0xb644 <__epilogue_restores__+0x1a>

0000284c <set_hwConfig>:
    } else
    xputs(PSTR("Error opening pattern file\n"));

}

void set_hwConfig(uint8_t config_num) {
    284c:	a2 e8       	ldi	r26, 0x82	; 130
    284e:	b0 e0       	ldi	r27, 0x00	; 0
    2850:	ec e2       	ldi	r30, 0x2C	; 44
    2852:	f4 e1       	ldi	r31, 0x14	; 20
    2854:	0c 94 03 5b 	jmp	0xb606	; 0xb606 <__prologue_saves__+0x14>
    2858:	28 2f       	mov	r18, r24
	static uint8_t str[12];
    uint8_t res, b1;
    uint8_t  tempBuff[128];
	uint16_t cnt;
		
    if (config_num < 10)
    285a:	8a 30       	cpi	r24, 0x0A	; 10
    285c:	80 f4       	brcc	.+32     	; 0x287e <set_hwConfig+0x32>
        sprintf(str, "cfg000%d.cfg\0", config_num);
    285e:	00 d0       	rcall	.+0      	; 0x2860 <set_hwConfig+0x14>
    2860:	00 d0       	rcall	.+0      	; 0x2862 <set_hwConfig+0x16>
    2862:	ed b7       	in	r30, 0x3d	; 61
    2864:	fe b7       	in	r31, 0x3e	; 62
    2866:	31 96       	adiw	r30, 0x01	; 1
    2868:	8d ef       	ldi	r24, 0xFD	; 253
    286a:	94 e2       	ldi	r25, 0x24	; 36
    286c:	ad b7       	in	r26, 0x3d	; 61
    286e:	be b7       	in	r27, 0x3e	; 62
    2870:	11 96       	adiw	r26, 0x01	; 1
    2872:	8d 93       	st	X+, r24
    2874:	9c 93       	st	X, r25
    2876:	12 97       	sbiw	r26, 0x02	; 2
    2878:	8e e4       	ldi	r24, 0x4E	; 78
    287a:	90 e2       	ldi	r25, 0x20	; 32
    287c:	1f c0       	rjmp	.+62     	; 0x28bc <set_hwConfig+0x70>
    287e:	8d ef       	ldi	r24, 0xFD	; 253
    2880:	94 e2       	ldi	r25, 0x24	; 36
    else if (config_num < 100)
    2882:	24 36       	cpi	r18, 0x64	; 100
    2884:	70 f4       	brcc	.+28     	; 0x28a2 <set_hwConfig+0x56>
        sprintf(str, "cfg00%d.cfg\0", config_num);
    2886:	00 d0       	rcall	.+0      	; 0x2888 <set_hwConfig+0x3c>
    2888:	00 d0       	rcall	.+0      	; 0x288a <set_hwConfig+0x3e>
    288a:	ed b7       	in	r30, 0x3d	; 61
    288c:	fe b7       	in	r31, 0x3e	; 62
    288e:	31 96       	adiw	r30, 0x01	; 1
    2890:	ad b7       	in	r26, 0x3d	; 61
    2892:	be b7       	in	r27, 0x3e	; 62
    2894:	11 96       	adiw	r26, 0x01	; 1
    2896:	8d 93       	st	X+, r24
    2898:	9c 93       	st	X, r25
    289a:	12 97       	sbiw	r26, 0x02	; 2
    289c:	8c e5       	ldi	r24, 0x5C	; 92
    289e:	90 e2       	ldi	r25, 0x20	; 32
    28a0:	0d c0       	rjmp	.+26     	; 0x28bc <set_hwConfig+0x70>
    else if (config_num < 1000)
        sprintf(str, "cfg0%d.cfg\0", config_num);
    28a2:	00 d0       	rcall	.+0      	; 0x28a4 <set_hwConfig+0x58>
    28a4:	00 d0       	rcall	.+0      	; 0x28a6 <set_hwConfig+0x5a>
    28a6:	ed b7       	in	r30, 0x3d	; 61
    28a8:	fe b7       	in	r31, 0x3e	; 62
    28aa:	31 96       	adiw	r30, 0x01	; 1
    28ac:	ad b7       	in	r26, 0x3d	; 61
    28ae:	be b7       	in	r27, 0x3e	; 62
    28b0:	11 96       	adiw	r26, 0x01	; 1
    28b2:	8d 93       	st	X+, r24
    28b4:	9c 93       	st	X, r25
    28b6:	12 97       	sbiw	r26, 0x02	; 2
    28b8:	89 e6       	ldi	r24, 0x69	; 105
    28ba:	90 e2       	ldi	r25, 0x20	; 32
    28bc:	82 83       	std	Z+2, r24	; 0x02
    28be:	93 83       	std	Z+3, r25	; 0x03
    28c0:	24 83       	std	Z+4, r18	; 0x04
    28c2:	15 82       	std	Z+5, r1	; 0x05
    28c4:	0e 94 59 5d 	call	0xbab2	; 0xbab2 <sprintf>
    28c8:	ed b7       	in	r30, 0x3d	; 61
    28ca:	fe b7       	in	r31, 0x3e	; 62
    28cc:	36 96       	adiw	r30, 0x06	; 6
    28ce:	ed bf       	out	0x3d, r30	; 61
    28d0:	fe bf       	out	0x3e, r31	; 62
    else
        xputs(PSTR("config_num is too big.\n"));
			
    res = f_open(&file4, str, FA_OPEN_EXISTING | FA_READ);
    28d2:	83 e0       	ldi	r24, 0x03	; 3
    28d4:	98 e2       	ldi	r25, 0x28	; 40
    28d6:	6d ef       	ldi	r22, 0xFD	; 253
    28d8:	74 e2       	ldi	r23, 0x24	; 36
    28da:	41 e0       	ldi	r20, 0x01	; 1
    28dc:	0e 94 68 4f 	call	0x9ed0	; 0x9ed0 <f_open>
    if (res == FR_OK) {
    28e0:	88 23       	and	r24, r24
    28e2:	c9 f5       	brne	.+114    	; 0x2956 <set_hwConfig+0x10a>
        // looks good, read in the 128 byte panel mapping info
        res = f_read(&file4, tempBuff, 128, &cnt);
    28e4:	f3 e0       	ldi	r31, 0x03	; 3
    28e6:	cf 2e       	mov	r12, r31
    28e8:	d1 2c       	mov	r13, r1
    28ea:	cc 0e       	add	r12, r28
    28ec:	dd 1e       	adc	r13, r29
    28ee:	83 e0       	ldi	r24, 0x03	; 3
    28f0:	98 e2       	ldi	r25, 0x28	; 40
    28f2:	b6 01       	movw	r22, r12
    28f4:	40 e8       	ldi	r20, 0x80	; 128
    28f6:	50 e0       	ldi	r21, 0x00	; 0
    28f8:	9e 01       	movw	r18, r28
    28fa:	2f 5f       	subi	r18, 0xFF	; 255
    28fc:	3f 4f       	sbci	r19, 0xFF	; 255
    28fe:	0e 94 7f 50 	call	0xa0fe	; 0xa0fe <f_read>
        if ((res == FR_OK) && (cnt == 128)) {
    2902:	88 23       	and	r24, r24
    2904:	09 f5       	brne	.+66     	; 0x2948 <set_hwConfig+0xfc>
    2906:	89 81       	ldd	r24, Y+1	; 0x01
    2908:	9a 81       	ldd	r25, Y+2	; 0x02
    290a:	80 38       	cpi	r24, 0x80	; 128
    290c:	91 05       	cpc	r25, r1
    290e:	e1 f4       	brne	.+56     	; 0x2948 <set_hwConfig+0xfc>
    2910:	e7 e3       	ldi	r30, 0x37	; 55
    2912:	ee 2e       	mov	r14, r30
    2914:	e7 e2       	ldi	r30, 0x27	; 39
    2916:	fe 2e       	mov	r15, r30
    2918:	00 e0       	ldi	r16, 0x00	; 0
    291a:	10 e0       	ldi	r17, 0x00	; 0
            //copy to the mapping tables
            for (b1 = 1; b1 <= 128; b1++) {
				chMap[b1] = tempBuff[b1-1]; // panel 0 doesn't exist
    291c:	f6 01       	movw	r30, r12
    291e:	e0 0f       	add	r30, r16
    2920:	f1 1f       	adc	r31, r17
    2922:	60 81       	ld	r22, Z
    2924:	d7 01       	movw	r26, r14
    2926:	6d 93       	st	X+, r22
    2928:	7d 01       	movw	r14, r26
    } else
    xputs(PSTR("Error opening pattern file\n"));

}

void set_hwConfig(uint8_t config_num) {
    292a:	0f 5f       	subi	r16, 0xFF	; 255
    292c:	1f 4f       	sbci	r17, 0xFF	; 255
        res = f_read(&file4, tempBuff, 128, &cnt);
        if ((res == FR_OK) && (cnt == 128)) {
            //copy to the mapping tables
            for (b1 = 1; b1 <= 128; b1++) {
				chMap[b1] = tempBuff[b1-1]; // panel 0 doesn't exist
				eeprom_write_byte(arena_config + b1, tempBuff[b1-1]);
    292e:	c8 01       	movw	r24, r16
    2930:	8f 5f       	subi	r24, 0xFF	; 255
    2932:	9f 4f       	sbci	r25, 0xFF	; 255
    2934:	0e 94 94 5f 	call	0xbf28	; 0xbf28 <__eewr_byte_x128a1>
    if (res == FR_OK) {
        // looks good, read in the 128 byte panel mapping info
        res = f_read(&file4, tempBuff, 128, &cnt);
        if ((res == FR_OK) && (cnt == 128)) {
            //copy to the mapping tables
            for (b1 = 1; b1 <= 128; b1++) {
    2938:	00 38       	cpi	r16, 0x80	; 128
    293a:	11 05       	cpc	r17, r1
    293c:	79 f7       	brne	.-34     	; 0x291c <set_hwConfig+0xd0>
				chMap[b1] = tempBuff[b1-1]; // panel 0 doesn't exist
				eeprom_write_byte(arena_config + b1, tempBuff[b1-1]);
            }
		    eeprom_write_byte(arena_config, 0x00); //Mark arena configuration file in EEPROM
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	60 e0       	ldi	r22, 0x00	; 0
    2944:	0e 94 94 5f 	call	0xbf28	; 0xbf28 <__eewr_byte_x128a1>
        }
        f_close(&file4);
    2948:	83 e0       	ldi	r24, 0x03	; 3
    294a:	98 e2       	ldi	r25, 0x28	; 40
    294c:	0e 94 ac 4b 	call	0x9758	; 0x9758 <f_close>
        xputs(PSTR("Successfully load the hardware config file to EEPROM\n"));
    2950:	86 e9       	ldi	r24, 0x96	; 150
    2952:	97 e0       	ldi	r25, 0x07	; 7
    2954:	02 c0       	rjmp	.+4      	; 0x295a <set_hwConfig+0x10e>
    }
    else{
        xputs(PSTR("Cannot find the hardware config file on the SD card.\n"));
    2956:	80 e6       	ldi	r24, 0x60	; 96
    2958:	97 e0       	ldi	r25, 0x07	; 7
    295a:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
    }
}
    295e:	ce 57       	subi	r28, 0x7E	; 126
    2960:	df 4f       	sbci	r29, 0xFF	; 255
    2962:	e8 e0       	ldi	r30, 0x08	; 8
    2964:	0c 94 1f 5b 	jmp	0xb63e	; 0xb63e <__epilogue_restores__+0x14>

00002968 <toggle_trigger>:
}


void toggle_trigger(void) {
    
    digitalToggle(3); //toggle digital 3 to trigger camera
    2968:	83 e0       	ldi	r24, 0x03	; 3
    296a:	0e 94 60 24 	call	0x48c0	; 0x48c0 <digitalToggle>
}
    296e:	08 95       	ret

00002970 <Update_display>:
	
	digitalWrite(1, LOW); // set line low at end of frame write

}

void Update_display(void) {
    2970:	a0 e0       	ldi	r26, 0x00	; 0
    2972:	b0 e0       	ldi	r27, 0x00	; 0
    2974:	ee eb       	ldi	r30, 0xBE	; 190
    2976:	f4 e1       	ldi	r31, 0x14	; 20
    2978:	0c 94 ff 5a 	jmp	0xb5fe	; 0xb5fe <__prologue_saves__+0xc>
	int32_t temp_index_x, temp_index_y;	
	int16_t  X_val, Y_val;

    //there are five modes 0 - OL, 1 - CL, 2 - CL w Bias, 3 - POS mode with ch5, 4 - POS mode from pos func 5 - function DBG mode
    
    switch(x_mode) {
    297c:	80 91 b7 27 	lds	r24, 0x27B7
    2980:	81 30       	cpi	r24, 0x01	; 1
    2982:	11 f1       	breq	.+68     	; 0x29c8 <Update_display+0x58>
    2984:	81 30       	cpi	r24, 0x01	; 1
    2986:	38 f0       	brcs	.+14     	; 0x2996 <Update_display+0x26>
    2988:	82 30       	cpi	r24, 0x02	; 2
    298a:	09 f4       	brne	.+2      	; 0x298e <Update_display+0x1e>
    298c:	48 c0       	rjmp	.+144    	; 0x2a1e <Update_display+0xae>
    298e:	83 30       	cpi	r24, 0x03	; 3
    2990:	09 f0       	breq	.+2      	; 0x2994 <Update_display+0x24>
    2992:	e0 c0       	rjmp	.+448    	; 0x2b54 <Update_display+0x1e4>
    2994:	82 c0       	rjmp	.+260    	; 0x2a9a <Update_display+0x12a>
        case 0:   // open loop - use function generator to set x rate
            X_val = 2*function_X[func_read_index_x];
    2996:	e0 91 ef 24 	lds	r30, 0x24EF
            X_rate = ((X_val*gain_x)/10 + 5*bias_x)/2;
    299a:	20 91 02 28 	lds	r18, 0x2802
    299e:	33 27       	eor	r19, r19
    29a0:	27 fd       	sbrc	r18, 7
    29a2:	30 95       	com	r19
    29a4:	22 0f       	add	r18, r18
    29a6:	33 1f       	adc	r19, r19
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	ee 0f       	add	r30, r30
    29ac:	ff 1f       	adc	r31, r31
    29ae:	eb 5d       	subi	r30, 0xDB	; 219
    29b0:	f7 4d       	sbci	r31, 0xD7	; 215
    29b2:	80 81       	ld	r24, Z
    29b4:	91 81       	ldd	r25, Z+1	; 0x01
    29b6:	ac 01       	movw	r20, r24
    29b8:	24 9f       	mul	r18, r20
    29ba:	c0 01       	movw	r24, r0
    29bc:	25 9f       	mul	r18, r21
    29be:	90 0d       	add	r25, r0
    29c0:	34 9f       	mul	r19, r20
    29c2:	90 0d       	add	r25, r0
    29c4:	11 24       	eor	r1, r1
    29c6:	1d c0       	rjmp	.+58     	; 0x2a02 <Update_display+0x92>
            break;
        case 1: //closed loop, use CH0 - CH1 to set x rate
            X_ADC1 = analogRead(0)/4;  // 1 volt = 102 frames/sec
    29c8:	80 e0       	ldi	r24, 0x00	; 0
    29ca:	0e 94 71 24 	call	0x48e2	; 0x48e2 <analogRead>
            temp_ADC_val = X_val; //the previous value
            X_val = ( 6*temp_ADC_val + 4*X_ADC1 )/10;   //this is a 60% old value, 40% new value smoother
    29ce:	64 e0       	ldi	r22, 0x04	; 4
    29d0:	70 e0       	ldi	r23, 0x00	; 0
    29d2:	0e 94 a9 5a 	call	0xb552	; 0xb552 <__divmodhi4>
    29d6:	cb 01       	movw	r24, r22
            X_rate = (int16_t)((int32_t)(X_val*gain_x)/10 + 5*bias_x)/2;  //X_val can go as high as 4095, gain_x 100fiu and bias_x 250
    29d8:	88 0f       	add	r24, r24
    29da:	99 1f       	adc	r25, r25
    29dc:	88 0f       	add	r24, r24
    29de:	99 1f       	adc	r25, r25
    29e0:	6a e0       	ldi	r22, 0x0A	; 10
    29e2:	70 e0       	ldi	r23, 0x00	; 0
    29e4:	0e 94 a9 5a 	call	0xb552	; 0xb552 <__divmodhi4>
    29e8:	80 91 02 28 	lds	r24, 0x2802
    29ec:	99 27       	eor	r25, r25
    29ee:	87 fd       	sbrc	r24, 7
    29f0:	90 95       	com	r25
    29f2:	9c 01       	movw	r18, r24
    29f4:	62 9f       	mul	r22, r18
    29f6:	c0 01       	movw	r24, r0
    29f8:	63 9f       	mul	r22, r19
    29fa:	90 0d       	add	r25, r0
    29fc:	72 9f       	mul	r23, r18
    29fe:	90 0d       	add	r25, r0
    2a00:	11 24       	eor	r1, r1
    2a02:	6a e0       	ldi	r22, 0x0A	; 10
    2a04:	70 e0       	ldi	r23, 0x00	; 0
    2a06:	0e 94 a9 5a 	call	0xb552	; 0xb552 <__divmodhi4>
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	20 91 9b 25 	lds	r18, 0x259B
    2a10:	45 e0       	ldi	r20, 0x05	; 5
    2a12:	24 02       	muls	r18, r20
    2a14:	90 01       	movw	r18, r0
    2a16:	11 24       	eor	r1, r1
    2a18:	82 0f       	add	r24, r18
    2a1a:	93 1f       	adc	r25, r19
    2a1c:	38 c0       	rjmp	.+112    	; 0x2a8e <Update_display+0x11e>
            //    X_rate = 256;
            //else if (X_rate < -256)
            //    X_rate = -256;
            break;
        case 2: //closed loop w bias - use CH0 - CH1, and function gen. to set x rate
            X_ADC1 = analogRead(0)/4; // 1 volt = 102
    2a1e:	80 e0       	ldi	r24, 0x00	; 0
    2a20:	0e 94 71 24 	call	0x48e2	; 0x48e2 <analogRead>
            temp_ADC_val = X_val; //the previous value
            X_val = ( 6*temp_ADC_val + 4*X_ADC1 )/10;   //this is a 60% old value, 40% new value smoother
    2a24:	64 e0       	ldi	r22, 0x04	; 4
    2a26:	70 e0       	ldi	r23, 0x00	; 0
    2a28:	0e 94 a9 5a 	call	0xb552	; 0xb552 <__divmodhi4>
    2a2c:	cb 01       	movw	r24, r22
            //add in the bias to CL mode on ch X
            X_rate = (int16_t)((int32_t)(X_val*gain_x)/10 + 2*function_X[func_read_index_x] + 5*bias_x)/2;
    2a2e:	e0 91 ef 24 	lds	r30, 0x24EF
    2a32:	f0 e0       	ldi	r31, 0x00	; 0
    2a34:	ee 0f       	add	r30, r30
    2a36:	ff 1f       	adc	r31, r31
    2a38:	eb 5d       	subi	r30, 0xDB	; 219
    2a3a:	f7 4d       	sbci	r31, 0xD7	; 215
    2a3c:	01 90       	ld	r0, Z+
    2a3e:	f0 81       	ld	r31, Z
    2a40:	e0 2d       	mov	r30, r0
    2a42:	ee 0f       	add	r30, r30
    2a44:	ff 1f       	adc	r31, r31
    2a46:	20 91 9b 25 	lds	r18, 0x259B
    2a4a:	45 e0       	ldi	r20, 0x05	; 5
    2a4c:	24 02       	muls	r18, r20
    2a4e:	90 01       	movw	r18, r0
    2a50:	11 24       	eor	r1, r1
    2a52:	e2 0f       	add	r30, r18
    2a54:	f3 1f       	adc	r31, r19
    2a56:	88 0f       	add	r24, r24
    2a58:	99 1f       	adc	r25, r25
    2a5a:	88 0f       	add	r24, r24
    2a5c:	99 1f       	adc	r25, r25
    2a5e:	6a e0       	ldi	r22, 0x0A	; 10
    2a60:	70 e0       	ldi	r23, 0x00	; 0
    2a62:	0e 94 a9 5a 	call	0xb552	; 0xb552 <__divmodhi4>
    2a66:	80 91 02 28 	lds	r24, 0x2802
    2a6a:	99 27       	eor	r25, r25
    2a6c:	87 fd       	sbrc	r24, 7
    2a6e:	90 95       	com	r25
    2a70:	ac 01       	movw	r20, r24
    2a72:	64 9f       	mul	r22, r20
    2a74:	c0 01       	movw	r24, r0
    2a76:	65 9f       	mul	r22, r21
    2a78:	90 0d       	add	r25, r0
    2a7a:	74 9f       	mul	r23, r20
    2a7c:	90 0d       	add	r25, r0
    2a7e:	11 24       	eor	r1, r1
    2a80:	6a e0       	ldi	r22, 0x0A	; 10
    2a82:	70 e0       	ldi	r23, 0x00	; 0
    2a84:	0e 94 a9 5a 	call	0xb552	; 0xb552 <__divmodhi4>
    2a88:	cf 01       	movw	r24, r30
    2a8a:	86 0f       	add	r24, r22
    2a8c:	97 1f       	adc	r25, r23
    2a8e:	62 e0       	ldi	r22, 0x02	; 2
    2a90:	70 e0       	ldi	r23, 0x00	; 0
    2a92:	0e 94 a9 5a 	call	0xb552	; 0xb552 <__divmodhi4>
    2a96:	4b 01       	movw	r8, r22
    2a98:	5f c0       	rjmp	.+190    	; 0x2b58 <Update_display+0x1e8>
            break;
        case 3: // POS mode, use CH2 to set the frame position (pos ctrl, not vel ctrl)
	        X_ADC2 = analogRead(2);  //X_ADC2 ranges from 0-4095 (12bit ADC) when input 0-10V
    2a9a:	82 e0       	ldi	r24, 0x02	; 2
    2a9c:	0e 94 71 24 	call	0x48e2	; 0x48e2 <analogRead>
    2aa0:	fc 01       	movw	r30, r24

			if (X_ADC2>resolution_x) {X_ADC2 = resolution_x;}
    2aa2:	80 91 9d 20 	lds	r24, 0x209D
    2aa6:	90 91 9e 20 	lds	r25, 0x209E
    2aaa:	8e 17       	cp	r24, r30
    2aac:	9f 07       	cpc	r25, r31
    2aae:	08 f4       	brcc	.+2      	; 0x2ab2 <Update_display+0x142>
    2ab0:	fc 01       	movw	r30, r24
			
			//calculate the index_x                                               
			temp_index_x = ((int32_t)X_ADC2 * x_num * 2 + resolution_x) / ((int32_t) resolution_x * 2) - 1;
    2ab2:	c0 91 23 28 	lds	r28, 0x2823
    2ab6:	d0 91 24 28 	lds	r29, 0x2824
    2aba:	5e 01       	movw	r10, r28
    2abc:	cc 24       	eor	r12, r12
    2abe:	dd 24       	eor	r13, r13
    2ac0:	7c 01       	movw	r14, r24
    2ac2:	00 e0       	ldi	r16, 0x00	; 0
    2ac4:	10 e0       	ldi	r17, 0x00	; 0
    2ac6:	c6 01       	movw	r24, r12
    2ac8:	b5 01       	movw	r22, r10
    2aca:	66 0f       	add	r22, r22
    2acc:	77 1f       	adc	r23, r23
    2ace:	88 1f       	adc	r24, r24
    2ad0:	99 1f       	adc	r25, r25
    2ad2:	9f 01       	movw	r18, r30
    2ad4:	44 27       	eor	r20, r20
    2ad6:	37 fd       	sbrc	r19, 7
    2ad8:	40 95       	com	r20
    2ada:	54 2f       	mov	r21, r20
    2adc:	0e 94 76 5a 	call	0xb4ec	; 0xb4ec <__mulsi3>
    2ae0:	6e 0d       	add	r22, r14
    2ae2:	7f 1d       	adc	r23, r15
    2ae4:	80 1f       	adc	r24, r16
    2ae6:	91 1f       	adc	r25, r17
    2ae8:	ee 0c       	add	r14, r14
    2aea:	ff 1c       	adc	r15, r15
    2aec:	00 1f       	adc	r16, r16
    2aee:	11 1f       	adc	r17, r17
    2af0:	a8 01       	movw	r20, r16
    2af2:	97 01       	movw	r18, r14
    2af4:	0e 94 de 5a 	call	0xb5bc	; 0xb5bc <__divmodsi4>
    2af8:	21 50       	subi	r18, 0x01	; 1
    2afa:	30 40       	sbci	r19, 0x00	; 0
    2afc:	40 40       	sbci	r20, 0x00	; 0
    2afe:	50 40       	sbci	r21, 0x00	; 0
				
            if (temp_index_x >= x_num)  {temp_index_x = x_num - 1;} //check if too big
    2b00:	2a 15       	cp	r18, r10
    2b02:	3b 05       	cpc	r19, r11
    2b04:	4c 05       	cpc	r20, r12
    2b06:	5d 05       	cpc	r21, r13
    2b08:	2c f0       	brlt	.+10     	; 0x2b14 <Update_display+0x1a4>
    2b0a:	21 97       	sbiw	r28, 0x01	; 1
    2b0c:	9e 01       	movw	r18, r28
    2b0e:	40 e0       	ldi	r20, 0x00	; 0
    2b10:	50 e0       	ldi	r21, 0x00	; 0
    2b12:	21 96       	adiw	r28, 0x01	; 1
            if (temp_index_x <= 0)  {temp_index_x = 0;} //or too small
			index_x = temp_index_x;
    2b14:	57 ff       	sbrs	r21, 7
    2b16:	04 c0       	rjmp	.+8      	; 0x2b20 <Update_display+0x1b0>
    2b18:	20 e0       	ldi	r18, 0x00	; 0
    2b1a:	30 e0       	ldi	r19, 0x00	; 0
    2b1c:	40 e0       	ldi	r20, 0x00	; 0
    2b1e:	50 e0       	ldi	r21, 0x00	; 0
    2b20:	20 93 b9 27 	sts	0x27B9, r18
    2b24:	30 93 ba 27 	sts	0x27BA, r19
			
            frame_num = index_y*x_num + index_x;
    2b28:	80 91 6e 29 	lds	r24, 0x296E
    2b2c:	90 91 6f 29 	lds	r25, 0x296F
    2b30:	20 91 b9 27 	lds	r18, 0x27B9
    2b34:	30 91 ba 27 	lds	r19, 0x27BA
    2b38:	bc 01       	movw	r22, r24
    2b3a:	6c 9f       	mul	r22, r28
    2b3c:	c0 01       	movw	r24, r0
    2b3e:	6d 9f       	mul	r22, r29
    2b40:	90 0d       	add	r25, r0
    2b42:	7c 9f       	mul	r23, r28
    2b44:	90 0d       	add	r25, r0
    2b46:	11 24       	eor	r1, r1
    2b48:	82 0f       	add	r24, r18
    2b4a:	93 1f       	adc	r25, r19
    2b4c:	80 93 ed 24 	sts	0x24ED, r24
    2b50:	90 93 ee 24 	sts	0x24EE, r25
    2b54:	88 24       	eor	r8, r8
    2b56:	99 24       	eor	r9, r9
			break;			
    }

	
    
    switch(y_mode) {
    2b58:	80 91 01 28 	lds	r24, 0x2801
    2b5c:	81 30       	cpi	r24, 0x01	; 1
    2b5e:	11 f1       	breq	.+68     	; 0x2ba4 <Update_display+0x234>
    2b60:	81 30       	cpi	r24, 0x01	; 1
    2b62:	38 f0       	brcs	.+14     	; 0x2b72 <Update_display+0x202>
    2b64:	82 30       	cpi	r24, 0x02	; 2
    2b66:	09 f4       	brne	.+2      	; 0x2b6a <Update_display+0x1fa>
    2b68:	48 c0       	rjmp	.+144    	; 0x2bfa <Update_display+0x28a>
    2b6a:	83 30       	cpi	r24, 0x03	; 3
    2b6c:	09 f0       	breq	.+2      	; 0x2b70 <Update_display+0x200>
    2b6e:	e3 c0       	rjmp	.+454    	; 0x2d36 <Update_display+0x3c6>
    2b70:	82 c0       	rjmp	.+260    	; 0x2c76 <Update_display+0x306>
        case 0:   // open loop - use function generator to set x rate
            Y_val = 2*function_Y[func_read_index_y];
    2b72:	e0 91 f0 24 	lds	r30, 0x24F0
            Y_rate = ((Y_val*gain_y)/10 + 5*bias_y)/2;
    2b76:	20 91 bb 27 	lds	r18, 0x27BB
    2b7a:	33 27       	eor	r19, r19
    2b7c:	27 fd       	sbrc	r18, 7
    2b7e:	30 95       	com	r19
    2b80:	22 0f       	add	r18, r18
    2b82:	33 1f       	adc	r19, r19
    2b84:	f0 e0       	ldi	r31, 0x00	; 0
    2b86:	ee 0f       	add	r30, r30
    2b88:	ff 1f       	adc	r31, r31
    2b8a:	e2 55       	subi	r30, 0x52	; 82
    2b8c:	fa 4d       	sbci	r31, 0xDA	; 218
    2b8e:	80 81       	ld	r24, Z
    2b90:	91 81       	ldd	r25, Z+1	; 0x01
    2b92:	ac 01       	movw	r20, r24
    2b94:	24 9f       	mul	r18, r20
    2b96:	c0 01       	movw	r24, r0
    2b98:	25 9f       	mul	r18, r21
    2b9a:	90 0d       	add	r25, r0
    2b9c:	34 9f       	mul	r19, r20
    2b9e:	90 0d       	add	r25, r0
    2ba0:	11 24       	eor	r1, r1
    2ba2:	1d c0       	rjmp	.+58     	; 0x2bde <Update_display+0x26e>
            break;
        case 1: //closed loop, use CH2 - CH3 to set x rate
            Y_ADC1 = analogRead(1)/4; // 1 volt = 102fps
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	0e 94 71 24 	call	0x48e2	; 0x48e2 <analogRead>
            temp_ADC_val = Y_val; //the previous value
            Y_val = ( 6*temp_ADC_val + 4*Y_ADC1)/10;   //this is a 60% old value, 40% new value smoother
    2baa:	64 e0       	ldi	r22, 0x04	; 4
    2bac:	70 e0       	ldi	r23, 0x00	; 0
    2bae:	0e 94 a9 5a 	call	0xb552	; 0xb552 <__divmodhi4>
    2bb2:	cb 01       	movw	r24, r22
            Y_rate = (int16_t)((int32_t)(Y_val*gain_y)/10 + 5*bias_y)/2; //Y_val can go as high as 4095, gain_y 100, and bias_y 250.
    2bb4:	88 0f       	add	r24, r24
    2bb6:	99 1f       	adc	r25, r25
    2bb8:	88 0f       	add	r24, r24
    2bba:	99 1f       	adc	r25, r25
    2bbc:	6a e0       	ldi	r22, 0x0A	; 10
    2bbe:	70 e0       	ldi	r23, 0x00	; 0
    2bc0:	0e 94 a9 5a 	call	0xb552	; 0xb552 <__divmodhi4>
    2bc4:	80 91 bb 27 	lds	r24, 0x27BB
    2bc8:	99 27       	eor	r25, r25
    2bca:	87 fd       	sbrc	r24, 7
    2bcc:	90 95       	com	r25
    2bce:	9c 01       	movw	r18, r24
    2bd0:	62 9f       	mul	r22, r18
    2bd2:	c0 01       	movw	r24, r0
    2bd4:	63 9f       	mul	r22, r19
    2bd6:	90 0d       	add	r25, r0
    2bd8:	72 9f       	mul	r23, r18
    2bda:	90 0d       	add	r25, r0
    2bdc:	11 24       	eor	r1, r1
    2bde:	6a e0       	ldi	r22, 0x0A	; 10
    2be0:	70 e0       	ldi	r23, 0x00	; 0
    2be2:	0e 94 a9 5a 	call	0xb552	; 0xb552 <__divmodhi4>
    2be6:	cb 01       	movw	r24, r22
    2be8:	20 91 d2 2b 	lds	r18, 0x2BD2
    2bec:	45 e0       	ldi	r20, 0x05	; 5
    2bee:	24 02       	muls	r18, r20
    2bf0:	90 01       	movw	r18, r0
    2bf2:	11 24       	eor	r1, r1
    2bf4:	82 0f       	add	r24, r18
    2bf6:	93 1f       	adc	r25, r19
    2bf8:	38 c0       	rjmp	.+112    	; 0x2c6a <Update_display+0x2fa>
            //else if (Y_rate < -256)
            //    Y_rate = -256;
            
            break;
        case 2: //closed loop w bias - use CH2 - CH3, and function gen. to set x rate
            Y_ADC1 = analogRead(1)/4; // 1 volt = 102
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	0e 94 71 24 	call	0x48e2	; 0x48e2 <analogRead>
            temp_ADC_val = Y_val; //the previous value
            Y_val = ( 6*temp_ADC_val + 4*Y_ADC1)/10;   //this is a 60% old value, 40% new value smoother
    2c00:	64 e0       	ldi	r22, 0x04	; 4
    2c02:	70 e0       	ldi	r23, 0x00	; 0
    2c04:	0e 94 a9 5a 	call	0xb552	; 0xb552 <__divmodhi4>
    2c08:	cb 01       	movw	r24, r22
            //add in the bias to CL mode on ch Y
            Y_rate = (int16_t)((int32_t)(Y_val*gain_y)/10 + 2*function_Y[func_read_index_y] + 5*bias_y)/2; //Y_val can go as high as 4095
    2c0a:	e0 91 f0 24 	lds	r30, 0x24F0
    2c0e:	f0 e0       	ldi	r31, 0x00	; 0
    2c10:	ee 0f       	add	r30, r30
    2c12:	ff 1f       	adc	r31, r31
    2c14:	e2 55       	subi	r30, 0x52	; 82
    2c16:	fa 4d       	sbci	r31, 0xDA	; 218
    2c18:	01 90       	ld	r0, Z+
    2c1a:	f0 81       	ld	r31, Z
    2c1c:	e0 2d       	mov	r30, r0
    2c1e:	ee 0f       	add	r30, r30
    2c20:	ff 1f       	adc	r31, r31
    2c22:	20 91 d2 2b 	lds	r18, 0x2BD2
    2c26:	45 e0       	ldi	r20, 0x05	; 5
    2c28:	24 02       	muls	r18, r20
    2c2a:	90 01       	movw	r18, r0
    2c2c:	11 24       	eor	r1, r1
    2c2e:	e2 0f       	add	r30, r18
    2c30:	f3 1f       	adc	r31, r19
    2c32:	88 0f       	add	r24, r24
    2c34:	99 1f       	adc	r25, r25
    2c36:	88 0f       	add	r24, r24
    2c38:	99 1f       	adc	r25, r25
    2c3a:	6a e0       	ldi	r22, 0x0A	; 10
    2c3c:	70 e0       	ldi	r23, 0x00	; 0
    2c3e:	0e 94 a9 5a 	call	0xb552	; 0xb552 <__divmodhi4>
    2c42:	80 91 bb 27 	lds	r24, 0x27BB
    2c46:	99 27       	eor	r25, r25
    2c48:	87 fd       	sbrc	r24, 7
    2c4a:	90 95       	com	r25
    2c4c:	ac 01       	movw	r20, r24
    2c4e:	64 9f       	mul	r22, r20
    2c50:	c0 01       	movw	r24, r0
    2c52:	65 9f       	mul	r22, r21
    2c54:	90 0d       	add	r25, r0
    2c56:	74 9f       	mul	r23, r20
    2c58:	90 0d       	add	r25, r0
    2c5a:	11 24       	eor	r1, r1
    2c5c:	6a e0       	ldi	r22, 0x0A	; 10
    2c5e:	70 e0       	ldi	r23, 0x00	; 0
    2c60:	0e 94 a9 5a 	call	0xb552	; 0xb552 <__divmodhi4>
    2c64:	cf 01       	movw	r24, r30
    2c66:	86 0f       	add	r24, r22
    2c68:	97 1f       	adc	r25, r23
    2c6a:	62 e0       	ldi	r22, 0x02	; 2
    2c6c:	70 e0       	ldi	r23, 0x00	; 0
    2c6e:	0e 94 a9 5a 	call	0xb552	; 0xb552 <__divmodhi4>
    2c72:	eb 01       	movw	r28, r22
    2c74:	62 c0       	rjmp	.+196    	; 0x2d3a <Update_display+0x3ca>
            break;
        case 3: // POS mode, use CH3 to set the frame position (pos ctrl, not vel ctrl)
            Y_ADC2 = analogRead(3);   //Y_ADC2 ranges from 0-4095 when input 0-10V
    2c76:	83 e0       	ldi	r24, 0x03	; 3
    2c78:	0e 94 71 24 	call	0x48e2	; 0x48e2 <analogRead>
    2c7c:	fc 01       	movw	r30, r24
			
			if (Y_ADC2>resolution_y) {Y_ADC2 = resolution_y;}
    2c7e:	80 91 9f 20 	lds	r24, 0x209F
    2c82:	90 91 a0 20 	lds	r25, 0x20A0
    2c86:	8e 17       	cp	r24, r30
    2c88:	9f 07       	cpc	r25, r31
    2c8a:	08 f4       	brcc	.+2      	; 0x2c8e <Update_display+0x31e>
    2c8c:	fc 01       	movw	r30, r24
			
			//calculate the index_x                                               
			temp_index_y = ((int32_t)Y_ADC2 * y_num * 2 + resolution_y) / ((int32_t) resolution_y * 2) - 1;
    2c8e:	c0 91 ab 25 	lds	r28, 0x25AB
    2c92:	d0 91 ac 25 	lds	r29, 0x25AC
    2c96:	5e 01       	movw	r10, r28
    2c98:	cc 24       	eor	r12, r12
    2c9a:	dd 24       	eor	r13, r13
    2c9c:	7c 01       	movw	r14, r24
    2c9e:	00 e0       	ldi	r16, 0x00	; 0
    2ca0:	10 e0       	ldi	r17, 0x00	; 0
    2ca2:	c6 01       	movw	r24, r12
    2ca4:	b5 01       	movw	r22, r10
    2ca6:	66 0f       	add	r22, r22
    2ca8:	77 1f       	adc	r23, r23
    2caa:	88 1f       	adc	r24, r24
    2cac:	99 1f       	adc	r25, r25
    2cae:	9f 01       	movw	r18, r30
    2cb0:	44 27       	eor	r20, r20
    2cb2:	37 fd       	sbrc	r19, 7
    2cb4:	40 95       	com	r20
    2cb6:	54 2f       	mov	r21, r20
    2cb8:	0e 94 76 5a 	call	0xb4ec	; 0xb4ec <__mulsi3>
    2cbc:	6e 0d       	add	r22, r14
    2cbe:	7f 1d       	adc	r23, r15
    2cc0:	80 1f       	adc	r24, r16
    2cc2:	91 1f       	adc	r25, r17
    2cc4:	ee 0c       	add	r14, r14
    2cc6:	ff 1c       	adc	r15, r15
    2cc8:	00 1f       	adc	r16, r16
    2cca:	11 1f       	adc	r17, r17
    2ccc:	a8 01       	movw	r20, r16
    2cce:	97 01       	movw	r18, r14
    2cd0:	0e 94 de 5a 	call	0xb5bc	; 0xb5bc <__divmodsi4>
    2cd4:	21 50       	subi	r18, 0x01	; 1
    2cd6:	30 40       	sbci	r19, 0x00	; 0
    2cd8:	40 40       	sbci	r20, 0x00	; 0
    2cda:	50 40       	sbci	r21, 0x00	; 0
			
            if (temp_index_y >= y_num)  {temp_index_y = y_num - 1;} //check if too big
    2cdc:	2a 15       	cp	r18, r10
    2cde:	3b 05       	cpc	r19, r11
    2ce0:	4c 05       	cpc	r20, r12
    2ce2:	5d 05       	cpc	r21, r13
    2ce4:	24 f0       	brlt	.+8      	; 0x2cee <Update_display+0x37e>
    2ce6:	21 97       	sbiw	r28, 0x01	; 1
    2ce8:	9e 01       	movw	r18, r28
    2cea:	40 e0       	ldi	r20, 0x00	; 0
    2cec:	50 e0       	ldi	r21, 0x00	; 0
            if (temp_index_y <= 0)  {temp_index_y = 0;} //or too small
			index_y = temp_index_y;
    2cee:	57 ff       	sbrs	r21, 7
    2cf0:	04 c0       	rjmp	.+8      	; 0x2cfa <Update_display+0x38a>
    2cf2:	20 e0       	ldi	r18, 0x00	; 0
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	40 e0       	ldi	r20, 0x00	; 0
    2cf8:	50 e0       	ldi	r21, 0x00	; 0
    2cfa:	20 93 6e 29 	sts	0x296E, r18
    2cfe:	30 93 6f 29 	sts	0x296F, r19
            frame_num = index_y*x_num + index_x;
    2d02:	20 91 6e 29 	lds	r18, 0x296E
    2d06:	30 91 6f 29 	lds	r19, 0x296F
    2d0a:	40 91 b9 27 	lds	r20, 0x27B9
    2d0e:	50 91 ba 27 	lds	r21, 0x27BA
    2d12:	80 91 23 28 	lds	r24, 0x2823
    2d16:	90 91 24 28 	lds	r25, 0x2824
    2d1a:	bc 01       	movw	r22, r24
    2d1c:	26 9f       	mul	r18, r22
    2d1e:	c0 01       	movw	r24, r0
    2d20:	27 9f       	mul	r18, r23
    2d22:	90 0d       	add	r25, r0
    2d24:	36 9f       	mul	r19, r22
    2d26:	90 0d       	add	r25, r0
    2d28:	11 24       	eor	r1, r1
    2d2a:	84 0f       	add	r24, r20
    2d2c:	95 1f       	adc	r25, r21
    2d2e:	80 93 ed 24 	sts	0x24ED, r24
    2d32:	90 93 ee 24 	sts	0x24EE, r25
    2d36:	c0 e0       	ldi	r28, 0x00	; 0
    2d38:	d0 e0       	ldi	r29, 0x00	; 0
    //in the above x,y_val computation, there is a div by 10 to take away gain scaling
    //so gain_x of 10 is 1X gain, gain_x of 20 = 2X ...
    
    //here the 2* the rate is because we want 20 = 1V to correspond to 10 fps. could probably do without,
    // and just divide the a2dConvert output by 4, and not scale function_x,y by 2
    if (Stop == 1){
    2d3a:	80 91 9c 20 	lds	r24, 0x209C
    2d3e:	81 30       	cpi	r24, 0x01	; 1
    2d40:	59 f1       	breq	.+86     	; 0x2d98 <Update_display+0x428>
        X_rate = Y_rate = 0;
    }
    
    if (X_rate > 0)
    2d42:	18 14       	cp	r1, r8
    2d44:	19 04       	cpc	r1, r9
    2d46:	74 f4       	brge	.+28     	; 0x2d64 <Update_display+0x3f4>
        Update_Reg_Handler(increment_index_x, (uint32_t)OVERFLOW_RATE/abs(X_rate), 2, 1);
    2d48:	94 01       	movw	r18, r8
    2d4a:	44 27       	eor	r20, r20
    2d4c:	37 fd       	sbrc	r19, 7
    2d4e:	40 95       	com	r20
    2d50:	54 2f       	mov	r21, r20
    2d52:	62 e1       	ldi	r22, 0x12	; 18
    2d54:	7a e7       	ldi	r23, 0x7A	; 122
    2d56:	80 e0       	ldi	r24, 0x00	; 0
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	0e 94 bc 5a 	call	0xb578	; 0xb578 <__udivmodsi4>
    2d5e:	86 e5       	ldi	r24, 0x56	; 86
    2d60:	99 e0       	ldi	r25, 0x09	; 9
    2d62:	13 c0       	rjmp	.+38     	; 0x2d8a <Update_display+0x41a>
    else if (X_rate < 0)
    2d64:	81 14       	cp	r8, r1
    2d66:	91 04       	cpc	r9, r1
    2d68:	c9 f0       	breq	.+50     	; 0x2d9c <Update_display+0x42c>
        Update_Reg_Handler(decrement_index_x, (uint32_t)OVERFLOW_RATE/abs(X_rate), 2, 1);
    2d6a:	22 27       	eor	r18, r18
    2d6c:	33 27       	eor	r19, r19
    2d6e:	28 19       	sub	r18, r8
    2d70:	39 09       	sbc	r19, r9
    2d72:	44 27       	eor	r20, r20
    2d74:	37 fd       	sbrc	r19, 7
    2d76:	40 95       	com	r20
    2d78:	54 2f       	mov	r21, r20
    2d7a:	62 e1       	ldi	r22, 0x12	; 18
    2d7c:	7a e7       	ldi	r23, 0x7A	; 122
    2d7e:	80 e0       	ldi	r24, 0x00	; 0
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	0e 94 bc 5a 	call	0xb578	; 0xb578 <__udivmodsi4>
    2d86:	8a ec       	ldi	r24, 0xCA	; 202
    2d88:	99 e0       	ldi	r25, 0x09	; 9
    2d8a:	ba 01       	movw	r22, r20
    2d8c:	a9 01       	movw	r20, r18
    2d8e:	22 e0       	ldi	r18, 0x02	; 2
    2d90:	01 e0       	ldi	r16, 0x01	; 1
    2d92:	0e 94 4b 32 	call	0x6496	; 0x6496 <Update_Reg_Handler>
    2d96:	0e c0       	rjmp	.+28     	; 0x2db4 <Update_display+0x444>
    2d98:	c0 e0       	ldi	r28, 0x00	; 0
    2d9a:	d0 e0       	ldi	r29, 0x00	; 0
    else     //X_rate == 0
        Update_Reg_Handler(decrement_index_x, (UPDATE_RATE), 2, 0);
    2d9c:	8a ec       	ldi	r24, 0xCA	; 202
    2d9e:	99 e0       	ldi	r25, 0x09	; 9
    2da0:	4e e4       	ldi	r20, 0x4E	; 78
    2da2:	50 e0       	ldi	r21, 0x00	; 0
    2da4:	60 e0       	ldi	r22, 0x00	; 0
    2da6:	70 e0       	ldi	r23, 0x00	; 0
    2da8:	22 e0       	ldi	r18, 0x02	; 2
    2daa:	00 e0       	ldi	r16, 0x00	; 0
    2dac:	0e 94 4b 32 	call	0x6496	; 0x6496 <Update_Reg_Handler>
    2db0:	88 24       	eor	r8, r8
    2db2:	99 24       	eor	r9, r9
    
    
    if (Y_rate > 0)
    2db4:	1c 16       	cp	r1, r28
    2db6:	1d 06       	cpc	r1, r29
    2db8:	74 f4       	brge	.+28     	; 0x2dd6 <Update_display+0x466>
        Update_Reg_Handler(increment_index_y, (uint32_t)OVERFLOW_RATE/abs(Y_rate), 3, 1);
    2dba:	9e 01       	movw	r18, r28
    2dbc:	44 27       	eor	r20, r20
    2dbe:	37 fd       	sbrc	r19, 7
    2dc0:	40 95       	com	r20
    2dc2:	54 2f       	mov	r21, r20
    2dc4:	62 e1       	ldi	r22, 0x12	; 18
    2dc6:	7a e7       	ldi	r23, 0x7A	; 122
    2dc8:	80 e0       	ldi	r24, 0x00	; 0
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	0e 94 bc 5a 	call	0xb578	; 0xb578 <__udivmodsi4>
    2dd0:	8e e8       	ldi	r24, 0x8E	; 142
    2dd2:	99 e0       	ldi	r25, 0x09	; 9
    2dd4:	12 c0       	rjmp	.+36     	; 0x2dfa <Update_display+0x48a>
    else if (Y_rate < 0)
    2dd6:	20 97       	sbiw	r28, 0x00	; 0
    2dd8:	a9 f0       	breq	.+42     	; 0x2e04 <Update_display+0x494>
        Update_Reg_Handler(decrement_index_y, (uint32_t)OVERFLOW_RATE/abs(Y_rate), 3, 1);
    2dda:	22 27       	eor	r18, r18
    2ddc:	33 27       	eor	r19, r19
    2dde:	2c 1b       	sub	r18, r28
    2de0:	3d 0b       	sbc	r19, r29
    2de2:	44 27       	eor	r20, r20
    2de4:	37 fd       	sbrc	r19, 7
    2de6:	40 95       	com	r20
    2de8:	54 2f       	mov	r21, r20
    2dea:	62 e1       	ldi	r22, 0x12	; 18
    2dec:	7a e7       	ldi	r23, 0x7A	; 122
    2dee:	80 e0       	ldi	r24, 0x00	; 0
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	0e 94 bc 5a 	call	0xb578	; 0xb578 <__udivmodsi4>
    2df6:	82 e0       	ldi	r24, 0x02	; 2
    2df8:	9a e0       	ldi	r25, 0x0A	; 10
    2dfa:	ba 01       	movw	r22, r20
    2dfc:	a9 01       	movw	r20, r18
    2dfe:	23 e0       	ldi	r18, 0x03	; 3
    2e00:	01 e0       	ldi	r16, 0x01	; 1
    2e02:	08 c0       	rjmp	.+16     	; 0x2e14 <Update_display+0x4a4>
    else      //Y_rate == 0
        Update_Reg_Handler(decrement_index_y, (UPDATE_RATE), 3, 0);
    2e04:	82 e0       	ldi	r24, 0x02	; 2
    2e06:	9a e0       	ldi	r25, 0x0A	; 10
    2e08:	4e e4       	ldi	r20, 0x4E	; 78
    2e0a:	50 e0       	ldi	r21, 0x00	; 0
    2e0c:	60 e0       	ldi	r22, 0x00	; 0
    2e0e:	70 e0       	ldi	r23, 0x00	; 0
    2e10:	23 e0       	ldi	r18, 0x03	; 3
    2e12:	00 e0       	ldi	r16, 0x00	; 0
    2e14:	0e 94 4b 32 	call	0x6496	; 0x6496 <Update_Reg_Handler>
    
    //if the rates are too high, track the largest one to set warning LED
    x_gt_y = (X_rate >= Y_rate);
    2e18:	10 92 e9 24 	sts	0x24E9, r1
    2e1c:	8c 16       	cp	r8, r28
    2e1e:	9d 06       	cpc	r9, r29
    2e20:	1c f0       	brlt	.+6      	; 0x2e28 <Update_display+0x4b8>
    2e22:	81 e0       	ldi	r24, 0x01	; 1
    2e24:	80 93 e9 24 	sts	0x24E9, r24
}
    2e28:	cd b7       	in	r28, 0x3d	; 61
    2e2a:	de b7       	in	r29, 0x3e	; 62
    2e2c:	ec e0       	ldi	r30, 0x0C	; 12
    2e2e:	0c 94 1b 5b 	jmp	0xb636	; 0xb636 <__epilogue_restores__+0xc>

00002e32 <display_dumped_frame>:
	if (quiet_mode_on == 0)
        xputs(PSTR("Success set the new laser pattern.\n"));

}

void display_dumped_frame (uint8_t *msg_buffer) {
    2e32:	a1 e0       	ldi	r26, 0x01	; 1
    2e34:	b0 e0       	ldi	r27, 0x00	; 0
    2e36:	ef e1       	ldi	r30, 0x1F	; 31
    2e38:	f7 e1       	ldi	r31, 0x17	; 23
    2e3a:	0c 94 01 5b 	jmp	0xb602	; 0xb602 <__prologue_saves__+0x10>
    2e3e:	5c 01       	movw	r10, r24
    //The first two bytes are the x_dac_val, only support positive number 
    //The second two bytes are the y_dac_val, only support positive number 
    //The fifth byte is the number of panels
    //the sixth byte is the gray scale level
    //the seventh byte is the flag of row compression 
    x_dac_val = (uint16_t)msg_buffer[0] + 256*(uint16_t)msg_buffer[1];
    2e40:	fc 01       	movw	r30, r24
    2e42:	e0 80       	ld	r14, Z
    2e44:	f1 80       	ldd	r15, Z+1	; 0x01
    y_dac_val = (uint16_t)msg_buffer[2] + 256*(uint16_t)msg_buffer[3];
    2e46:	c2 80       	ldd	r12, Z+2	; 0x02
    2e48:	d3 80       	ldd	r13, Z+3	; 0x03
    num_panels = msg_buffer[4];
    2e4a:	84 81       	ldd	r24, Z+4	; 0x04
    2e4c:	80 93 ec 24 	sts	0x24EC, r24
    gs_value =msg_buffer[5];
    2e50:	95 81       	ldd	r25, Z+5	; 0x05
    2e52:	90 93 35 27 	sts	0x2735, r25
    row_compress = msg_buffer[6];
    2e56:	86 81       	ldd	r24, Z+6	; 0x06
    2e58:	80 93 ad 25 	sts	0x25AD, r24


    if (row_compress)
    2e5c:	88 23       	and	r24, r24
    2e5e:	19 f0       	breq	.+6      	; 0x2e66 <display_dumped_frame+0x34>
        bytes_per_panel_frame = gs_value;
    2e60:	90 93 b8 27 	sts	0x27B8, r25
    2e64:	09 c0       	rjmp	.+18     	; 0x2e78 <display_dumped_frame+0x46>
    else
        bytes_per_panel_frame = gs_value*8;
    2e66:	89 2f       	mov	r24, r25
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	63 e0       	ldi	r22, 0x03	; 3
    2e6c:	88 0f       	add	r24, r24
    2e6e:	99 1f       	adc	r25, r25
    2e70:	6a 95       	dec	r22
    2e72:	e1 f7       	brne	.-8      	; 0x2e6c <display_dumped_frame+0x3a>
    2e74:	80 93 b8 27 	sts	0x27B8, r24
  
    buffer_index = 7;
    display_flag = 0;  //clear the display flag
    2e78:	10 92 e8 24 	sts	0x24E8, r1
    digitalWrite(1, HIGH); // set line high at beginning of frame write
    2e7c:	81 e0       	ldi	r24, 0x01	; 1
    2e7e:	61 e0       	ldi	r22, 0x01	; 1
    2e80:	0e 94 3f 24 	call	0x487e	; 0x487e <digitalWrite>
    2e84:	91 e0       	ldi	r25, 0x01	; 1
    2e86:	07 e0       	ldi	r16, 0x07	; 7
    2e88:	10 e0       	ldi	r17, 0x00	; 0
    2e8a:	0f c0       	rjmp	.+30     	; 0x2eaa <display_dumped_frame+0x78>
    
    for (panel_index = 1; panel_index <= num_panels; panel_index++){
        i2cMasterSend(panel_index, bytes_per_panel_frame, &msg_buffer[buffer_index]);
    2e8c:	a5 01       	movw	r20, r10
    2e8e:	40 0f       	add	r20, r16
    2e90:	51 1f       	adc	r21, r17
    2e92:	89 2f       	mov	r24, r25
    2e94:	60 91 b8 27 	lds	r22, 0x27B8
    2e98:	99 83       	std	Y+1, r25	; 0x01
    2e9a:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <i2cMasterSend>
        buffer_index = buffer_index + bytes_per_panel_frame;
    2e9e:	80 91 b8 27 	lds	r24, 0x27B8
    2ea2:	08 0f       	add	r16, r24
    2ea4:	11 1d       	adc	r17, r1
  
    buffer_index = 7;
    display_flag = 0;  //clear the display flag
    digitalWrite(1, HIGH); // set line high at beginning of frame write
    
    for (panel_index = 1; panel_index <= num_panels; panel_index++){
    2ea6:	99 81       	ldd	r25, Y+1	; 0x01
    2ea8:	9f 5f       	subi	r25, 0xFF	; 255
    2eaa:	80 91 ec 24 	lds	r24, 0x24EC
    2eae:	89 17       	cp	r24, r25
    2eb0:	68 f7       	brcc	.-38     	; 0x2e8c <display_dumped_frame+0x5a>
        i2cMasterSend(panel_index, bytes_per_panel_frame, &msg_buffer[buffer_index]);
        buffer_index = buffer_index + bytes_per_panel_frame;
    }
    analogWrite(0, x_dac_val); // make it a value in the range 0 - 32767 (0V - 10V)
    2eb2:	7f 2d       	mov	r23, r15
    2eb4:	60 e0       	ldi	r22, 0x00	; 0
    2eb6:	6e 0d       	add	r22, r14
    2eb8:	71 1d       	adc	r23, r1
    2eba:	80 e0       	ldi	r24, 0x00	; 0
    2ebc:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <analogWrite>
    analogWrite(1, y_dac_val);  // make it a value in the range 0 - 32767 (0V - 10V)
    2ec0:	7d 2d       	mov	r23, r13
    2ec2:	60 e0       	ldi	r22, 0x00	; 0
    2ec4:	6c 0d       	add	r22, r12
    2ec6:	71 1d       	adc	r23, r1
    2ec8:	81 e0       	ldi	r24, 0x01	; 1
    2eca:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <analogWrite>
    digitalWrite(1, LOW); // set line low at end of frame write
    2ece:	81 e0       	ldi	r24, 0x01	; 1
    2ed0:	60 e0       	ldi	r22, 0x00	; 0
    2ed2:	0e 94 3f 24 	call	0x487e	; 0x487e <digitalWrite>
}
    2ed6:	21 96       	adiw	r28, 0x01	; 1
    2ed8:	ea e0       	ldi	r30, 0x0A	; 10
    2eda:	0c 94 1d 5b 	jmp	0xb63a	; 0xb63a <__epilogue_restores__+0x10>

00002ede <fetch_display_frame>:


void fetch_display_frame(uint16_t f_num, uint16_t Xindex, uint16_t Yindex){
    2ede:	2f 92       	push	r2
    2ee0:	3f 92       	push	r3
    2ee2:	4f 92       	push	r4
    2ee4:	5f 92       	push	r5
    2ee6:	6f 92       	push	r6
    2ee8:	7f 92       	push	r7
    2eea:	9f 92       	push	r9
    2eec:	af 92       	push	r10
    2eee:	bf 92       	push	r11
    2ef0:	cf 92       	push	r12
    2ef2:	df 92       	push	r13
    2ef4:	ef 92       	push	r14
    2ef6:	ff 92       	push	r15
    2ef8:	0f 93       	push	r16
    2efa:	1f 93       	push	r17
    2efc:	df 93       	push	r29
    2efe:	cf 93       	push	r28
    2f00:	cd b7       	in	r28, 0x3d	; 61
    2f02:	de b7       	in	r29, 0x3e	; 62
    2f04:	a8 97       	sbiw	r28, 0x28	; 40
    2f06:	cd bf       	out	0x3d, r28	; 61
    2f08:	de bf       	out	0x3e, r29	; 62
    2f0a:	5c 01       	movw	r10, r24
    2f0c:	2b 01       	movw	r4, r22
    2f0e:	1a 01       	movw	r2, r20
			digitalWrite(0, HIGH);   // turn on laser
	}
	
	digitalWrite(1, LOW); // set line low at end of frame write

}
    2f10:	8d b7       	in	r24, 0x3d	; 61
    2f12:	9e b7       	in	r25, 0x3e	; 62
    2f14:	8f a3       	std	Y+39, r24	; 0x27
    2f16:	98 a7       	std	Y+40, r25	; 0x28
    uint8_t FLASH[32];
    uint16_t len, cnt, buff_index;
    uint32_t offset;
    uint8_t res;
    uint16_t X_dac_val, Y_dac_val;
    uint8_t sreg = SREG;
    2f18:	8f b7       	in	r24, 0x3f	; 63
	uint8_t block_per_frame;
	uint8_t tempVal, bitIndex, arrayIndex;
	
	digitalWrite(1, HIGH); // set line high at start of frame write			
    2f1a:	81 e0       	ldi	r24, 0x01	; 1
    2f1c:	61 e0       	ldi	r22, 0x01	; 1
    2f1e:	0e 94 3f 24 	call	0x487e	; 0x487e <digitalWrite>
	if (display_flag > 1){      //if flag gets bigger than 1 -> frame skipped
    2f22:	80 91 e8 24 	lds	r24, 0x24E8
    2f26:	82 30       	cpi	r24, 0x02	; 2
    2f28:	18 f0       	brcs	.+6      	; 0x2f30 <fetch_display_frame+0x52>
			ledToggle(1);    //toggle LED 1
    2f2a:	81 e0       	ldi	r24, 0x01	; 1
    2f2c:	0e 94 cd 23 	call	0x479a	; 0x479a <ledToggle>
	}
				
	display_flag = 0;  //clear the display flag
    2f30:	10 92 e8 24 	sts	0x24E8, r1
    len = num_panels * bytes_per_panel_frame;
    2f34:	80 91 b8 27 	lds	r24, 0x27B8
    2f38:	90 91 ec 24 	lds	r25, 0x24EC
    2f3c:	89 9f       	mul	r24, r25
    2f3e:	60 01       	movw	r12, r0
    2f40:	11 24       	eor	r1, r1
	
	if (len%512 != 0)
    2f42:	c6 01       	movw	r24, r12
    2f44:	91 70       	andi	r25, 0x01	; 1
    2f46:	6d 2d       	mov	r22, r13
    2f48:	66 95       	lsr	r22
    2f4a:	89 2b       	or	r24, r25
    2f4c:	09 f0       	breq	.+2      	; 0x2f50 <fetch_display_frame+0x72>
		block_per_frame = len/512 + 1;
    2f4e:	6f 5f       	subi	r22, 0xFF	; 255
	else
		block_per_frame = len/512;  //for gs=4 and rc=0
		
		
    uint8_t  frameBuff[len];
    2f50:	ad b7       	in	r26, 0x3d	; 61
    2f52:	be b7       	in	r27, 0x3e	; 62
    2f54:	ac 19       	sub	r26, r12
    2f56:	bd 09       	sbc	r27, r13
    2f58:	ad bf       	out	0x3d, r26	; 61
    2f5a:	be bf       	out	0x3e, r27	; 62
    2f5c:	6d b6       	in	r6, 0x3d	; 61
    2f5e:	7e b6       	in	r7, 0x3e	; 62
    2f60:	08 94       	sec
    2f62:	61 1c       	adc	r6, r1
    2f64:	71 1c       	adc	r7, r1
	//uint8_t * FLASH = &frameBuff[0];
    offset = 512 + (uint32_t)f_num * 512 * block_per_frame;
    2f66:	70 e0       	ldi	r23, 0x00	; 0
    2f68:	80 e0       	ldi	r24, 0x00	; 0
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	95 01       	movw	r18, r10
    2f6e:	40 e0       	ldi	r20, 0x00	; 0
    2f70:	50 e0       	ldi	r21, 0x00	; 0
    2f72:	0e 94 76 5a 	call	0xb4ec	; 0xb4ec <__mulsi3>
    2f76:	7b 01       	movw	r14, r22
    2f78:	8c 01       	movw	r16, r24
    2f7a:	08 94       	sec
    2f7c:	e1 1c       	adc	r14, r1
    2f7e:	f1 1c       	adc	r15, r1
    2f80:	01 1d       	adc	r16, r1
    2f82:	11 1d       	adc	r17, r1
    2f84:	b9 e0       	ldi	r27, 0x09	; 9
    2f86:	ee 0c       	add	r14, r14
    2f88:	ff 1c       	adc	r15, r15
    2f8a:	00 1f       	adc	r16, r16
    2f8c:	11 1f       	adc	r17, r17
    2f8e:	ba 95       	dec	r27
    2f90:	d1 f7       	brne	.-12     	; 0x2f86 <fetch_display_frame+0xa8>

    res = f_lseek(&file1, offset);
    2f92:	80 e7       	ldi	r24, 0x70	; 112
    2f94:	99 e2       	ldi	r25, 0x29	; 41
    2f96:	b8 01       	movw	r22, r16
    2f98:	a7 01       	movw	r20, r14
    2f9a:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <f_lseek>
    2f9e:	98 2e       	mov	r9, r24
    if ((res == FR_OK) && (file1.fptr == offset)) {
    2fa0:	88 23       	and	r24, r24
    2fa2:	09 f0       	breq	.+2      	; 0x2fa6 <fetch_display_frame+0xc8>
    2fa4:	59 c1       	rjmp	.+690    	; 0x3258 <fetch_display_frame+0x37a>
    2fa6:	80 91 76 29 	lds	r24, 0x2976
    2faa:	90 91 77 29 	lds	r25, 0x2977
    2fae:	a0 91 78 29 	lds	r26, 0x2978
    2fb2:	b0 91 79 29 	lds	r27, 0x2979
    2fb6:	8e 15       	cp	r24, r14
    2fb8:	9f 05       	cpc	r25, r15
    2fba:	a0 07       	cpc	r26, r16
    2fbc:	b1 07       	cpc	r27, r17
    2fbe:	09 f0       	breq	.+2      	; 0x2fc2 <fetch_display_frame+0xe4>
    2fc0:	4b c1       	rjmp	.+662    	; 0x3258 <fetch_display_frame+0x37a>
        res = f_read(&file1, frameBuff, len, &cnt);
    2fc2:	80 e7       	ldi	r24, 0x70	; 112
    2fc4:	99 e2       	ldi	r25, 0x29	; 41
    2fc6:	b3 01       	movw	r22, r6
    2fc8:	a6 01       	movw	r20, r12
    2fca:	9e 01       	movw	r18, r28
    2fcc:	2f 5f       	subi	r18, 0xFF	; 255
    2fce:	3f 4f       	sbci	r19, 0xFF	; 255
    2fd0:	0e 94 7f 50 	call	0xa0fe	; 0xa0fe <f_read>
    2fd4:	18 2f       	mov	r17, r24
        if ((res == FR_OK) && (cnt == len)) {	
    2fd6:	88 23       	and	r24, r24
    2fd8:	09 f0       	breq	.+2      	; 0x2fdc <fetch_display_frame+0xfe>
    2fda:	17 c1       	rjmp	.+558    	; 0x320a <fetch_display_frame+0x32c>
    2fdc:	89 81       	ldd	r24, Y+1	; 0x01
    2fde:	9a 81       	ldd	r25, Y+2	; 0x02
    2fe0:	8c 15       	cp	r24, r12
    2fe2:	9d 05       	cpc	r25, r13
    2fe4:	09 f0       	breq	.+2      	; 0x2fe8 <fetch_display_frame+0x10a>
    2fe6:	11 c1       	rjmp	.+546    	; 0x320a <fetch_display_frame+0x32c>
    2fe8:	11 e0       	ldi	r17, 0x01	; 1
    2fea:	ee 24       	eor	r14, r14
    2fec:	ff 24       	eor	r15, r15
		

            buff_index = 0;
            
            for (panel_index = 1; panel_index <= num_panels; panel_index++){
                for(j = 0;j < bytes_per_panel_frame;j++){
    2fee:	a7 e0       	ldi	r26, 0x07	; 7
    2ff0:	ca 2e       	mov	r12, r26
    2ff2:	d1 2c       	mov	r13, r1
    2ff4:	cc 0e       	add	r12, r28
    2ff6:	dd 1e       	adc	r13, r29
                                                    if( (FLASH[24+1] == FLASH[24+2])&&(FLASH[24+3] == FLASH[24+4])&&(FLASH[24+5] == FLASH[24+6]) ){
                                                        gscale[0] = FLASH[0];
                                                        gscale[1] = FLASH[8];
                                                        gscale[2] = FLASH[16];
                                                        gscale[3] = FLASH[24];
                                                        i2cMasterSend(panel_index, 4, &gscale[0]); //send a 4 byte packet with the correct row_compressed value.
    2ff8:	f3 e0       	ldi	r31, 0x03	; 3
    2ffa:	af 2e       	mov	r10, r31
    2ffc:	b1 2c       	mov	r11, r1
    2ffe:	ac 0e       	add	r10, r28
    3000:	bd 1e       	adc	r11, r29
    3002:	f7 c0       	rjmp	.+494    	; 0x31f2 <fetch_display_frame+0x314>

            buff_index = 0;
            
            for (panel_index = 1; panel_index <= num_panels; panel_index++){
                for(j = 0;j < bytes_per_panel_frame;j++){
                    FLASH[j] = frameBuff[buff_index++]; //not good for performance, no need to copy the data
    3004:	8d 91       	ld	r24, X+
    3006:	81 93       	st	Z+, r24
		

            buff_index = 0;
            
            for (panel_index = 1; panel_index <= num_panels; panel_index++){
                for(j = 0;j < bytes_per_panel_frame;j++){
    3008:	8e 2f       	mov	r24, r30
    300a:	8c 19       	sub	r24, r12
    300c:	89 17       	cp	r24, r25
    300e:	d0 f3       	brcs	.-12     	; 0x3004 <fetch_display_frame+0x126>
    3010:	e9 0e       	add	r14, r25
    3012:	f1 1c       	adc	r15, r1
                    FLASH[j] = frameBuff[buff_index++]; //not good for performance, no need to copy the data
                }
				
                packet_sent = 0; //used with compression to simplify coniditionals.
                if (ident_compress == 1) {
    3014:	80 91 9f 29 	lds	r24, 0x299F
    3018:	81 30       	cpi	r24, 0x01	; 1
    301a:	09 f0       	breq	.+2      	; 0x301e <fetch_display_frame+0x140>
    301c:	e3 c0       	rjmp	.+454    	; 0x31e4 <fetch_display_frame+0x306>
                    if (bytes_per_panel_frame == 8){
    301e:	98 30       	cpi	r25, 0x08	; 8
    3020:	e9 f4       	brne	.+58     	; 0x305c <fetch_display_frame+0x17e>
                        if( (FLASH[0] == FLASH[1])&&(FLASH[2] == FLASH[3])&&(FLASH[4] == FLASH[5])&&(FLASH[6] == FLASH[7]) ){
    3022:	9f 81       	ldd	r25, Y+7	; 0x07
    3024:	88 85       	ldd	r24, Y+8	; 0x08
    3026:	98 17       	cp	r25, r24
    3028:	c9 f4       	brne	.+50     	; 0x305c <fetch_display_frame+0x17e>
    302a:	49 85       	ldd	r20, Y+9	; 0x09
    302c:	8a 85       	ldd	r24, Y+10	; 0x0a
    302e:	48 17       	cp	r20, r24
    3030:	a9 f4       	brne	.+42     	; 0x305c <fetch_display_frame+0x17e>
    3032:	3b 85       	ldd	r19, Y+11	; 0x0b
    3034:	8c 85       	ldd	r24, Y+12	; 0x0c
    3036:	38 17       	cp	r19, r24
    3038:	89 f4       	brne	.+34     	; 0x305c <fetch_display_frame+0x17e>
    303a:	2d 85       	ldd	r18, Y+13	; 0x0d
    303c:	8e 85       	ldd	r24, Y+14	; 0x0e
    303e:	28 17       	cp	r18, r24
    3040:	69 f4       	brne	.+26     	; 0x305c <fetch_display_frame+0x17e>
                            if( (FLASH[1] == FLASH[2])&&(FLASH[3] == FLASH[4])&&(FLASH[5] == FLASH[6]) ){
    3042:	94 17       	cp	r25, r20
    3044:	59 f4       	brne	.+22     	; 0x305c <fetch_display_frame+0x17e>
    3046:	93 17       	cp	r25, r19
    3048:	49 f4       	brne	.+18     	; 0x305c <fetch_display_frame+0x17e>
    304a:	92 17       	cp	r25, r18
    304c:	39 f4       	brne	.+14     	; 0x305c <fetch_display_frame+0x17e>
                                i2cMasterSend(panel_index, 1, &FLASH[0]); //send a 1 byte packet with the correct row_compressed value.
    304e:	81 2f       	mov	r24, r17
    3050:	61 e0       	ldi	r22, 0x01	; 1
    3052:	a6 01       	movw	r20, r12
    3054:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <i2cMasterSend>
    3058:	e1 e0       	ldi	r30, 0x01	; 1
    305a:	01 c0       	rjmp	.+2      	; 0x305e <fetch_display_frame+0x180>
    305c:	e0 e0       	ldi	r30, 0x00	; 0
                                packet_sent = 1;
                            } //end of second round of comparisons
                        } //end of first round of byte comparisons
                    } // end of check if bytes_per_panel_frame is 8
                    
                    if (bytes_per_panel_frame == 24){
    305e:	80 91 b8 27 	lds	r24, 0x27B8
    3062:	88 31       	cpi	r24, 0x18	; 24
    3064:	09 f0       	breq	.+2      	; 0x3068 <fetch_display_frame+0x18a>
    3066:	4e c0       	rjmp	.+156    	; 0x3104 <fetch_display_frame+0x226>
                        if( (FLASH[0] == FLASH[1])&&(FLASH[2] == FLASH[3])&&(FLASH[4] == FLASH[5])&&(FLASH[6] == FLASH[7]) ){
    3068:	6f 81       	ldd	r22, Y+7	; 0x07
    306a:	88 85       	ldd	r24, Y+8	; 0x08
    306c:	68 17       	cp	r22, r24
    306e:	09 f0       	breq	.+2      	; 0x3072 <fetch_display_frame+0x194>
    3070:	49 c0       	rjmp	.+146    	; 0x3104 <fetch_display_frame+0x226>
    3072:	39 85       	ldd	r19, Y+9	; 0x09
    3074:	8a 85       	ldd	r24, Y+10	; 0x0a
    3076:	38 17       	cp	r19, r24
    3078:	09 f0       	breq	.+2      	; 0x307c <fetch_display_frame+0x19e>
    307a:	44 c0       	rjmp	.+136    	; 0x3104 <fetch_display_frame+0x226>
    307c:	2b 85       	ldd	r18, Y+11	; 0x0b
    307e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3080:	28 17       	cp	r18, r24
    3082:	09 f0       	breq	.+2      	; 0x3086 <fetch_display_frame+0x1a8>
    3084:	3f c0       	rjmp	.+126    	; 0x3104 <fetch_display_frame+0x226>
    3086:	9d 85       	ldd	r25, Y+13	; 0x0d
    3088:	8e 85       	ldd	r24, Y+14	; 0x0e
    308a:	98 17       	cp	r25, r24
    308c:	d9 f5       	brne	.+118    	; 0x3104 <fetch_display_frame+0x226>
                            if( (FLASH[1] == FLASH[2])&&(FLASH[3] == FLASH[4])&&(FLASH[5] == FLASH[6]) ){
    308e:	63 17       	cp	r22, r19
    3090:	c9 f5       	brne	.+114    	; 0x3104 <fetch_display_frame+0x226>
    3092:	62 17       	cp	r22, r18
    3094:	b9 f5       	brne	.+110    	; 0x3104 <fetch_display_frame+0x226>
    3096:	69 17       	cp	r22, r25
    3098:	a9 f5       	brne	.+106    	; 0x3104 <fetch_display_frame+0x226>
                                if( (FLASH[8+0] == FLASH[8+1])&&(FLASH[8+2] == FLASH[8+3])&&(FLASH[8+4] == FLASH[8+5])&&(FLASH[8+6] == FLASH[8+7]) ){
    309a:	4f 85       	ldd	r20, Y+15	; 0x0f
    309c:	88 89       	ldd	r24, Y+16	; 0x10
    309e:	48 17       	cp	r20, r24
    30a0:	89 f5       	brne	.+98     	; 0x3104 <fetch_display_frame+0x226>
    30a2:	39 89       	ldd	r19, Y+17	; 0x11
    30a4:	8a 89       	ldd	r24, Y+18	; 0x12
    30a6:	38 17       	cp	r19, r24
    30a8:	69 f5       	brne	.+90     	; 0x3104 <fetch_display_frame+0x226>
    30aa:	2b 89       	ldd	r18, Y+19	; 0x13
    30ac:	8c 89       	ldd	r24, Y+20	; 0x14
    30ae:	28 17       	cp	r18, r24
    30b0:	49 f5       	brne	.+82     	; 0x3104 <fetch_display_frame+0x226>
    30b2:	9d 89       	ldd	r25, Y+21	; 0x15
    30b4:	8e 89       	ldd	r24, Y+22	; 0x16
    30b6:	98 17       	cp	r25, r24
    30b8:	29 f5       	brne	.+74     	; 0x3104 <fetch_display_frame+0x226>
                                    if( (FLASH[8+1] == FLASH[8+2])&&(FLASH[8+3] == FLASH[8+4])&&(FLASH[8+5] == FLASH[8+6]) ){
    30ba:	43 17       	cp	r20, r19
    30bc:	19 f5       	brne	.+70     	; 0x3104 <fetch_display_frame+0x226>
    30be:	42 17       	cp	r20, r18
    30c0:	09 f5       	brne	.+66     	; 0x3104 <fetch_display_frame+0x226>
    30c2:	49 17       	cp	r20, r25
    30c4:	f9 f4       	brne	.+62     	; 0x3104 <fetch_display_frame+0x226>
                                        if( (FLASH[16+0] == FLASH[16+1])&&(FLASH[16+2] == FLASH[16+3])&&(FLASH[16+4] == FLASH[16+5])&&(FLASH[16+6] == FLASH[16+7]) ){
    30c6:	9f 89       	ldd	r25, Y+23	; 0x17
    30c8:	88 8d       	ldd	r24, Y+24	; 0x18
    30ca:	98 17       	cp	r25, r24
    30cc:	d9 f4       	brne	.+54     	; 0x3104 <fetch_display_frame+0x226>
    30ce:	59 8d       	ldd	r21, Y+25	; 0x19
    30d0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    30d2:	58 17       	cp	r21, r24
    30d4:	b9 f4       	brne	.+46     	; 0x3104 <fetch_display_frame+0x226>
    30d6:	3b 8d       	ldd	r19, Y+27	; 0x1b
    30d8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    30da:	38 17       	cp	r19, r24
    30dc:	99 f4       	brne	.+38     	; 0x3104 <fetch_display_frame+0x226>
    30de:	2d 8d       	ldd	r18, Y+29	; 0x1d
    30e0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    30e2:	28 17       	cp	r18, r24
    30e4:	79 f4       	brne	.+30     	; 0x3104 <fetch_display_frame+0x226>
                                            if( (FLASH[16+1] == FLASH[16+2])&&(FLASH[16+3] == FLASH[16+4])&&(FLASH[16+5] == FLASH[16+6]) ){
    30e6:	95 17       	cp	r25, r21
    30e8:	69 f4       	brne	.+26     	; 0x3104 <fetch_display_frame+0x226>
    30ea:	93 17       	cp	r25, r19
    30ec:	59 f4       	brne	.+22     	; 0x3104 <fetch_display_frame+0x226>
    30ee:	92 17       	cp	r25, r18
    30f0:	49 f4       	brne	.+18     	; 0x3104 <fetch_display_frame+0x226>
                                                gscale[0] = FLASH[0];
    30f2:	6b 83       	std	Y+3, r22	; 0x03
                                                gscale[1] = FLASH[8];
    30f4:	4c 83       	std	Y+4, r20	; 0x04
                                                gscale[2] = FLASH[16];
    30f6:	9d 83       	std	Y+5, r25	; 0x05
                                                i2cMasterSend(panel_index, 3, &gscale[0]); //send a 3 byte packet with the correct row_compressed value.
    30f8:	81 2f       	mov	r24, r17
    30fa:	63 e0       	ldi	r22, 0x03	; 3
    30fc:	a5 01       	movw	r20, r10
    30fe:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <i2cMasterSend>
    3102:	e1 e0       	ldi	r30, 0x01	; 1
                                } //end of third round of comparisons
                            } //end of second round of comparisons
                        } //end of first round of byte comparisons
                    } // end of check if bytes_per_panel_frame is 24
                    
                    if (bytes_per_panel_frame == 32){
    3104:	80 91 b8 27 	lds	r24, 0x27B8
    3108:	80 32       	cpi	r24, 0x20	; 32
    310a:	09 f0       	breq	.+2      	; 0x310e <fetch_display_frame+0x230>
    310c:	69 c0       	rjmp	.+210    	; 0x31e0 <fetch_display_frame+0x302>
                        if( (FLASH[0] == FLASH[1])&&(FLASH[2] == FLASH[3])&&(FLASH[4] == FLASH[5])&&(FLASH[6] == FLASH[7]) ){
    310e:	7f 81       	ldd	r23, Y+7	; 0x07
    3110:	88 85       	ldd	r24, Y+8	; 0x08
    3112:	78 17       	cp	r23, r24
    3114:	09 f0       	breq	.+2      	; 0x3118 <fetch_display_frame+0x23a>
    3116:	64 c0       	rjmp	.+200    	; 0x31e0 <fetch_display_frame+0x302>
    3118:	39 85       	ldd	r19, Y+9	; 0x09
    311a:	8a 85       	ldd	r24, Y+10	; 0x0a
    311c:	38 17       	cp	r19, r24
    311e:	09 f0       	breq	.+2      	; 0x3122 <fetch_display_frame+0x244>
    3120:	5f c0       	rjmp	.+190    	; 0x31e0 <fetch_display_frame+0x302>
    3122:	2b 85       	ldd	r18, Y+11	; 0x0b
    3124:	8c 85       	ldd	r24, Y+12	; 0x0c
    3126:	28 17       	cp	r18, r24
    3128:	09 f0       	breq	.+2      	; 0x312c <fetch_display_frame+0x24e>
    312a:	5a c0       	rjmp	.+180    	; 0x31e0 <fetch_display_frame+0x302>
    312c:	9d 85       	ldd	r25, Y+13	; 0x0d
    312e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3130:	98 17       	cp	r25, r24
    3132:	09 f0       	breq	.+2      	; 0x3136 <fetch_display_frame+0x258>
    3134:	55 c0       	rjmp	.+170    	; 0x31e0 <fetch_display_frame+0x302>
                            if( (FLASH[1] == FLASH[2])&&(FLASH[3] == FLASH[4])&&(FLASH[5] == FLASH[6]) ){
    3136:	73 17       	cp	r23, r19
    3138:	09 f0       	breq	.+2      	; 0x313c <fetch_display_frame+0x25e>
    313a:	52 c0       	rjmp	.+164    	; 0x31e0 <fetch_display_frame+0x302>
    313c:	72 17       	cp	r23, r18
    313e:	09 f0       	breq	.+2      	; 0x3142 <fetch_display_frame+0x264>
    3140:	4f c0       	rjmp	.+158    	; 0x31e0 <fetch_display_frame+0x302>
    3142:	79 17       	cp	r23, r25
    3144:	09 f0       	breq	.+2      	; 0x3148 <fetch_display_frame+0x26a>
    3146:	4c c0       	rjmp	.+152    	; 0x31e0 <fetch_display_frame+0x302>
                                if( (FLASH[8+0] == FLASH[8+1])&&(FLASH[8+2] == FLASH[8+3])&&(FLASH[8+4] == FLASH[8+5])&&(FLASH[8+6] == FLASH[8+7]) ){
    3148:	6f 85       	ldd	r22, Y+15	; 0x0f
    314a:	88 89       	ldd	r24, Y+16	; 0x10
    314c:	68 17       	cp	r22, r24
    314e:	09 f0       	breq	.+2      	; 0x3152 <fetch_display_frame+0x274>
    3150:	47 c0       	rjmp	.+142    	; 0x31e0 <fetch_display_frame+0x302>
    3152:	39 89       	ldd	r19, Y+17	; 0x11
    3154:	8a 89       	ldd	r24, Y+18	; 0x12
    3156:	38 17       	cp	r19, r24
    3158:	09 f0       	breq	.+2      	; 0x315c <fetch_display_frame+0x27e>
    315a:	42 c0       	rjmp	.+132    	; 0x31e0 <fetch_display_frame+0x302>
    315c:	2b 89       	ldd	r18, Y+19	; 0x13
    315e:	8c 89       	ldd	r24, Y+20	; 0x14
    3160:	28 17       	cp	r18, r24
    3162:	f1 f5       	brne	.+124    	; 0x31e0 <fetch_display_frame+0x302>
    3164:	9d 89       	ldd	r25, Y+21	; 0x15
    3166:	8e 89       	ldd	r24, Y+22	; 0x16
    3168:	98 17       	cp	r25, r24
    316a:	d1 f5       	brne	.+116    	; 0x31e0 <fetch_display_frame+0x302>
                                    if( (FLASH[8+1] == FLASH[8+2])&&(FLASH[8+3] == FLASH[8+4])&&(FLASH[8+5] == FLASH[8+6]) ){
    316c:	63 17       	cp	r22, r19
    316e:	c1 f5       	brne	.+112    	; 0x31e0 <fetch_display_frame+0x302>
    3170:	62 17       	cp	r22, r18
    3172:	b1 f5       	brne	.+108    	; 0x31e0 <fetch_display_frame+0x302>
    3174:	69 17       	cp	r22, r25
    3176:	a1 f5       	brne	.+104    	; 0x31e0 <fetch_display_frame+0x302>
                                        if( (FLASH[16+0] == FLASH[16+1])&&(FLASH[16+2] == FLASH[16+3])&&(FLASH[16+4] == FLASH[16+5])&&(FLASH[16+6] == FLASH[16+7]) ){
    3178:	4f 89       	ldd	r20, Y+23	; 0x17
    317a:	88 8d       	ldd	r24, Y+24	; 0x18
    317c:	48 17       	cp	r20, r24
    317e:	81 f5       	brne	.+96     	; 0x31e0 <fetch_display_frame+0x302>
    3180:	39 8d       	ldd	r19, Y+25	; 0x19
    3182:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3184:	38 17       	cp	r19, r24
    3186:	61 f5       	brne	.+88     	; 0x31e0 <fetch_display_frame+0x302>
    3188:	2b 8d       	ldd	r18, Y+27	; 0x1b
    318a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    318c:	28 17       	cp	r18, r24
    318e:	41 f5       	brne	.+80     	; 0x31e0 <fetch_display_frame+0x302>
    3190:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3192:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3194:	98 17       	cp	r25, r24
    3196:	21 f5       	brne	.+72     	; 0x31e0 <fetch_display_frame+0x302>
                                            if( (FLASH[16+1] == FLASH[16+2])&&(FLASH[16+3] == FLASH[16+4])&&(FLASH[16+5] == FLASH[16+6]) ){
    3198:	43 17       	cp	r20, r19
    319a:	11 f5       	brne	.+68     	; 0x31e0 <fetch_display_frame+0x302>
    319c:	42 17       	cp	r20, r18
    319e:	01 f5       	brne	.+64     	; 0x31e0 <fetch_display_frame+0x302>
    31a0:	49 17       	cp	r20, r25
    31a2:	f1 f4       	brne	.+60     	; 0x31e0 <fetch_display_frame+0x302>
                                                if( (FLASH[24+0] == FLASH[24+1])&&(FLASH[24+2] == FLASH[24+3])&&(FLASH[24+4] == FLASH[24+5])&&(FLASH[24+6] == FLASH[24+7]) ){
    31a4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    31a6:	88 a1       	ldd	r24, Y+32	; 0x20
    31a8:	98 17       	cp	r25, r24
    31aa:	d1 f4       	brne	.+52     	; 0x31e0 <fetch_display_frame+0x302>
    31ac:	59 a1       	ldd	r21, Y+33	; 0x21
    31ae:	8a a1       	ldd	r24, Y+34	; 0x22
    31b0:	58 17       	cp	r21, r24
    31b2:	b1 f4       	brne	.+44     	; 0x31e0 <fetch_display_frame+0x302>
    31b4:	3b a1       	ldd	r19, Y+35	; 0x23
    31b6:	8c a1       	ldd	r24, Y+36	; 0x24
    31b8:	38 17       	cp	r19, r24
    31ba:	91 f4       	brne	.+36     	; 0x31e0 <fetch_display_frame+0x302>
    31bc:	2d a1       	ldd	r18, Y+37	; 0x25
    31be:	8e a1       	ldd	r24, Y+38	; 0x26
    31c0:	28 17       	cp	r18, r24
    31c2:	71 f4       	brne	.+28     	; 0x31e0 <fetch_display_frame+0x302>
                                                    if( (FLASH[24+1] == FLASH[24+2])&&(FLASH[24+3] == FLASH[24+4])&&(FLASH[24+5] == FLASH[24+6]) ){
    31c4:	95 17       	cp	r25, r21
    31c6:	61 f4       	brne	.+24     	; 0x31e0 <fetch_display_frame+0x302>
    31c8:	93 17       	cp	r25, r19
    31ca:	51 f4       	brne	.+20     	; 0x31e0 <fetch_display_frame+0x302>
    31cc:	92 17       	cp	r25, r18
    31ce:	41 f4       	brne	.+16     	; 0x31e0 <fetch_display_frame+0x302>
                                                        gscale[0] = FLASH[0];
    31d0:	7b 83       	std	Y+3, r23	; 0x03
                                                        gscale[1] = FLASH[8];
    31d2:	6c 83       	std	Y+4, r22	; 0x04
                                                        gscale[2] = FLASH[16];
    31d4:	4d 83       	std	Y+5, r20	; 0x05
                                                        gscale[3] = FLASH[24];
    31d6:	9e 83       	std	Y+6, r25	; 0x06
                                                        i2cMasterSend(panel_index, 4, &gscale[0]); //send a 4 byte packet with the correct row_compressed value.
    31d8:	81 2f       	mov	r24, r17
    31da:	64 e0       	ldi	r22, 0x04	; 4
    31dc:	a5 01       	movw	r20, r10
    31de:	06 c0       	rjmp	.+12     	; 0x31ec <fetch_display_frame+0x30e>
                            } //end of second round of comparisons
                        } //end of first round of byte comparisons
                    } // end of check if bytes_per_panel_frame is 32
                } //end of if ident_compress == 1
                
                if (packet_sent == 0){ //above conditionals rejected sending a simple pattern patch
    31e0:	ee 23       	and	r30, r30
    31e2:	31 f4       	brne	.+12     	; 0x31f0 <fetch_display_frame+0x312>
                    i2cMasterSend(panel_index, bytes_per_panel_frame, &FLASH[0]);
    31e4:	81 2f       	mov	r24, r17
    31e6:	60 91 b8 27 	lds	r22, 0x27B8
    31ea:	a6 01       	movw	r20, r12
    31ec:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <i2cMasterSend>
        if ((res == FR_OK) && (cnt == len)) {	
		

            buff_index = 0;
            
            for (panel_index = 1; panel_index <= num_panels; panel_index++){
    31f0:	1f 5f       	subi	r17, 0xFF	; 255
    31f2:	80 91 ec 24 	lds	r24, 0x24EC
    31f6:	81 17       	cp	r24, r17
    31f8:	08 f4       	brcc	.+2      	; 0x31fc <fetch_display_frame+0x31e>
    31fa:	53 c0       	rjmp	.+166    	; 0x32a2 <fetch_display_frame+0x3c4>
                for(j = 0;j < bytes_per_panel_frame;j++){
    31fc:	90 91 b8 27 	lds	r25, 0x27B8
    3200:	d3 01       	movw	r26, r6
    3202:	ae 0d       	add	r26, r14
    3204:	bf 1d       	adc	r27, r15
    3206:	f6 01       	movw	r30, r12
    3208:	ff ce       	rjmp	.-514    	; 0x3008 <fetch_display_frame+0x12a>
                    i2cMasterSend(panel_index, bytes_per_panel_frame, &FLASH[0]);
                }
            } //end of for all panels loop
        }
        else {
            if (quiet_mode_on == 0){
    320a:	80 91 b3 20 	lds	r24, 0x20B3
    320e:	88 23       	and	r24, r24
    3210:	09 f0       	breq	.+2      	; 0x3214 <fetch_display_frame+0x336>
    3212:	47 c0       	rjmp	.+142    	; 0x32a2 <fetch_display_frame+0x3c4>
                xputs(PSTR("Error in f_read in fetch_display_frame!\n"));
    3214:	8a ed       	ldi	r24, 0xDA	; 218
    3216:	98 e0       	ldi	r25, 0x08	; 8
    3218:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
                xprintf(PSTR("RES = %u, f_num= %u, cnt= %u\n"), res, f_num, cnt);
    321c:	8d b7       	in	r24, 0x3d	; 61
    321e:	9e b7       	in	r25, 0x3e	; 62
    3220:	08 97       	sbiw	r24, 0x08	; 8
    3222:	8d bf       	out	0x3d, r24	; 61
    3224:	9e bf       	out	0x3e, r25	; 62
    3226:	ed b7       	in	r30, 0x3d	; 61
    3228:	fe b7       	in	r31, 0x3e	; 62
    322a:	31 96       	adiw	r30, 0x01	; 1
    322c:	8c eb       	ldi	r24, 0xBC	; 188
    322e:	98 e0       	ldi	r25, 0x08	; 8
    3230:	ad b7       	in	r26, 0x3d	; 61
    3232:	be b7       	in	r27, 0x3e	; 62
    3234:	11 96       	adiw	r26, 0x01	; 1
    3236:	8d 93       	st	X+, r24
    3238:	9c 93       	st	X, r25
    323a:	12 97       	sbiw	r26, 0x02	; 2
    323c:	12 83       	std	Z+2, r17	; 0x02
    323e:	13 82       	std	Z+3, r1	; 0x03
    3240:	a4 82       	std	Z+4, r10	; 0x04
    3242:	b5 82       	std	Z+5, r11	; 0x05
    3244:	89 81       	ldd	r24, Y+1	; 0x01
    3246:	9a 81       	ldd	r25, Y+2	; 0x02
    3248:	86 83       	std	Z+6, r24	; 0x06
    324a:	97 83       	std	Z+7, r25	; 0x07
    324c:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    3250:	8d b7       	in	r24, 0x3d	; 61
    3252:	9e b7       	in	r25, 0x3e	; 62
    3254:	08 96       	adiw	r24, 0x08	; 8
    3256:	23 c0       	rjmp	.+70     	; 0x329e <fetch_display_frame+0x3c0>
            }
        }
    } else {
        
        if (quiet_mode_on == 0){
    3258:	80 91 b3 20 	lds	r24, 0x20B3
    325c:	88 23       	and	r24, r24
    325e:	09 f5       	brne	.+66     	; 0x32a2 <fetch_display_frame+0x3c4>
            xputs(PSTR("Error in f_lseek in fetch_display_frame!\n"));
    3260:	82 e9       	ldi	r24, 0x92	; 146
    3262:	98 e0       	ldi	r25, 0x08	; 8
    3264:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
            xprintf(PSTR("RES = %u, f_num= %u, offset = %lu\n"), res, f_num, offset);
    3268:	ad b7       	in	r26, 0x3d	; 61
    326a:	be b7       	in	r27, 0x3e	; 62
    326c:	1a 97       	sbiw	r26, 0x0a	; 10
    326e:	ad bf       	out	0x3d, r26	; 61
    3270:	be bf       	out	0x3e, r27	; 62
    3272:	ed b7       	in	r30, 0x3d	; 61
    3274:	fe b7       	in	r31, 0x3e	; 62
    3276:	31 96       	adiw	r30, 0x01	; 1
    3278:	8f e6       	ldi	r24, 0x6F	; 111
    327a:	98 e0       	ldi	r25, 0x08	; 8
    327c:	11 96       	adiw	r26, 0x01	; 1
    327e:	8d 93       	st	X+, r24
    3280:	9c 93       	st	X, r25
    3282:	12 97       	sbiw	r26, 0x02	; 2
    3284:	92 82       	std	Z+2, r9	; 0x02
    3286:	13 82       	std	Z+3, r1	; 0x03
    3288:	a4 82       	std	Z+4, r10	; 0x04
    328a:	b5 82       	std	Z+5, r11	; 0x05
    328c:	e6 82       	std	Z+6, r14	; 0x06
    328e:	f7 82       	std	Z+7, r15	; 0x07
    3290:	00 87       	std	Z+8, r16	; 0x08
    3292:	11 87       	std	Z+9, r17	; 0x09
    3294:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    3298:	8d b7       	in	r24, 0x3d	; 61
    329a:	9e b7       	in	r25, 0x3e	; 62
    329c:	0a 96       	adiw	r24, 0x0a	; 10
    329e:	8d bf       	out	0x3d, r24	; 61
    32a0:	9e bf       	out	0x3e, r25	; 62
        }
    }
    
    //update analog out
    if (x_mode != 5){
    32a2:	80 91 b7 27 	lds	r24, 0x27B7
    32a6:	85 30       	cpi	r24, 0x05	; 5
    32a8:	c9 f0       	breq	.+50     	; 0x32dc <fetch_display_frame+0x3fe>
		X_dac_val = ((uint32_t)Xindex + 1)*32767/x_num;
		analogWrite(0, X_dac_val); // make it a value in the range 0 - 32767 (0 - 10V)
    32aa:	b2 01       	movw	r22, r4
    32ac:	80 e0       	ldi	r24, 0x00	; 0
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	6f 5f       	subi	r22, 0xFF	; 255
    32b2:	7f 4f       	sbci	r23, 0xFF	; 255
    32b4:	8f 4f       	sbci	r24, 0xFF	; 255
    32b6:	9f 4f       	sbci	r25, 0xFF	; 255
    32b8:	2f ef       	ldi	r18, 0xFF	; 255
    32ba:	3f e7       	ldi	r19, 0x7F	; 127
    32bc:	40 e0       	ldi	r20, 0x00	; 0
    32be:	50 e0       	ldi	r21, 0x00	; 0
    32c0:	0e 94 76 5a 	call	0xb4ec	; 0xb4ec <__mulsi3>
    32c4:	20 91 23 28 	lds	r18, 0x2823
    32c8:	30 91 24 28 	lds	r19, 0x2824
    32cc:	40 e0       	ldi	r20, 0x00	; 0
    32ce:	50 e0       	ldi	r21, 0x00	; 0
    32d0:	0e 94 bc 5a 	call	0xb578	; 0xb578 <__udivmodsi4>
    32d4:	80 e0       	ldi	r24, 0x00	; 0
    32d6:	b9 01       	movw	r22, r18
    32d8:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <analogWrite>
	}

    
    if (y_mode != 5){
    32dc:	80 91 01 28 	lds	r24, 0x2801
    32e0:	85 30       	cpi	r24, 0x05	; 5
    32e2:	c9 f0       	breq	.+50     	; 0x3316 <fetch_display_frame+0x438>
        Y_dac_val = ((uint32_t)Yindex + 1)*32767/y_num; 
        analogWrite(1, Y_dac_val); // make it a value in the range 0 - 32767 (0 - 10V)
    32e4:	b1 01       	movw	r22, r2
    32e6:	80 e0       	ldi	r24, 0x00	; 0
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	6f 5f       	subi	r22, 0xFF	; 255
    32ec:	7f 4f       	sbci	r23, 0xFF	; 255
    32ee:	8f 4f       	sbci	r24, 0xFF	; 255
    32f0:	9f 4f       	sbci	r25, 0xFF	; 255
    32f2:	2f ef       	ldi	r18, 0xFF	; 255
    32f4:	3f e7       	ldi	r19, 0x7F	; 127
    32f6:	40 e0       	ldi	r20, 0x00	; 0
    32f8:	50 e0       	ldi	r21, 0x00	; 0
    32fa:	0e 94 76 5a 	call	0xb4ec	; 0xb4ec <__mulsi3>
    32fe:	20 91 ab 25 	lds	r18, 0x25AB
    3302:	30 91 ac 25 	lds	r19, 0x25AC
    3306:	40 e0       	ldi	r20, 0x00	; 0
    3308:	50 e0       	ldi	r21, 0x00	; 0
    330a:	0e 94 bc 5a 	call	0xb578	; 0xb578 <__udivmodsi4>
    330e:	81 e0       	ldi	r24, 0x01	; 1
    3310:	b9 01       	movw	r22, r18
    3312:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <analogWrite>
    }

	
	  //also update the output lines for quadrant-type learning patterns
	if (Laser_active == 1)
    3316:	80 91 ea 24 	lds	r24, 0x24EA
    331a:	81 30       	cpi	r24, 0x01	; 1
    331c:	59 f5       	brne	.+86     	; 0x3374 <fetch_display_frame+0x496>
	{
		arrayIndex = index_x/8;  // find the index in laserPattern array for index_x
    331e:	80 91 b9 27 	lds	r24, 0x27B9
    3322:	90 91 ba 27 	lds	r25, 0x27BA
		bitIndex = index_x - arrayIndex*8;  // find the bit index in a laserPattern byte for index_x
    3326:	40 91 b9 27 	lds	r20, 0x27B9
    332a:	50 91 ba 27 	lds	r21, 0x27BA
    332e:	e3 e0       	ldi	r30, 0x03	; 3
    3330:	96 95       	lsr	r25
    3332:	87 95       	ror	r24
    3334:	ea 95       	dec	r30
    3336:	e1 f7       	brne	.-8      	; 0x3330 <fetch_display_frame+0x452>
    3338:	90 e0       	ldi	r25, 0x00	; 0
	
		tempVal = laserPattern[arrayIndex];
	
		if ((tempVal & (1<<(7-bitIndex))) == 0)
    333a:	fc 01       	movw	r30, r24
    333c:	e9 57       	subi	r30, 0x79	; 121
    333e:	f9 4d       	sbci	r31, 0xD9	; 217
    3340:	20 81       	ld	r18, Z
    3342:	30 e0       	ldi	r19, 0x00	; 0
    3344:	73 e0       	ldi	r23, 0x03	; 3
    3346:	88 0f       	add	r24, r24
    3348:	99 1f       	adc	r25, r25
    334a:	7a 95       	dec	r23
    334c:	e1 f7       	brne	.-8      	; 0x3346 <fetch_display_frame+0x468>
    334e:	48 1b       	sub	r20, r24
    3350:	87 e0       	ldi	r24, 0x07	; 7
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	84 1b       	sub	r24, r20
    3356:	91 09       	sbc	r25, r1
    3358:	02 c0       	rjmp	.+4      	; 0x335e <fetch_display_frame+0x480>
    335a:	35 95       	asr	r19
    335c:	27 95       	ror	r18
    335e:	8a 95       	dec	r24
    3360:	e2 f7       	brpl	.-8      	; 0x335a <fetch_display_frame+0x47c>
    3362:	20 fd       	sbrc	r18, 0
    3364:	03 c0       	rjmp	.+6      	; 0x336c <fetch_display_frame+0x48e>
			digitalWrite(0, LOW);  // turn off laser
    3366:	80 e0       	ldi	r24, 0x00	; 0
    3368:	60 e0       	ldi	r22, 0x00	; 0
    336a:	02 c0       	rjmp	.+4      	; 0x3370 <fetch_display_frame+0x492>
		else
			digitalWrite(0, HIGH);   // turn on laser
    336c:	80 e0       	ldi	r24, 0x00	; 0
    336e:	61 e0       	ldi	r22, 0x01	; 1
    3370:	0e 94 3f 24 	call	0x487e	; 0x487e <digitalWrite>
	}
	
	digitalWrite(1, LOW); // set line low at end of frame write
    3374:	81 e0       	ldi	r24, 0x01	; 1
    3376:	60 e0       	ldi	r22, 0x00	; 0
    3378:	0e 94 3f 24 	call	0x487e	; 0x487e <digitalWrite>

}
    337c:	af a1       	ldd	r26, Y+39	; 0x27
    337e:	b8 a5       	ldd	r27, Y+40	; 0x28
    3380:	ad bf       	out	0x3d, r26	; 61
    3382:	be bf       	out	0x3e, r27	; 62
    3384:	a8 96       	adiw	r28, 0x28	; 40
    3386:	cd bf       	out	0x3d, r28	; 61
    3388:	de bf       	out	0x3e, r29	; 62
    338a:	cf 91       	pop	r28
    338c:	df 91       	pop	r29
    338e:	1f 91       	pop	r17
    3390:	0f 91       	pop	r16
    3392:	ff 90       	pop	r15
    3394:	ef 90       	pop	r14
    3396:	df 90       	pop	r13
    3398:	cf 90       	pop	r12
    339a:	bf 90       	pop	r11
    339c:	af 90       	pop	r10
    339e:	9f 90       	pop	r9
    33a0:	7f 90       	pop	r7
    33a2:	6f 90       	pop	r6
    33a4:	5f 90       	pop	r5
    33a6:	4f 90       	pop	r4
    33a8:	3f 90       	pop	r3
    33aa:	2f 90       	pop	r2
    33ac:	08 95       	ret

000033ae <benchmark_pattern>:
    else{
        xputs(PSTR("Cannot find the hardware config file on the SD card.\n"));
    }
}

void benchmark_pattern(void) { // this function assumes that a pattern has been set
    33ae:	a0 e0       	ldi	r26, 0x00	; 0
    33b0:	b0 e0       	ldi	r27, 0x00	; 0
    33b2:	ed ed       	ldi	r30, 0xDD	; 221
    33b4:	f9 e1       	ldi	r31, 0x19	; 25
    33b6:	0c 94 01 5b 	jmp	0xb602	; 0xb602 <__prologue_saves__+0x10>
    uint16_t num_frames;
    uint16_t frame_ind;
    uint32_t bench_time;
    uint16_t frame_rate;
    
    Stop = 1;
    33ba:	81 e0       	ldi	r24, 0x01	; 1
    33bc:	80 93 9c 20 	sts	0x209C, r24
    num_frames = x_num*y_num;
    33c0:	20 91 ab 25 	lds	r18, 0x25AB
    33c4:	30 91 ac 25 	lds	r19, 0x25AC
    33c8:	80 91 23 28 	lds	r24, 0x2823
    33cc:	90 91 24 28 	lds	r25, 0x2824
    33d0:	28 9f       	mul	r18, r24
    33d2:	50 01       	movw	r10, r0
    33d4:	29 9f       	mul	r18, r25
    33d6:	b0 0c       	add	r11, r0
    33d8:	38 9f       	mul	r19, r24
    33da:	b0 0c       	add	r11, r0
    33dc:	11 24       	eor	r1, r1
    
    timer_coarse_tic();
    33de:	0e 94 4b 58 	call	0xb096	; 0xb096 <timer_coarse_tic>
    33e2:	c0 e0       	ldi	r28, 0x00	; 0
    33e4:	d0 e0       	ldi	r29, 0x00	; 0
    33e6:	0c c0       	rjmp	.+24     	; 0x3400 <benchmark_pattern+0x52>
    
    for(frame_ind = 0; frame_ind < num_frames; frame_ind++)
        fetch_display_frame(frame_ind, index_x, index_y);
    33e8:	60 91 b9 27 	lds	r22, 0x27B9
    33ec:	70 91 ba 27 	lds	r23, 0x27BA
    33f0:	40 91 6e 29 	lds	r20, 0x296E
    33f4:	50 91 6f 29 	lds	r21, 0x296F
    33f8:	ce 01       	movw	r24, r28
    33fa:	0e 94 6f 17 	call	0x2ede	; 0x2ede <fetch_display_frame>
    Stop = 1;
    num_frames = x_num*y_num;
    
    timer_coarse_tic();
    
    for(frame_ind = 0; frame_ind < num_frames; frame_ind++)
    33fe:	21 96       	adiw	r28, 0x01	; 1
    3400:	ca 15       	cp	r28, r10
    3402:	db 05       	cpc	r29, r11
    3404:	88 f3       	brcs	.-30     	; 0x33e8 <benchmark_pattern+0x3a>
        fetch_display_frame(frame_ind, index_x, index_y);
    
    bench_time = timer_coarse_toc();
    3406:	0e 94 60 58 	call	0xb0c0	; 0xb0c0 <timer_coarse_toc>
    340a:	7b 01       	movw	r14, r22
    340c:	8c 01       	movw	r16, r24
    frame_rate = ((uint32_t)num_frames*1000)/bench_time;
    xprintf(PSTR(" bench_time = %lu ms, frame_rate = %u\n"), bench_time, frame_rate);
    340e:	8d b7       	in	r24, 0x3d	; 61
    3410:	9e b7       	in	r25, 0x3e	; 62
    3412:	08 97       	sbiw	r24, 0x08	; 8
    3414:	8d bf       	out	0x3d, r24	; 61
    3416:	9e bf       	out	0x3e, r25	; 62
    3418:	cd b6       	in	r12, 0x3d	; 61
    341a:	de b6       	in	r13, 0x3e	; 62
    341c:	08 94       	sec
    341e:	c1 1c       	adc	r12, r1
    3420:	d1 1c       	adc	r13, r1
    3422:	89 e3       	ldi	r24, 0x39	; 57
    3424:	97 e0       	ldi	r25, 0x07	; 7
    3426:	ed b7       	in	r30, 0x3d	; 61
    3428:	fe b7       	in	r31, 0x3e	; 62
    342a:	81 83       	std	Z+1, r24	; 0x01
    342c:	92 83       	std	Z+2, r25	; 0x02
    342e:	f6 01       	movw	r30, r12
    3430:	e2 82       	std	Z+2, r14	; 0x02
    3432:	f3 82       	std	Z+3, r15	; 0x03
    3434:	04 83       	std	Z+4, r16	; 0x04
    3436:	15 83       	std	Z+5, r17	; 0x05
    3438:	b5 01       	movw	r22, r10
    343a:	80 e0       	ldi	r24, 0x00	; 0
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	28 ee       	ldi	r18, 0xE8	; 232
    3440:	33 e0       	ldi	r19, 0x03	; 3
    3442:	40 e0       	ldi	r20, 0x00	; 0
    3444:	50 e0       	ldi	r21, 0x00	; 0
    3446:	0e 94 76 5a 	call	0xb4ec	; 0xb4ec <__mulsi3>
    344a:	a8 01       	movw	r20, r16
    344c:	97 01       	movw	r18, r14
    344e:	0e 94 bc 5a 	call	0xb578	; 0xb578 <__udivmodsi4>
    3452:	f6 01       	movw	r30, r12
    3454:	26 83       	std	Z+6, r18	; 0x06
    3456:	37 83       	std	Z+7, r19	; 0x07
    3458:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    345c:	8d b7       	in	r24, 0x3d	; 61
    345e:	9e b7       	in	r25, 0x3e	; 62
    3460:	08 96       	adiw	r24, 0x08	; 8
    3462:	8d bf       	out	0x3d, r24	; 61
    3464:	9e bf       	out	0x3e, r25	; 62
}
    3466:	cd b7       	in	r28, 0x3d	; 61
    3468:	de b7       	in	r29, 0x3e	; 62
    346a:	ea e0       	ldi	r30, 0x0A	; 10
    346c:	0c 94 1d 5b 	jmp	0xb63a	; 0xb63a <__epilogue_restores__+0x10>

00003470 <set_pattern>:
    digitalToggle(3); //toggle digital 3 to trigger camera
}



void set_pattern(uint8_t pat_num) {
    3470:	a2 e0       	ldi	r26, 0x02	; 2
    3472:	b2 e0       	ldi	r27, 0x02	; 2
    3474:	ee e3       	ldi	r30, 0x3E	; 62
    3476:	fa e1       	ldi	r31, 0x1A	; 26
    3478:	0c 94 08 5b 	jmp	0xb610	; 0xb610 <__prologue_saves__+0x1e>
    347c:	18 2f       	mov	r17, r24
    uint16_t cnt;
    static uint8_t str[12];
    uint8_t  pattDataBuff[512];
    uint8_t res;
    
    if (pat_num < 10)
    347e:	8a 30       	cpi	r24, 0x0A	; 10
    3480:	80 f4       	brcc	.+32     	; 0x34a2 <set_pattern+0x32>
        sprintf(str, "pat000%d.pat\0", pat_num);
    3482:	00 d0       	rcall	.+0      	; 0x3484 <set_pattern+0x14>
    3484:	00 d0       	rcall	.+0      	; 0x3486 <set_pattern+0x16>
    3486:	ed b7       	in	r30, 0x3d	; 61
    3488:	fe b7       	in	r31, 0x3e	; 62
    348a:	31 96       	adiw	r30, 0x01	; 1
    348c:	89 e0       	ldi	r24, 0x09	; 9
    348e:	95 e2       	ldi	r25, 0x25	; 37
    3490:	ad b7       	in	r26, 0x3d	; 61
    3492:	be b7       	in	r27, 0x3e	; 62
    3494:	11 96       	adiw	r26, 0x01	; 1
    3496:	8d 93       	st	X+, r24
    3498:	9c 93       	st	X, r25
    349a:	12 97       	sbiw	r26, 0x02	; 2
    349c:	85 e7       	ldi	r24, 0x75	; 117
    349e:	90 e2       	ldi	r25, 0x20	; 32
    34a0:	1f c0       	rjmp	.+62     	; 0x34e0 <set_pattern+0x70>
    34a2:	89 e0       	ldi	r24, 0x09	; 9
    34a4:	95 e2       	ldi	r25, 0x25	; 37
    else if (pat_num < 100)
    34a6:	14 36       	cpi	r17, 0x64	; 100
    34a8:	70 f4       	brcc	.+28     	; 0x34c6 <set_pattern+0x56>
        sprintf(str, "pat00%d.pat\0", pat_num);
    34aa:	00 d0       	rcall	.+0      	; 0x34ac <set_pattern+0x3c>
    34ac:	00 d0       	rcall	.+0      	; 0x34ae <set_pattern+0x3e>
    34ae:	ed b7       	in	r30, 0x3d	; 61
    34b0:	fe b7       	in	r31, 0x3e	; 62
    34b2:	31 96       	adiw	r30, 0x01	; 1
    34b4:	ad b7       	in	r26, 0x3d	; 61
    34b6:	be b7       	in	r27, 0x3e	; 62
    34b8:	11 96       	adiw	r26, 0x01	; 1
    34ba:	8d 93       	st	X+, r24
    34bc:	9c 93       	st	X, r25
    34be:	12 97       	sbiw	r26, 0x02	; 2
    34c0:	83 e8       	ldi	r24, 0x83	; 131
    34c2:	90 e2       	ldi	r25, 0x20	; 32
    34c4:	0d c0       	rjmp	.+26     	; 0x34e0 <set_pattern+0x70>
    else if (pat_num < 1000)
        sprintf(str, "pat0%d.pat\0", pat_num);
    34c6:	00 d0       	rcall	.+0      	; 0x34c8 <set_pattern+0x58>
    34c8:	00 d0       	rcall	.+0      	; 0x34ca <set_pattern+0x5a>
    34ca:	ed b7       	in	r30, 0x3d	; 61
    34cc:	fe b7       	in	r31, 0x3e	; 62
    34ce:	31 96       	adiw	r30, 0x01	; 1
    34d0:	ad b7       	in	r26, 0x3d	; 61
    34d2:	be b7       	in	r27, 0x3e	; 62
    34d4:	11 96       	adiw	r26, 0x01	; 1
    34d6:	8d 93       	st	X+, r24
    34d8:	9c 93       	st	X, r25
    34da:	12 97       	sbiw	r26, 0x02	; 2
    34dc:	80 e9       	ldi	r24, 0x90	; 144
    34de:	90 e2       	ldi	r25, 0x20	; 32
    34e0:	82 83       	std	Z+2, r24	; 0x02
    34e2:	93 83       	std	Z+3, r25	; 0x03
    34e4:	14 83       	std	Z+4, r17	; 0x04
    34e6:	15 82       	std	Z+5, r1	; 0x05
    34e8:	0e 94 59 5d 	call	0xbab2	; 0xbab2 <sprintf>
    34ec:	8d b7       	in	r24, 0x3d	; 61
    34ee:	9e b7       	in	r25, 0x3e	; 62
    34f0:	06 96       	adiw	r24, 0x06	; 6
    34f2:	8d bf       	out	0x3d, r24	; 61
    34f4:	9e bf       	out	0x3e, r25	; 62
    else
        xputs(PSTR("pat_num is too big.\n"));
   
	
    res = f_close(&file1);
    34f6:	80 e7       	ldi	r24, 0x70	; 112
    34f8:	99 e2       	ldi	r25, 0x29	; 41
    34fa:	0e 94 ac 4b 	call	0x9758	; 0x9758 <f_close>
    
    res = f_open(&file1, str, FA_OPEN_EXISTING | FA_READ);
    34fe:	80 e7       	ldi	r24, 0x70	; 112
    3500:	99 e2       	ldi	r25, 0x29	; 41
    3502:	69 e0       	ldi	r22, 0x09	; 9
    3504:	75 e2       	ldi	r23, 0x25	; 37
    3506:	41 e0       	ldi	r20, 0x01	; 1
    3508:	0e 94 68 4f 	call	0x9ed0	; 0x9ed0 <f_open>
    if (res == FR_OK) {
    350c:	88 23       	and	r24, r24
    350e:	09 f0       	breq	.+2      	; 0x3512 <set_pattern+0xa2>
    3510:	ab c0       	rjmp	.+342    	; 0x3668 <set_pattern+0x1f8>
        res = f_read(&file1, pattDataBuff, 512, &cnt); // read the 10 byte test header info block
    3512:	80 e7       	ldi	r24, 0x70	; 112
    3514:	99 e2       	ldi	r25, 0x29	; 41
    3516:	be 01       	movw	r22, r28
    3518:	6d 5f       	subi	r22, 0xFD	; 253
    351a:	7f 4f       	sbci	r23, 0xFF	; 255
    351c:	40 e0       	ldi	r20, 0x00	; 0
    351e:	52 e0       	ldi	r21, 0x02	; 2
    3520:	9e 01       	movw	r18, r28
    3522:	2f 5f       	subi	r18, 0xFF	; 255
    3524:	3f 4f       	sbci	r19, 0xFF	; 255
    3526:	0e 94 7f 50 	call	0xa0fe	; 0xa0fe <f_read>
        if ((res == FR_OK) && (cnt == 512)) {
    352a:	88 23       	and	r24, r24
    352c:	09 f0       	breq	.+2      	; 0x3530 <set_pattern+0xc0>
    352e:	99 c0       	rjmp	.+306    	; 0x3662 <set_pattern+0x1f2>
    3530:	89 81       	ldd	r24, Y+1	; 0x01
    3532:	9a 81       	ldd	r25, Y+2	; 0x02
    3534:	80 50       	subi	r24, 0x00	; 0
    3536:	92 40       	sbci	r25, 0x02	; 2
    3538:	09 f0       	breq	.+2      	; 0x353c <set_pattern+0xcc>
    353a:	93 c0       	rjmp	.+294    	; 0x3662 <set_pattern+0x1f2>

            // get the test header info
            ((uint8_t*)&x_num)[0] = pattDataBuff[0];
    353c:	8b 81       	ldd	r24, Y+3	; 0x03
    353e:	80 93 23 28 	sts	0x2823, r24
            ((uint8_t*)&x_num)[1] = pattDataBuff[1];
    3542:	8c 81       	ldd	r24, Y+4	; 0x04
    3544:	80 93 24 28 	sts	0x2824, r24
            ((uint8_t*)&y_num)[0] = pattDataBuff[2];
    3548:	8d 81       	ldd	r24, Y+5	; 0x05
    354a:	80 93 ab 25 	sts	0x25AB, r24
            ((uint8_t*)&y_num)[1] = pattDataBuff[3];
    354e:	8e 81       	ldd	r24, Y+6	; 0x06
    3550:	80 93 ac 25 	sts	0x25AC, r24
            num_panels = pattDataBuff[4];
    3554:	8f 81       	ldd	r24, Y+7	; 0x07
    3556:	80 93 ec 24 	sts	0x24EC, r24
            gs_value = pattDataBuff[5];   //11, 12, 13, or 14 means use row compression
    355a:	98 85       	ldd	r25, Y+8	; 0x08
    355c:	90 93 35 27 	sts	0x2735, r25
            
            
            num_frames = x_num * y_num;
            if ((gs_value >= 11) & (gs_value <= 14)) {
    3560:	89 2f       	mov	r24, r25
    3562:	8b 50       	subi	r24, 0x0B	; 11
    3564:	84 30       	cpi	r24, 0x04	; 4
    3566:	48 f4       	brcc	.+18     	; 0x357a <set_pattern+0x10a>
                gs_value = gs_value - 10;
    3568:	9a 50       	subi	r25, 0x0A	; 10
    356a:	90 93 35 27 	sts	0x2735, r25
                row_compress = 1;
    356e:	81 e0       	ldi	r24, 0x01	; 1
    3570:	80 93 ad 25 	sts	0x25AD, r24
                bytes_per_panel_frame = gs_value;
    3574:	90 93 b8 27 	sts	0x27B8, r25
    3578:	0b c0       	rjmp	.+22     	; 0x3590 <set_pattern+0x120>
            }
            else {
                row_compress = 0;
    357a:	10 92 ad 25 	sts	0x25AD, r1
                bytes_per_panel_frame = gs_value * 8;
    357e:	89 2f       	mov	r24, r25
    3580:	90 e0       	ldi	r25, 0x00	; 0
    3582:	23 e0       	ldi	r18, 0x03	; 3
    3584:	88 0f       	add	r24, r24
    3586:	99 1f       	adc	r25, r25
    3588:	2a 95       	dec	r18
    358a:	e1 f7       	brne	.-8      	; 0x3584 <set_pattern+0x114>
    358c:	80 93 b8 27 	sts	0x27B8, r24
            }
            index_x = index_y = 0;
    3590:	10 92 6e 29 	sts	0x296E, r1
    3594:	10 92 6f 29 	sts	0x296F, r1
    3598:	80 91 6e 29 	lds	r24, 0x296E
    359c:	90 91 6f 29 	lds	r25, 0x296F
    35a0:	80 93 b9 27 	sts	0x27B9, r24
    35a4:	90 93 ba 27 	sts	0x27BA, r25
            frame_num = 0;
    35a8:	10 92 ed 24 	sts	0x24ED, r1
    35ac:	10 92 ee 24 	sts	0x24EE, r1
            Stop = 1;
    35b0:	81 e0       	ldi	r24, 0x01	; 1
    35b2:	80 93 9c 20 	sts	0x209C, r24
            display_flag = 0;  //clear the display flag
    35b6:	10 92 e8 24 	sts	0x24E8, r1
            if (quiet_mode_on == 0){
    35ba:	80 91 b3 20 	lds	r24, 0x20B3
    35be:	88 23       	and	r24, r24
    35c0:	09 f0       	breq	.+2      	; 0x35c4 <set_pattern+0x154>
    35c2:	40 c0       	rjmp	.+128    	; 0x3644 <set_pattern+0x1d4>
                xprintf(PSTR("Setting pattern %u:\n"), pat_num);
    35c4:	00 d0       	rcall	.+0      	; 0x35c6 <set_pattern+0x156>
    35c6:	0f 92       	push	r0
    35c8:	ed b7       	in	r30, 0x3d	; 61
    35ca:	fe b7       	in	r31, 0x3e	; 62
    35cc:	31 96       	adiw	r30, 0x01	; 1
    35ce:	8a e5       	ldi	r24, 0x5A	; 90
    35d0:	98 e0       	ldi	r25, 0x08	; 8
    35d2:	ad b7       	in	r26, 0x3d	; 61
    35d4:	be b7       	in	r27, 0x3e	; 62
    35d6:	11 96       	adiw	r26, 0x01	; 1
    35d8:	8d 93       	st	X+, r24
    35da:	9c 93       	st	X, r25
    35dc:	12 97       	sbiw	r26, 0x02	; 2
    35de:	12 83       	std	Z+2, r17	; 0x02
    35e0:	13 82       	std	Z+3, r1	; 0x03
    35e2:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
                xprintf(PSTR("  x_num = %u\n  y_num = %u\n  num_panels = %u\n  gs_value = %u\n row_compression = %u\n"),
    35e6:	8d b7       	in	r24, 0x3d	; 61
    35e8:	9e b7       	in	r25, 0x3e	; 62
    35ea:	08 97       	sbiw	r24, 0x08	; 8
    35ec:	8d bf       	out	0x3d, r24	; 61
    35ee:	9e bf       	out	0x3e, r25	; 62
    35f0:	ed b7       	in	r30, 0x3d	; 61
    35f2:	fe b7       	in	r31, 0x3e	; 62
    35f4:	31 96       	adiw	r30, 0x01	; 1
    35f6:	87 e0       	ldi	r24, 0x07	; 7
    35f8:	98 e0       	ldi	r25, 0x08	; 8
    35fa:	ad b7       	in	r26, 0x3d	; 61
    35fc:	be b7       	in	r27, 0x3e	; 62
    35fe:	11 96       	adiw	r26, 0x01	; 1
    3600:	8d 93       	st	X+, r24
    3602:	9c 93       	st	X, r25
    3604:	12 97       	sbiw	r26, 0x02	; 2
    3606:	80 91 23 28 	lds	r24, 0x2823
    360a:	90 91 24 28 	lds	r25, 0x2824
    360e:	82 83       	std	Z+2, r24	; 0x02
    3610:	93 83       	std	Z+3, r25	; 0x03
    3612:	80 91 ab 25 	lds	r24, 0x25AB
    3616:	90 91 ac 25 	lds	r25, 0x25AC
    361a:	84 83       	std	Z+4, r24	; 0x04
    361c:	95 83       	std	Z+5, r25	; 0x05
    361e:	80 91 ec 24 	lds	r24, 0x24EC
    3622:	86 83       	std	Z+6, r24	; 0x06
    3624:	17 82       	std	Z+7, r1	; 0x07
    3626:	80 91 35 27 	lds	r24, 0x2735
    362a:	80 87       	std	Z+8, r24	; 0x08
    362c:	11 86       	std	Z+9, r1	; 0x09
    362e:	80 91 ad 25 	lds	r24, 0x25AD
    3632:	82 87       	std	Z+10, r24	; 0x0a
    3634:	13 86       	std	Z+11, r1	; 0x0b
    3636:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    363a:	8d b7       	in	r24, 0x3d	; 61
    363c:	9e b7       	in	r25, 0x3e	; 62
    363e:	0c 96       	adiw	r24, 0x0c	; 12
    3640:	8d bf       	out	0x3d, r24	; 61
    3642:	9e bf       	out	0x3e, r25	; 62
                        x_num, y_num, num_panels, gs_value, row_compress);
            }
            fetch_display_frame(frame_num, index_x, index_y);
    3644:	80 91 ed 24 	lds	r24, 0x24ED
    3648:	90 91 ee 24 	lds	r25, 0x24EE
    364c:	60 91 b9 27 	lds	r22, 0x27B9
    3650:	70 91 ba 27 	lds	r23, 0x27BA
    3654:	40 91 6e 29 	lds	r20, 0x296E
    3658:	50 91 6f 29 	lds	r21, 0x296F
    365c:	0e 94 6f 17 	call	0x2ede	; 0x2ede <fetch_display_frame>
    3660:	07 c0       	rjmp	.+14     	; 0x3670 <set_pattern+0x200>
        } else
		
        xputs(PSTR("Error reading in pattern file\n"));
    3662:	88 ee       	ldi	r24, 0xE8	; 232
    3664:	97 e0       	ldi	r25, 0x07	; 7
    3666:	02 c0       	rjmp	.+4      	; 0x366c <set_pattern+0x1fc>
		
    } else
    xputs(PSTR("Error opening pattern file\n"));
    3668:	8c ec       	ldi	r24, 0xCC	; 204
    366a:	97 e0       	ldi	r25, 0x07	; 7
    366c:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>

}
    3670:	ce 5f       	subi	r28, 0xFE	; 254
    3672:	dd 4f       	sbci	r29, 0xFD	; 253
    3674:	e3 e0       	ldi	r30, 0x03	; 3
    3676:	0c 94 24 5b 	jmp	0xb648	; 0xb648 <__epilogue_restores__+0x1e>

0000367a <handle_message_length_5>:
        default:   
			i2cMasterSend(0x00, 8, ERROR_CODES[4]);
    }
}

void handle_message_length_5(uint8_t *msg_buffer) {
    367a:	fc 01       	movw	r30, r24
    switch(msg_buffer[0]) {
    367c:	80 81       	ld	r24, Z
    367e:	80 37       	cpi	r24, 0x70	; 112
    3680:	21 f0       	breq	.+8      	; 0x368a <handle_message_length_5+0x10>
    3682:	81 37       	cpi	r24, 0x71	; 113
    3684:	09 f0       	breq	.+2      	; 0x3688 <handle_message_length_5+0xe>
    3686:	bd c0       	rjmp	.+378    	; 0x3802 <handle_message_length_5+0x188>
    3688:	7b c0       	rjmp	.+246    	; 0x3780 <handle_message_length_5+0x106>
        case 0x70:   //put in a bunch of type casts, because of mysterious error dealling with frame index above 128.
            //'set_position'
            index_x = (uint8_t)msg_buffer[1] + (256*(uint8_t)msg_buffer[2]);
    368a:	92 81       	ldd	r25, Z+2	; 0x02
    368c:	80 e0       	ldi	r24, 0x00	; 0
    368e:	21 81       	ldd	r18, Z+1	; 0x01
    3690:	82 0f       	add	r24, r18
    3692:	91 1d       	adc	r25, r1
    3694:	80 93 b9 27 	sts	0x27B9, r24
    3698:	90 93 ba 27 	sts	0x27BA, r25
            index_y = (uint8_t)msg_buffer[3] + (256*(uint8_t)msg_buffer[4]);
    369c:	94 81       	ldd	r25, Z+4	; 0x04
    369e:	80 e0       	ldi	r24, 0x00	; 0
    36a0:	23 81       	ldd	r18, Z+3	; 0x03
    36a2:	82 0f       	add	r24, r18
    36a4:	91 1d       	adc	r25, r1
    36a6:	80 93 6e 29 	sts	0x296E, r24
    36aa:	90 93 6f 29 	sts	0x296F, r25
            
            X_pos_index = index_x; // these only used during position func. control mode, but
    36ae:	80 91 b9 27 	lds	r24, 0x27B9
    36b2:	90 91 ba 27 	lds	r25, 0x27BA
    36b6:	80 93 04 27 	sts	0x2704, r24
    36ba:	90 93 05 27 	sts	0x2705, r25
            Y_pos_index = index_y; //update here should not slow things down much and no need for sep. function.
    36be:	80 91 6e 29 	lds	r24, 0x296E
    36c2:	90 91 6f 29 	lds	r25, 0x296F
    36c6:	80 93 76 26 	sts	0x2676, r24
    36ca:	90 93 77 26 	sts	0x2677, r25
            frame_num = index_y* x_num + index_x;
    36ce:	20 91 6e 29 	lds	r18, 0x296E
    36d2:	30 91 6f 29 	lds	r19, 0x296F
    36d6:	40 91 b9 27 	lds	r20, 0x27B9
    36da:	50 91 ba 27 	lds	r21, 0x27BA
    36de:	80 91 23 28 	lds	r24, 0x2823
    36e2:	90 91 24 28 	lds	r25, 0x2824
    36e6:	bc 01       	movw	r22, r24
    36e8:	26 9f       	mul	r18, r22
    36ea:	c0 01       	movw	r24, r0
    36ec:	27 9f       	mul	r18, r23
    36ee:	90 0d       	add	r25, r0
    36f0:	36 9f       	mul	r19, r22
    36f2:	90 0d       	add	r25, r0
    36f4:	11 24       	eor	r1, r1
    36f6:	84 0f       	add	r24, r20
    36f8:	95 1f       	adc	r25, r21
    36fa:	80 93 ed 24 	sts	0x24ED, r24
    36fe:	90 93 ee 24 	sts	0x24EE, r25
            display_flag = 0;  //clear the display flag
    3702:	10 92 e8 24 	sts	0x24E8, r1
            if (quiet_mode_on == 0)
    3706:	80 91 b3 20 	lds	r24, 0x20B3
    370a:	88 23       	and	r24, r24
    370c:	51 f5       	brne	.+84     	; 0x3762 <handle_message_length_5+0xe8>
                xprintf(PSTR("set_position: index_x= %u,  index_y= %u, and frame_num= %u\n"), index_x, index_y, frame_num);
    370e:	20 91 b9 27 	lds	r18, 0x27B9
    3712:	30 91 ba 27 	lds	r19, 0x27BA
    3716:	40 91 6e 29 	lds	r20, 0x296E
    371a:	50 91 6f 29 	lds	r21, 0x296F
    371e:	60 91 ed 24 	lds	r22, 0x24ED
    3722:	70 91 ee 24 	lds	r23, 0x24EE
    3726:	8d b7       	in	r24, 0x3d	; 61
    3728:	9e b7       	in	r25, 0x3e	; 62
    372a:	08 97       	sbiw	r24, 0x08	; 8
    372c:	8d bf       	out	0x3d, r24	; 61
    372e:	9e bf       	out	0x3e, r25	; 62
    3730:	ed b7       	in	r30, 0x3d	; 61
    3732:	fe b7       	in	r31, 0x3e	; 62
    3734:	31 96       	adiw	r30, 0x01	; 1
    3736:	86 e6       	ldi	r24, 0x66	; 102
    3738:	99 e0       	ldi	r25, 0x09	; 9
    373a:	ad b7       	in	r26, 0x3d	; 61
    373c:	be b7       	in	r27, 0x3e	; 62
    373e:	11 96       	adiw	r26, 0x01	; 1
    3740:	8d 93       	st	X+, r24
    3742:	9c 93       	st	X, r25
    3744:	12 97       	sbiw	r26, 0x02	; 2
    3746:	22 83       	std	Z+2, r18	; 0x02
    3748:	33 83       	std	Z+3, r19	; 0x03
    374a:	44 83       	std	Z+4, r20	; 0x04
    374c:	55 83       	std	Z+5, r21	; 0x05
    374e:	66 83       	std	Z+6, r22	; 0x06
    3750:	77 83       	std	Z+7, r23	; 0x07
    3752:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    3756:	6d b7       	in	r22, 0x3d	; 61
    3758:	7e b7       	in	r23, 0x3e	; 62
    375a:	68 5f       	subi	r22, 0xF8	; 248
    375c:	7f 4f       	sbci	r23, 0xFF	; 255
    375e:	6d bf       	out	0x3d, r22	; 61
    3760:	7e bf       	out	0x3e, r23	; 62
            fetch_display_frame(frame_num, index_x, index_y);
    3762:	80 91 ed 24 	lds	r24, 0x24ED
    3766:	90 91 ee 24 	lds	r25, 0x24EE
    376a:	60 91 b9 27 	lds	r22, 0x27B9
    376e:	70 91 ba 27 	lds	r23, 0x27BA
    3772:	40 91 6e 29 	lds	r20, 0x296E
    3776:	50 91 6f 29 	lds	r21, 0x296F
    377a:	0e 94 6f 17 	call	0x2ede	; 0x2ede <fetch_display_frame>
    377e:	08 95       	ret
            break;

        case 0x71:
            //'send_gain_bias', all of these are signed byte values
            gain_x = msg_buffer[1];
    3780:	51 81       	ldd	r21, Z+1	; 0x01
    3782:	50 93 02 28 	sts	0x2802, r21
            bias_x = msg_buffer[2];
    3786:	42 81       	ldd	r20, Z+2	; 0x02
    3788:	40 93 9b 25 	sts	0x259B, r20
            gain_y = msg_buffer[3];
    378c:	33 81       	ldd	r19, Z+3	; 0x03
    378e:	30 93 bb 27 	sts	0x27BB, r19
            bias_y = msg_buffer[4];
    3792:	24 81       	ldd	r18, Z+4	; 0x04
    3794:	20 93 d2 2b 	sts	0x2BD2, r18
			if (quiet_mode_on == 0)
    3798:	80 91 b3 20 	lds	r24, 0x20B3
    379c:	88 23       	and	r24, r24
    379e:	b9 f5       	brne	.+110    	; 0x380e <handle_message_length_5+0x194>
                xprintf(PSTR("set_gain_bias: gain_x= %d,  bias_x= %d, gain_y= %d, bias_y=%d\n"), gain_x, bias_x, gain_y, bias_y);
    37a0:	8d b7       	in	r24, 0x3d	; 61
    37a2:	9e b7       	in	r25, 0x3e	; 62
    37a4:	0a 97       	sbiw	r24, 0x0a	; 10
    37a6:	8d bf       	out	0x3d, r24	; 61
    37a8:	9e bf       	out	0x3e, r25	; 62
    37aa:	ed b7       	in	r30, 0x3d	; 61
    37ac:	fe b7       	in	r31, 0x3e	; 62
    37ae:	31 96       	adiw	r30, 0x01	; 1
    37b0:	87 e2       	ldi	r24, 0x27	; 39
    37b2:	99 e0       	ldi	r25, 0x09	; 9
    37b4:	ad b7       	in	r26, 0x3d	; 61
    37b6:	be b7       	in	r27, 0x3e	; 62
    37b8:	11 96       	adiw	r26, 0x01	; 1
    37ba:	8d 93       	st	X+, r24
    37bc:	9c 93       	st	X, r25
    37be:	12 97       	sbiw	r26, 0x02	; 2
    37c0:	85 2f       	mov	r24, r21
    37c2:	99 27       	eor	r25, r25
    37c4:	87 fd       	sbrc	r24, 7
    37c6:	90 95       	com	r25
    37c8:	82 83       	std	Z+2, r24	; 0x02
    37ca:	93 83       	std	Z+3, r25	; 0x03
    37cc:	84 2f       	mov	r24, r20
    37ce:	99 27       	eor	r25, r25
    37d0:	87 fd       	sbrc	r24, 7
    37d2:	90 95       	com	r25
    37d4:	84 83       	std	Z+4, r24	; 0x04
    37d6:	95 83       	std	Z+5, r25	; 0x05
    37d8:	83 2f       	mov	r24, r19
    37da:	99 27       	eor	r25, r25
    37dc:	87 fd       	sbrc	r24, 7
    37de:	90 95       	com	r25
    37e0:	86 83       	std	Z+6, r24	; 0x06
    37e2:	97 83       	std	Z+7, r25	; 0x07
    37e4:	82 2f       	mov	r24, r18
    37e6:	99 27       	eor	r25, r25
    37e8:	87 fd       	sbrc	r24, 7
    37ea:	90 95       	com	r25
    37ec:	80 87       	std	Z+8, r24	; 0x08
    37ee:	91 87       	std	Z+9, r25	; 0x09
    37f0:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    37f4:	6d b7       	in	r22, 0x3d	; 61
    37f6:	7e b7       	in	r23, 0x3e	; 62
    37f8:	66 5f       	subi	r22, 0xF6	; 246
    37fa:	7f 4f       	sbci	r23, 0xFF	; 255
    37fc:	6d bf       	out	0x3d, r22	; 61
    37fe:	7e bf       	out	0x3e, r23	; 62
    3800:	08 95       	ret
            break;
		
		default:
            i2cMasterSend(0x00, 8, ERROR_CODES[5]);
    3802:	80 e0       	ldi	r24, 0x00	; 0
    3804:	68 e0       	ldi	r22, 0x08	; 8
    3806:	48 ee       	ldi	r20, 0xE8	; 232
    3808:	50 e2       	ldi	r21, 0x20	; 32
    380a:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <i2cMasterSend>
    380e:	08 95       	ret

00003810 <handle_message_length_2>:
	
        default: i2cMasterSend(0x00, 8, ERROR_CODES[1]);
    }
}

void handle_message_length_2(uint8_t *msg_buffer) {
    3810:	fc 01       	movw	r30, r24
    uint8_t argument_byte;
    
    argument_byte = msg_buffer[1];
    3812:	21 81       	ldd	r18, Z+1	; 0x01
    switch(msg_buffer[0]) {
    3814:	80 81       	ld	r24, Z
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	fc 01       	movw	r30, r24
    381a:	31 97       	sbiw	r30, 0x01	; 1
    381c:	e0 31       	cpi	r30, 0x10	; 16
    381e:	f1 05       	cpc	r31, r1
    3820:	08 f0       	brcs	.+2      	; 0x3824 <handle_message_length_2+0x14>
    3822:	44 c0       	rjmp	.+136    	; 0x38ac <handle_message_length_2+0x9c>
    3824:	e6 50       	subi	r30, 0x06	; 6
    3826:	ff 4f       	sbci	r31, 0xFF	; 255
    3828:	0c 94 30 5b 	jmp	0xb660	; 0xb660 <__tablejump2__>
        case 0x01: //sends a reset command out to panel at taget address
            i2cMasterSend(argument_byte, 2, RESET);
    382c:	82 2f       	mov	r24, r18
    382e:	62 e0       	ldi	r22, 0x02	; 2
    3830:	40 e0       	ldi	r20, 0x00	; 0
    3832:	51 e2       	ldi	r21, 0x21	; 33
    3834:	3f c0       	rjmp	.+126    	; 0x38b4 <handle_message_length_2+0xa4>
            break;
            
        case 0x02: //sends a display command out to panel at taget address
            i2cMasterSend(argument_byte, 2, DISPLAY);
    3836:	82 2f       	mov	r24, r18
    3838:	62 e0       	ldi	r22, 0x02	; 2
    383a:	42 e0       	ldi	r20, 0x02	; 2
    383c:	51 e2       	ldi	r21, 0x21	; 33
    383e:	3a c0       	rjmp	.+116    	; 0x38b4 <handle_message_length_2+0xa4>
            break;
            
        case 0x03:   //set pattern
            set_pattern(argument_byte);      //pattern x - specified in argument_byte
    3840:	82 2f       	mov	r24, r18
    3842:	0e 94 38 1a 	call	0x3470	; 0x3470 <set_pattern>
    3846:	08 95       	ret
            break;
            
        case 0x04: // this is an ADC test command
            test_ADC(argument_byte);  //here argument_byte is actually a channel, 0-7 to test ADC/DAC system
    3848:	82 2f       	mov	r24, r18
    384a:	0e 94 63 25 	call	0x4ac6	; 0x4ac6 <test_ADC>
    384e:	08 95       	ret
            break;
            
        case 0x05: // this is a DIO test command
            test_DIO(argument_byte);  //here argument_byte is actually a channel, 0-7 to test ADC/DAC system
    3850:	82 2f       	mov	r24, r18
    3852:	0e 94 07 25 	call	0x4a0e	; 0x4a0e <test_DIO>
    3856:	08 95       	ret
            break;
            
        case 0x06: // this is a trigger rate set command
            trigger_rate = argument_byte*2;  //here argument_byte is a trigger rate
    3858:	82 2f       	mov	r24, r18
    385a:	90 e0       	ldi	r25, 0x00	; 0
    385c:	88 0f       	add	r24, r24
    385e:	99 1f       	adc	r25, r25
    3860:	80 93 a9 20 	sts	0x20A9, r24
    3864:	90 93 aa 20 	sts	0x20AA, r25
    3868:	08 95       	ret
            break;
            
        case 0x07:   //flash panel#
            flash_panel(argument_byte); //here argument_byte is actually a panel number
    386a:	82 2f       	mov	r24, r18
    386c:	0e 94 c1 2b 	call	0x5782	; 0x5782 <flash_panel>
    3870:	08 95       	ret
            break;
            
        case 0x08:   //eeprom panel#
            eeprom_panel(argument_byte); //here argument_byte is actually a panel number
    3872:	82 2f       	mov	r24, r18
    3874:	0e 94 cf 28 	call	0x519e	; 0x519e <eeprom_panel>
    3878:	08 95       	ret
            break;
			
        case 0x09:   //set arena configuration
            set_hwConfig(argument_byte);      //configuration x - specified in argument_byte
    387a:	82 2f       	mov	r24, r18
    387c:	0e 94 26 14 	call	0x284c	; 0x284c <set_hwConfig>
    3880:	08 95       	ret
            break;	
			
		case 0x10:  // get ADC value from a ADC channel (1-4)
            xprintf(PSTR("ADC_value =  %d:\n"), analogRead(argument_byte - 1));
    3882:	82 2f       	mov	r24, r18
    3884:	81 50       	subi	r24, 0x01	; 1
    3886:	0e 94 71 24 	call	0x48e2	; 0x48e2 <analogRead>
    388a:	00 d0       	rcall	.+0      	; 0x388c <handle_message_length_2+0x7c>
    388c:	0f 92       	push	r0
    388e:	28 ee       	ldi	r18, 0xE8	; 232
    3890:	39 e0       	ldi	r19, 0x09	; 9
    3892:	ed b7       	in	r30, 0x3d	; 61
    3894:	fe b7       	in	r31, 0x3e	; 62
    3896:	21 83       	std	Z+1, r18	; 0x01
    3898:	32 83       	std	Z+2, r19	; 0x02
    389a:	83 83       	std	Z+3, r24	; 0x03
    389c:	94 83       	std	Z+4, r25	; 0x04
    389e:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    38a2:	0f 90       	pop	r0
    38a4:	0f 90       	pop	r0
    38a6:	0f 90       	pop	r0
    38a8:	0f 90       	pop	r0
    38aa:	08 95       	ret
            break;	
			
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[2]);
    38ac:	80 e0       	ldi	r24, 0x00	; 0
    38ae:	68 e0       	ldi	r22, 0x08	; 8
    38b0:	40 ed       	ldi	r20, 0xD0	; 208
    38b2:	50 e2       	ldi	r21, 0x20	; 32
    38b4:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <i2cMasterSend>
    38b8:	08 95       	ret

000038ba <handle_message_length_1>:
	TWI_MasterReleaseBuff(&twi3);
	TWI_MasterReleaseBuff(&twi4);
	releaseRxBuff();
}

void handle_message_length_1(uint8_t *msg_buffer) {
    38ba:	6f 92       	push	r6
    38bc:	7f 92       	push	r7
    38be:	9f 92       	push	r9
    38c0:	af 92       	push	r10
    38c2:	bf 92       	push	r11
    38c4:	cf 92       	push	r12
    38c6:	df 92       	push	r13
    38c8:	ef 92       	push	r14
    38ca:	ff 92       	push	r15
    38cc:	0f 93       	push	r16
    38ce:	1f 93       	push	r17
    38d0:	df 93       	push	r29
    38d2:	cf 93       	push	r28
    38d4:	0f 92       	push	r0
    38d6:	0f 92       	push	r0
    38d8:	cd b7       	in	r28, 0x3d	; 61
    38da:	de b7       	in	r29, 0x3e	; 62
    38dc:	fc 01       	movw	r30, r24
    uint8_t i;
	uint32_t tmp_x=0;
	uint32_t tmp_y=0;
	uint8_t n_sample=100;
    
    switch(msg_buffer[0]) {
    38de:	e0 81       	ld	r30, Z
    38e0:	e3 34       	cpi	r30, 0x43	; 67
    38e2:	09 f4       	brne	.+2      	; 0x38e6 <handle_message_length_1+0x2c>
    38e4:	26 c2       	rjmp	.+1100   	; 0x3d32 <handle_message_length_1+0x478>
    38e6:	e4 34       	cpi	r30, 0x44	; 68
    38e8:	08 f0       	brcs	.+2      	; 0x38ec <handle_message_length_1+0x32>
    38ea:	5b c0       	rjmp	.+182    	; 0x39a2 <handle_message_length_1+0xe8>
    38ec:	e0 32       	cpi	r30, 0x20	; 32
    38ee:	09 f4       	brne	.+2      	; 0x38f2 <handle_message_length_1+0x38>
    38f0:	b6 c0       	rjmp	.+364    	; 0x3a5e <handle_message_length_1+0x1a4>
    38f2:	e1 32       	cpi	r30, 0x21	; 33
    38f4:	58 f5       	brcc	.+86     	; 0x394c <handle_message_length_1+0x92>
    38f6:	e4 31       	cpi	r30, 0x14	; 20
    38f8:	09 f4       	brne	.+2      	; 0x38fc <handle_message_length_1+0x42>
    38fa:	a4 c2       	rjmp	.+1352   	; 0x3e44 <handle_message_length_1+0x58a>
    38fc:	e5 31       	cpi	r30, 0x15	; 21
    38fe:	98 f4       	brcc	.+38     	; 0x3926 <handle_message_length_1+0x6c>
    3900:	e1 31       	cpi	r30, 0x11	; 17
    3902:	09 f4       	brne	.+2      	; 0x3906 <handle_message_length_1+0x4c>
    3904:	91 c2       	rjmp	.+1314   	; 0x3e28 <handle_message_length_1+0x56e>
    3906:	e2 31       	cpi	r30, 0x12	; 18
    3908:	38 f4       	brcc	.+14     	; 0x3918 <handle_message_length_1+0x5e>
    390a:	ee 23       	and	r30, r30
    390c:	09 f4       	brne	.+2      	; 0x3910 <handle_message_length_1+0x56>
    390e:	fd c1       	rjmp	.+1018   	; 0x3d0a <handle_message_length_1+0x450>
    3910:	e0 31       	cpi	r30, 0x10	; 16
    3912:	09 f0       	breq	.+2      	; 0x3916 <handle_message_length_1+0x5c>
    3914:	ac c3       	rjmp	.+1880   	; 0x406e <__stack+0x6f>
    3916:	84 c2       	rjmp	.+1288   	; 0x3e20 <handle_message_length_1+0x566>
    3918:	e2 31       	cpi	r30, 0x12	; 18
    391a:	09 f4       	brne	.+2      	; 0x391e <handle_message_length_1+0x64>
    391c:	8c c2       	rjmp	.+1304   	; 0x3e36 <handle_message_length_1+0x57c>
    391e:	e3 31       	cpi	r30, 0x13	; 19
    3920:	09 f0       	breq	.+2      	; 0x3924 <handle_message_length_1+0x6a>
    3922:	a5 c3       	rjmp	.+1866   	; 0x406e <__stack+0x6f>
    3924:	8c c2       	rjmp	.+1304   	; 0x3e3e <handle_message_length_1+0x584>
    3926:	e7 31       	cpi	r30, 0x17	; 23
    3928:	09 f4       	brne	.+2      	; 0x392c <handle_message_length_1+0x72>
    392a:	b8 c2       	rjmp	.+1392   	; 0x3e9c <handle_message_length_1+0x5e2>
    392c:	e8 31       	cpi	r30, 0x18	; 24
    392e:	38 f4       	brcc	.+14     	; 0x393e <handle_message_length_1+0x84>
    3930:	e5 31       	cpi	r30, 0x15	; 21
    3932:	09 f4       	brne	.+2      	; 0x3936 <handle_message_length_1+0x7c>
    3934:	8a c2       	rjmp	.+1300   	; 0x3e4a <handle_message_length_1+0x590>
    3936:	e6 31       	cpi	r30, 0x16	; 22
    3938:	09 f0       	breq	.+2      	; 0x393c <handle_message_length_1+0x82>
    393a:	99 c3       	rjmp	.+1842   	; 0x406e <__stack+0x6f>
    393c:	97 c2       	rjmp	.+1326   	; 0x3e6c <handle_message_length_1+0x5b2>
    393e:	e8 31       	cpi	r30, 0x18	; 24
    3940:	09 f4       	brne	.+2      	; 0x3944 <handle_message_length_1+0x8a>
    3942:	b0 c2       	rjmp	.+1376   	; 0x3ea4 <handle_message_length_1+0x5ea>
    3944:	e9 31       	cpi	r30, 0x19	; 25
    3946:	09 f0       	breq	.+2      	; 0x394a <handle_message_length_1+0x90>
    3948:	92 c3       	rjmp	.+1828   	; 0x406e <__stack+0x6f>
    394a:	af c2       	rjmp	.+1374   	; 0x3eaa <handle_message_length_1+0x5f0>
    394c:	e6 32       	cpi	r30, 0x26	; 38
    394e:	09 f4       	brne	.+2      	; 0x3952 <handle_message_length_1+0x98>
    3950:	27 c3       	rjmp	.+1614   	; 0x3fa0 <handle_message_length_1+0x6e6>
    3952:	e7 32       	cpi	r30, 0x27	; 39
    3954:	98 f4       	brcc	.+38     	; 0x397c <handle_message_length_1+0xc2>
    3956:	e3 32       	cpi	r30, 0x23	; 35
    3958:	09 f4       	brne	.+2      	; 0x395c <handle_message_length_1+0xa2>
    395a:	03 c3       	rjmp	.+1542   	; 0x3f62 <handle_message_length_1+0x6a8>
    395c:	e4 32       	cpi	r30, 0x24	; 36
    395e:	38 f4       	brcc	.+14     	; 0x396e <handle_message_length_1+0xb4>
    3960:	e1 32       	cpi	r30, 0x21	; 33
    3962:	09 f4       	brne	.+2      	; 0x3966 <handle_message_length_1+0xac>
    3964:	ea c2       	rjmp	.+1492   	; 0x3f3a <handle_message_length_1+0x680>
    3966:	e2 32       	cpi	r30, 0x22	; 34
    3968:	09 f0       	breq	.+2      	; 0x396c <handle_message_length_1+0xb2>
    396a:	81 c3       	rjmp	.+1794   	; 0x406e <__stack+0x6f>
    396c:	f0 c2       	rjmp	.+1504   	; 0x3f4e <handle_message_length_1+0x694>
    396e:	e4 32       	cpi	r30, 0x24	; 36
    3970:	09 f4       	brne	.+2      	; 0x3974 <handle_message_length_1+0xba>
    3972:	06 c3       	rjmp	.+1548   	; 0x3f80 <handle_message_length_1+0x6c6>
    3974:	e5 32       	cpi	r30, 0x25	; 37
    3976:	09 f0       	breq	.+2      	; 0x397a <handle_message_length_1+0xc0>
    3978:	7a c3       	rjmp	.+1780   	; 0x406e <__stack+0x6f>
    397a:	1c c1       	rjmp	.+568    	; 0x3bb4 <handle_message_length_1+0x2fa>
    397c:	e0 34       	cpi	r30, 0x40	; 64
    397e:	09 f4       	brne	.+2      	; 0x3982 <handle_message_length_1+0xc8>
    3980:	c9 c1       	rjmp	.+914    	; 0x3d14 <handle_message_length_1+0x45a>
    3982:	e1 34       	cpi	r30, 0x41	; 65
    3984:	38 f4       	brcc	.+14     	; 0x3994 <handle_message_length_1+0xda>
    3986:	e0 33       	cpi	r30, 0x30	; 48
    3988:	09 f4       	brne	.+2      	; 0x398c <handle_message_length_1+0xd2>
    398a:	cd c0       	rjmp	.+410    	; 0x3b26 <handle_message_length_1+0x26c>
    398c:	e5 33       	cpi	r30, 0x35	; 53
    398e:	09 f0       	breq	.+2      	; 0x3992 <handle_message_length_1+0xd8>
    3990:	6e c3       	rjmp	.+1756   	; 0x406e <__stack+0x6f>
    3992:	71 c1       	rjmp	.+738    	; 0x3c76 <handle_message_length_1+0x3bc>
    3994:	e1 34       	cpi	r30, 0x41	; 65
    3996:	09 f4       	brne	.+2      	; 0x399a <handle_message_length_1+0xe0>
    3998:	c2 c1       	rjmp	.+900    	; 0x3d1e <handle_message_length_1+0x464>
    399a:	e2 34       	cpi	r30, 0x42	; 66
    399c:	09 f0       	breq	.+2      	; 0x39a0 <handle_message_length_1+0xe6>
    399e:	67 c3       	rjmp	.+1742   	; 0x406e <__stack+0x6f>
    39a0:	c3 c1       	rjmp	.+902    	; 0x3d28 <handle_message_length_1+0x46e>
    39a2:	e4 39       	cpi	r30, 0x94	; 148
    39a4:	09 f4       	brne	.+2      	; 0x39a8 <handle_message_length_1+0xee>
    39a6:	00 c2       	rjmp	.+1024   	; 0x3da8 <handle_message_length_1+0x4ee>
    39a8:	e5 39       	cpi	r30, 0x95	; 149
    39aa:	58 f5       	brcc	.+86     	; 0x3a02 <handle_message_length_1+0x148>
    39ac:	e0 36       	cpi	r30, 0x60	; 96
    39ae:	09 f4       	brne	.+2      	; 0x39b2 <handle_message_length_1+0xf8>
    39b0:	e1 c1       	rjmp	.+962    	; 0x3d74 <handle_message_length_1+0x4ba>
    39b2:	e1 36       	cpi	r30, 0x61	; 97
    39b4:	98 f4       	brcc	.+38     	; 0x39dc <handle_message_length_1+0x122>
    39b6:	e6 34       	cpi	r30, 0x46	; 70
    39b8:	09 f4       	brne	.+2      	; 0x39bc <handle_message_length_1+0x102>
    39ba:	ca c1       	rjmp	.+916    	; 0x3d50 <handle_message_length_1+0x496>
    39bc:	e7 34       	cpi	r30, 0x47	; 71
    39be:	38 f4       	brcc	.+14     	; 0x39ce <handle_message_length_1+0x114>
    39c0:	e4 34       	cpi	r30, 0x44	; 68
    39c2:	09 f4       	brne	.+2      	; 0x39c6 <handle_message_length_1+0x10c>
    39c4:	bb c1       	rjmp	.+886    	; 0x3d3c <handle_message_length_1+0x482>
    39c6:	e5 34       	cpi	r30, 0x45	; 69
    39c8:	09 f0       	breq	.+2      	; 0x39cc <handle_message_length_1+0x112>
    39ca:	51 c3       	rjmp	.+1698   	; 0x406e <__stack+0x6f>
    39cc:	bc c1       	rjmp	.+888    	; 0x3d46 <handle_message_length_1+0x48c>
    39ce:	e7 34       	cpi	r30, 0x47	; 71
    39d0:	09 f4       	brne	.+2      	; 0x39d4 <handle_message_length_1+0x11a>
    39d2:	c3 c1       	rjmp	.+902    	; 0x3d5a <handle_message_length_1+0x4a0>
    39d4:	e0 35       	cpi	r30, 0x50	; 80
    39d6:	09 f0       	breq	.+2      	; 0x39da <handle_message_length_1+0x120>
    39d8:	4a c3       	rjmp	.+1684   	; 0x406e <__stack+0x6f>
    39da:	c9 c1       	rjmp	.+914    	; 0x3d6e <handle_message_length_1+0x4b4>
    39dc:	e1 39       	cpi	r30, 0x91	; 145
    39de:	09 f4       	brne	.+2      	; 0x39e2 <handle_message_length_1+0x128>
    39e0:	d4 c1       	rjmp	.+936    	; 0x3d8a <handle_message_length_1+0x4d0>
    39e2:	e2 39       	cpi	r30, 0x92	; 146
    39e4:	38 f4       	brcc	.+14     	; 0x39f4 <handle_message_length_1+0x13a>
    39e6:	e0 37       	cpi	r30, 0x70	; 112
    39e8:	09 f4       	brne	.+2      	; 0x39ec <handle_message_length_1+0x132>
    39ea:	c7 c1       	rjmp	.+910    	; 0x3d7a <handle_message_length_1+0x4c0>
    39ec:	e0 39       	cpi	r30, 0x90	; 144
    39ee:	09 f0       	breq	.+2      	; 0x39f2 <handle_message_length_1+0x138>
    39f0:	3e c3       	rjmp	.+1660   	; 0x406e <__stack+0x6f>
    39f2:	c6 c1       	rjmp	.+908    	; 0x3d80 <handle_message_length_1+0x4c6>
    39f4:	e2 39       	cpi	r30, 0x92	; 146
    39f6:	09 f4       	brne	.+2      	; 0x39fa <handle_message_length_1+0x140>
    39f8:	cd c1       	rjmp	.+922    	; 0x3d94 <handle_message_length_1+0x4da>
    39fa:	e3 39       	cpi	r30, 0x93	; 147
    39fc:	09 f0       	breq	.+2      	; 0x3a00 <handle_message_length_1+0x146>
    39fe:	37 c3       	rjmp	.+1646   	; 0x406e <__stack+0x6f>
    3a00:	ce c1       	rjmp	.+924    	; 0x3d9e <handle_message_length_1+0x4e4>
    3a02:	ea 39       	cpi	r30, 0x9A	; 154
    3a04:	09 f4       	brne	.+2      	; 0x3a08 <handle_message_length_1+0x14e>
    3a06:	ee c1       	rjmp	.+988    	; 0x3de4 <handle_message_length_1+0x52a>
    3a08:	eb 39       	cpi	r30, 0x9B	; 155
    3a0a:	98 f4       	brcc	.+38     	; 0x3a32 <handle_message_length_1+0x178>
    3a0c:	e7 39       	cpi	r30, 0x97	; 151
    3a0e:	09 f4       	brne	.+2      	; 0x3a12 <handle_message_length_1+0x158>
    3a10:	da c1       	rjmp	.+948    	; 0x3dc6 <handle_message_length_1+0x50c>
    3a12:	e8 39       	cpi	r30, 0x98	; 152
    3a14:	38 f4       	brcc	.+14     	; 0x3a24 <handle_message_length_1+0x16a>
    3a16:	e5 39       	cpi	r30, 0x95	; 149
    3a18:	09 f4       	brne	.+2      	; 0x3a1c <handle_message_length_1+0x162>
    3a1a:	cb c1       	rjmp	.+918    	; 0x3db2 <handle_message_length_1+0x4f8>
    3a1c:	e6 39       	cpi	r30, 0x96	; 150
    3a1e:	09 f0       	breq	.+2      	; 0x3a22 <handle_message_length_1+0x168>
    3a20:	26 c3       	rjmp	.+1612   	; 0x406e <__stack+0x6f>
    3a22:	cc c1       	rjmp	.+920    	; 0x3dbc <handle_message_length_1+0x502>
    3a24:	e8 39       	cpi	r30, 0x98	; 152
    3a26:	09 f4       	brne	.+2      	; 0x3a2a <handle_message_length_1+0x170>
    3a28:	d3 c1       	rjmp	.+934    	; 0x3dd0 <handle_message_length_1+0x516>
    3a2a:	e9 39       	cpi	r30, 0x99	; 153
    3a2c:	09 f0       	breq	.+2      	; 0x3a30 <handle_message_length_1+0x176>
    3a2e:	1f c3       	rjmp	.+1598   	; 0x406e <__stack+0x6f>
    3a30:	d4 c1       	rjmp	.+936    	; 0x3dda <handle_message_length_1+0x520>
    3a32:	ed 39       	cpi	r30, 0x9D	; 157
    3a34:	09 f4       	brne	.+2      	; 0x3a38 <handle_message_length_1+0x17e>
    3a36:	e5 c1       	rjmp	.+970    	; 0x3e02 <handle_message_length_1+0x548>
    3a38:	ee 39       	cpi	r30, 0x9E	; 158
    3a3a:	38 f4       	brcc	.+14     	; 0x3a4a <handle_message_length_1+0x190>
    3a3c:	eb 39       	cpi	r30, 0x9B	; 155
    3a3e:	09 f4       	brne	.+2      	; 0x3a42 <handle_message_length_1+0x188>
    3a40:	d6 c1       	rjmp	.+940    	; 0x3dee <handle_message_length_1+0x534>
    3a42:	ec 39       	cpi	r30, 0x9C	; 156
    3a44:	09 f0       	breq	.+2      	; 0x3a48 <handle_message_length_1+0x18e>
    3a46:	13 c3       	rjmp	.+1574   	; 0x406e <__stack+0x6f>
    3a48:	d7 c1       	rjmp	.+942    	; 0x3df8 <handle_message_length_1+0x53e>
    3a4a:	ef 39       	cpi	r30, 0x9F	; 159
    3a4c:	09 f4       	brne	.+2      	; 0x3a50 <handle_message_length_1+0x196>
    3a4e:	e3 c1       	rjmp	.+966    	; 0x3e16 <handle_message_length_1+0x55c>
    3a50:	ef 39       	cpi	r30, 0x9F	; 159
    3a52:	08 f4       	brcc	.+2      	; 0x3a56 <handle_message_length_1+0x19c>
    3a54:	db c1       	rjmp	.+950    	; 0x3e0c <handle_message_length_1+0x552>
    3a56:	ef 3f       	cpi	r30, 0xFF	; 255
    3a58:	09 f0       	breq	.+2      	; 0x3a5c <handle_message_length_1+0x1a2>
    3a5a:	09 c3       	rjmp	.+1554   	; 0x406e <__stack+0x6f>
    3a5c:	83 c1       	rjmp	.+774    	; 0x3d64 <handle_message_length_1+0x4aa>
        case 0x20:  //Start display: 0x20
            //set these to zero so that start at beginning of function - useful for putting in a set amount of expansion
			func_read_index_x = 0;
    3a5e:	10 92 ef 24 	sts	0x24EF, r1
			func_read_index_y = 0;
    3a62:	10 92 f0 24 	sts	0x24F0, r1
            Stop = 0;
    3a66:	10 92 9c 20 	sts	0x209C, r1
			next_block_x = 1;
    3a6a:	81 e0       	ldi	r24, 0x01	; 1
    3a6c:	80 93 a1 20 	sts	0x20A1, r24
			next_block_y = 1;
    3a70:	80 93 a2 20 	sts	0x20A2, r24
            display_flag = 0;  //clear the display flag
    3a74:	10 92 e8 24 	sts	0x24E8, r1
            Reg_Handler(Update_display, UPDATE_RATE, 1, 1);
    3a78:	88 eb       	ldi	r24, 0xB8	; 184
    3a7a:	94 e1       	ldi	r25, 0x14	; 20
    3a7c:	4e e4       	ldi	r20, 0x4E	; 78
    3a7e:	50 e0       	ldi	r21, 0x00	; 0
    3a80:	60 e0       	ldi	r22, 0x00	; 0
    3a82:	70 e0       	ldi	r23, 0x00	; 0
    3a84:	21 e0       	ldi	r18, 0x01	; 1
    3a86:	01 e0       	ldi	r16, 0x01	; 1
    3a88:	0e 94 25 32 	call	0x644a	; 0x644a <Reg_Handler>
            Reg_Handler(increment_index_x, UPDATE_RATE, 2, 0); //initilize the 2 and 3 priority interupts to a fast rate so that
    3a8c:	86 e5       	ldi	r24, 0x56	; 86
    3a8e:	99 e0       	ldi	r25, 0x09	; 9
    3a90:	4e e4       	ldi	r20, 0x4E	; 78
    3a92:	50 e0       	ldi	r21, 0x00	; 0
    3a94:	60 e0       	ldi	r22, 0x00	; 0
    3a96:	70 e0       	ldi	r23, 0x00	; 0
    3a98:	22 e0       	ldi	r18, 0x02	; 2
    3a9a:	00 e0       	ldi	r16, 0x00	; 0
    3a9c:	0e 94 25 32 	call	0x644a	; 0x644a <Reg_Handler>
            Reg_Handler(increment_index_y, UPDATE_RATE, 3, 0); // the countdown is fast until the setting of the next rate
    3aa0:	8e e8       	ldi	r24, 0x8E	; 142
    3aa2:	99 e0       	ldi	r25, 0x09	; 9
    3aa4:	4e e4       	ldi	r20, 0x4E	; 78
    3aa6:	50 e0       	ldi	r21, 0x00	; 0
    3aa8:	60 e0       	ldi	r22, 0x00	; 0
    3aaa:	70 e0       	ldi	r23, 0x00	; 0
    3aac:	23 e0       	ldi	r18, 0x03	; 3
    3aae:	0e 94 25 32 	call	0x644a	; 0x644a <Reg_Handler>
                                                                //by the Update_display interupt.
			if (default_func_x)
    3ab2:	80 91 a3 20 	lds	r24, 0x20A3
    3ab6:	88 23       	and	r24, r24
    3ab8:	51 f0       	breq	.+20     	; 0x3ace <handle_message_length_1+0x214>
				Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);
    3aba:	40 91 a5 20 	lds	r20, 0x20A5
    3abe:	50 91 a6 20 	lds	r21, 0x20A6
    3ac2:	60 e0       	ldi	r22, 0x00	; 0
    3ac4:	70 e0       	ldi	r23, 0x00	; 0
    3ac6:	8f e8       	ldi	r24, 0x8F	; 143
    3ac8:	9d e0       	ldi	r25, 0x0D	; 13
    3aca:	24 e0       	ldi	r18, 0x04	; 4
    3acc:	0c c0       	rjmp	.+24     	; 0x3ae6 <handle_message_length_1+0x22c>
			else{
				update_funcCnt_x();//add this because the function cnt is updated without delay
    3ace:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <update_funcCnt_x>
				Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1);
    3ad2:	40 91 a5 20 	lds	r20, 0x20A5
    3ad6:	50 91 a6 20 	lds	r21, 0x20A6
    3ada:	60 e0       	ldi	r22, 0x00	; 0
    3adc:	70 e0       	ldi	r23, 0x00	; 0
    3ade:	8f e8       	ldi	r24, 0x8F	; 143
    3ae0:	9d e0       	ldi	r25, 0x0D	; 13
    3ae2:	24 e0       	ldi	r18, 0x04	; 4
    3ae4:	01 e0       	ldi	r16, 0x01	; 1
    3ae6:	0e 94 25 32 	call	0x644a	; 0x644a <Reg_Handler>
				}
				
			if (default_func_y)
    3aea:	80 91 a4 20 	lds	r24, 0x20A4
    3aee:	88 23       	and	r24, r24
    3af0:	59 f0       	breq	.+22     	; 0x3b08 <handle_message_length_1+0x24e>
				Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); 
    3af2:	40 91 a7 20 	lds	r20, 0x20A7
    3af6:	50 91 a8 20 	lds	r21, 0x20A8
    3afa:	60 e0       	ldi	r22, 0x00	; 0
    3afc:	70 e0       	ldi	r23, 0x00	; 0
    3afe:	8f e0       	ldi	r24, 0x0F	; 15
    3b00:	9d e0       	ldi	r25, 0x0D	; 13
    3b02:	25 e0       	ldi	r18, 0x05	; 5
    3b04:	00 e0       	ldi	r16, 0x00	; 0
    3b06:	0c c0       	rjmp	.+24     	; 0x3b20 <handle_message_length_1+0x266>
			else{
				update_funcCnt_y();//add this because the function cnt is updated without delay
    3b08:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <update_funcCnt_y>
				Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1); 			
    3b0c:	40 91 a7 20 	lds	r20, 0x20A7
    3b10:	50 91 a8 20 	lds	r21, 0x20A8
    3b14:	60 e0       	ldi	r22, 0x00	; 0
    3b16:	70 e0       	ldi	r23, 0x00	; 0
    3b18:	8f e0       	ldi	r24, 0x0F	; 15
    3b1a:	9d e0       	ldi	r25, 0x0D	; 13
    3b1c:	25 e0       	ldi	r18, 0x05	; 5
    3b1e:	01 e0       	ldi	r16, 0x01	; 1
    3b20:	0e 94 25 32 	call	0x644a	; 0x644a <Reg_Handler>
    3b24:	aa c2       	rjmp	.+1364   	; 0x407a <__stack+0x7b>
				}
			break;
            
        case 0x30: //stop display
            Stop = 1;
    3b26:	81 e0       	ldi	r24, 0x01	; 1
    3b28:	80 93 9c 20 	sts	0x209C, r24
            //turn off the interupts
            Reg_Handler(Update_display, UPDATE_RATE, 1, 0);
    3b2c:	88 eb       	ldi	r24, 0xB8	; 184
    3b2e:	94 e1       	ldi	r25, 0x14	; 20
    3b30:	4e e4       	ldi	r20, 0x4E	; 78
    3b32:	50 e0       	ldi	r21, 0x00	; 0
    3b34:	60 e0       	ldi	r22, 0x00	; 0
    3b36:	70 e0       	ldi	r23, 0x00	; 0
    3b38:	21 e0       	ldi	r18, 0x01	; 1
    3b3a:	00 e0       	ldi	r16, 0x00	; 0
    3b3c:	0e 94 25 32 	call	0x644a	; 0x644a <Reg_Handler>
            Reg_Handler(increment_index_x, UPDATE_RATE, 2, 0);
    3b40:	86 e5       	ldi	r24, 0x56	; 86
    3b42:	99 e0       	ldi	r25, 0x09	; 9
    3b44:	4e e4       	ldi	r20, 0x4E	; 78
    3b46:	50 e0       	ldi	r21, 0x00	; 0
    3b48:	60 e0       	ldi	r22, 0x00	; 0
    3b4a:	70 e0       	ldi	r23, 0x00	; 0
    3b4c:	22 e0       	ldi	r18, 0x02	; 2
    3b4e:	0e 94 25 32 	call	0x644a	; 0x644a <Reg_Handler>
            Reg_Handler(increment_index_y, UPDATE_RATE, 3, 0);
    3b52:	8e e8       	ldi	r24, 0x8E	; 142
    3b54:	99 e0       	ldi	r25, 0x09	; 9
    3b56:	4e e4       	ldi	r20, 0x4E	; 78
    3b58:	50 e0       	ldi	r21, 0x00	; 0
    3b5a:	60 e0       	ldi	r22, 0x00	; 0
    3b5c:	70 e0       	ldi	r23, 0x00	; 0
    3b5e:	23 e0       	ldi	r18, 0x03	; 3
    3b60:	0e 94 25 32 	call	0x644a	; 0x644a <Reg_Handler>
			Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);
    3b64:	40 91 a5 20 	lds	r20, 0x20A5
    3b68:	50 91 a6 20 	lds	r21, 0x20A6
    3b6c:	60 e0       	ldi	r22, 0x00	; 0
    3b6e:	70 e0       	ldi	r23, 0x00	; 0
    3b70:	8f e8       	ldi	r24, 0x8F	; 143
    3b72:	9d e0       	ldi	r25, 0x0D	; 13
    3b74:	24 e0       	ldi	r18, 0x04	; 4
    3b76:	0e 94 25 32 	call	0x644a	; 0x644a <Reg_Handler>
			Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); 
    3b7a:	40 91 a7 20 	lds	r20, 0x20A7
    3b7e:	50 91 a8 20 	lds	r21, 0x20A8
    3b82:	60 e0       	ldi	r22, 0x00	; 0
    3b84:	70 e0       	ldi	r23, 0x00	; 0
    3b86:	8f e0       	ldi	r24, 0x0F	; 15
    3b88:	9d e0       	ldi	r25, 0x0D	; 13
    3b8a:	25 e0       	ldi	r18, 0x05	; 5
    3b8c:	0e 94 25 32 	call	0x644a	; 0x644a <Reg_Handler>
			if (default_func_x == 0)
    3b90:	80 91 a3 20 	lds	r24, 0x20A3
    3b94:	88 23       	and	r24, r24
    3b96:	21 f4       	brne	.+8      	; 0x3ba0 <handle_message_length_1+0x2e6>
				fetch_update_funcX(1,0);
    3b98:	81 e0       	ldi	r24, 0x01	; 1
    3b9a:	60 e0       	ldi	r22, 0x00	; 0
    3b9c:	0e 94 4b 0c 	call	0x1896	; 0x1896 <fetch_update_funcX>
			if (default_func_y == 0)	
    3ba0:	80 91 a4 20 	lds	r24, 0x20A4
    3ba4:	88 23       	and	r24, r24
    3ba6:	09 f0       	breq	.+2      	; 0x3baa <handle_message_length_1+0x2f0>
    3ba8:	68 c2       	rjmp	.+1232   	; 0x407a <__stack+0x7b>
				fetch_update_funcY(1,0);
    3baa:	81 e0       	ldi	r24, 0x01	; 1
    3bac:	60 e0       	ldi	r22, 0x00	; 0
    3bae:	0e 94 87 0b 	call	0x170e	; 0x170e <fetch_update_funcY>
    3bb2:	63 c2       	rjmp	.+1222   	; 0x407a <__stack+0x7b>
            break;
            
        case 0x25:  //Start display & trigger - same as regular, but this also does trigger
            //set these to zero so that start at beginning of function - useful for putting in a set amount of expansion
			func_read_index_x = 0;
    3bb4:	10 92 ef 24 	sts	0x24EF, r1
			func_read_index_y = 0;
    3bb8:	10 92 f0 24 	sts	0x24F0, r1
            Stop = 0;
    3bbc:	10 92 9c 20 	sts	0x209C, r1
            display_flag = 0;  //clear the display flag
    3bc0:	10 92 e8 24 	sts	0x24E8, r1
            Reg_Handler(Update_display, UPDATE_RATE, 1, 1);
    3bc4:	88 eb       	ldi	r24, 0xB8	; 184
    3bc6:	94 e1       	ldi	r25, 0x14	; 20
    3bc8:	4e e4       	ldi	r20, 0x4E	; 78
    3bca:	50 e0       	ldi	r21, 0x00	; 0
    3bcc:	60 e0       	ldi	r22, 0x00	; 0
    3bce:	70 e0       	ldi	r23, 0x00	; 0
    3bd0:	21 e0       	ldi	r18, 0x01	; 1
    3bd2:	01 e0       	ldi	r16, 0x01	; 1
    3bd4:	0e 94 25 32 	call	0x644a	; 0x644a <Reg_Handler>
            Reg_Handler(increment_index_x, UPDATE_RATE, 2, 0);
    3bd8:	86 e5       	ldi	r24, 0x56	; 86
    3bda:	99 e0       	ldi	r25, 0x09	; 9
    3bdc:	4e e4       	ldi	r20, 0x4E	; 78
    3bde:	50 e0       	ldi	r21, 0x00	; 0
    3be0:	60 e0       	ldi	r22, 0x00	; 0
    3be2:	70 e0       	ldi	r23, 0x00	; 0
    3be4:	22 e0       	ldi	r18, 0x02	; 2
    3be6:	00 e0       	ldi	r16, 0x00	; 0
    3be8:	0e 94 25 32 	call	0x644a	; 0x644a <Reg_Handler>
            Reg_Handler(increment_index_y, UPDATE_RATE, 3, 0);
    3bec:	8e e8       	ldi	r24, 0x8E	; 142
    3bee:	99 e0       	ldi	r25, 0x09	; 9
    3bf0:	4e e4       	ldi	r20, 0x4E	; 78
    3bf2:	50 e0       	ldi	r21, 0x00	; 0
    3bf4:	60 e0       	ldi	r22, 0x00	; 0
    3bf6:	70 e0       	ldi	r23, 0x00	; 0
    3bf8:	23 e0       	ldi	r18, 0x03	; 3
    3bfa:	0e 94 25 32 	call	0x644a	; 0x644a <Reg_Handler>
			if (default_func_x)
    3bfe:	80 91 a3 20 	lds	r24, 0x20A3
    3c02:	40 91 a5 20 	lds	r20, 0x20A5
    3c06:	50 91 a6 20 	lds	r21, 0x20A6
    3c0a:	88 23       	and	r24, r24
    3c0c:	31 f0       	breq	.+12     	; 0x3c1a <handle_message_length_1+0x360>
				Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);
    3c0e:	60 e0       	ldi	r22, 0x00	; 0
    3c10:	70 e0       	ldi	r23, 0x00	; 0
    3c12:	8f e8       	ldi	r24, 0x8F	; 143
    3c14:	9d e0       	ldi	r25, 0x0D	; 13
    3c16:	24 e0       	ldi	r18, 0x04	; 4
    3c18:	06 c0       	rjmp	.+12     	; 0x3c26 <handle_message_length_1+0x36c>
			else
				Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1);
    3c1a:	60 e0       	ldi	r22, 0x00	; 0
    3c1c:	70 e0       	ldi	r23, 0x00	; 0
    3c1e:	8f e8       	ldi	r24, 0x8F	; 143
    3c20:	9d e0       	ldi	r25, 0x0D	; 13
    3c22:	24 e0       	ldi	r18, 0x04	; 4
    3c24:	01 e0       	ldi	r16, 0x01	; 1
    3c26:	0e 94 25 32 	call	0x644a	; 0x644a <Reg_Handler>
				
			if (default_func_y)
    3c2a:	80 91 a4 20 	lds	r24, 0x20A4
    3c2e:	40 91 a7 20 	lds	r20, 0x20A7
    3c32:	50 91 a8 20 	lds	r21, 0x20A8
    3c36:	88 23       	and	r24, r24
    3c38:	39 f0       	breq	.+14     	; 0x3c48 <handle_message_length_1+0x38e>
				Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); 
    3c3a:	60 e0       	ldi	r22, 0x00	; 0
    3c3c:	70 e0       	ldi	r23, 0x00	; 0
    3c3e:	8f e0       	ldi	r24, 0x0F	; 15
    3c40:	9d e0       	ldi	r25, 0x0D	; 13
    3c42:	25 e0       	ldi	r18, 0x05	; 5
    3c44:	00 e0       	ldi	r16, 0x00	; 0
    3c46:	06 c0       	rjmp	.+12     	; 0x3c54 <handle_message_length_1+0x39a>
			else
				Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1); 			
    3c48:	60 e0       	ldi	r22, 0x00	; 0
    3c4a:	70 e0       	ldi	r23, 0x00	; 0
    3c4c:	8f e0       	ldi	r24, 0x0F	; 15
    3c4e:	9d e0       	ldi	r25, 0x0D	; 13
    3c50:	25 e0       	ldi	r18, 0x05	; 5
    3c52:	01 e0       	ldi	r16, 0x01	; 1
    3c54:	0e 94 25 32 	call	0x644a	; 0x644a <Reg_Handler>
				
            Reg_Handler(toggle_trigger, (uint32_t)OVERFLOW_RATE/trigger_rate, 0, 1); //turn on the trigger toggle
    3c58:	60 91 a9 20 	lds	r22, 0x20A9
    3c5c:	70 91 aa 20 	lds	r23, 0x20AA
    3c60:	82 e1       	ldi	r24, 0x12	; 18
    3c62:	9a e7       	ldi	r25, 0x7A	; 122
    3c64:	0e 94 95 5a 	call	0xb52a	; 0xb52a <__udivmodhi4>
    3c68:	ab 01       	movw	r20, r22
    3c6a:	60 e0       	ldi	r22, 0x00	; 0
    3c6c:	70 e0       	ldi	r23, 0x00	; 0
    3c6e:	84 eb       	ldi	r24, 0xB4	; 180
    3c70:	94 e1       	ldi	r25, 0x14	; 20
    3c72:	20 e0       	ldi	r18, 0x00	; 0
    3c74:	54 cf       	rjmp	.-344    	; 0x3b1e <handle_message_length_1+0x264>
            break;
            
        case 0x35: //stop display & trigger - same as regular, but this also does trigger
            Stop = 1;
    3c76:	81 e0       	ldi	r24, 0x01	; 1
    3c78:	80 93 9c 20 	sts	0x209C, r24
            //turn off the interupts
            Reg_Handler(Update_display, UPDATE_RATE, 1, 0);
    3c7c:	88 eb       	ldi	r24, 0xB8	; 184
    3c7e:	94 e1       	ldi	r25, 0x14	; 20
    3c80:	4e e4       	ldi	r20, 0x4E	; 78
    3c82:	50 e0       	ldi	r21, 0x00	; 0
    3c84:	60 e0       	ldi	r22, 0x00	; 0
    3c86:	70 e0       	ldi	r23, 0x00	; 0
    3c88:	21 e0       	ldi	r18, 0x01	; 1
    3c8a:	00 e0       	ldi	r16, 0x00	; 0
    3c8c:	0e 94 25 32 	call	0x644a	; 0x644a <Reg_Handler>
            Reg_Handler(increment_index_x, UPDATE_RATE, 2, 0);
    3c90:	86 e5       	ldi	r24, 0x56	; 86
    3c92:	99 e0       	ldi	r25, 0x09	; 9
    3c94:	4e e4       	ldi	r20, 0x4E	; 78
    3c96:	50 e0       	ldi	r21, 0x00	; 0
    3c98:	60 e0       	ldi	r22, 0x00	; 0
    3c9a:	70 e0       	ldi	r23, 0x00	; 0
    3c9c:	22 e0       	ldi	r18, 0x02	; 2
    3c9e:	0e 94 25 32 	call	0x644a	; 0x644a <Reg_Handler>
            Reg_Handler(increment_index_y, UPDATE_RATE, 3, 0);
    3ca2:	8e e8       	ldi	r24, 0x8E	; 142
    3ca4:	99 e0       	ldi	r25, 0x09	; 9
    3ca6:	4e e4       	ldi	r20, 0x4E	; 78
    3ca8:	50 e0       	ldi	r21, 0x00	; 0
    3caa:	60 e0       	ldi	r22, 0x00	; 0
    3cac:	70 e0       	ldi	r23, 0x00	; 0
    3cae:	23 e0       	ldi	r18, 0x03	; 3
    3cb0:	0e 94 25 32 	call	0x644a	; 0x644a <Reg_Handler>
			Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);
    3cb4:	40 91 a5 20 	lds	r20, 0x20A5
    3cb8:	50 91 a6 20 	lds	r21, 0x20A6
    3cbc:	60 e0       	ldi	r22, 0x00	; 0
    3cbe:	70 e0       	ldi	r23, 0x00	; 0
    3cc0:	8f e8       	ldi	r24, 0x8F	; 143
    3cc2:	9d e0       	ldi	r25, 0x0D	; 13
    3cc4:	24 e0       	ldi	r18, 0x04	; 4
    3cc6:	0e 94 25 32 	call	0x644a	; 0x644a <Reg_Handler>
			Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); 
    3cca:	40 91 a7 20 	lds	r20, 0x20A7
    3cce:	50 91 a8 20 	lds	r21, 0x20A8
    3cd2:	60 e0       	ldi	r22, 0x00	; 0
    3cd4:	70 e0       	ldi	r23, 0x00	; 0
    3cd6:	8f e0       	ldi	r24, 0x0F	; 15
    3cd8:	9d e0       	ldi	r25, 0x0D	; 13
    3cda:	25 e0       	ldi	r18, 0x05	; 5
    3cdc:	0e 94 25 32 	call	0x644a	; 0x644a <Reg_Handler>
            Reg_Handler(toggle_trigger, OVERFLOW_RATE/trigger_rate, 0, 0); //turn off the trigger toggle
    3ce0:	20 91 a9 20 	lds	r18, 0x20A9
    3ce4:	30 91 aa 20 	lds	r19, 0x20AA
    3ce8:	40 e0       	ldi	r20, 0x00	; 0
    3cea:	50 e0       	ldi	r21, 0x00	; 0
    3cec:	62 e1       	ldi	r22, 0x12	; 18
    3cee:	7a e7       	ldi	r23, 0x7A	; 122
    3cf0:	80 e0       	ldi	r24, 0x00	; 0
    3cf2:	90 e0       	ldi	r25, 0x00	; 0
    3cf4:	0e 94 de 5a 	call	0xb5bc	; 0xb5bc <__divmodsi4>
    3cf8:	84 eb       	ldi	r24, 0xB4	; 180
    3cfa:	94 e1       	ldi	r25, 0x14	; 20
    3cfc:	ba 01       	movw	r22, r20
    3cfe:	a9 01       	movw	r20, r18
    3d00:	20 e0       	ldi	r18, 0x00	; 0
    3d02:	0e 94 25 32 	call	0x644a	; 0x644a <Reg_Handler>
			digitalWrite(2,LOW);    //set the output to low
    3d06:	82 e0       	ldi	r24, 0x02	; 2
    3d08:	92 c0       	rjmp	.+292    	; 0x3e2e <handle_message_length_1+0x574>
            break;
            
        case 0x00:  i2cMasterSend(0x00, 8, ALL_OFF); break;
    3d0a:	80 e0       	ldi	r24, 0x00	; 0
    3d0c:	68 e0       	ldi	r22, 0x08	; 8
    3d0e:	45 e1       	ldi	r20, 0x15	; 21
    3d10:	55 e2       	ldi	r21, 0x25	; 37
    3d12:	b1 c1       	rjmp	.+866    	; 0x4076 <__stack+0x77>
        case 0x40:  i2cMasterSend(0x00, 24, G_LEVELS[0]); break;
    3d14:	80 e0       	ldi	r24, 0x00	; 0
    3d16:	68 e1       	ldi	r22, 0x18	; 24
    3d18:	44 e0       	ldi	r20, 0x04	; 4
    3d1a:	51 e2       	ldi	r21, 0x21	; 33
    3d1c:	ac c1       	rjmp	.+856    	; 0x4076 <__stack+0x77>
        case 0x41:  i2cMasterSend(0x00, 24, G_LEVELS[1]); break;
    3d1e:	80 e0       	ldi	r24, 0x00	; 0
    3d20:	68 e1       	ldi	r22, 0x18	; 24
    3d22:	4c e1       	ldi	r20, 0x1C	; 28
    3d24:	51 e2       	ldi	r21, 0x21	; 33
    3d26:	a7 c1       	rjmp	.+846    	; 0x4076 <__stack+0x77>
        case 0x42:  i2cMasterSend(0x00, 24, G_LEVELS[2]); break;
    3d28:	80 e0       	ldi	r24, 0x00	; 0
    3d2a:	68 e1       	ldi	r22, 0x18	; 24
    3d2c:	44 e3       	ldi	r20, 0x34	; 52
    3d2e:	51 e2       	ldi	r21, 0x21	; 33
    3d30:	a2 c1       	rjmp	.+836    	; 0x4076 <__stack+0x77>
        case 0x43:  i2cMasterSend(0x00, 24, G_LEVELS[3]);   break;
    3d32:	80 e0       	ldi	r24, 0x00	; 0
    3d34:	68 e1       	ldi	r22, 0x18	; 24
    3d36:	4c e4       	ldi	r20, 0x4C	; 76
    3d38:	51 e2       	ldi	r21, 0x21	; 33
    3d3a:	9d c1       	rjmp	.+826    	; 0x4076 <__stack+0x77>
        case 0x44:  i2cMasterSend(0x00, 24, G_LEVELS[4]); break;
    3d3c:	80 e0       	ldi	r24, 0x00	; 0
    3d3e:	68 e1       	ldi	r22, 0x18	; 24
    3d40:	44 e6       	ldi	r20, 0x64	; 100
    3d42:	51 e2       	ldi	r21, 0x21	; 33
    3d44:	98 c1       	rjmp	.+816    	; 0x4076 <__stack+0x77>
        case 0x45:  i2cMasterSend(0x00, 24, G_LEVELS[5]); break;
    3d46:	80 e0       	ldi	r24, 0x00	; 0
    3d48:	68 e1       	ldi	r22, 0x18	; 24
    3d4a:	4c e7       	ldi	r20, 0x7C	; 124
    3d4c:	51 e2       	ldi	r21, 0x21	; 33
    3d4e:	93 c1       	rjmp	.+806    	; 0x4076 <__stack+0x77>
        case 0x46:  i2cMasterSend(0x00, 24, G_LEVELS[6]); break;
    3d50:	80 e0       	ldi	r24, 0x00	; 0
    3d52:	68 e1       	ldi	r22, 0x18	; 24
    3d54:	44 e9       	ldi	r20, 0x94	; 148
    3d56:	51 e2       	ldi	r21, 0x21	; 33
    3d58:	8e c1       	rjmp	.+796    	; 0x4076 <__stack+0x77>
        case 0x47:  i2cMasterSend(0x00, 24, G_LEVELS[7]); break;
    3d5a:	80 e0       	ldi	r24, 0x00	; 0
    3d5c:	68 e1       	ldi	r22, 0x18	; 24
    3d5e:	4c ea       	ldi	r20, 0xAC	; 172
    3d60:	51 e2       	ldi	r21, 0x21	; 33
    3d62:	89 c1       	rjmp	.+786    	; 0x4076 <__stack+0x77>
        case 0xFF:  i2cMasterSend(0x00, 8, ALL_ON); break;
    3d64:	80 e0       	ldi	r24, 0x00	; 0
    3d66:	68 e0       	ldi	r22, 0x08	; 8
    3d68:	44 ec       	ldi	r20, 0xC4	; 196
    3d6a:	51 e2       	ldi	r21, 0x21	; 33
    3d6c:	84 c1       	rjmp	.+776    	; 0x4076 <__stack+0x77>
        case 0x50:  ledBlink(); break;
    3d6e:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <ledBlink>
    3d72:	83 c1       	rjmp	.+774    	; 0x407a <__stack+0x7b>
        case 0x60:  SystemReset();  break;
    3d74:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <SystemReset>
    3d78:	80 c1       	rjmp	.+768    	; 0x407a <__stack+0x7b>
        case 0x70:  benchmark_pattern(); break;
    3d7a:	0e 94 d7 19 	call	0x33ae	; 0x33ae <benchmark_pattern>
    3d7e:	7d c1       	rjmp	.+762    	; 0x407a <__stack+0x7b>
        case 0x90:  i2cMasterSend(0x00, 32, G_LEVELS_16[0]); break;
    3d80:	80 e0       	ldi	r24, 0x00	; 0
    3d82:	60 e2       	ldi	r22, 0x20	; 32
    3d84:	4c ec       	ldi	r20, 0xCC	; 204
    3d86:	51 e2       	ldi	r21, 0x21	; 33
    3d88:	76 c1       	rjmp	.+748    	; 0x4076 <__stack+0x77>
        case 0x91:  i2cMasterSend(0x00, 32, G_LEVELS_16[1]); break;
    3d8a:	80 e0       	ldi	r24, 0x00	; 0
    3d8c:	60 e2       	ldi	r22, 0x20	; 32
    3d8e:	4c ee       	ldi	r20, 0xEC	; 236
    3d90:	51 e2       	ldi	r21, 0x21	; 33
    3d92:	71 c1       	rjmp	.+738    	; 0x4076 <__stack+0x77>
        case 0x92:  i2cMasterSend(0x00, 32, G_LEVELS_16[2]); break;
    3d94:	80 e0       	ldi	r24, 0x00	; 0
    3d96:	60 e2       	ldi	r22, 0x20	; 32
    3d98:	4c e0       	ldi	r20, 0x0C	; 12
    3d9a:	52 e2       	ldi	r21, 0x22	; 34
    3d9c:	6c c1       	rjmp	.+728    	; 0x4076 <__stack+0x77>
        case 0x93:  i2cMasterSend(0x00, 32, G_LEVELS_16[3]); break;
    3d9e:	80 e0       	ldi	r24, 0x00	; 0
    3da0:	60 e2       	ldi	r22, 0x20	; 32
    3da2:	4c e2       	ldi	r20, 0x2C	; 44
    3da4:	52 e2       	ldi	r21, 0x22	; 34
    3da6:	67 c1       	rjmp	.+718    	; 0x4076 <__stack+0x77>
        case 0x94:  i2cMasterSend(0x00, 32, G_LEVELS_16[4]); break;
    3da8:	80 e0       	ldi	r24, 0x00	; 0
    3daa:	60 e2       	ldi	r22, 0x20	; 32
    3dac:	4c e4       	ldi	r20, 0x4C	; 76
    3dae:	52 e2       	ldi	r21, 0x22	; 34
    3db0:	62 c1       	rjmp	.+708    	; 0x4076 <__stack+0x77>
        case 0x95:  i2cMasterSend(0x00, 32, G_LEVELS_16[5]); break;
    3db2:	80 e0       	ldi	r24, 0x00	; 0
    3db4:	60 e2       	ldi	r22, 0x20	; 32
    3db6:	4c e6       	ldi	r20, 0x6C	; 108
    3db8:	52 e2       	ldi	r21, 0x22	; 34
    3dba:	5d c1       	rjmp	.+698    	; 0x4076 <__stack+0x77>
        case 0x96:  i2cMasterSend(0x00, 32, G_LEVELS_16[6]); break;
    3dbc:	80 e0       	ldi	r24, 0x00	; 0
    3dbe:	60 e2       	ldi	r22, 0x20	; 32
    3dc0:	4c e8       	ldi	r20, 0x8C	; 140
    3dc2:	52 e2       	ldi	r21, 0x22	; 34
    3dc4:	58 c1       	rjmp	.+688    	; 0x4076 <__stack+0x77>
        case 0x97:  i2cMasterSend(0x00, 32, G_LEVELS_16[7]); break;
    3dc6:	80 e0       	ldi	r24, 0x00	; 0
    3dc8:	60 e2       	ldi	r22, 0x20	; 32
    3dca:	4c ea       	ldi	r20, 0xAC	; 172
    3dcc:	52 e2       	ldi	r21, 0x22	; 34
    3dce:	53 c1       	rjmp	.+678    	; 0x4076 <__stack+0x77>
        case 0x98:  i2cMasterSend(0x00, 32, G_LEVELS_16[8]); break;
    3dd0:	80 e0       	ldi	r24, 0x00	; 0
    3dd2:	60 e2       	ldi	r22, 0x20	; 32
    3dd4:	4c ec       	ldi	r20, 0xCC	; 204
    3dd6:	52 e2       	ldi	r21, 0x22	; 34
    3dd8:	4e c1       	rjmp	.+668    	; 0x4076 <__stack+0x77>
        case 0x99:  i2cMasterSend(0x00, 32, G_LEVELS_16[9]); break;
    3dda:	80 e0       	ldi	r24, 0x00	; 0
    3ddc:	60 e2       	ldi	r22, 0x20	; 32
    3dde:	4c ee       	ldi	r20, 0xEC	; 236
    3de0:	52 e2       	ldi	r21, 0x22	; 34
    3de2:	49 c1       	rjmp	.+658    	; 0x4076 <__stack+0x77>
        case 0x9A:  i2cMasterSend(0x00, 32, G_LEVELS_16[10]); break;
    3de4:	80 e0       	ldi	r24, 0x00	; 0
    3de6:	60 e2       	ldi	r22, 0x20	; 32
    3de8:	4c e0       	ldi	r20, 0x0C	; 12
    3dea:	53 e2       	ldi	r21, 0x23	; 35
    3dec:	44 c1       	rjmp	.+648    	; 0x4076 <__stack+0x77>
        case 0x9B:  i2cMasterSend(0x00, 32, G_LEVELS_16[11]); break;
    3dee:	80 e0       	ldi	r24, 0x00	; 0
    3df0:	60 e2       	ldi	r22, 0x20	; 32
    3df2:	4c e2       	ldi	r20, 0x2C	; 44
    3df4:	53 e2       	ldi	r21, 0x23	; 35
    3df6:	3f c1       	rjmp	.+638    	; 0x4076 <__stack+0x77>
        case 0x9C:  i2cMasterSend(0x00, 32, G_LEVELS_16[12]); break;
    3df8:	80 e0       	ldi	r24, 0x00	; 0
    3dfa:	60 e2       	ldi	r22, 0x20	; 32
    3dfc:	4c e4       	ldi	r20, 0x4C	; 76
    3dfe:	53 e2       	ldi	r21, 0x23	; 35
    3e00:	3a c1       	rjmp	.+628    	; 0x4076 <__stack+0x77>
        case 0x9D:  i2cMasterSend(0x00, 32, G_LEVELS_16[13]); break;
    3e02:	80 e0       	ldi	r24, 0x00	; 0
    3e04:	60 e2       	ldi	r22, 0x20	; 32
    3e06:	4c e6       	ldi	r20, 0x6C	; 108
    3e08:	53 e2       	ldi	r21, 0x23	; 35
    3e0a:	35 c1       	rjmp	.+618    	; 0x4076 <__stack+0x77>
        case 0x9E:  i2cMasterSend(0x00, 32, G_LEVELS_16[14]); break;
    3e0c:	80 e0       	ldi	r24, 0x00	; 0
    3e0e:	60 e2       	ldi	r22, 0x20	; 32
    3e10:	4c e8       	ldi	r20, 0x8C	; 140
    3e12:	53 e2       	ldi	r21, 0x23	; 35
    3e14:	30 c1       	rjmp	.+608    	; 0x4076 <__stack+0x77>
        case 0x9F:  i2cMasterSend(0x00, 32, G_LEVELS_16[15]); break;
    3e16:	80 e0       	ldi	r24, 0x00	; 0
    3e18:	60 e2       	ldi	r22, 0x20	; 32
    3e1a:	4c ea       	ldi	r20, 0xAC	; 172
    3e1c:	53 e2       	ldi	r21, 0x23	; 35
    3e1e:	2b c1       	rjmp	.+598    	; 0x4076 <__stack+0x77>
        
        case 0x10:  // turn laser on
            Laser_active = 1;
    3e20:	81 e0       	ldi	r24, 0x01	; 1
    3e22:	80 93 ea 24 	sts	0x24EA, r24
    3e26:	29 c1       	rjmp	.+594    	; 0x407a <__stack+0x7b>
            break;
            
        case 0x11:  // turn laser off
            Laser_active = 0;
    3e28:	10 92 ea 24 	sts	0x24EA, r1
            // turn off the lines that may be connected
            digitalWrite(0, LOW);
    3e2c:	80 e0       	ldi	r24, 0x00	; 0
    3e2e:	60 e0       	ldi	r22, 0x00	; 0
    3e30:	0e 94 3f 24 	call	0x487e	; 0x487e <digitalWrite>
    3e34:	22 c1       	rjmp	.+580    	; 0x407a <__stack+0x7b>
            break;
            
        case 0x12:  // turn on compression for identical elements
            ident_compress = 1;
    3e36:	81 e0       	ldi	r24, 0x01	; 1
    3e38:	80 93 9f 29 	sts	0x299F, r24
    3e3c:	1e c1       	rjmp	.+572    	; 0x407a <__stack+0x7b>
            break;
            
        case 0x13:  // turn off compression for identical elements
            ident_compress = 0;
    3e3e:	10 92 9f 29 	sts	0x299F, r1
    3e42:	1b c1       	rjmp	.+566    	; 0x407a <__stack+0x7b>
            break;
            
        case 0x14:  //synchronize the SDInfo.mat with the one in the PC
            dump_mat();
    3e44:	0e 94 c2 0a 	call	0x1584	; 0x1584 <dump_mat>
    3e48:	18 c1       	rjmp	.+560    	; 0x407a <__stack+0x7b>
            break;
            
        case 0x15:  //get current version
            xprintf(PSTR("Current version number is %s.\n"), VERSION);
    3e4a:	00 d0       	rcall	.+0      	; 0x3e4c <handle_message_length_1+0x592>
    3e4c:	0f 92       	push	r0
    3e4e:	8b ef       	ldi	r24, 0xFB	; 251
    3e50:	9a e0       	ldi	r25, 0x0A	; 10
    3e52:	ad b7       	in	r26, 0x3d	; 61
    3e54:	be b7       	in	r27, 0x3e	; 62
    3e56:	11 96       	adiw	r26, 0x01	; 1
    3e58:	8d 93       	st	X+, r24
    3e5a:	9c 93       	st	X, r25
    3e5c:	12 97       	sbiw	r26, 0x02	; 2
    3e5e:	8c ec       	ldi	r24, 0xCC	; 204
    3e60:	93 e2       	ldi	r25, 0x23	; 35
    3e62:	13 96       	adiw	r26, 0x03	; 3
    3e64:	8d 93       	st	X+, r24
    3e66:	9c 93       	st	X, r25
    3e68:	14 97       	sbiw	r26, 0x04	; 4
    3e6a:	fa c0       	rjmp	.+500    	; 0x4060 <__stack+0x61>
            break;
    3e6c:	57 e3       	ldi	r21, 0x37	; 55
    3e6e:	e5 2e       	mov	r14, r21
    3e70:	57 e2       	ldi	r21, 0x27	; 39
    3e72:	f5 2e       	mov	r15, r21
    3e74:	11 e0       	ldi	r17, 0x01	; 1
            
        case 0x16:   //show the bus number
            for (i = 1; i <= 128; i++) {
                CMD[0] = 0xFE; CMD[1] = chMap[i];
    3e76:	0e ef       	ldi	r16, 0xFE	; 254
                i2cMasterSend(i, 2, CMD);
    3e78:	6e 01       	movw	r12, r28
    3e7a:	08 94       	sec
    3e7c:	c1 1c       	adc	r12, r1
    3e7e:	d1 1c       	adc	r13, r1
            xprintf(PSTR("Current version number is %s.\n"), VERSION);
            break;
            
        case 0x16:   //show the bus number
            for (i = 1; i <= 128; i++) {
                CMD[0] = 0xFE; CMD[1] = chMap[i];
    3e80:	09 83       	std	Y+1, r16	; 0x01
    3e82:	f7 01       	movw	r30, r14
    3e84:	81 91       	ld	r24, Z+
    3e86:	7f 01       	movw	r14, r30
    3e88:	8a 83       	std	Y+2, r24	; 0x02
                i2cMasterSend(i, 2, CMD);
    3e8a:	81 2f       	mov	r24, r17
    3e8c:	62 e0       	ldi	r22, 0x02	; 2
    3e8e:	a6 01       	movw	r20, r12
    3e90:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <i2cMasterSend>
        case 0x15:  //get current version
            xprintf(PSTR("Current version number is %s.\n"), VERSION);
            break;
            
        case 0x16:   //show the bus number
            for (i = 1; i <= 128; i++) {
    3e94:	1f 5f       	subi	r17, 0xFF	; 255
    3e96:	11 38       	cpi	r17, 0x81	; 129
    3e98:	99 f7       	brne	.-26     	; 0x3e80 <handle_message_length_1+0x5c6>
    3e9a:	ef c0       	rjmp	.+478    	; 0x407a <__stack+0x7b>
                i2cMasterSend(i, 2, CMD);
            }
            break;
            
        case 0x17:  // turn on quiet_mode, no message sent out
            quiet_mode_on = 1;
    3e9c:	81 e0       	ldi	r24, 0x01	; 1
    3e9e:	80 93 b3 20 	sts	0x20B3, r24
    3ea2:	eb c0       	rjmp	.+470    	; 0x407a <__stack+0x7b>
            break;
            
        case 0x18:  // turn off quiet_mode, essage sent out
            quiet_mode_on = 0;
    3ea4:	10 92 b3 20 	sts	0x20B3, r1
    3ea8:	e8 c0       	rjmp	.+464    	; 0x407a <__stack+0x7b>
            break;
			  
        case 0x19:  // update GUI information
            xprintf(PSTR("update: %d %d %d %d %d %d %d %d:\n"), gain_x, bias_x, X_pos_index, x_mode, gain_y, bias_y, Y_pos_index, y_mode);
    3eaa:	8d b7       	in	r24, 0x3d	; 61
    3eac:	9e b7       	in	r25, 0x3e	; 62
    3eae:	42 97       	sbiw	r24, 0x12	; 18
    3eb0:	8d bf       	out	0x3d, r24	; 61
    3eb2:	9e bf       	out	0x3e, r25	; 62
    3eb4:	ed b7       	in	r30, 0x3d	; 61
    3eb6:	fe b7       	in	r31, 0x3e	; 62
    3eb8:	31 96       	adiw	r30, 0x01	; 1
    3eba:	89 ed       	ldi	r24, 0xD9	; 217
    3ebc:	9a e0       	ldi	r25, 0x0A	; 10
    3ebe:	ad b7       	in	r26, 0x3d	; 61
    3ec0:	be b7       	in	r27, 0x3e	; 62
    3ec2:	11 96       	adiw	r26, 0x01	; 1
    3ec4:	8d 93       	st	X+, r24
    3ec6:	9c 93       	st	X, r25
    3ec8:	12 97       	sbiw	r26, 0x02	; 2
    3eca:	80 91 02 28 	lds	r24, 0x2802
    3ece:	99 27       	eor	r25, r25
    3ed0:	87 fd       	sbrc	r24, 7
    3ed2:	90 95       	com	r25
    3ed4:	82 83       	std	Z+2, r24	; 0x02
    3ed6:	93 83       	std	Z+3, r25	; 0x03
    3ed8:	80 91 9b 25 	lds	r24, 0x259B
    3edc:	99 27       	eor	r25, r25
    3ede:	87 fd       	sbrc	r24, 7
    3ee0:	90 95       	com	r25
    3ee2:	84 83       	std	Z+4, r24	; 0x04
    3ee4:	95 83       	std	Z+5, r25	; 0x05
    3ee6:	80 91 04 27 	lds	r24, 0x2704
    3eea:	90 91 05 27 	lds	r25, 0x2705
    3eee:	86 83       	std	Z+6, r24	; 0x06
    3ef0:	97 83       	std	Z+7, r25	; 0x07
    3ef2:	80 91 b7 27 	lds	r24, 0x27B7
    3ef6:	80 87       	std	Z+8, r24	; 0x08
    3ef8:	11 86       	std	Z+9, r1	; 0x09
    3efa:	80 91 bb 27 	lds	r24, 0x27BB
    3efe:	99 27       	eor	r25, r25
    3f00:	87 fd       	sbrc	r24, 7
    3f02:	90 95       	com	r25
    3f04:	82 87       	std	Z+10, r24	; 0x0a
    3f06:	93 87       	std	Z+11, r25	; 0x0b
    3f08:	80 91 d2 2b 	lds	r24, 0x2BD2
    3f0c:	99 27       	eor	r25, r25
    3f0e:	87 fd       	sbrc	r24, 7
    3f10:	90 95       	com	r25
    3f12:	84 87       	std	Z+12, r24	; 0x0c
    3f14:	95 87       	std	Z+13, r25	; 0x0d
    3f16:	80 91 76 26 	lds	r24, 0x2676
    3f1a:	90 91 77 26 	lds	r25, 0x2677
    3f1e:	86 87       	std	Z+14, r24	; 0x0e
    3f20:	97 87       	std	Z+15, r25	; 0x0f
    3f22:	80 91 01 28 	lds	r24, 0x2801
    3f26:	80 8b       	std	Z+16, r24	; 0x10
    3f28:	11 8a       	std	Z+17, r1	; 0x11
    3f2a:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    3f2e:	ed b7       	in	r30, 0x3d	; 61
    3f30:	fe b7       	in	r31, 0x3e	; 62
    3f32:	72 96       	adiw	r30, 0x12	; 18
    3f34:	ed bf       	out	0x3d, r30	; 61
    3f36:	fe bf       	out	0x3e, r31	; 62
    3f38:	a0 c0       	rjmp	.+320    	; 0x407a <__stack+0x7b>
          break;
			
		case 0x21:	// working mode 1 = default mode = controller mode
			eeprom_write_byte(work_mode,0xff);
    3f3a:	80 e0       	ldi	r24, 0x00	; 0
    3f3c:	90 e0       	ldi	r25, 0x00	; 0
    3f3e:	6f ef       	ldi	r22, 0xFF	; 255
    3f40:	0e 94 94 5f 	call	0xbf28	; 0xbf28 <__eewr_byte_x128a1>
			xprintf(PSTR("Reset controller to work in the controller mode!\n"));
    3f44:	0f 92       	push	r0
    3f46:	0f 92       	push	r0
    3f48:	87 ea       	ldi	r24, 0xA7	; 167
    3f4a:	9a e0       	ldi	r25, 0x0A	; 10
    3f4c:	12 c0       	rjmp	.+36     	; 0x3f72 <handle_message_length_1+0x6b8>
			break;

		case 0x22:
		    eeprom_write_byte(work_mode,0x00);
    3f4e:	80 e0       	ldi	r24, 0x00	; 0
    3f50:	90 e0       	ldi	r25, 0x00	; 0
    3f52:	60 e0       	ldi	r22, 0x00	; 0
    3f54:	0e 94 94 5f 	call	0xbf28	; 0xbf28 <__eewr_byte_x128a1>
			xprintf(PSTR("Reset controller to work in the PC dumping mode!\n"));
    3f58:	0f 92       	push	r0
    3f5a:	0f 92       	push	r0
    3f5c:	85 e7       	ldi	r24, 0x75	; 117
    3f5e:	9a e0       	ldi	r25, 0x0A	; 10
    3f60:	16 c0       	rjmp	.+44     	; 0x3f8e <handle_message_length_1+0x6d4>
			break;
            
			
		case 0x23: //using Int3 external trigger mode
			PORTK.INT0MASK = 0x08;      //Int3 is used as source for port interrupt 0
    3f62:	88 e0       	ldi	r24, 0x08	; 8
    3f64:	e0 e2       	ldi	r30, 0x20	; 32
    3f66:	f7 e0       	ldi	r31, 0x07	; 7
    3f68:	82 87       	std	Z+10, r24	; 0x0a
			xprintf(PSTR("Enabled Int3 external trigger mode is on!\n"));
    3f6a:	0f 92       	push	r0
    3f6c:	0f 92       	push	r0
    3f6e:	8a e4       	ldi	r24, 0x4A	; 74
    3f70:	9a e0       	ldi	r25, 0x0A	; 10
    3f72:	ad b7       	in	r26, 0x3d	; 61
    3f74:	be b7       	in	r27, 0x3e	; 62
    3f76:	11 96       	adiw	r26, 0x01	; 1
    3f78:	8d 93       	st	X+, r24
    3f7a:	9c 93       	st	X, r25
    3f7c:	12 97       	sbiw	r26, 0x02	; 2
    3f7e:	0b c0       	rjmp	.+22     	; 0x3f96 <handle_message_length_1+0x6dc>
			break;
			
		case 0x24: //disable Int3 external trigger mode
			PORTK.INT0MASK = 0x00;      //Int3 is used as source for port interrupt 0
    3f80:	e0 e2       	ldi	r30, 0x20	; 32
    3f82:	f7 e0       	ldi	r31, 0x07	; 7
    3f84:	12 86       	std	Z+10, r1	; 0x0a
			xprintf(PSTR("Disabled Int3 external trigger mode!\n"));
    3f86:	0f 92       	push	r0
    3f88:	0f 92       	push	r0
    3f8a:	84 e2       	ldi	r24, 0x24	; 36
    3f8c:	9a e0       	ldi	r25, 0x0A	; 10
    3f8e:	ed b7       	in	r30, 0x3d	; 61
    3f90:	fe b7       	in	r31, 0x3e	; 62
    3f92:	81 83       	std	Z+1, r24	; 0x01
    3f94:	92 83       	std	Z+2, r25	; 0x02
    3f96:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    3f9a:	0f 90       	pop	r0
    3f9c:	0f 90       	pop	r0
    3f9e:	6d c0       	rjmp	.+218    	; 0x407a <__stack+0x7b>
			break;		
    3fa0:	99 24       	eor	r9, r9
    3fa2:	ee 24       	eor	r14, r14
    3fa4:	ff 24       	eor	r15, r15
    3fa6:	87 01       	movw	r16, r14
    3fa8:	aa 24       	eor	r10, r10
    3faa:	bb 24       	eor	r11, r11
    3fac:	65 01       	movw	r12, r10
    3fae:	40 e4       	ldi	r20, 0x40	; 64
    3fb0:	64 2e       	mov	r6, r20
    3fb2:	4c e9       	ldi	r20, 0x9C	; 156
    3fb4:	74 2e       	mov	r7, r20

		case 0x26: //read and set resolution for x and y

			for (i=0; i<n_sample; i++){
			   tmp_x += analogRead(2);
    3fb6:	82 e0       	ldi	r24, 0x02	; 2
    3fb8:	0e 94 71 24 	call	0x48e2	; 0x48e2 <analogRead>
    3fbc:	aa 27       	eor	r26, r26
    3fbe:	97 fd       	sbrc	r25, 7
    3fc0:	a0 95       	com	r26
    3fc2:	ba 2f       	mov	r27, r26
    3fc4:	e8 0e       	add	r14, r24
    3fc6:	f9 1e       	adc	r15, r25
    3fc8:	0a 1f       	adc	r16, r26
    3fca:	1b 1f       	adc	r17, r27
			   tmp_y += analogRead(3);
    3fcc:	83 e0       	ldi	r24, 0x03	; 3
    3fce:	0e 94 71 24 	call	0x48e2	; 0x48e2 <analogRead>
    3fd2:	aa 27       	eor	r26, r26
    3fd4:	97 fd       	sbrc	r25, 7
    3fd6:	a0 95       	com	r26
    3fd8:	ba 2f       	mov	r27, r26
    3fda:	a8 0e       	add	r10, r24
    3fdc:	b9 1e       	adc	r11, r25
    3fde:	ca 1e       	adc	r12, r26
    3fe0:	db 1e       	adc	r13, r27
    3fe2:	c3 01       	movw	r24, r6
    3fe4:	01 97       	sbiw	r24, 0x01	; 1
    3fe6:	f1 f7       	brne	.-4      	; 0x3fe4 <handle_message_length_1+0x72a>
			xprintf(PSTR("Disabled Int3 external trigger mode!\n"));
			break;		

		case 0x26: //read and set resolution for x and y

			for (i=0; i<n_sample; i++){
    3fe8:	93 94       	inc	r9
    3fea:	f4 e6       	ldi	r31, 0x64	; 100
    3fec:	9f 16       	cp	r9, r31
    3fee:	19 f7       	brne	.-58     	; 0x3fb6 <handle_message_length_1+0x6fc>
			   tmp_x += analogRead(2);
			   tmp_y += analogRead(3);
			   _delay_ms(5);
			};
			resolution_x  =  tmp_x / n_sample;
    3ff0:	c8 01       	movw	r24, r16
    3ff2:	b7 01       	movw	r22, r14
    3ff4:	24 e6       	ldi	r18, 0x64	; 100
    3ff6:	30 e0       	ldi	r19, 0x00	; 0
    3ff8:	40 e0       	ldi	r20, 0x00	; 0
    3ffa:	50 e0       	ldi	r21, 0x00	; 0
    3ffc:	0e 94 bc 5a 	call	0xb578	; 0xb578 <__udivmodsi4>
    4000:	20 93 9d 20 	sts	0x209D, r18
    4004:	30 93 9e 20 	sts	0x209E, r19
			resolution_y  =  tmp_y / n_sample;
    4008:	c6 01       	movw	r24, r12
    400a:	b5 01       	movw	r22, r10
    400c:	24 e6       	ldi	r18, 0x64	; 100
    400e:	30 e0       	ldi	r19, 0x00	; 0
    4010:	40 e0       	ldi	r20, 0x00	; 0
    4012:	50 e0       	ldi	r21, 0x00	; 0
    4014:	0e 94 bc 5a 	call	0xb578	; 0xb578 <__udivmodsi4>
    4018:	20 93 9f 20 	sts	0x209F, r18
    401c:	30 93 a0 20 	sts	0x20A0, r19
			xprintf(PSTR("resolution_x =  %d:\n"), resolution_x);
    4020:	00 d0       	rcall	.+0      	; 0x4022 <__stack+0x23>
    4022:	0f 92       	push	r0
    4024:	8f e0       	ldi	r24, 0x0F	; 15
    4026:	9a e0       	ldi	r25, 0x0A	; 10
    4028:	ad b7       	in	r26, 0x3d	; 61
    402a:	be b7       	in	r27, 0x3e	; 62
    402c:	11 96       	adiw	r26, 0x01	; 1
    402e:	8d 93       	st	X+, r24
    4030:	9c 93       	st	X, r25
    4032:	12 97       	sbiw	r26, 0x02	; 2
    4034:	80 91 9d 20 	lds	r24, 0x209D
    4038:	90 91 9e 20 	lds	r25, 0x209E
    403c:	13 96       	adiw	r26, 0x03	; 3
    403e:	8d 93       	st	X+, r24
    4040:	9c 93       	st	X, r25
    4042:	14 97       	sbiw	r26, 0x04	; 4
    4044:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
			xprintf(PSTR("resolution_y =  %d:\n"), resolution_y);
    4048:	8a ef       	ldi	r24, 0xFA	; 250
    404a:	99 e0       	ldi	r25, 0x09	; 9
    404c:	ed b7       	in	r30, 0x3d	; 61
    404e:	fe b7       	in	r31, 0x3e	; 62
    4050:	81 83       	std	Z+1, r24	; 0x01
    4052:	92 83       	std	Z+2, r25	; 0x02
    4054:	80 91 9f 20 	lds	r24, 0x209F
    4058:	90 91 a0 20 	lds	r25, 0x20A0
    405c:	83 83       	std	Z+3, r24	; 0x03
    405e:	94 83       	std	Z+4, r25	; 0x04
    4060:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    4064:	0f 90       	pop	r0
    4066:	0f 90       	pop	r0
    4068:	0f 90       	pop	r0
    406a:	0f 90       	pop	r0
    406c:	06 c0       	rjmp	.+12     	; 0x407a <__stack+0x7b>
			break;
	
        default: i2cMasterSend(0x00, 8, ERROR_CODES[1]);
    406e:	80 e0       	ldi	r24, 0x00	; 0
    4070:	68 e0       	ldi	r22, 0x08	; 8
    4072:	48 ec       	ldi	r20, 0xC8	; 200
    4074:	50 e2       	ldi	r21, 0x20	; 32
    4076:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <i2cMasterSend>
    }
}
    407a:	0f 90       	pop	r0
    407c:	0f 90       	pop	r0
    407e:	cf 91       	pop	r28
    4080:	df 91       	pop	r29
    4082:	1f 91       	pop	r17
    4084:	0f 91       	pop	r16
    4086:	ff 90       	pop	r15
    4088:	ef 90       	pop	r14
    408a:	df 90       	pop	r13
    408c:	cf 90       	pop	r12
    408e:	bf 90       	pop	r11
    4090:	af 90       	pop	r10
    4092:	9f 90       	pop	r9
    4094:	7f 90       	pop	r7
    4096:	6f 90       	pop	r6
    4098:	08 95       	ret

0000409a <main>:
}




int main(void) {
    409a:	a0 e5       	ldi	r26, 0x50	; 80
    409c:	b6 e0       	ldi	r27, 0x06	; 6
    409e:	e3 e5       	ldi	r30, 0x53	; 83
    40a0:	f0 e2       	ldi	r31, 0x20	; 32
    40a2:	0c 94 ff 5a 	jmp	0xb5fe	; 0xb5fe <__prologue_saves__+0xc>
	uint8_t rightBufferXLoaded = 0, rightBufferYLoaded = 0;
    uint16_t frame_num_old = 999;  //just chosen at random
	uint8_t func_idx_x_old = 199;
	uint8_t func_idx_y_old = 199;
	
	workingModes = eeprom_read_byte(work_mode);
    40a6:	80 e0       	ldi	r24, 0x00	; 0
    40a8:	90 e0       	ldi	r25, 0x00	; 0
    40aa:	0e 94 84 5f 	call	0xbf08	; 0xbf08 <__eerd_byte_x128a1>
    40ae:	e8 2e       	mov	r14, r24
	
    TWI_MasterCreateBuff(&twi1,workingModes);
    40b0:	88 e7       	ldi	r24, 0x78	; 120
    40b2:	96 e2       	ldi	r25, 0x26	; 38
    40b4:	6e 2d       	mov	r22, r14
    40b6:	0e 94 c9 33 	call	0x6792	; 0x6792 <TWI_MasterCreateBuff>
	TWI_MasterCreateBuff(&twi2,workingModes);
    40ba:	80 e9       	ldi	r24, 0x90	; 144
    40bc:	99 e2       	ldi	r25, 0x29	; 41
    40be:	6e 2d       	mov	r22, r14
    40c0:	0e 94 c9 33 	call	0x6792	; 0x6792 <TWI_MasterCreateBuff>
	TWI_MasterCreateBuff(&twi3,workingModes);
    40c4:	86 e2       	ldi	r24, 0x26	; 38
    40c6:	97 e2       	ldi	r25, 0x27	; 39
    40c8:	6e 2d       	mov	r22, r14
    40ca:	0e 94 c9 33 	call	0x6792	; 0x6792 <TWI_MasterCreateBuff>
	TWI_MasterCreateBuff(&twi4,workingModes);
    40ce:	8c e9       	ldi	r24, 0x9C	; 156
    40d0:	95 e2       	ldi	r25, 0x25	; 37
    40d2:	6e 2d       	mov	r22, r14
    40d4:	0e 94 c9 33 	call	0x6792	; 0x6792 <TWI_MasterCreateBuff>
    
// Initialize TWI master #1
    TWI_MasterInit(&twi1,
    40d8:	88 e7       	ldi	r24, 0x78	; 120
    40da:	96 e2       	ldi	r25, 0x26	; 38
    40dc:	60 e8       	ldi	r22, 0x80	; 128
    40de:	74 e0       	ldi	r23, 0x04	; 4
    40e0:	40 e4       	ldi	r20, 0x40	; 64
    40e2:	50 e0       	ldi	r21, 0x00	; 0
    40e4:	23 e2       	ldi	r18, 0x23	; 35
    40e6:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <TWI_MasterInit>
            &TWIC,
            TWI_MASTER_INTLVL_LO_gc,
            TWI_BAUDSETTING);
    
// Initialize TWI master #2
    TWI_MasterInit(&twi2,
    40ea:	80 e9       	ldi	r24, 0x90	; 144
    40ec:	99 e2       	ldi	r25, 0x29	; 41
    40ee:	60 e9       	ldi	r22, 0x90	; 144
    40f0:	74 e0       	ldi	r23, 0x04	; 4
    40f2:	40 e4       	ldi	r20, 0x40	; 64
    40f4:	50 e0       	ldi	r21, 0x00	; 0
    40f6:	23 e2       	ldi	r18, 0x23	; 35
    40f8:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <TWI_MasterInit>
            &TWID,
            TWI_MASTER_INTLVL_LO_gc,
            TWI_BAUDSETTING);
    
// Initialize TWI master #3
    TWI_MasterInit(&twi3,
    40fc:	86 e2       	ldi	r24, 0x26	; 38
    40fe:	97 e2       	ldi	r25, 0x27	; 39
    4100:	60 ea       	ldi	r22, 0xA0	; 160
    4102:	74 e0       	ldi	r23, 0x04	; 4
    4104:	40 e4       	ldi	r20, 0x40	; 64
    4106:	50 e0       	ldi	r21, 0x00	; 0
    4108:	23 e2       	ldi	r18, 0x23	; 35
    410a:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <TWI_MasterInit>
            &TWIE,
            TWI_MASTER_INTLVL_LO_gc,
            TWI_BAUDSETTING);
    
// Initialize TWI master #4
    TWI_MasterInit(&twi4,
    410e:	8c e9       	ldi	r24, 0x9C	; 156
    4110:	95 e2       	ldi	r25, 0x25	; 37
    4112:	60 eb       	ldi	r22, 0xB0	; 176
    4114:	74 e0       	ldi	r23, 0x04	; 4
    4116:	40 e4       	ldi	r20, 0x40	; 64
    4118:	50 e0       	ldi	r21, 0x00	; 0
    411a:	23 e2       	ldi	r18, 0x23	; 35
    411c:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <TWI_MasterInit>
            &TWIF,
            TWI_MASTER_INTLVL_LO_gc,
            TWI_BAUDSETTING);
    
// Initialize the rest of the system
	createRxBuff(workingModes);
    4120:	8e 2d       	mov	r24, r14
    4122:	0e 94 71 31 	call	0x62e2	; 0x62e2 <createRxBuff>
    init_all();
    4126:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <init_all>

    
    /* Join xitoa module to uart module */
    xfunc_out = (void (*)(char))uart_put;
    412a:	8a e3       	ldi	r24, 0x3A	; 58
    412c:	90 e3       	ldi	r25, 0x30	; 48
    412e:	80 93 79 25 	sts	0x2579, r24
    4132:	90 93 7a 25 	sts	0x257A, r25
    4136:	80 e0       	ldi	r24, 0x00	; 0
    4138:	90 e0       	ldi	r25, 0x00	; 0
    
    for (lcv = 0; lcv < FUNCTION_LENGTH; lcv++)
    { function_X[lcv] = function_Y[lcv] = 10;  }// here we use 10 as the equivalent for 1 V.
    413a:	2a e0       	ldi	r18, 0x0A	; 10
    413c:	30 e0       	ldi	r19, 0x00	; 0
    413e:	fc 01       	movw	r30, r24
    4140:	e2 55       	subi	r30, 0x52	; 82
    4142:	fa 4d       	sbci	r31, 0xDA	; 218
    4144:	20 83       	st	Z, r18
    4146:	31 83       	std	Z+1, r19	; 0x01
    4148:	fc 01       	movw	r30, r24
    414a:	eb 5d       	subi	r30, 0xDB	; 219
    414c:	f7 4d       	sbci	r31, 0xD7	; 215
    414e:	20 83       	st	Z, r18
    4150:	31 83       	std	Z+1, r19	; 0x01
    4152:	02 96       	adiw	r24, 0x02	; 2

    
    /* Join xitoa module to uart module */
    xfunc_out = (void (*)(char))uart_put;
    
    for (lcv = 0; lcv < FUNCTION_LENGTH; lcv++)
    4154:	88 3c       	cpi	r24, 0xC8	; 200
    4156:	91 05       	cpc	r25, r1
    4158:	91 f7       	brne	.-28     	; 0x413e <main+0xa4>
    415a:	e7 e8       	ldi	r30, 0x87	; 135
    415c:	f6 e2       	ldi	r31, 0x26	; 38
    415e:	20 e0       	ldi	r18, 0x00	; 0
    4160:	30 e0       	ldi	r19, 0x00	; 0
	
	//initialize laser pattern
	for (lcv = 0; lcv < 125; lcv++)
	{ 
		if (((lcv >=0) && (lcv <= 2)) || ((lcv >= 6)&&(lcv <= 8)))
	        laserPattern[lcv] = 255;
    4162:	4f ef       	ldi	r20, 0xFF	; 255
	
	
	//initialize laser pattern
	for (lcv = 0; lcv < 125; lcv++)
	{ 
		if (((lcv >=0) && (lcv <= 2)) || ((lcv >= 6)&&(lcv <= 8)))
    4164:	23 30       	cpi	r18, 0x03	; 3
    4166:	31 05       	cpc	r19, r1
    4168:	20 f0       	brcs	.+8      	; 0x4172 <main+0xd8>
    416a:	c9 01       	movw	r24, r18
    416c:	06 97       	sbiw	r24, 0x06	; 6
    416e:	03 97       	sbiw	r24, 0x03	; 3
    4170:	10 f4       	brcc	.+4      	; 0x4176 <main+0xdc>
	        laserPattern[lcv] = 255;
    4172:	40 83       	st	Z, r20
    4174:	01 c0       	rjmp	.+2      	; 0x4178 <main+0xde>
		else
			laserPattern[lcv] = 0;
    4176:	10 82       	st	Z, r1
    for (lcv = 0; lcv < FUNCTION_LENGTH; lcv++)
    { function_X[lcv] = function_Y[lcv] = 10;  }// here we use 10 as the equivalent for 1 V.
	
	
	//initialize laser pattern
	for (lcv = 0; lcv < 125; lcv++)
    4178:	2f 5f       	subi	r18, 0xFF	; 255
    417a:	3f 4f       	sbci	r19, 0xFF	; 255
    417c:	31 96       	adiw	r30, 0x01	; 1
    417e:	2d 37       	cpi	r18, 0x7D	; 125
    4180:	31 05       	cpc	r19, r1
    4182:	81 f7       	brne	.-32     	; 0x4164 <main+0xca>
			laserPattern[lcv] = 0;
	}
	
    
    //initilializations
    X_pos_index = Y_pos_index = index_x = index_y = 0;
    4184:	10 92 6e 29 	sts	0x296E, r1
    4188:	10 92 6f 29 	sts	0x296F, r1
    418c:	80 91 6e 29 	lds	r24, 0x296E
    4190:	90 91 6f 29 	lds	r25, 0x296F
    4194:	80 93 b9 27 	sts	0x27B9, r24
    4198:	90 93 ba 27 	sts	0x27BA, r25
    419c:	80 91 b9 27 	lds	r24, 0x27B9
    41a0:	90 91 ba 27 	lds	r25, 0x27BA
    41a4:	80 93 76 26 	sts	0x2676, r24
    41a8:	90 93 77 26 	sts	0x2677, r25
    41ac:	80 93 04 27 	sts	0x2704, r24
    41b0:	90 93 05 27 	sts	0x2705, r25
    bias_x = bias_y = 0;
    41b4:	10 92 d2 2b 	sts	0x2BD2, r1
    41b8:	10 92 9b 25 	sts	0x259B, r1
    gain_x = gain_y = 0;
    41bc:	10 92 bb 27 	sts	0x27BB, r1
    41c0:	10 92 02 28 	sts	0x2802, r1
    x_mode = y_mode = 0;
    41c4:	10 92 01 28 	sts	0x2801, r1
    41c8:	10 92 b7 27 	sts	0x27B7, r1
    gs_value = 1;
    41cc:	81 e0       	ldi	r24, 0x01	; 1
    41ce:	80 93 35 27 	sts	0x2735, r24
    row_compress = 0;
    41d2:	10 92 ad 25 	sts	0x25AD, r1
    ident_compress = 0; // enable this to substitute simpler panael pattern for uniform pattern patches
    41d6:	10 92 9f 29 	sts	0x299F, r1
    
    temp = eeprom_read_byte(arena_config);
    41da:	81 e0       	ldi	r24, 0x01	; 1
    41dc:	90 e0       	ldi	r25, 0x00	; 0
    41de:	0e 94 84 5f 	call	0xbf08	; 0xbf08 <__eerd_byte_x128a1>
    if (temp == 0xff)     //there is no configuration file and use default value 
    41e2:	8f 3f       	cpi	r24, 0xFF	; 255
    41e4:	d9 f4       	brne	.+54     	; 0x421c <main+0x182>
	{// create default panel mapping
		for (b1 = 0; b1 <= 128; b1++) {
    41e6:	19 82       	std	Y+1, r1	; 0x01
			chMap[b1] = b1 % 4;
			if (b1 && (chMap[b1] == 0))
				chMap[b1] = 4;
    41e8:	24 e0       	ldi	r18, 0x04	; 4
    41ea:	14 c0       	rjmp	.+40     	; 0x4214 <main+0x17a>
    
    temp = eeprom_read_byte(arena_config);
    if (temp == 0xff)     //there is no configuration file and use default value 
	{// create default panel mapping
		for (b1 = 0; b1 <= 128; b1++) {
			chMap[b1] = b1 % 4;
    41ec:	e8 2f       	mov	r30, r24
    41ee:	f0 e0       	ldi	r31, 0x00	; 0
    41f0:	ea 5c       	subi	r30, 0xCA	; 202
    41f2:	f8 4d       	sbci	r31, 0xD8	; 216
    41f4:	98 2f       	mov	r25, r24
    41f6:	93 70       	andi	r25, 0x03	; 3
    41f8:	90 83       	st	Z, r25
			if (b1 && (chMap[b1] == 0))
    41fa:	88 23       	and	r24, r24
    41fc:	19 f0       	breq	.+6      	; 0x4204 <main+0x16a>
    41fe:	99 23       	and	r25, r25
    4200:	09 f4       	brne	.+2      	; 0x4204 <main+0x16a>
				chMap[b1] = 4;
    4202:	20 83       	st	Z, r18
			adrMap[b1] = b1; // panel address identity mapping
    4204:	89 81       	ldd	r24, Y+1	; 0x01
    4206:	e8 2f       	mov	r30, r24
    4208:	f0 e0       	ldi	r31, 0x00	; 0
    420a:	e3 51       	subi	r30, 0x13	; 19
    420c:	f7 4d       	sbci	r31, 0xD7	; 215
    420e:	80 83       	st	Z, r24
    ident_compress = 0; // enable this to substitute simpler panael pattern for uniform pattern patches
    
    temp = eeprom_read_byte(arena_config);
    if (temp == 0xff)     //there is no configuration file and use default value 
	{// create default panel mapping
		for (b1 = 0; b1 <= 128; b1++) {
    4210:	8f 5f       	subi	r24, 0xFF	; 255
    4212:	89 83       	std	Y+1, r24	; 0x01
    4214:	89 81       	ldd	r24, Y+1	; 0x01
    4216:	81 38       	cpi	r24, 0x81	; 129
    4218:	48 f3       	brcs	.-46     	; 0x41ec <main+0x152>
    421a:	17 c0       	rjmp	.+46     	; 0x424a <main+0x1b0>
				chMap[b1] = 4;
			adrMap[b1] = b1; // panel address identity mapping
		}
	} else
	{//load panel mapping from EEPROM	
		for (b1 = 0; b1 <= 128; b1++) {
    421c:	19 82       	std	Y+1, r1	; 0x01
    421e:	11 c0       	rjmp	.+34     	; 0x4242 <main+0x1a8>
			chMap[b1] = eeprom_read_byte(arena_config + b1);
    4220:	0f 2d       	mov	r16, r15
    4222:	10 e0       	ldi	r17, 0x00	; 0
    4224:	c8 01       	movw	r24, r16
    4226:	8f 5f       	subi	r24, 0xFF	; 255
    4228:	9f 4f       	sbci	r25, 0xFF	; 255
    422a:	0e 94 84 5f 	call	0xbf08	; 0xbf08 <__eerd_byte_x128a1>
    422e:	f8 01       	movw	r30, r16
    4230:	ea 5c       	subi	r30, 0xCA	; 202
    4232:	f8 4d       	sbci	r31, 0xD8	; 216
    4234:	80 83       	st	Z, r24
			adrMap[b1] = b1; // panel address identity mapping
    4236:	03 51       	subi	r16, 0x13	; 19
    4238:	17 4d       	sbci	r17, 0xD7	; 215
    423a:	f8 01       	movw	r30, r16
    423c:	f0 82       	st	Z, r15
				chMap[b1] = 4;
			adrMap[b1] = b1; // panel address identity mapping
		}
	} else
	{//load panel mapping from EEPROM	
		for (b1 = 0; b1 <= 128; b1++) {
    423e:	f3 94       	inc	r15
    4240:	f9 82       	std	Y+1, r15	; 0x01
    4242:	f9 80       	ldd	r15, Y+1	; 0x01
    4244:	f0 e8       	ldi	r31, 0x80	; 128
    4246:	ff 15       	cp	r31, r15
    4248:	58 f7       	brcc	.-42     	; 0x4220 <main+0x186>
			chMap[b1] = eeprom_read_byte(arena_config + b1);
			adrMap[b1] = b1; // panel address identity mapping
		}
    }
    
    xputs(PSTR("\nMain Controller Works\n"));
    424a:	84 e5       	ldi	r24, 0x54	; 84
    424c:	9c e0       	ldi	r25, 0x0C	; 12
    424e:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
    
    // get the fat file system mounted
    ledWrite(LED1, ON);
    4252:	81 e0       	ldi	r24, 0x01	; 1
    4254:	61 e0       	ldi	r22, 0x01	; 1
    4256:	0e 94 aa 23 	call	0x4754	; 0x4754 <ledWrite>
    425a:	01 e0       	ldi	r16, 0x01	; 1
    425c:	a0 e2       	ldi	r26, 0x20	; 32
    425e:	ca 2e       	mov	r12, r26
    4260:	a3 e0       	ldi	r26, 0x03	; 3
    4262:	da 2e       	mov	r13, r26
    4264:	3a c0       	rjmp	.+116    	; 0x42da <main+0x240>
    sta = STA_NOINIT;
    while (sta & STA_NOINIT) {
        sta = disk_status(0);
    4266:	80 e0       	ldi	r24, 0x00	; 0
    4268:	0e 94 dc 53 	call	0xa7b8	; 0xa7b8 <disk_status>
    426c:	08 2f       	mov	r16, r24
        if(sta & STA_NODISK) {
    426e:	81 ff       	sbrs	r24, 1
    4270:	0d c0       	rjmp	.+26     	; 0x428c <main+0x1f2>
            xputs(PSTR("Insert SD card"));
    4272:	85 e4       	ldi	r24, 0x45	; 69
    4274:	9c e0       	ldi	r25, 0x0C	; 12
    4276:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
            uart_crlf();
    427a:	0e 94 66 30 	call	0x60cc	; 0x60cc <uart_crlf>
    427e:	04 c0       	rjmp	.+8      	; 0x4288 <main+0x1ee>
            while (sta & STA_NODISK) {
                sta = disk_status(0);
    4280:	80 e0       	ldi	r24, 0x00	; 0
    4282:	0e 94 dc 53 	call	0xa7b8	; 0xa7b8 <disk_status>
    4286:	08 2f       	mov	r16, r24
    while (sta & STA_NOINIT) {
        sta = disk_status(0);
        if(sta & STA_NODISK) {
            xputs(PSTR("Insert SD card"));
            uart_crlf();
            while (sta & STA_NODISK) {
    4288:	01 fd       	sbrc	r16, 1
    428a:	fa cf       	rjmp	.-12     	; 0x4280 <main+0x1e6>
                sta = disk_status(0);
            }
        }
        if(sta & STA_PROTECT) {
    428c:	02 ff       	sbrs	r16, 2
    428e:	04 c0       	rjmp	.+8      	; 0x4298 <main+0x1fe>
            xputs(PSTR("SD card is Write Protected!\n"));
    4290:	88 e2       	ldi	r24, 0x28	; 40
    4292:	9c e0       	ldi	r25, 0x0C	; 12
    4294:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
        }
        // Initialize SD Card, do 4 attempts
        for(b1 = 0; b1 < 4; ) {
    4298:	19 82       	std	Y+1, r1	; 0x01
    429a:	10 c0       	rjmp	.+32     	; 0x42bc <main+0x222>
            sta = disk_initialize(0);
    429c:	80 e0       	ldi	r24, 0x00	; 0
    429e:	0e 94 d2 56 	call	0xada4	; 0xada4 <disk_initialize>
    42a2:	08 2f       	mov	r16, r24
            if(sta & STA_NOINIT) b1++;
    42a4:	80 ff       	sbrs	r24, 0
    42a6:	0d c0       	rjmp	.+26     	; 0x42c2 <main+0x228>
    42a8:	89 81       	ldd	r24, Y+1	; 0x01
    42aa:	8f 5f       	subi	r24, 0xFF	; 255
    42ac:	89 83       	std	Y+1, r24	; 0x01
    42ae:	84 ef       	ldi	r24, 0xF4	; 244
    42b0:	91 e0       	ldi	r25, 0x01	; 1
    42b2:	f6 01       	movw	r30, r12
    42b4:	31 97       	sbiw	r30, 0x01	; 1
    42b6:	f1 f7       	brne	.-4      	; 0x42b4 <main+0x21a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42b8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42ba:	d9 f7       	brne	.-10     	; 0x42b2 <main+0x218>
        }
        if(sta & STA_PROTECT) {
            xputs(PSTR("SD card is Write Protected!\n"));
        }
        // Initialize SD Card, do 4 attempts
        for(b1 = 0; b1 < 4; ) {
    42bc:	89 81       	ldd	r24, Y+1	; 0x01
    42be:	84 30       	cpi	r24, 0x04	; 4
    42c0:	68 f3       	brcs	.-38     	; 0x429c <main+0x202>
            sta = disk_initialize(0);
            if(sta & STA_NOINIT) b1++;
            else break;
            _delay_ms(50);
        }
        if(sta & STA_NOINIT) {
    42c2:	00 ff       	sbrs	r16, 0
    42c4:	0a c0       	rjmp	.+20     	; 0x42da <main+0x240>
            xputs(PSTR("Initialization failed!!!\n"));
    42c6:	8e e0       	ldi	r24, 0x0E	; 14
    42c8:	9c e0       	ldi	r25, 0x0C	; 12
    42ca:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
            sta = disk_status(0);
            while (!(sta & STA_NODISK)) {
                sta = disk_status(0);
    42ce:	80 e0       	ldi	r24, 0x00	; 0
    42d0:	0e 94 dc 53 	call	0xa7b8	; 0xa7b8 <disk_status>
    42d4:	08 2f       	mov	r16, r24
            _delay_ms(50);
        }
        if(sta & STA_NOINIT) {
            xputs(PSTR("Initialization failed!!!\n"));
            sta = disk_status(0);
            while (!(sta & STA_NODISK)) {
    42d6:	81 ff       	sbrs	r24, 1
    42d8:	fa cf       	rjmp	.-12     	; 0x42ce <main+0x234>
    xputs(PSTR("\nMain Controller Works\n"));
    
    // get the fat file system mounted
    ledWrite(LED1, ON);
    sta = STA_NOINIT;
    while (sta & STA_NOINIT) {
    42da:	00 fd       	sbrc	r16, 0
    42dc:	c4 cf       	rjmp	.-120    	; 0x4266 <main+0x1cc>
            while (!(sta & STA_NODISK)) {
                sta = disk_status(0);
            }
        }
    }
    xputs(PSTR("SD card is initialized\n"));
    42de:	86 ef       	ldi	r24, 0xF6	; 246
    42e0:	9b e0       	ldi	r25, 0x0B	; 11
    42e2:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
    
    if (disk_ioctl(0, MMC_GET_TYPE, &b1) == RES_OK) {
    42e6:	80 e0       	ldi	r24, 0x00	; 0
    42e8:	6a e0       	ldi	r22, 0x0A	; 10
    42ea:	ae 01       	movw	r20, r28
    42ec:	4f 5f       	subi	r20, 0xFF	; 255
    42ee:	5f 4f       	sbci	r21, 0xFF	; 255
    42f0:	0e 94 c6 54 	call	0xa98c	; 0xa98c <disk_ioctl>
    42f4:	89 2b       	or	r24, r25
    42f6:	59 f5       	brne	.+86     	; 0x434e <main+0x2b4>
        xputs(PSTR("Card type: "));
    42f8:	8a ee       	ldi	r24, 0xEA	; 234
    42fa:	9b e0       	ldi	r25, 0x0B	; 11
    42fc:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
        switch(b1) {
    4300:	89 81       	ldd	r24, Y+1	; 0x01
    4302:	84 30       	cpi	r24, 0x04	; 4
    4304:	a1 f0       	breq	.+40     	; 0x432e <main+0x294>
    4306:	85 30       	cpi	r24, 0x05	; 5
    4308:	28 f4       	brcc	.+10     	; 0x4314 <main+0x27a>
    430a:	81 30       	cpi	r24, 0x01	; 1
    430c:	51 f0       	breq	.+20     	; 0x4322 <main+0x288>
    430e:	82 30       	cpi	r24, 0x02	; 2
    4310:	d1 f4       	brne	.+52     	; 0x4346 <main+0x2ac>
    4312:	0a c0       	rjmp	.+20     	; 0x4328 <main+0x28e>
    4314:	88 30       	cpi	r24, 0x08	; 8
    4316:	89 f0       	breq	.+34     	; 0x433a <main+0x2a0>
    4318:	8c 30       	cpi	r24, 0x0C	; 12
    431a:	91 f0       	breq	.+36     	; 0x4340 <main+0x2a6>
    431c:	86 30       	cpi	r24, 0x06	; 6
    431e:	99 f4       	brne	.+38     	; 0x4346 <main+0x2ac>
    4320:	09 c0       	rjmp	.+18     	; 0x4334 <main+0x29a>
            case CT_MMC: xputs(PSTR("MMC\n")); break;
    4322:	85 ee       	ldi	r24, 0xE5	; 229
    4324:	9b e0       	ldi	r25, 0x0B	; 11
    4326:	11 c0       	rjmp	.+34     	; 0x434a <main+0x2b0>
            case CT_SD1: xputs(PSTR("SD\n")); break;
    4328:	81 ee       	ldi	r24, 0xE1	; 225
    432a:	9b e0       	ldi	r25, 0x0B	; 11
    432c:	0e c0       	rjmp	.+28     	; 0x434a <main+0x2b0>
            case CT_SD2: xputs(PSTR("SD2\n")); break;
    432e:	8c ed       	ldi	r24, 0xDC	; 220
    4330:	9b e0       	ldi	r25, 0x0B	; 11
    4332:	0b c0       	rjmp	.+22     	; 0x434a <main+0x2b0>
            case CT_SDC: xputs(PSTR("SDC\n")); break;
    4334:	87 ed       	ldi	r24, 0xD7	; 215
    4336:	9b e0       	ldi	r25, 0x0B	; 11
    4338:	08 c0       	rjmp	.+16     	; 0x434a <main+0x2b0>
            case CT_BLOCK: xputs(PSTR("BLK\n")); break;
    433a:	82 ed       	ldi	r24, 0xD2	; 210
    433c:	9b e0       	ldi	r25, 0x0B	; 11
    433e:	05 c0       	rjmp	.+10     	; 0x434a <main+0x2b0>
            case CT_SD2_BLK: xputs(PSTR("SDHC\n")); break;
    4340:	8c ec       	ldi	r24, 0xCC	; 204
    4342:	9b e0       	ldi	r25, 0x0B	; 11
    4344:	02 c0       	rjmp	.+4      	; 0x434a <main+0x2b0>
            default: xputs(PSTR("???\n"));
    4346:	87 ec       	ldi	r24, 0xC7	; 199
    4348:	9b e0       	ldi	r25, 0x0B	; 11
    434a:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
        }
    }
    
    xputs(PSTR("Initializing FAT Disk..."));
    434e:	8e ea       	ldi	r24, 0xAE	; 174
    4350:	9b e0       	ldi	r25, 0x0B	; 11
    4352:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
    res = f_mount(0, &fatfs);
    4356:	80 e0       	ldi	r24, 0x00	; 0
    4358:	60 ea       	ldi	r22, 0xA0	; 160
    435a:	79 e2       	ldi	r23, 0x29	; 41
    435c:	0e 94 6a 34 	call	0x68d4	; 0x68d4 <f_mount>
    switch(res) {
    4360:	81 30       	cpi	r24, 0x01	; 1
    4362:	51 f0       	breq	.+20     	; 0x4378 <main+0x2de>
    4364:	81 30       	cpi	r24, 0x01	; 1
    4366:	28 f0       	brcs	.+10     	; 0x4372 <main+0x2d8>
    4368:	82 30       	cpi	r24, 0x02	; 2
    436a:	49 f0       	breq	.+18     	; 0x437e <main+0x2e4>
    436c:	83 30       	cpi	r24, 0x03	; 3
    436e:	69 f4       	brne	.+26     	; 0x438a <main+0x2f0>
    4370:	09 c0       	rjmp	.+18     	; 0x4384 <main+0x2ea>
        case RES_OK: xputs(PSTR(" FAT OK!\n")); break;
    4372:	84 ea       	ldi	r24, 0xA4	; 164
    4374:	9b e0       	ldi	r25, 0x0B	; 11
    4376:	0b c0       	rjmp	.+22     	; 0x438e <main+0x2f4>
        case RES_ERROR: xputs(PSTR(" ERROR!\n")); break;
    4378:	8b e9       	ldi	r24, 0x9B	; 155
    437a:	9b e0       	ldi	r25, 0x0B	; 11
    437c:	08 c0       	rjmp	.+16     	; 0x438e <main+0x2f4>
        case RES_WRPRT: xputs(PSTR(" WRITE PROTECTED!\n")); break;
    437e:	88 e8       	ldi	r24, 0x88	; 136
    4380:	9b e0       	ldi	r25, 0x0B	; 11
    4382:	05 c0       	rjmp	.+10     	; 0x438e <main+0x2f4>
        case RES_NOTRDY: xputs(PSTR(" NOT READY!\n")); break;
    4384:	8b e7       	ldi	r24, 0x7B	; 123
    4386:	9b e0       	ldi	r25, 0x0B	; 11
    4388:	02 c0       	rjmp	.+4      	; 0x438e <main+0x2f4>
        default: xputs(PSTR("???\n"));
    438a:	86 e7       	ldi	r24, 0x76	; 118
    438c:	9b e0       	ldi	r25, 0x0B	; 11
    438e:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
    }
    
    
    i2cMasterSend(0x00, 8, ALL_OFF);
    4392:	80 e0       	ldi	r24, 0x00	; 0
    4394:	68 e0       	ldi	r22, 0x08	; 8
    4396:	45 e1       	ldi	r20, 0x15	; 21
    4398:	55 e2       	ldi	r21, 0x25	; 37
    439a:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <i2cMasterSend>
    ledWrite(LED1, OFF);
    439e:	81 e0       	ldi	r24, 0x01	; 1
    43a0:	60 e0       	ldi	r22, 0x00	; 0
    43a2:	0e 94 aa 23 	call	0x4754	; 0x4754 <ledWrite>
    ledBlink();
    43a6:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <ledBlink>
    // Here the EEPROM location 0 is used as a switch between Controller and PCDump mode
    // An alternative is to base the switch on the SD config file
    if (workingModes == 0xff) {
    43aa:	8f ef       	ldi	r24, 0xFF	; 255
    43ac:	e8 16       	cp	r14, r24
    43ae:	09 f0       	breq	.+2      	; 0x43b2 <main+0x318>
    43b0:	c5 c0       	rjmp	.+394    	; 0x453c <main+0x4a2>
        uint8_t msg_buffer[65];
		xputs(PSTR("Current working mode is the Controller mode!\n"));
    43b2:	88 e4       	ldi	r24, 0x48	; 72
    43b4:	9b e0       	ldi	r25, 0x0B	; 11
    43b6:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
    43ba:	f7 ee       	ldi	r31, 0xE7	; 231
    43bc:	8f 2e       	mov	r8, r31
    43be:	f3 e0       	ldi	r31, 0x03	; 3
    43c0:	9f 2e       	mov	r9, r31
    43c2:	e7 ec       	ldi	r30, 0xC7	; 199
    43c4:	be 2e       	mov	r11, r30
    43c6:	77 ec       	ldi	r23, 0xC7	; 199
    43c8:	a7 2e       	mov	r10, r23
		
        while(1) {  // this is the main loop, here we wait for communication from PC over UART
            if (uart_test()) {
                message_length = fill_Rx_buffer(&msg_buffer[0]);
    43ca:	62 e0       	ldi	r22, 0x02	; 2
    43cc:	c6 2e       	mov	r12, r22
    43ce:	d1 2c       	mov	r13, r1
    43d0:	cc 0e       	add	r12, r28
    43d2:	dd 1e       	adc	r13, r29
    43d4:	03 c0       	rjmp	.+6      	; 0x43dc <main+0x342>
    ledBlink();
    // Here the EEPROM location 0 is used as a switch between Controller and PCDump mode
    // An alternative is to base the switch on the SD config file
    if (workingModes == 0xff) {
        uint8_t msg_buffer[65];
		xputs(PSTR("Current working mode is the Controller mode!\n"));
    43d6:	0a 2d       	mov	r16, r10
    43d8:	47 01       	movw	r8, r14
    43da:	58 01       	movw	r10, r16
		
        while(1) {  // this is the main loop, here we wait for communication from PC over UART
            if (uart_test()) {
    43dc:	0e 94 07 30 	call	0x600e	; 0x600e <uart_test>
    43e0:	89 2b       	or	r24, r25
    43e2:	09 f4       	brne	.+2      	; 0x43e6 <main+0x34c>
    43e4:	49 c0       	rjmp	.+146    	; 0x4478 <main+0x3de>
                message_length = fill_Rx_buffer(&msg_buffer[0]);
    43e6:	c6 01       	movw	r24, r12
    43e8:	0e 94 6d 30 	call	0x60da	; 0x60da <fill_Rx_buffer>
                switch(message_length) {
    43ec:	84 30       	cpi	r24, 0x04	; 4
    43ee:	91 05       	cpc	r25, r1
    43f0:	09 f1       	breq	.+66     	; 0x4434 <main+0x39a>
    43f2:	85 30       	cpi	r24, 0x05	; 5
    43f4:	91 05       	cpc	r25, r1
    43f6:	48 f4       	brcc	.+18     	; 0x440a <main+0x370>
    43f8:	82 30       	cpi	r24, 0x02	; 2
    43fa:	91 05       	cpc	r25, r1
    43fc:	99 f0       	breq	.+38     	; 0x4424 <main+0x38a>
    43fe:	83 30       	cpi	r24, 0x03	; 3
    4400:	91 05       	cpc	r25, r1
    4402:	a0 f4       	brcc	.+40     	; 0x442c <main+0x392>
    4404:	01 97       	sbiw	r24, 0x01	; 1
    4406:	91 f5       	brne	.+100    	; 0x446c <main+0x3d2>
    4408:	09 c0       	rjmp	.+18     	; 0x441c <main+0x382>
    440a:	8e 33       	cpi	r24, 0x3E	; 62
    440c:	91 05       	cpc	r25, r1
    440e:	d1 f0       	breq	.+52     	; 0x4444 <main+0x3aa>
    4410:	8f 33       	cpi	r24, 0x3F	; 63
    4412:	91 05       	cpc	r25, r1
    4414:	39 f1       	breq	.+78     	; 0x4464 <main+0x3ca>
    4416:	05 97       	sbiw	r24, 0x05	; 5
    4418:	49 f5       	brne	.+82     	; 0x446c <main+0x3d2>
    441a:	10 c0       	rjmp	.+32     	; 0x443c <main+0x3a2>
                    case 1:  // if length 1, then decode...
                        handle_message_length_1(&msg_buffer[0]);
    441c:	c6 01       	movw	r24, r12
    441e:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <handle_message_length_1>
    4422:	2a c0       	rjmp	.+84     	; 0x4478 <main+0x3de>
                        break;
                    case 2: // if length 2, then decode, could be reset, display num, or change pat
                        handle_message_length_2(&msg_buffer[0]);
    4424:	c6 01       	movw	r24, r12
    4426:	0e 94 08 1c 	call	0x3810	; 0x3810 <handle_message_length_2>
    442a:	26 c0       	rjmp	.+76     	; 0x4478 <main+0x3de>
                        break;
                    case 3: // if length 3, then decode...address change or ...
                        handle_message_length_3(&msg_buffer[0]);
    442c:	c6 01       	movw	r24, r12
    442e:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <handle_message_length_3>
    4432:	22 c0       	rjmp	.+68     	; 0x4478 <main+0x3de>
                        break;
					case 4:
						handle_message_length_4(&msg_buffer[0]);
    4434:	c6 01       	movw	r24, r12
    4436:	0e 94 c6 12 	call	0x258c	; 0x258c <handle_message_length_4>
    443a:	1e c0       	rjmp	.+60     	; 0x4478 <main+0x3de>
						break;
                    case 5: // if length 5, then decode, set x,y index, or set gain, bias
                        handle_message_length_5(&msg_buffer[0]);
    443c:	c6 01       	movw	r24, r12
    443e:	0e 94 3d 1b 	call	0x367a	; 0x367a <handle_message_length_5>
    4442:	1a c0       	rjmp	.+52     	; 0x4478 <main+0x3de>
                        break;
    4444:	20 e0       	ldi	r18, 0x00	; 0
    4446:	30 e0       	ldi	r19, 0x00	; 0
{   
	uint8_t i;

	for (i = 0; i<62; i++)
	{
		laserPattern[i] = msg_buffer[i];
    4448:	f9 01       	movw	r30, r18
    444a:	e9 57       	subi	r30, 0x79	; 121
    444c:	f9 4d       	sbci	r31, 0xD9	; 217
    444e:	d6 01       	movw	r26, r12
    4450:	a2 0f       	add	r26, r18
    4452:	b3 1f       	adc	r27, r19
    4454:	8c 91       	ld	r24, X
    4456:	80 83       	st	Z, r24
    4458:	2f 5f       	subi	r18, 0xFF	; 255
    445a:	3f 4f       	sbci	r19, 0xFF	; 255

void handle_message_length_62(uint8_t *msg_buffer)
{   
	uint8_t i;

	for (i = 0; i<62; i++)
    445c:	2e 33       	cpi	r18, 0x3E	; 62
    445e:	31 05       	cpc	r19, r1
    4460:	99 f7       	brne	.-26     	; 0x4448 <main+0x3ae>
    4462:	0a c0       	rjmp	.+20     	; 0x4478 <main+0x3de>
                        break;
                    case 62: //if length 62, then set laser trigger pattern first 62 byte
                        handle_message_length_62(&msg_buffer[0]);
                        break;
					case 63: //if length 63, then set laser trigger pattern second 63 byte
                        handle_message_length_63(&msg_buffer[0]);
    4464:	c6 01       	movw	r24, r12
    4466:	0e 94 a9 0a 	call	0x1552	; 0x1552 <handle_message_length_63>
    446a:	06 c0       	rjmp	.+12     	; 0x4478 <main+0x3de>
                        break;	
                    default:
                        i2cMasterSend(0x00, 8, ERROR_CODES[7]);
    446c:	80 e0       	ldi	r24, 0x00	; 0
    446e:	68 e0       	ldi	r22, 0x08	; 8
    4470:	48 ef       	ldi	r20, 0xF8	; 248
    4472:	50 e2       	ldi	r21, 0x20	; 32
    4474:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <i2cMasterSend>
                } //end of switch
            }// end of if, goes to top if nothing received on UART
            
            // at bottom of while(1) loop, check to see if stop is 0, then unpdate display if the frame has changed.
            if (Stop == 0){  //only send out new pattern if the pattern index has change
    4478:	80 91 9c 20 	lds	r24, 0x209C
    447c:	88 23       	and	r24, r24
    447e:	09 f0       	breq	.+2      	; 0x4482 <main+0x3e8>
    4480:	ad cf       	rjmp	.-166    	; 0x43dc <main+0x342>
			
                if (frame_num != frame_num_old) {
    4482:	e0 90 ed 24 	lds	r14, 0x24ED
    4486:	f0 90 ee 24 	lds	r15, 0x24EE
    448a:	e8 14       	cp	r14, r8
    448c:	f9 04       	cpc	r15, r9
    448e:	91 f0       	breq	.+36     	; 0x44b4 <main+0x41a>
                    frame_num_old = frame_num; //update the 'old' frame number
    4490:	e0 90 ed 24 	lds	r14, 0x24ED
    4494:	f0 90 ee 24 	lds	r15, 0x24EE
                    fetch_display_frame(frame_num, index_x, index_y);
    4498:	80 91 ed 24 	lds	r24, 0x24ED
    449c:	90 91 ee 24 	lds	r25, 0x24EE
    44a0:	60 91 b9 27 	lds	r22, 0x27B9
    44a4:	70 91 ba 27 	lds	r23, 0x27BA
    44a8:	40 91 6e 29 	lds	r20, 0x296E
    44ac:	50 91 6f 29 	lds	r21, 0x296F
    44b0:	0e 94 6f 17 	call	0x2ede	; 0x2ede <fetch_display_frame>
                }
				
				//func_buffer_size_x in word, 2 bytes.
				if ((default_func_x == 0) && (func_buffer_size_x <= FUNCTION_LENGTH/4) && (func_read_index_x != func_idx_x_old))
    44b4:	80 91 a3 20 	lds	r24, 0x20A3
    44b8:	88 23       	and	r24, r24
    44ba:	e1 f4       	brne	.+56     	; 0x44f4 <main+0x45a>
    44bc:	80 91 f3 24 	lds	r24, 0x24F3
    44c0:	8a 31       	cpi	r24, 0x1A	; 26
    44c2:	c0 f4       	brcc	.+48     	; 0x44f4 <main+0x45a>
    44c4:	10 91 ef 24 	lds	r17, 0x24EF
    44c8:	1b 15       	cp	r17, r11
    44ca:	a9 f0       	breq	.+42     	; 0x44f6 <main+0x45c>
				{					
					func_idx_x_old = func_read_index_x;
    44cc:	10 91 ef 24 	lds	r17, 0x24EF
					fetch_update_funcX(0, next_block_x);  
    44d0:	60 91 a1 20 	lds	r22, 0x20A1
    44d4:	80 e0       	ldi	r24, 0x00	; 0
    44d6:	0e 94 4b 0c 	call	0x1896	; 0x1896 <fetch_update_funcX>
					next_block_x = (next_block_x + 1)%num_buffer_load_x; 
    44da:	80 91 a1 20 	lds	r24, 0x20A1
    44de:	90 e0       	ldi	r25, 0x00	; 0
    44e0:	60 91 b4 20 	lds	r22, 0x20B4
    44e4:	70 91 b5 20 	lds	r23, 0x20B5
    44e8:	01 96       	adiw	r24, 0x01	; 1
    44ea:	0e 94 95 5a 	call	0xb52a	; 0xb52a <__udivmodhi4>
    44ee:	80 93 a1 20 	sts	0x20A1, r24
    44f2:	01 c0       	rjmp	.+2      	; 0x44f6 <main+0x45c>
    44f4:	1b 2d       	mov	r17, r11
//xprintf(PSTR("func_buffer_size_x=%u, func_read_index_x=%u\n"), func_buffer_size_x, func_read_index_x);
				}

				if ((default_func_y == 0) && (func_buffer_size_y <= FUNCTION_LENGTH/4) && (func_read_index_y != func_idx_y_old))
    44f6:	80 91 a4 20 	lds	r24, 0x20A4
    44fa:	88 23       	and	r24, r24
    44fc:	09 f0       	breq	.+2      	; 0x4500 <main+0x466>
    44fe:	6b cf       	rjmp	.-298    	; 0x43d6 <main+0x33c>
    4500:	80 91 f4 24 	lds	r24, 0x24F4
    4504:	8a 31       	cpi	r24, 0x1A	; 26
    4506:	08 f0       	brcs	.+2      	; 0x450a <main+0x470>
    4508:	66 cf       	rjmp	.-308    	; 0x43d6 <main+0x33c>
    450a:	00 91 f0 24 	lds	r16, 0x24F0
    450e:	0a 15       	cp	r16, r10
    4510:	09 f4       	brne	.+2      	; 0x4514 <main+0x47a>
    4512:	62 cf       	rjmp	.-316    	; 0x43d8 <main+0x33e>
				{					
					func_idx_y_old = func_read_index_y;
    4514:	00 91 f0 24 	lds	r16, 0x24F0
					fetch_update_funcY(0, next_block_y);	
    4518:	60 91 a2 20 	lds	r22, 0x20A2
    451c:	80 e0       	ldi	r24, 0x00	; 0
    451e:	0e 94 87 0b 	call	0x170e	; 0x170e <fetch_update_funcY>
					next_block_y = (next_block_y + 1)%num_buffer_load_y; 
    4522:	80 91 a2 20 	lds	r24, 0x20A2
    4526:	90 e0       	ldi	r25, 0x00	; 0
    4528:	60 91 b6 20 	lds	r22, 0x20B6
    452c:	70 91 b7 20 	lds	r23, 0x20B7
    4530:	01 96       	adiw	r24, 0x01	; 1
    4532:	0e 94 95 5a 	call	0xb52a	; 0xb52a <__udivmodhi4>
    4536:	80 93 a2 20 	sts	0x20A2, r24
    453a:	4e cf       	rjmp	.-356    	; 0x43d8 <main+0x33e>

			}
		}
    } else {
        uint8_t msg_buffer[1550];
		xputs(PSTR("Current working mode is the PC dumping mode!\n"));
    453c:	8a e1       	ldi	r24, 0x1A	; 26
    453e:	9b e0       	ldi	r25, 0x0B	; 11
    4540:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
        while(1) {  // this is the main loop, here we wait for communication from PC over UART
            if (uart_test()) {
                message_length = fill_Rx_buffer(&msg_buffer[0]);
    4544:	8e 01       	movw	r16, r28
    4546:	0d 5b       	subi	r16, 0xBD	; 189
    4548:	1f 4f       	sbci	r17, 0xFF	; 255
		}
    } else {
        uint8_t msg_buffer[1550];
		xputs(PSTR("Current working mode is the PC dumping mode!\n"));
        while(1) {  // this is the main loop, here we wait for communication from PC over UART
            if (uart_test()) {
    454a:	0e 94 07 30 	call	0x600e	; 0x600e <uart_test>
    454e:	89 2b       	or	r24, r25
    4550:	e1 f3       	breq	.-8      	; 0x454a <main+0x4b0>
                message_length = fill_Rx_buffer(&msg_buffer[0]);
    4552:	c8 01       	movw	r24, r16
    4554:	0e 94 6d 30 	call	0x60da	; 0x60da <fill_Rx_buffer>
                switch(message_length) {
    4558:	81 30       	cpi	r24, 0x01	; 1
    455a:	91 05       	cpc	r25, r1
    455c:	19 f0       	breq	.+6      	; 0x4564 <main+0x4ca>
    455e:	c2 97       	sbiw	r24, 0x32	; 50
    4560:	49 f4       	brne	.+18     	; 0x4574 <main+0x4da>
    4562:	04 c0       	rjmp	.+8      	; 0x456c <main+0x4d2>
                    case 1:  // if length 1, then decode...
                        handle_message_length_1(&msg_buffer[0]);
    4564:	c8 01       	movw	r24, r16
    4566:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <handle_message_length_1>
    456a:	ef cf       	rjmp	.-34     	; 0x454a <main+0x4b0>
                        break;
                    //case 2: // if length 2, then decode, could be reset, display num, or change pat
                    //    handle_message_length_2(&msg_buffer[0]);
                    //    break;
                    case 50: //
                        display_dumped_frame(&msg_buffer[0]);
    456c:	c8 01       	movw	r24, r16
    456e:	0e 94 19 17 	call	0x2e32	; 0x2e32 <display_dumped_frame>
    4572:	eb cf       	rjmp	.-42     	; 0x454a <main+0x4b0>
                        break;
                    default:			
                        i2cMasterSend(0x00, 8, ERROR_CODES[8]);
    4574:	80 e0       	ldi	r24, 0x00	; 0
    4576:	68 e0       	ldi	r22, 0x08	; 8
    4578:	40 e0       	ldi	r20, 0x00	; 0
    457a:	51 e2       	ldi	r21, 0x21	; 33
    457c:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <i2cMasterSend>
    4580:	e4 cf       	rjmp	.-56     	; 0x454a <main+0x4b0>

00004582 <__vector_107>:

/*---------------------------------------------------------*/
/* TWIF Master Interrupt vector.                           */
/*---------------------------------------------------------*/

ISR(TWIF_TWIM_vect) {
    4582:	1f 92       	push	r1
    4584:	0f 92       	push	r0
    4586:	0f b6       	in	r0, 0x3f	; 63
    4588:	0f 92       	push	r0
    458a:	08 b6       	in	r0, 0x38	; 56
    458c:	0f 92       	push	r0
    458e:	09 b6       	in	r0, 0x39	; 57
    4590:	0f 92       	push	r0
    4592:	0b b6       	in	r0, 0x3b	; 59
    4594:	0f 92       	push	r0
    4596:	11 24       	eor	r1, r1
    4598:	18 be       	out	0x38, r1	; 56
    459a:	19 be       	out	0x39, r1	; 57
    459c:	1b be       	out	0x3b, r1	; 59
    459e:	2f 93       	push	r18
    45a0:	3f 93       	push	r19
    45a2:	4f 93       	push	r20
    45a4:	5f 93       	push	r21
    45a6:	6f 93       	push	r22
    45a8:	7f 93       	push	r23
    45aa:	8f 93       	push	r24
    45ac:	9f 93       	push	r25
    45ae:	af 93       	push	r26
    45b0:	bf 93       	push	r27
    45b2:	ef 93       	push	r30
    45b4:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twi4);
    45b6:	8c e9       	ldi	r24, 0x9C	; 156
    45b8:	95 e2       	ldi	r25, 0x25	; 37
    45ba:	0e 94 96 33 	call	0x672c	; 0x672c <TWI_MasterInterruptHandler>
}
    45be:	ff 91       	pop	r31
    45c0:	ef 91       	pop	r30
    45c2:	bf 91       	pop	r27
    45c4:	af 91       	pop	r26
    45c6:	9f 91       	pop	r25
    45c8:	8f 91       	pop	r24
    45ca:	7f 91       	pop	r23
    45cc:	6f 91       	pop	r22
    45ce:	5f 91       	pop	r21
    45d0:	4f 91       	pop	r20
    45d2:	3f 91       	pop	r19
    45d4:	2f 91       	pop	r18
    45d6:	0f 90       	pop	r0
    45d8:	0b be       	out	0x3b, r0	; 59
    45da:	0f 90       	pop	r0
    45dc:	09 be       	out	0x39, r0	; 57
    45de:	0f 90       	pop	r0
    45e0:	08 be       	out	0x38, r0	; 56
    45e2:	0f 90       	pop	r0
    45e4:	0f be       	out	0x3f, r0	; 63
    45e6:	0f 90       	pop	r0
    45e8:	1f 90       	pop	r1
    45ea:	18 95       	reti

000045ec <__vector_46>:

/*---------------------------------------------------------*/
/* TWIE Master Interrupt vector.                           */
/*---------------------------------------------------------*/

ISR(TWIE_TWIM_vect) {
    45ec:	1f 92       	push	r1
    45ee:	0f 92       	push	r0
    45f0:	0f b6       	in	r0, 0x3f	; 63
    45f2:	0f 92       	push	r0
    45f4:	08 b6       	in	r0, 0x38	; 56
    45f6:	0f 92       	push	r0
    45f8:	09 b6       	in	r0, 0x39	; 57
    45fa:	0f 92       	push	r0
    45fc:	0b b6       	in	r0, 0x3b	; 59
    45fe:	0f 92       	push	r0
    4600:	11 24       	eor	r1, r1
    4602:	18 be       	out	0x38, r1	; 56
    4604:	19 be       	out	0x39, r1	; 57
    4606:	1b be       	out	0x3b, r1	; 59
    4608:	2f 93       	push	r18
    460a:	3f 93       	push	r19
    460c:	4f 93       	push	r20
    460e:	5f 93       	push	r21
    4610:	6f 93       	push	r22
    4612:	7f 93       	push	r23
    4614:	8f 93       	push	r24
    4616:	9f 93       	push	r25
    4618:	af 93       	push	r26
    461a:	bf 93       	push	r27
    461c:	ef 93       	push	r30
    461e:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twi3);
    4620:	86 e2       	ldi	r24, 0x26	; 38
    4622:	97 e2       	ldi	r25, 0x27	; 39
    4624:	0e 94 96 33 	call	0x672c	; 0x672c <TWI_MasterInterruptHandler>
}
    4628:	ff 91       	pop	r31
    462a:	ef 91       	pop	r30
    462c:	bf 91       	pop	r27
    462e:	af 91       	pop	r26
    4630:	9f 91       	pop	r25
    4632:	8f 91       	pop	r24
    4634:	7f 91       	pop	r23
    4636:	6f 91       	pop	r22
    4638:	5f 91       	pop	r21
    463a:	4f 91       	pop	r20
    463c:	3f 91       	pop	r19
    463e:	2f 91       	pop	r18
    4640:	0f 90       	pop	r0
    4642:	0b be       	out	0x3b, r0	; 59
    4644:	0f 90       	pop	r0
    4646:	09 be       	out	0x39, r0	; 57
    4648:	0f 90       	pop	r0
    464a:	08 be       	out	0x38, r0	; 56
    464c:	0f 90       	pop	r0
    464e:	0f be       	out	0x3f, r0	; 63
    4650:	0f 90       	pop	r0
    4652:	1f 90       	pop	r1
    4654:	18 95       	reti

00004656 <__vector_76>:

/*---------------------------------------------------------*/
/* TWID Master Interrupt vector.                           */
/*---------------------------------------------------------*/

ISR(TWID_TWIM_vect) {
    4656:	1f 92       	push	r1
    4658:	0f 92       	push	r0
    465a:	0f b6       	in	r0, 0x3f	; 63
    465c:	0f 92       	push	r0
    465e:	08 b6       	in	r0, 0x38	; 56
    4660:	0f 92       	push	r0
    4662:	09 b6       	in	r0, 0x39	; 57
    4664:	0f 92       	push	r0
    4666:	0b b6       	in	r0, 0x3b	; 59
    4668:	0f 92       	push	r0
    466a:	11 24       	eor	r1, r1
    466c:	18 be       	out	0x38, r1	; 56
    466e:	19 be       	out	0x39, r1	; 57
    4670:	1b be       	out	0x3b, r1	; 59
    4672:	2f 93       	push	r18
    4674:	3f 93       	push	r19
    4676:	4f 93       	push	r20
    4678:	5f 93       	push	r21
    467a:	6f 93       	push	r22
    467c:	7f 93       	push	r23
    467e:	8f 93       	push	r24
    4680:	9f 93       	push	r25
    4682:	af 93       	push	r26
    4684:	bf 93       	push	r27
    4686:	ef 93       	push	r30
    4688:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twi2);
    468a:	80 e9       	ldi	r24, 0x90	; 144
    468c:	99 e2       	ldi	r25, 0x29	; 41
    468e:	0e 94 96 33 	call	0x672c	; 0x672c <TWI_MasterInterruptHandler>
}
    4692:	ff 91       	pop	r31
    4694:	ef 91       	pop	r30
    4696:	bf 91       	pop	r27
    4698:	af 91       	pop	r26
    469a:	9f 91       	pop	r25
    469c:	8f 91       	pop	r24
    469e:	7f 91       	pop	r23
    46a0:	6f 91       	pop	r22
    46a2:	5f 91       	pop	r21
    46a4:	4f 91       	pop	r20
    46a6:	3f 91       	pop	r19
    46a8:	2f 91       	pop	r18
    46aa:	0f 90       	pop	r0
    46ac:	0b be       	out	0x3b, r0	; 59
    46ae:	0f 90       	pop	r0
    46b0:	09 be       	out	0x39, r0	; 57
    46b2:	0f 90       	pop	r0
    46b4:	08 be       	out	0x38, r0	; 56
    46b6:	0f 90       	pop	r0
    46b8:	0f be       	out	0x3f, r0	; 63
    46ba:	0f 90       	pop	r0
    46bc:	1f 90       	pop	r1
    46be:	18 95       	reti

000046c0 <__vector_13>:

/*---------------------------------------------------------*/
/* TWIC Master Interrupt vector.                           */
/*---------------------------------------------------------*/

ISR(TWIC_TWIM_vect) {
    46c0:	1f 92       	push	r1
    46c2:	0f 92       	push	r0
    46c4:	0f b6       	in	r0, 0x3f	; 63
    46c6:	0f 92       	push	r0
    46c8:	08 b6       	in	r0, 0x38	; 56
    46ca:	0f 92       	push	r0
    46cc:	09 b6       	in	r0, 0x39	; 57
    46ce:	0f 92       	push	r0
    46d0:	0b b6       	in	r0, 0x3b	; 59
    46d2:	0f 92       	push	r0
    46d4:	11 24       	eor	r1, r1
    46d6:	18 be       	out	0x38, r1	; 56
    46d8:	19 be       	out	0x39, r1	; 57
    46da:	1b be       	out	0x3b, r1	; 59
    46dc:	2f 93       	push	r18
    46de:	3f 93       	push	r19
    46e0:	4f 93       	push	r20
    46e2:	5f 93       	push	r21
    46e4:	6f 93       	push	r22
    46e6:	7f 93       	push	r23
    46e8:	8f 93       	push	r24
    46ea:	9f 93       	push	r25
    46ec:	af 93       	push	r26
    46ee:	bf 93       	push	r27
    46f0:	ef 93       	push	r30
    46f2:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twi1);
    46f4:	88 e7       	ldi	r24, 0x78	; 120
    46f6:	96 e2       	ldi	r25, 0x26	; 38
    46f8:	0e 94 96 33 	call	0x672c	; 0x672c <TWI_MasterInterruptHandler>
}
    46fc:	ff 91       	pop	r31
    46fe:	ef 91       	pop	r30
    4700:	bf 91       	pop	r27
    4702:	af 91       	pop	r26
    4704:	9f 91       	pop	r25
    4706:	8f 91       	pop	r24
    4708:	7f 91       	pop	r23
    470a:	6f 91       	pop	r22
    470c:	5f 91       	pop	r21
    470e:	4f 91       	pop	r20
    4710:	3f 91       	pop	r19
    4712:	2f 91       	pop	r18
    4714:	0f 90       	pop	r0
    4716:	0b be       	out	0x3b, r0	; 59
    4718:	0f 90       	pop	r0
    471a:	09 be       	out	0x39, r0	; 57
    471c:	0f 90       	pop	r0
    471e:	08 be       	out	0x38, r0	; 56
    4720:	0f 90       	pop	r0
    4722:	0f be       	out	0x3f, r0	; 63
    4724:	0f 90       	pop	r0
    4726:	1f 90       	pop	r1
    4728:	18 95       	reti

0000472a <CCPWrite>:
  sei();
}


// From Application Note AVR1003
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    472a:	0f 93       	push	r16
    472c:	df 93       	push	r29
    472e:	cf 93       	push	r28
    4730:	0f 92       	push	r0
    4732:	cd b7       	in	r28, 0x3d	; 61
    4734:	de b7       	in	r29, 0x3e	; 62
  uint8_t volatile saved_sreg = SREG;
    4736:	2f b7       	in	r18, 0x3f	; 63
    4738:	29 83       	std	Y+1, r18	; 0x01
  cli();
    473a:	f8 94       	cli
  volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
  RAMPZ = 0;
    473c:	1b be       	out	0x3b, r1	; 59
#endif

  asm volatile(
    473e:	fc 01       	movw	r30, r24
    4740:	08 ed       	ldi	r16, 0xD8	; 216
    4742:	04 bf       	out	0x34, r16	; 52
    4744:	60 83       	st	Z, r22
    :
    : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
    : "r16", "r30", "r31"
    );

  SREG = saved_sreg;
    4746:	89 81       	ldd	r24, Y+1	; 0x01
    4748:	8f bf       	out	0x3f, r24	; 63
}
    474a:	0f 90       	pop	r0
    474c:	cf 91       	pop	r28
    474e:	df 91       	pop	r29
    4750:	0f 91       	pop	r16
    4752:	08 95       	ret

00004754 <ledWrite>:

void ledWrite( uint8_t led, uint8_t value ) {
  // ignore write if out-ouf-bounds argument
  if (!((led & ~3) || (value & ~1))) {
    4754:	28 2f       	mov	r18, r24
    4756:	30 e0       	ldi	r19, 0x00	; 0
    4758:	c9 01       	movw	r24, r18
    475a:	8c 7f       	andi	r24, 0xFC	; 252
    475c:	89 2b       	or	r24, r25
    475e:	e1 f4       	brne	.+56     	; 0x4798 <ledWrite+0x44>
    4760:	86 2f       	mov	r24, r22
    4762:	8e 7f       	andi	r24, 0xFE	; 254
    4764:	c9 f4       	brne	.+50     	; 0x4798 <ledWrite+0x44>
    4766:	2c 5f       	subi	r18, 0xFC	; 252
    4768:	3f 4f       	sbci	r19, 0xFF	; 255
    if (value == 1) {
    476a:	61 30       	cpi	r22, 0x01	; 1
    476c:	59 f4       	brne	.+22     	; 0x4784 <ledWrite+0x30>
      // turn the led ON
      PORTJ.OUTCLR = 1 << 4 + led;
    476e:	81 e0       	ldi	r24, 0x01	; 1
    4770:	90 e0       	ldi	r25, 0x00	; 0
    4772:	02 c0       	rjmp	.+4      	; 0x4778 <ledWrite+0x24>
    4774:	88 0f       	add	r24, r24
    4776:	99 1f       	adc	r25, r25
    4778:	2a 95       	dec	r18
    477a:	e2 f7       	brpl	.-8      	; 0x4774 <ledWrite+0x20>
    477c:	e0 e0       	ldi	r30, 0x00	; 0
    477e:	f7 e0       	ldi	r31, 0x07	; 7
    4780:	86 83       	std	Z+6, r24	; 0x06
    4782:	08 95       	ret
    } else {
      // turn the led OFF
      PORTJ.OUTSET = 1 << 4 + led;
    4784:	81 e0       	ldi	r24, 0x01	; 1
    4786:	90 e0       	ldi	r25, 0x00	; 0
    4788:	02 c0       	rjmp	.+4      	; 0x478e <ledWrite+0x3a>
    478a:	88 0f       	add	r24, r24
    478c:	99 1f       	adc	r25, r25
    478e:	2a 95       	dec	r18
    4790:	e2 f7       	brpl	.-8      	; 0x478a <ledWrite+0x36>
    4792:	e0 e0       	ldi	r30, 0x00	; 0
    4794:	f7 e0       	ldi	r31, 0x07	; 7
    4796:	85 83       	std	Z+5, r24	; 0x05
    4798:	08 95       	ret

0000479a <ledToggle>:
  }
}

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    479a:	28 2f       	mov	r18, r24
    479c:	30 e0       	ldi	r19, 0x00	; 0
    479e:	c9 01       	movw	r24, r18
    47a0:	8c 7f       	andi	r24, 0xFC	; 252
    47a2:	89 2b       	or	r24, r25
    47a4:	61 f4       	brne	.+24     	; 0x47be <ledToggle+0x24>
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    47a6:	2c 5f       	subi	r18, 0xFC	; 252
    47a8:	3f 4f       	sbci	r19, 0xFF	; 255
    47aa:	81 e0       	ldi	r24, 0x01	; 1
    47ac:	90 e0       	ldi	r25, 0x00	; 0
    47ae:	02 c0       	rjmp	.+4      	; 0x47b4 <ledToggle+0x1a>
    47b0:	88 0f       	add	r24, r24
    47b2:	99 1f       	adc	r25, r25
    47b4:	2a 95       	dec	r18
    47b6:	e2 f7       	brpl	.-8      	; 0x47b0 <ledToggle+0x16>
    47b8:	e0 e0       	ldi	r30, 0x00	; 0
    47ba:	f7 e0       	ldi	r31, 0x07	; 7
    47bc:	87 83       	std	Z+7, r24	; 0x07
    47be:	08 95       	ret

000047c0 <ledBlink>:
  }
}

void ledBlink(void)
{ 
    47c0:	20 e0       	ldi	r18, 0x00	; 0
    47c2:	30 e0       	ldi	r19, 0x00	; 0

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    47c4:	a0 e0       	ldi	r26, 0x00	; 0
    47c6:	b7 e0       	ldi	r27, 0x07	; 7
    47c8:	60 e2       	ldi	r22, 0x20	; 32
    47ca:	40 e2       	ldi	r20, 0x20	; 32
    47cc:	53 e0       	ldi	r21, 0x03	; 3
    47ce:	17 96       	adiw	r26, 0x07	; 7
    47d0:	6c 93       	st	X, r22
    47d2:	17 97       	sbiw	r26, 0x07	; 7
    47d4:	8c ea       	ldi	r24, 0xAC	; 172
    47d6:	9d e0       	ldi	r25, 0x0D	; 13
    47d8:	fa 01       	movw	r30, r20
    47da:	31 97       	sbiw	r30, 0x01	; 1
    47dc:	f1 f7       	brne	.-4      	; 0x47da <ledBlink+0x1a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47e0:	d9 f7       	brne	.-10     	; 0x47d8 <ledBlink+0x18>
void ledBlink(void)
{ 
  /* blink LED 1, this is a simple debug tool to see if the controller is responsive */
  int j;
  	
  for(j = 0;j < 10;j++)
    47e2:	2f 5f       	subi	r18, 0xFF	; 255
    47e4:	3f 4f       	sbci	r19, 0xFF	; 255
    47e6:	2a 30       	cpi	r18, 0x0A	; 10
    47e8:	31 05       	cpc	r19, r1
    47ea:	89 f7       	brne	.-30     	; 0x47ce <ledBlink+0xe>
  {
    ledToggle(1);
    _delay_ms(350);
//Wait(350);		
  }
}
    47ec:	08 95       	ret

000047ee <digitalMode>:

void digitalMode( uint8_t bit, uint8_t mode) {
  if (!(bit & ~3)) {
    47ee:	48 2f       	mov	r20, r24
    47f0:	50 e0       	ldi	r21, 0x00	; 0
    47f2:	ca 01       	movw	r24, r20
    47f4:	8c 7f       	andi	r24, 0xFC	; 252
    47f6:	89 2b       	or	r24, r25
    47f8:	79 f5       	brne	.+94     	; 0x4858 <digitalMode+0x6a>
    if (mode == OUTPUT) {
    47fa:	66 23       	and	r22, r22
    47fc:	b9 f4       	brne	.+46     	; 0x482c <digitalMode+0x3e>
      /* set the port as output */
      PORTK.OUTCLR = 1 << 4 + bit; // set the external driver mode to output first
    47fe:	4c 5f       	subi	r20, 0xFC	; 252
    4800:	5f 4f       	sbci	r21, 0xFF	; 255
    4802:	81 e0       	ldi	r24, 0x01	; 1
    4804:	90 e0       	ldi	r25, 0x00	; 0
    4806:	9c 01       	movw	r18, r24
    4808:	04 2e       	mov	r0, r20
    480a:	02 c0       	rjmp	.+4      	; 0x4810 <digitalMode+0x22>
    480c:	22 0f       	add	r18, r18
    480e:	33 1f       	adc	r19, r19
    4810:	0a 94       	dec	r0
    4812:	e2 f7       	brpl	.-8      	; 0x480c <digitalMode+0x1e>
    4814:	44 50       	subi	r20, 0x04	; 4
    4816:	50 40       	sbci	r21, 0x00	; 0
    4818:	e0 e2       	ldi	r30, 0x20	; 32
    481a:	f7 e0       	ldi	r31, 0x07	; 7
    481c:	26 83       	std	Z+6, r18	; 0x06
      PORTK.DIRSET = 1 << bit;   // set the uC pin direction to output second
    481e:	02 c0       	rjmp	.+4      	; 0x4824 <digitalMode+0x36>
    4820:	88 0f       	add	r24, r24
    4822:	99 1f       	adc	r25, r25
    4824:	4a 95       	dec	r20
    4826:	e2 f7       	brpl	.-8      	; 0x4820 <digitalMode+0x32>
    4828:	81 83       	std	Z+1, r24	; 0x01
    482a:	08 95       	ret
    } else if (mode == INPUT) {
    482c:	61 30       	cpi	r22, 0x01	; 1
    482e:	a1 f4       	brne	.+40     	; 0x4858 <digitalMode+0x6a>
      /* set the port as input */
      PORTK.DIRCLR = 1 << bit;   // set the uC pin direction to input first
    4830:	81 e0       	ldi	r24, 0x01	; 1
    4832:	90 e0       	ldi	r25, 0x00	; 0
    4834:	9c 01       	movw	r18, r24
    4836:	04 2e       	mov	r0, r20
    4838:	02 c0       	rjmp	.+4      	; 0x483e <digitalMode+0x50>
    483a:	22 0f       	add	r18, r18
    483c:	33 1f       	adc	r19, r19
    483e:	0a 94       	dec	r0
    4840:	e2 f7       	brpl	.-8      	; 0x483a <digitalMode+0x4c>
    4842:	e0 e2       	ldi	r30, 0x20	; 32
    4844:	f7 e0       	ldi	r31, 0x07	; 7
    4846:	22 83       	std	Z+2, r18	; 0x02
      PORTK.OUTSET = 1 << 4 + bit; // set the external driver direction to input
    4848:	4c 5f       	subi	r20, 0xFC	; 252
    484a:	5f 4f       	sbci	r21, 0xFF	; 255
    484c:	02 c0       	rjmp	.+4      	; 0x4852 <digitalMode+0x64>
    484e:	88 0f       	add	r24, r24
    4850:	99 1f       	adc	r25, r25
    4852:	4a 95       	dec	r20
    4854:	e2 f7       	brpl	.-8      	; 0x484e <digitalMode+0x60>
    4856:	85 83       	std	Z+5, r24	; 0x05
    4858:	08 95       	ret

0000485a <digitalRead>:
}

uint8_t digitalRead( uint8_t bit ) {
  uint8_t res;
  // ignore read if out-ouf-bounds argument
  if (!(bit & ~3)) {
    485a:	28 2f       	mov	r18, r24
    485c:	30 e0       	ldi	r19, 0x00	; 0
    485e:	c9 01       	movw	r24, r18
    4860:	8c 7f       	andi	r24, 0xFC	; 252
    4862:	89 2b       	or	r24, r25
    4864:	11 f0       	breq	.+4      	; 0x486a <digitalRead+0x10>
    4866:	80 e0       	ldi	r24, 0x00	; 0
    4868:	08 95       	ret
    res = (PORTK.IN >> bit) & 0x01;
    486a:	80 91 28 07 	lds	r24, 0x0728
    486e:	90 e0       	ldi	r25, 0x00	; 0
    4870:	02 c0       	rjmp	.+4      	; 0x4876 <digitalRead+0x1c>
    4872:	95 95       	asr	r25
    4874:	87 95       	ror	r24
    4876:	2a 95       	dec	r18
    4878:	e2 f7       	brpl	.-8      	; 0x4872 <digitalRead+0x18>
    487a:	81 70       	andi	r24, 0x01	; 1
  } else {
    res = 0;
  }
  return(res);
}
    487c:	08 95       	ret

0000487e <digitalWrite>:

void digitalWrite( uint8_t bit, uint8_t value ) {
  // ignore write if out-ouf-bounds argument
  if (!((bit & ~3) || (value & ~1))) {
    487e:	28 2f       	mov	r18, r24
    4880:	30 e0       	ldi	r19, 0x00	; 0
    4882:	c9 01       	movw	r24, r18
    4884:	8c 7f       	andi	r24, 0xFC	; 252
    4886:	89 2b       	or	r24, r25
    4888:	d1 f4       	brne	.+52     	; 0x48be <digitalWrite+0x40>
    488a:	86 2f       	mov	r24, r22
    488c:	8e 7f       	andi	r24, 0xFE	; 254
    488e:	b9 f4       	brne	.+46     	; 0x48be <digitalWrite+0x40>
    if (value == 1) {
    4890:	61 30       	cpi	r22, 0x01	; 1
    4892:	59 f4       	brne	.+22     	; 0x48aa <digitalWrite+0x2c>
      // set the bit HIGH
      PORTK.OUTSET = 1 << bit;
    4894:	81 e0       	ldi	r24, 0x01	; 1
    4896:	90 e0       	ldi	r25, 0x00	; 0
    4898:	02 c0       	rjmp	.+4      	; 0x489e <digitalWrite+0x20>
    489a:	88 0f       	add	r24, r24
    489c:	99 1f       	adc	r25, r25
    489e:	2a 95       	dec	r18
    48a0:	e2 f7       	brpl	.-8      	; 0x489a <digitalWrite+0x1c>
    48a2:	e0 e2       	ldi	r30, 0x20	; 32
    48a4:	f7 e0       	ldi	r31, 0x07	; 7
    48a6:	85 83       	std	Z+5, r24	; 0x05
    48a8:	08 95       	ret
    } else {
      // set the bit LOW
      PORTK.OUTCLR = 1 << bit;
    48aa:	81 e0       	ldi	r24, 0x01	; 1
    48ac:	90 e0       	ldi	r25, 0x00	; 0
    48ae:	02 c0       	rjmp	.+4      	; 0x48b4 <digitalWrite+0x36>
    48b0:	88 0f       	add	r24, r24
    48b2:	99 1f       	adc	r25, r25
    48b4:	2a 95       	dec	r18
    48b6:	e2 f7       	brpl	.-8      	; 0x48b0 <digitalWrite+0x32>
    48b8:	e0 e2       	ldi	r30, 0x20	; 32
    48ba:	f7 e0       	ldi	r31, 0x07	; 7
    48bc:	86 83       	std	Z+6, r24	; 0x06
    48be:	08 95       	ret

000048c0 <digitalToggle>:
  }
}

void digitalToggle( uint8_t bit ) {
  // ignore write if out-ouf-bounds argument
  if (!(bit & ~3)) {
    48c0:	28 2f       	mov	r18, r24
    48c2:	30 e0       	ldi	r19, 0x00	; 0
    48c4:	c9 01       	movw	r24, r18
    48c6:	8c 7f       	andi	r24, 0xFC	; 252
    48c8:	89 2b       	or	r24, r25
    48ca:	51 f4       	brne	.+20     	; 0x48e0 <digitalToggle+0x20>
    // toggle the bit
    PORTK.OUTTGL = 1 << bit;
    48cc:	81 e0       	ldi	r24, 0x01	; 1
    48ce:	90 e0       	ldi	r25, 0x00	; 0
    48d0:	02 c0       	rjmp	.+4      	; 0x48d6 <digitalToggle+0x16>
    48d2:	88 0f       	add	r24, r24
    48d4:	99 1f       	adc	r25, r25
    48d6:	2a 95       	dec	r18
    48d8:	e2 f7       	brpl	.-8      	; 0x48d2 <digitalToggle+0x12>
    48da:	e0 e2       	ldi	r30, 0x20	; 32
    48dc:	f7 e0       	ldi	r31, 0x07	; 7
    48de:	87 83       	std	Z+7, r24	; 0x07
    48e0:	08 95       	ret

000048e2 <analogRead>:
  }
}

int16_t analogRead( uint8_t ch ) {
    48e2:	a2 e0       	ldi	r26, 0x02	; 2
    48e4:	b0 e0       	ldi	r27, 0x00	; 0
    48e6:	e7 e7       	ldi	r30, 0x77	; 119
    48e8:	f4 e2       	ldi	r31, 0x24	; 36
    48ea:	0c 94 09 5b 	jmp	0xb612	; 0xb612 <__prologue_saves__+0x20>
  int16_t w1;
  if (!(ch & ~7)) {
    48ee:	28 2f       	mov	r18, r24
    48f0:	30 e0       	ldi	r19, 0x00	; 0
    48f2:	c9 01       	movw	r24, r18
    48f4:	88 7f       	andi	r24, 0xF8	; 248
    48f6:	89 2b       	or	r24, r25
    48f8:	19 f0       	breq	.+6      	; 0x4900 <analogRead+0x1e>
    48fa:	20 e0       	ldi	r18, 0x00	; 0
    48fc:	30 e0       	ldi	r19, 0x00	; 0
    48fe:	5c c0       	rjmp	.+184    	; 0x49b8 <analogRead+0xd6>
    // control register: ch = <ch>, mode = 00, pm = 00, code = 0, ref = 1, seq = 00
	//coding = 0,the output coding is twos complement
    PORTC.OUTCLR = PIN4_bm;        // SPI SS = L
    4900:	80 e1       	ldi	r24, 0x10	; 16
    4902:	e0 e4       	ldi	r30, 0x40	; 64
    4904:	f6 e0       	ldi	r31, 0x06	; 6
    4906:	86 83       	std	Z+6, r24	; 0x06
    SPIC.DATA = 0x80 | ((ch & 0x7) << 2);
    4908:	c9 01       	movw	r24, r18
    490a:	87 70       	andi	r24, 0x07	; 7
    490c:	90 70       	andi	r25, 0x00	; 0
    490e:	88 0f       	add	r24, r24
    4910:	99 1f       	adc	r25, r25
    4912:	88 0f       	add	r24, r24
    4914:	99 1f       	adc	r25, r25
    4916:	80 68       	ori	r24, 0x80	; 128
    4918:	e0 ec       	ldi	r30, 0xC0	; 192
    491a:	f8 e0       	ldi	r31, 0x08	; 8
    491c:	83 83       	std	Z+3, r24	; 0x03
    loop_until_bit_is_set(SPIC.STATUS, 7);
    491e:	80 91 c2 08 	lds	r24, 0x08C2
    4922:	87 ff       	sbrs	r24, 7
    4924:	fc cf       	rjmp	.-8      	; 0x491e <analogRead+0x3c>
    SPIC.DATA = 0x10;
    4926:	80 e1       	ldi	r24, 0x10	; 16
    4928:	e0 ec       	ldi	r30, 0xC0	; 192
    492a:	f8 e0       	ldi	r31, 0x08	; 8
    492c:	83 83       	std	Z+3, r24	; 0x03
    loop_until_bit_is_set(SPIC.STATUS, 7);
    492e:	80 91 c2 08 	lds	r24, 0x08C2
    4932:	87 ff       	sbrs	r24, 7
    4934:	fc cf       	rjmp	.-8      	; 0x492e <analogRead+0x4c>
    PORTC.OUTSET = PIN4_bm;        // SPI SS = H
    4936:	e0 e4       	ldi	r30, 0x40	; 64
    4938:	f6 e0       	ldi	r31, 0x06	; 6
    493a:	80 e1       	ldi	r24, 0x10	; 16
    493c:	85 83       	std	Z+5, r24	; 0x05

    // do a conversion on the selected channel (no register write)
    PORTC.OUTCLR = PIN4_bm;        // SPI SS = L
    493e:	86 83       	std	Z+6, r24	; 0x06
    SPIC.DATA = 0x00;
    4940:	e0 ec       	ldi	r30, 0xC0	; 192
    4942:	f8 e0       	ldi	r31, 0x08	; 8
    4944:	13 82       	std	Z+3, r1	; 0x03
    loop_until_bit_is_set(SPIC.STATUS, 7);
    4946:	80 91 c2 08 	lds	r24, 0x08C2
    494a:	87 ff       	sbrs	r24, 7
    494c:	fc cf       	rjmp	.-8      	; 0x4946 <analogRead+0x64>
    ((uint8_t*)&w1)[1] = SPIC.DATA;
    494e:	de 01       	movw	r26, r28
    4950:	11 96       	adiw	r26, 0x01	; 1
    4952:	90 91 c3 08 	lds	r25, 0x08C3
    SPIC.DATA = 0x00;
    4956:	e0 ec       	ldi	r30, 0xC0	; 192
    4958:	f8 e0       	ldi	r31, 0x08	; 8
    495a:	13 82       	std	Z+3, r1	; 0x03
    loop_until_bit_is_set(SPIC.STATUS, 7);
    495c:	80 91 c2 08 	lds	r24, 0x08C2
    4960:	87 ff       	sbrs	r24, 7
    4962:	fc cf       	rjmp	.-8      	; 0x495c <analogRead+0x7a>
    ((uint8_t*)&w1)[0] = SPIC.DATA;
    4964:	80 91 c3 08 	lds	r24, 0x08C3

    // do a conversion on the selected channel (no register write)
    PORTC.OUTCLR = PIN4_bm;        // SPI SS = L
    SPIC.DATA = 0x00;
    loop_until_bit_is_set(SPIC.STATUS, 7);
    ((uint8_t*)&w1)[1] = SPIC.DATA;
    4968:	11 96       	adiw	r26, 0x01	; 1
    496a:	9c 93       	st	X, r25
    496c:	11 97       	sbiw	r26, 0x01	; 1
    SPIC.DATA = 0x00;
    loop_until_bit_is_set(SPIC.STATUS, 7);
    ((uint8_t*)&w1)[0] = SPIC.DATA;
    496e:	8c 93       	st	X, r24
    PORTC.OUTSET = PIN4_bm;        // SPI SS = H
    4970:	80 e1       	ldi	r24, 0x10	; 16
    4972:	e0 e4       	ldi	r30, 0x40	; 64
    4974:	f6 e0       	ldi	r31, 0x06	; 6
    4976:	85 83       	std	Z+5, r24	; 0x05

	//ADC0-1 -5V-5V  //ADC2-7 0-10V
	if (!(ch& ~1))	
    4978:	2e 7f       	andi	r18, 0xFE	; 254
    497a:	89 81       	ldd	r24, Y+1	; 0x01
    497c:	9a 81       	ldd	r25, Y+2	; 0x02
    497e:	23 2b       	or	r18, r19
    4980:	69 f4       	brne	.+26     	; 0x499c <analogRead+0xba>
    4982:	9c 01       	movw	r18, r24
    4984:	3f 70       	andi	r19, 0x0F	; 15
		//in this way, 0v ->0, -5V -> -2047, 5V->2047

		//-5V-0V
		if (w1 & 1 << 12) { 
    4986:	94 ff       	sbrs	r25, 4
    4988:	04 c0       	rjmp	.+8      	; 0x4992 <analogRead+0xb0>
		//input value is -5V-0v, ADC code from 0x1000 to 0x1fff
		  w1 = (w1 & 0x0fff)>>1;
    498a:	35 95       	asr	r19
    498c:	27 95       	ror	r18
		  w1 = w1 | 0xf800;
    498e:	38 6f       	ori	r19, 0xF8	; 248
    4990:	02 c0       	rjmp	.+4      	; 0x4996 <analogRead+0xb4>
		} 
		else{   //0-5V
		//since output data : 3 channel id bits + sign bit + 12 conversion result
		//input value is 0-5V, 12 ADC code from 0x0000 to 0x0fff
		 //remove the 3 channel id bits
		  w1 = (w1 & 0x0fff)>>1; 
    4992:	35 95       	asr	r19
    4994:	27 95       	ror	r18
    4996:	29 83       	std	Y+1, r18	; 0x01
    4998:	3a 83       	std	Y+2, r19	; 0x02
    499a:	0c c0       	rjmp	.+24     	; 0x49b4 <analogRead+0xd2>
		  //output value is now 0x0000 to 0x07ff
		}
	else
		//in this way, 0v ->0, 5V -> 2047, 10V->4095
		if (w1 & 1 << 12) { 
    499c:	94 ff       	sbrs	r25, 4
    499e:	04 c0       	rjmp	.+8      	; 0x49a8 <analogRead+0xc6>
		//input value is less than 5V, ADC code from 0x1000 to 0x1fff
		  w1 = (w1 & 0x0fff) >> 1;
    49a0:	9f 70       	andi	r25, 0x0F	; 15
    49a2:	95 95       	asr	r25
    49a4:	87 95       	ror	r24
    49a6:	04 c0       	rjmp	.+8      	; 0x49b0 <analogRead+0xce>
		  //output value now is from 0x0000 to 0x07ff
		} 
		else{   
		//since output data : 3 channel id bits + sign bit + 12 conversion result
		//input value is bigger than 5v, 12 ADC code from 0x0000 to 0x0fff
		  w1 = (w1 | 0x1000) >> 1;
    49a8:	90 61       	ori	r25, 0x10	; 16
    49aa:	95 95       	asr	r25
    49ac:	87 95       	ror	r24
		 //remove the 3 channel id bits
		  w1 = w1 & 0x0fff; 
    49ae:	9f 70       	andi	r25, 0x0F	; 15
    49b0:	89 83       	std	Y+1, r24	; 0x01
    49b2:	9a 83       	std	Y+2, r25	; 0x02
		  //output value is now 0x0800 to 0x0fff
		}
    return w1;
    49b4:	29 81       	ldd	r18, Y+1	; 0x01
    49b6:	3a 81       	ldd	r19, Y+2	; 0x02
  }
  else
    return 0;
}
    49b8:	c9 01       	movw	r24, r18
    49ba:	22 96       	adiw	r28, 0x02	; 2
    49bc:	e2 e0       	ldi	r30, 0x02	; 2
    49be:	0c 94 25 5b 	jmp	0xb64a	; 0xb64a <__epilogue_restores__+0x20>

000049c2 <analogWrite>:

void analogWrite(uint8_t ch, int16_t value) {
    49c2:	98 2f       	mov	r25, r24
//AD5754 16 bit DAC, it also works for AD5724 12 bit DAC
//chanel number should from 0 to 3 and value ranges from -32767 to 32767
  if (!((ch & ~3) || ((value > 32767) || (value < -32767)))) {
    49c4:	8c 7f       	andi	r24, 0xFC	; 252
    49c6:	11 f5       	brne	.+68     	; 0x4a0c <analogWrite+0x4a>
    49c8:	80 e8       	ldi	r24, 0x80	; 128
    49ca:	60 30       	cpi	r22, 0x00	; 0
    49cc:	78 07       	cpc	r23, r24
    49ce:	f1 f0       	breq	.+60     	; 0x4a0c <analogWrite+0x4a>
    /* DAC register*/
    PORTD.OUTCLR = PIN4_bm;        // SPI SS = L
    49d0:	80 e1       	ldi	r24, 0x10	; 16
    49d2:	e0 e6       	ldi	r30, 0x60	; 96
    49d4:	f6 e0       	ldi	r31, 0x06	; 6
    49d6:	86 83       	std	Z+6, r24	; 0x06
    SPID.DATA = 0x00 | (ch & 0x7);
    49d8:	97 70       	andi	r25, 0x07	; 7
    49da:	e0 ec       	ldi	r30, 0xC0	; 192
    49dc:	f9 e0       	ldi	r31, 0x09	; 9
    49de:	93 83       	std	Z+3, r25	; 0x03
    loop_until_bit_is_set(SPID.STATUS, 7);
    49e0:	80 91 c2 09 	lds	r24, 0x09C2
    49e4:	87 ff       	sbrs	r24, 7
    49e6:	fc cf       	rjmp	.-8      	; 0x49e0 <analogWrite+0x1e>
	SPID.DATA = (uint8_t)((value & 0xff00) >> 8);
    49e8:	e0 ec       	ldi	r30, 0xC0	; 192
    49ea:	f9 e0       	ldi	r31, 0x09	; 9
    49ec:	73 83       	std	Z+3, r23	; 0x03
    loop_until_bit_is_set(SPID.STATUS, 7);
    49ee:	80 91 c2 09 	lds	r24, 0x09C2
    49f2:	87 ff       	sbrs	r24, 7
    49f4:	fc cf       	rjmp	.-8      	; 0x49ee <analogWrite+0x2c>
	SPID.DATA = (uint8_t)(value & 0xff) ;
    49f6:	e0 ec       	ldi	r30, 0xC0	; 192
    49f8:	f9 e0       	ldi	r31, 0x09	; 9
    49fa:	63 83       	std	Z+3, r22	; 0x03
    loop_until_bit_is_set(SPID.STATUS, 7);
    49fc:	80 91 c2 09 	lds	r24, 0x09C2
    4a00:	87 ff       	sbrs	r24, 7
    4a02:	fc cf       	rjmp	.-8      	; 0x49fc <analogWrite+0x3a>
    PORTD.OUTSET = PIN4_bm;        // SPI SS = H
    4a04:	80 e1       	ldi	r24, 0x10	; 16
    4a06:	e0 e6       	ldi	r30, 0x60	; 96
    4a08:	f6 e0       	ldi	r31, 0x06	; 6
    4a0a:	85 83       	std	Z+5, r24	; 0x05
    4a0c:	08 95       	ret

00004a0e <test_DIO>:
  }
}
 
void test_DIO(uint8_t ch)
{ 
    4a0e:	a0 e0       	ldi	r26, 0x00	; 0
    4a10:	b0 e0       	ldi	r27, 0x00	; 0
    4a12:	ed e0       	ldi	r30, 0x0D	; 13
    4a14:	f5 e2       	ldi	r31, 0x25	; 37
    4a16:	0c 94 fd 5a 	jmp	0xb5fa	; 0xb5fa <__prologue_saves__+0x8>
    4a1a:	b8 2e       	mov	r11, r24
    4a1c:	c0 e0       	ldi	r28, 0x00	; 0
    4a1e:	d0 e0       	ldi	r29, 0x00	; 0

void digitalToggle( uint8_t bit ) {
  // ignore write if out-ouf-bounds argument
  if (!(bit & ~3)) {
    // toggle the bit
    PORTK.OUTTGL = 1 << bit;
    4a20:	00 e2       	ldi	r16, 0x20	; 32
    4a22:	17 e0       	ldi	r17, 0x07	; 7
    4a24:	66 24       	eor	r6, r6
    4a26:	63 94       	inc	r6
    4a28:	82 e0       	ldi	r24, 0x02	; 2
    4a2a:	78 2e       	mov	r7, r24
    4a2c:	b4 e0       	ldi	r27, 0x04	; 4
    4a2e:	8b 2e       	mov	r8, r27
    4a30:	a8 e0       	ldi	r26, 0x08	; 8
    4a32:	9a 2e       	mov	r9, r26
    4a34:	f0 e2       	ldi	r31, 0x20	; 32
    4a36:	ef 2e       	mov	r14, r31
    4a38:	f3 e0       	ldi	r31, 0x03	; 3
    4a3a:	ff 2e       	mov	r15, r31

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    4a3c:	c1 2c       	mov	r12, r1
    4a3e:	e7 e0       	ldi	r30, 0x07	; 7
    4a40:	de 2e       	mov	r13, r30
    4a42:	70 e2       	ldi	r23, 0x20	; 32
    4a44:	a7 2e       	mov	r10, r23

void digitalToggle( uint8_t bit ) {
  // ignore write if out-ouf-bounds argument
  if (!(bit & ~3)) {
    // toggle the bit
    PORTK.OUTTGL = 1 << bit;
    4a46:	f8 01       	movw	r30, r16
    4a48:	67 82       	std	Z+7, r6	; 0x07
    4a4a:	77 82       	std	Z+7, r7	; 0x07
    4a4c:	87 82       	std	Z+7, r8	; 0x07
    4a4e:	97 82       	std	Z+7, r9	; 0x07
    4a50:	88 ee       	ldi	r24, 0xE8	; 232
    4a52:	93 e0       	ldi	r25, 0x03	; 3
    4a54:	f7 01       	movw	r30, r14
    4a56:	31 97       	sbiw	r30, 0x01	; 1
    4a58:	f1 f7       	brne	.-4      	; 0x4a56 <test_DIO+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a5a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a5c:	d9 f7       	brne	.-10     	; 0x4a54 <test_DIO+0x46>
    digitalToggle(1);
    digitalToggle(2);
    digitalToggle(3);

		_delay_ms(100);			
    ADC_val = analogRead(ch); // +/-5v range, 1v = 408
    4a5e:	8b 2d       	mov	r24, r11
    4a60:	0e 94 71 24 	call	0x48e2	; 0x48e2 <analogRead>
    4a64:	bc 01       	movw	r22, r24
    4a66:	28 ee       	ldi	r18, 0xE8	; 232
    4a68:	33 e0       	ldi	r19, 0x03	; 3
    4a6a:	f7 01       	movw	r30, r14
    4a6c:	31 97       	sbiw	r30, 0x01	; 1
    4a6e:	f1 f7       	brne	.-4      	; 0x4a6c <test_DIO+0x5e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a70:	21 50       	subi	r18, 0x01	; 1
    4a72:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a74:	d1 f7       	brne	.-12     	; 0x4a6a <test_DIO+0x5c>
		_delay_ms(100);			
    analogWrite(1, ADC_val); // +/- 5v range, 1v = 408
    4a76:	81 e0       	ldi	r24, 0x01	; 1
    4a78:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <analogWrite>
    if (k % 2)
    4a7c:	c0 ff       	sbrs	r28, 0
    4a7e:	02 c0       	rjmp	.+4      	; 0x4a84 <test_DIO+0x76>

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    4a80:	f6 01       	movw	r30, r12
    4a82:	a7 82       	std	Z+7, r10	; 0x07
    4a84:	21 96       	adiw	r28, 0x01	; 1
void test_DIO(uint8_t ch)
{ 
  int16_t ADC_val;
  uint8_t k;

  for (k = 0; k < 60; k++)
    4a86:	cc 33       	cpi	r28, 0x3C	; 60
    4a88:	d1 05       	cpc	r29, r1
    4a8a:	e9 f6       	brne	.-70     	; 0x4a46 <test_DIO+0x38>
		_delay_ms(100);			
    analogWrite(1, ADC_val); // +/- 5v range, 1v = 408
    if (k % 2)
    ledToggle(1);  //toggle LED, once per square wave pulse
  }
}
    4a8c:	cd b7       	in	r28, 0x3d	; 61
    4a8e:	de b7       	in	r29, 0x3e	; 62
    4a90:	ee e0       	ldi	r30, 0x0E	; 14
    4a92:	0c 94 19 5b 	jmp	0xb632	; 0xb632 <__epilogue_restores__+0x8>

00004a96 <SystemReset>:

void SystemReset(void) {
    4a96:	0f 93       	push	r16
    4a98:	df 93       	push	r29
    4a9a:	cf 93       	push	r28
    4a9c:	0f 92       	push	r0
    4a9e:	cd b7       	in	r28, 0x3d	; 61
    4aa0:	de b7       	in	r29, 0x3e	; 62
}


// From Application Note AVR1003
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
  uint8_t volatile saved_sreg = SREG;
    4aa2:	8f b7       	in	r24, 0x3f	; 63
    4aa4:	89 83       	std	Y+1, r24	; 0x01
  cli();
    4aa6:	f8 94       	cli
  volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
  RAMPZ = 0;
    4aa8:	1b be       	out	0x3b, r1	; 59
#endif

  asm volatile(
    4aaa:	21 e0       	ldi	r18, 0x01	; 1
    4aac:	89 e7       	ldi	r24, 0x79	; 121
    4aae:	90 e0       	ldi	r25, 0x00	; 0
    4ab0:	fc 01       	movw	r30, r24
    4ab2:	08 ed       	ldi	r16, 0xD8	; 216
    4ab4:	04 bf       	out	0x34, r16	; 52
    4ab6:	20 83       	st	Z, r18
    :
    : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
    : "r16", "r30", "r31"
    );

  SREG = saved_sreg;
    4ab8:	89 81       	ldd	r24, Y+1	; 0x01
    4aba:	8f bf       	out	0x3f, r24	; 63
}

void SystemReset(void) {
  //issue software reset
  CCPWrite(&RST.CTRL, RST_SWRST_bm);
}
    4abc:	0f 90       	pop	r0
    4abe:	cf 91       	pop	r28
    4ac0:	df 91       	pop	r29
    4ac2:	0f 91       	pop	r16
    4ac4:	08 95       	ret

00004ac6 <test_ADC>:

void test_ADC(uint8_t ch)
 { 
    4ac6:	a0 e0       	ldi	r26, 0x00	; 0
    4ac8:	b0 e0       	ldi	r27, 0x00	; 0
    4aca:	e9 e6       	ldi	r30, 0x69	; 105
    4acc:	f5 e2       	ldi	r31, 0x25	; 37
    4ace:	0c 94 ff 5a 	jmp	0xb5fe	; 0xb5fe <__prologue_saves__+0xc>
    4ad2:	98 2e       	mov	r9, r24
    4ad4:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t j, k;
		
	for (k = 0; k < 30; k++)
	{
		for (j = 0; j < 200; j++)
		{	if (j < 100)
    4ad6:	40 ea       	ldi	r20, 0xA0	; 160
    4ad8:	a4 2e       	mov	r10, r20
    4ada:	4f e0       	ldi	r20, 0x0F	; 15
    4adc:	b4 2e       	mov	r11, r20
    4ade:	30 e8       	ldi	r19, 0x80	; 128
    4ae0:	c3 2e       	mov	r12, r19
    4ae2:	3e e3       	ldi	r19, 0x3E	; 62
    4ae4:	d3 2e       	mov	r13, r19

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    4ae6:	e1 2c       	mov	r14, r1
    4ae8:	27 e0       	ldi	r18, 0x07	; 7
    4aea:	f2 2e       	mov	r15, r18
    4aec:	90 e2       	ldi	r25, 0x20	; 32
    4aee:	89 2e       	mov	r8, r25
    4af0:	1d c0       	rjmp	.+58     	; 0x4b2c <test_ADC+0x66>
	uint8_t j, k;
		
	for (k = 0; k < 30; k++)
	{
		for (j = 0; j < 200; j++)
		{	if (j < 100)
    4af2:	14 36       	cpi	r17, 0x64	; 100
    4af4:	10 f4       	brcc	.+4      	; 0x4afa <test_ADC+0x34>
    4af6:	be 01       	movw	r22, r28
    4af8:	03 c0       	rjmp	.+6      	; 0x4b00 <test_ADC+0x3a>
    4afa:	b5 01       	movw	r22, r10
    4afc:	6c 1b       	sub	r22, r28
    4afe:	7d 0b       	sbc	r23, r29
			X_dac_val = 20*(uint16_t)j; 	// build the up part of the triangle wave
			else
			X_dac_val = 20*(uint16_t)(100 + (100 - j)); // build the down part of the triangle wave
 	
            analogWrite(0, X_dac_val);
    4b00:	80 e0       	ldi	r24, 0x00	; 0
    4b02:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <analogWrite>
			
			ADC_val = analogRead(ch);   //1v = 102 -> ~5 TIMES THE GAIN OF OL
    4b06:	89 2d       	mov	r24, r9
    4b08:	0e 94 71 24 	call	0x48e2	; 0x48e2 <analogRead>
    4b0c:	bc 01       	movw	r22, r24
			
            analogWrite(1, ADC_val);
    4b0e:	81 e0       	ldi	r24, 0x01	; 1
    4b10:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <analogWrite>
    4b14:	c6 01       	movw	r24, r12
    4b16:	01 97       	sbiw	r24, 0x01	; 1
    4b18:	f1 f7       	brne	.-4      	; 0x4b16 <test_ADC+0x50>
	int16_t ADC_val;
	uint8_t j, k;
		
	for (k = 0; k < 30; k++)
	{
		for (j = 0; j < 200; j++)
    4b1a:	1f 5f       	subi	r17, 0xFF	; 255
    4b1c:	64 96       	adiw	r28, 0x14	; 20
    4b1e:	18 3c       	cpi	r17, 0xC8	; 200
    4b20:	41 f7       	brne	.-48     	; 0x4af2 <test_ADC+0x2c>

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    4b22:	f7 01       	movw	r30, r14
    4b24:	87 82       	std	Z+7, r8	; 0x07
 { 
	int16_t X_dac_val;
	int16_t ADC_val;
	uint8_t j, k;
		
	for (k = 0; k < 30; k++)
    4b26:	0f 5f       	subi	r16, 0xFF	; 255
    4b28:	0e 31       	cpi	r16, 0x1E	; 30
    4b2a:	21 f0       	breq	.+8      	; 0x4b34 <test_ADC+0x6e>
    4b2c:	10 e0       	ldi	r17, 0x00	; 0
    4b2e:	c0 e0       	ldi	r28, 0x00	; 0
    4b30:	d0 e0       	ldi	r29, 0x00	; 0
    4b32:	df cf       	rjmp	.-66     	; 0x4af2 <test_ADC+0x2c>
            analogWrite(1, ADC_val);
			_delay_ms(2);			
		}
		ledToggle(1);  //toggle LED, once per triangle wave pulse
	}	 	
}
    4b34:	cd b7       	in	r28, 0x3d	; 61
    4b36:	de b7       	in	r29, 0x3e	; 62
    4b38:	ec e0       	ldi	r30, 0x0C	; 12
    4b3a:	0c 94 1b 5b 	jmp	0xb636	; 0xb636 <__epilogue_restores__+0xc>

00004b3e <put_rc>:
    }
    
};

static
        void put_rc(FRESULT rc) {
    4b3e:	bc 01       	movw	r22, r24
    4b40:	27 ea       	ldi	r18, 0xA7	; 167
    4b42:	3e e0       	ldi	r19, 0x0E	; 14
    4b44:	40 e0       	ldi	r20, 0x00	; 0
    4b46:	50 e0       	ldi	r21, 0x00	; 0
    4b48:	08 c0       	rjmp	.+16     	; 0x4b5a <put_rc+0x1c>
            "OK\0" "DISK_ERR\0" "INT_ERR\0" "NOT_READY\0" "NO_FILE\0" "NO_PATH\0"
            "INVALID_NAME\0" "DENIED\0" "EXIST\0" "INVALID_OBJECT\0" "WRITE_PROTECTED\0"
            "INVALID_DRIVE\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0" "MKFS_ABORTED\0" "TIMEOUT\0";
    FRESULT i;
    
    for (p = str, i = 0; i != rc && pgm_read_byte_near(p); i++) {
    4b4a:	f9 01       	movw	r30, r18
        while(pgm_read_byte_near(p++));
    4b4c:	2f 5f       	subi	r18, 0xFF	; 255
    4b4e:	3f 4f       	sbci	r19, 0xFF	; 255
    4b50:	e4 91       	lpm	r30, Z+
    4b52:	ee 23       	and	r30, r30
    4b54:	d1 f7       	brne	.-12     	; 0x4b4a <put_rc+0xc>
            "OK\0" "DISK_ERR\0" "INT_ERR\0" "NOT_READY\0" "NO_FILE\0" "NO_PATH\0"
            "INVALID_NAME\0" "DENIED\0" "EXIST\0" "INVALID_OBJECT\0" "WRITE_PROTECTED\0"
            "INVALID_DRIVE\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0" "MKFS_ABORTED\0" "TIMEOUT\0";
    FRESULT i;
    
    for (p = str, i = 0; i != rc && pgm_read_byte_near(p); i++) {
    4b56:	4f 5f       	subi	r20, 0xFF	; 255
    4b58:	5f 4f       	sbci	r21, 0xFF	; 255
    4b5a:	46 17       	cp	r20, r22
    4b5c:	57 07       	cpc	r21, r23
    4b5e:	21 f0       	breq	.+8      	; 0x4b68 <put_rc+0x2a>
    4b60:	f9 01       	movw	r30, r18
    4b62:	84 91       	lpm	r24, Z+
    4b64:	88 23       	and	r24, r24
    4b66:	89 f7       	brne	.-30     	; 0x4b4a <put_rc+0xc>
        while(pgm_read_byte_near(p++));
    }
    xprintf(PSTR("%S\n"), p);
    4b68:	00 d0       	rcall	.+0      	; 0x4b6a <put_rc+0x2c>
    4b6a:	0f 92       	push	r0
    4b6c:	83 ea       	ldi	r24, 0xA3	; 163
    4b6e:	9e e0       	ldi	r25, 0x0E	; 14
    4b70:	ed b7       	in	r30, 0x3d	; 61
    4b72:	fe b7       	in	r31, 0x3e	; 62
    4b74:	81 83       	std	Z+1, r24	; 0x01
    4b76:	92 83       	std	Z+2, r25	; 0x02
    4b78:	23 83       	std	Z+3, r18	; 0x03
    4b7a:	34 83       	std	Z+4, r19	; 0x04
    4b7c:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    4b80:	0f 90       	pop	r0
    4b82:	0f 90       	pop	r0
    4b84:	0f 90       	pop	r0
    4b86:	0f 90       	pop	r0
}
    4b88:	08 95       	ret

00004b8a <verifyEEPage>:
    for (i = 0; i < psize; i++) {
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    }
}

int verifyEEPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    4b8a:	a0 e0       	ldi	r26, 0x00	; 0
    4b8c:	b0 e0       	ldi	r27, 0x00	; 0
    4b8e:	eb ec       	ldi	r30, 0xCB	; 203
    4b90:	f5 e2       	ldi	r31, 0x25	; 37
    4b92:	0c 94 00 5b 	jmp	0xb600	; 0xb600 <__prologue_saves__+0xe>
    4b96:	5c 01       	movw	r10, r24
    4b98:	6a 01       	movw	r12, r20
    4b9a:	7b 01       	movw	r14, r22
    4b9c:	92 2e       	mov	r9, r18
    4b9e:	e8 01       	movw	r28, r16
    uint8_t match, i;
    
    xputs(PSTR("#"));
    4ba0:	89 e9       	ldi	r24, 0x99	; 153
    4ba2:	91 e1       	ldi	r25, 0x11	; 17
    4ba4:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
    buff[0] = 'g';
    4ba8:	87 e6       	ldi	r24, 0x67	; 103
    4baa:	88 83       	st	Y, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    4bac:	bb 27       	eor	r27, r27
    4bae:	af 2d       	mov	r26, r15
    4bb0:	9e 2d       	mov	r25, r14
    4bb2:	8d 2d       	mov	r24, r13
    4bb4:	89 83       	std	Y+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    4bb6:	ca 82       	std	Y+2, r12	; 0x02
    buff[3] = psize;
    4bb8:	9b 82       	std	Y+3, r9	; 0x03
    buff[4] = 'E';
    4bba:	85 e4       	ldi	r24, 0x45	; 69
    4bbc:	8c 83       	std	Y+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], HEADER_SIZE, psize);
    4bbe:	c5 01       	movw	r24, r10
    4bc0:	60 e7       	ldi	r22, 0x70	; 112
    4bc2:	a8 01       	movw	r20, r16
    4bc4:	25 e0       	ldi	r18, 0x05	; 5
    4bc6:	09 2d       	mov	r16, r9
    4bc8:	0e 94 9c 32 	call	0x6538	; 0x6538 <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    4bcc:	d5 01       	movw	r26, r10
    4bce:	1d 96       	adiw	r26, 0x0d	; 13
    4bd0:	8c 91       	ld	r24, X
    4bd2:	1d 97       	sbiw	r26, 0x0d	; 13
    4bd4:	88 23       	and	r24, r24
    4bd6:	d1 f7       	brne	.-12     	; 0x4bcc <verifyEEPage+0x42>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    4bd8:	1e 96       	adiw	r26, 0x0e	; 14
    4bda:	8c 91       	ld	r24, X
    4bdc:	1e 97       	sbiw	r26, 0x0e	; 14
    4bde:	81 30       	cpi	r24, 0x01	; 1
    4be0:	b9 f0       	breq	.+46     	; 0x4c10 <verifyEEPage+0x86>
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    4be2:	1e 96       	adiw	r26, 0x0e	; 14
    4be4:	2c 91       	ld	r18, X
    4be6:	00 d0       	rcall	.+0      	; 0x4be8 <verifyEEPage+0x5e>
    4be8:	0f 92       	push	r0
    4bea:	ed b7       	in	r30, 0x3d	; 61
    4bec:	fe b7       	in	r31, 0x3e	; 62
    4bee:	31 96       	adiw	r30, 0x01	; 1
    4bf0:	8c e7       	ldi	r24, 0x7C	; 124
    4bf2:	91 e1       	ldi	r25, 0x11	; 17
    4bf4:	ad b7       	in	r26, 0x3d	; 61
    4bf6:	be b7       	in	r27, 0x3e	; 62
    4bf8:	11 96       	adiw	r26, 0x01	; 1
    4bfa:	8d 93       	st	X+, r24
    4bfc:	9c 93       	st	X, r25
    4bfe:	12 97       	sbiw	r26, 0x02	; 2
    4c00:	22 83       	std	Z+2, r18	; 0x02
    4c02:	13 82       	std	Z+3, r1	; 0x03
    4c04:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    4c08:	0f 90       	pop	r0
    4c0a:	0f 90       	pop	r0
    4c0c:	0f 90       	pop	r0
    4c0e:	0f 90       	pop	r0
    4c10:	de 01       	movw	r26, r28
    4c12:	31 e0       	ldi	r19, 0x01	; 1
    4c14:	20 e0       	ldi	r18, 0x00	; 0
    4c16:	0d c0       	rjmp	.+26     	; 0x4c32 <verifyEEPage+0xa8>
    }
    match = 1;
    for (i = 0; i < psize; i++) {
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
    4c18:	e5 01       	movw	r28, r10
    4c1a:	ed 81       	ldd	r30, Y+5	; 0x05
    4c1c:	fe 81       	ldd	r31, Y+6	; 0x06
    4c1e:	e2 0f       	add	r30, r18
    4c20:	f1 1d       	adc	r31, r1
    4c22:	90 81       	ld	r25, Z
    4c24:	15 96       	adiw	r26, 0x05	; 5
    4c26:	8c 91       	ld	r24, X
    4c28:	15 97       	sbiw	r26, 0x05	; 5
    4c2a:	98 13       	cpse	r25, r24
    4c2c:	30 e0       	ldi	r19, 0x00	; 0
    }
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    }
    match = 1;
    for (i = 0; i < psize; i++) {
    4c2e:	2f 5f       	subi	r18, 0xFF	; 255
    4c30:	11 96       	adiw	r26, 0x01	; 1
    4c32:	29 15       	cp	r18, r9
    4c34:	88 f3       	brcs	.-30     	; 0x4c18 <verifyEEPage+0x8e>
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
            match = 0;
    }
    return match;
}
    4c36:	83 2f       	mov	r24, r19
    4c38:	90 e0       	ldi	r25, 0x00	; 0
    4c3a:	cd b7       	in	r28, 0x3d	; 61
    4c3c:	de b7       	in	r29, 0x3e	; 62
    4c3e:	eb e0       	ldi	r30, 0x0B	; 11
    4c40:	0c 94 1c 5b 	jmp	0xb638	; 0xb638 <__epilogue_restores__+0xe>

00004c44 <readEEPage>:
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad eeprom write, result = %u\n"), twi->result);
    }
}

void readEEPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    4c44:	a0 e0       	ldi	r26, 0x00	; 0
    4c46:	b0 e0       	ldi	r27, 0x00	; 0
    4c48:	e8 e2       	ldi	r30, 0x28	; 40
    4c4a:	f6 e2       	ldi	r31, 0x26	; 38
    4c4c:	0c 94 00 5b 	jmp	0xb600	; 0xb600 <__prologue_saves__+0xe>
    4c50:	5c 01       	movw	r10, r24
    4c52:	6a 01       	movw	r12, r20
    4c54:	7b 01       	movw	r14, r22
    4c56:	92 2e       	mov	r9, r18
    4c58:	e8 01       	movw	r28, r16
    uint8_t i;
    
    xputs(PSTR("#"));
    4c5a:	88 eb       	ldi	r24, 0xB8	; 184
    4c5c:	91 e1       	ldi	r25, 0x11	; 17
    4c5e:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
    buff[0] = 'g';
    4c62:	87 e6       	ldi	r24, 0x67	; 103
    4c64:	88 83       	st	Y, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    4c66:	bb 27       	eor	r27, r27
    4c68:	af 2d       	mov	r26, r15
    4c6a:	9e 2d       	mov	r25, r14
    4c6c:	8d 2d       	mov	r24, r13
    4c6e:	89 83       	std	Y+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    4c70:	ca 82       	std	Y+2, r12	; 0x02
    buff[3] = psize;
    4c72:	9b 82       	std	Y+3, r9	; 0x03
    buff[4] = 'E';
    4c74:	85 e4       	ldi	r24, 0x45	; 69
    4c76:	8c 83       	std	Y+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], HEADER_SIZE, psize);
    4c78:	c5 01       	movw	r24, r10
    4c7a:	60 e7       	ldi	r22, 0x70	; 112
    4c7c:	a8 01       	movw	r20, r16
    4c7e:	25 e0       	ldi	r18, 0x05	; 5
    4c80:	09 2d       	mov	r16, r9
    4c82:	0e 94 9c 32 	call	0x6538	; 0x6538 <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    4c86:	d5 01       	movw	r26, r10
    4c88:	1d 96       	adiw	r26, 0x0d	; 13
    4c8a:	8c 91       	ld	r24, X
    4c8c:	1d 97       	sbiw	r26, 0x0d	; 13
    4c8e:	88 23       	and	r24, r24
    4c90:	d1 f7       	brne	.-12     	; 0x4c86 <readEEPage+0x42>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    4c92:	1e 96       	adiw	r26, 0x0e	; 14
    4c94:	8c 91       	ld	r24, X
    4c96:	1e 97       	sbiw	r26, 0x0e	; 14
    4c98:	81 30       	cpi	r24, 0x01	; 1
    4c9a:	b9 f0       	breq	.+46     	; 0x4cca <readEEPage+0x86>
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    4c9c:	1e 96       	adiw	r26, 0x0e	; 14
    4c9e:	2c 91       	ld	r18, X
    4ca0:	00 d0       	rcall	.+0      	; 0x4ca2 <readEEPage+0x5e>
    4ca2:	0f 92       	push	r0
    4ca4:	ed b7       	in	r30, 0x3d	; 61
    4ca6:	fe b7       	in	r31, 0x3e	; 62
    4ca8:	31 96       	adiw	r30, 0x01	; 1
    4caa:	8b e9       	ldi	r24, 0x9B	; 155
    4cac:	91 e1       	ldi	r25, 0x11	; 17
    4cae:	ad b7       	in	r26, 0x3d	; 61
    4cb0:	be b7       	in	r27, 0x3e	; 62
    4cb2:	11 96       	adiw	r26, 0x01	; 1
    4cb4:	8d 93       	st	X+, r24
    4cb6:	9c 93       	st	X, r25
    4cb8:	12 97       	sbiw	r26, 0x02	; 2
    4cba:	22 83       	std	Z+2, r18	; 0x02
    4cbc:	13 82       	std	Z+3, r1	; 0x03
    4cbe:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    4cc2:	0f 90       	pop	r0
    4cc4:	0f 90       	pop	r0
    4cc6:	0f 90       	pop	r0
    4cc8:	0f 90       	pop	r0
    4cca:	de 01       	movw	r26, r28
    4ccc:	90 e0       	ldi	r25, 0x00	; 0
    4cce:	0a c0       	rjmp	.+20     	; 0x4ce4 <readEEPage+0xa0>
    }
    
    for (i = 0; i < psize; i++) {
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    4cd0:	e5 01       	movw	r28, r10
    4cd2:	ed 81       	ldd	r30, Y+5	; 0x05
    4cd4:	fe 81       	ldd	r31, Y+6	; 0x06
    4cd6:	e9 0f       	add	r30, r25
    4cd8:	f1 1d       	adc	r31, r1
    4cda:	80 81       	ld	r24, Z
    4cdc:	14 96       	adiw	r26, 0x04	; 4
    4cde:	8c 93       	st	X, r24
    4ce0:	14 97       	sbiw	r26, 0x04	; 4
    }
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    }
    
    for (i = 0; i < psize; i++) {
    4ce2:	9f 5f       	subi	r25, 0xFF	; 255
    4ce4:	11 96       	adiw	r26, 0x01	; 1
    4ce6:	99 15       	cp	r25, r9
    4ce8:	98 f3       	brcs	.-26     	; 0x4cd0 <readEEPage+0x8c>
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    }
}
    4cea:	cd b7       	in	r28, 0x3d	; 61
    4cec:	de b7       	in	r29, 0x3e	; 62
    4cee:	eb e0       	ldi	r30, 0x0B	; 11
    4cf0:	0c 94 1c 5b 	jmp	0xb638	; 0xb638 <__epilogue_restores__+0xe>

00004cf4 <progEEPage>:
            match = 0;
    }
    return match;
}

void progEEPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    4cf4:	a0 e0       	ldi	r26, 0x00	; 0
    4cf6:	b0 e0       	ldi	r27, 0x00	; 0
    4cf8:	e0 e8       	ldi	r30, 0x80	; 128
    4cfa:	f6 e2       	ldi	r31, 0x26	; 38
    4cfc:	0c 94 02 5b 	jmp	0xb604	; 0xb604 <__prologue_saves__+0x12>
    4d00:	ec 01       	movw	r28, r24
    4d02:	6a 01       	movw	r12, r20
    4d04:	7b 01       	movw	r14, r22
    4d06:	b2 2e       	mov	r11, r18
    xputs(PSTR("#"));
    4d08:	89 ed       	ldi	r24, 0xD9	; 217
    4d0a:	91 e1       	ldi	r25, 0x11	; 17
    4d0c:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
    buff[0] = 'B';
    4d10:	82 e4       	ldi	r24, 0x42	; 66
    4d12:	d8 01       	movw	r26, r16
    4d14:	8c 93       	st	X, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    4d16:	bb 27       	eor	r27, r27
    4d18:	af 2d       	mov	r26, r15
    4d1a:	9e 2d       	mov	r25, r14
    4d1c:	8d 2d       	mov	r24, r13
    4d1e:	f8 01       	movw	r30, r16
    4d20:	81 83       	std	Z+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    4d22:	c2 82       	std	Z+2, r12	; 0x02
    buff[3] = psize;
    4d24:	b3 82       	std	Z+3, r11	; 0x03
    buff[4] = 'E';
    4d26:	85 e4       	ldi	r24, 0x45	; 69
    4d28:	84 83       	std	Z+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], psize+HEADER_SIZE, 0);
    4d2a:	f5 e0       	ldi	r31, 0x05	; 5
    4d2c:	bf 0e       	add	r11, r31
    4d2e:	ce 01       	movw	r24, r28
    4d30:	60 e7       	ldi	r22, 0x70	; 112
    4d32:	a8 01       	movw	r20, r16
    4d34:	2b 2d       	mov	r18, r11
    4d36:	00 e0       	ldi	r16, 0x00	; 0
    4d38:	0e 94 9c 32 	call	0x6538	; 0x6538 <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    4d3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d3e:	88 23       	and	r24, r24
    4d40:	e9 f7       	brne	.-6      	; 0x4d3c <progEEPage+0x48>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    4d42:	8e 85       	ldd	r24, Y+14	; 0x0e
    4d44:	81 30       	cpi	r24, 0x01	; 1
    4d46:	b1 f0       	breq	.+44     	; 0x4d74 <progEEPage+0x80>
        xprintf(PSTR("Bad eeprom write, result = %u\n"), twi->result);
    4d48:	2e 85       	ldd	r18, Y+14	; 0x0e
    4d4a:	00 d0       	rcall	.+0      	; 0x4d4c <progEEPage+0x58>
    4d4c:	0f 92       	push	r0
    4d4e:	ed b7       	in	r30, 0x3d	; 61
    4d50:	fe b7       	in	r31, 0x3e	; 62
    4d52:	31 96       	adiw	r30, 0x01	; 1
    4d54:	8a eb       	ldi	r24, 0xBA	; 186
    4d56:	91 e1       	ldi	r25, 0x11	; 17
    4d58:	ad b7       	in	r26, 0x3d	; 61
    4d5a:	be b7       	in	r27, 0x3e	; 62
    4d5c:	11 96       	adiw	r26, 0x01	; 1
    4d5e:	8d 93       	st	X+, r24
    4d60:	9c 93       	st	X, r25
    4d62:	12 97       	sbiw	r26, 0x02	; 2
    4d64:	22 83       	std	Z+2, r18	; 0x02
    4d66:	13 82       	std	Z+3, r1	; 0x03
    4d68:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    4d6c:	0f 90       	pop	r0
    4d6e:	0f 90       	pop	r0
    4d70:	0f 90       	pop	r0
    4d72:	0f 90       	pop	r0
    }
}
    4d74:	cd b7       	in	r28, 0x3d	; 61
    4d76:	de b7       	in	r29, 0x3e	; 62
    4d78:	e9 e0       	ldi	r30, 0x09	; 9
    4d7a:	0c 94 1e 5b 	jmp	0xb63c	; 0xb63c <__epilogue_restores__+0x12>

00004d7e <verifyPage>:
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    }
}


int verifyPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    4d7e:	a0 e0       	ldi	r26, 0x00	; 0
    4d80:	b0 e0       	ldi	r27, 0x00	; 0
    4d82:	e5 ec       	ldi	r30, 0xC5	; 197
    4d84:	f6 e2       	ldi	r31, 0x26	; 38
    4d86:	0c 94 00 5b 	jmp	0xb600	; 0xb600 <__prologue_saves__+0xe>
    4d8a:	5c 01       	movw	r10, r24
    4d8c:	6a 01       	movw	r12, r20
    4d8e:	7b 01       	movw	r14, r22
    4d90:	92 2e       	mov	r9, r18
    4d92:	e8 01       	movw	r28, r16
    uint8_t match, i;
    
    xputs(PSTR("#"));
    4d94:	88 ef       	ldi	r24, 0xF8	; 248
    4d96:	91 e1       	ldi	r25, 0x11	; 17
    4d98:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
    buff[0] = 'g';
    4d9c:	87 e6       	ldi	r24, 0x67	; 103
    4d9e:	88 83       	st	Y, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    4da0:	bb 27       	eor	r27, r27
    4da2:	af 2d       	mov	r26, r15
    4da4:	9e 2d       	mov	r25, r14
    4da6:	8d 2d       	mov	r24, r13
    4da8:	89 83       	std	Y+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    4daa:	ca 82       	std	Y+2, r12	; 0x02
    buff[3] = psize>>1;
    4dac:	89 2d       	mov	r24, r9
    4dae:	86 95       	lsr	r24
    4db0:	8b 83       	std	Y+3, r24	; 0x03
    buff[4] = 'F';
    4db2:	86 e4       	ldi	r24, 0x46	; 70
    4db4:	8c 83       	std	Y+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], HEADER_SIZE, psize);
    4db6:	c5 01       	movw	r24, r10
    4db8:	60 e7       	ldi	r22, 0x70	; 112
    4dba:	a8 01       	movw	r20, r16
    4dbc:	25 e0       	ldi	r18, 0x05	; 5
    4dbe:	09 2d       	mov	r16, r9
    4dc0:	0e 94 9c 32 	call	0x6538	; 0x6538 <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    4dc4:	d5 01       	movw	r26, r10
    4dc6:	1d 96       	adiw	r26, 0x0d	; 13
    4dc8:	8c 91       	ld	r24, X
    4dca:	1d 97       	sbiw	r26, 0x0d	; 13
    4dcc:	88 23       	and	r24, r24
    4dce:	d1 f7       	brne	.-12     	; 0x4dc4 <verifyPage+0x46>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    4dd0:	1e 96       	adiw	r26, 0x0e	; 14
    4dd2:	8c 91       	ld	r24, X
    4dd4:	1e 97       	sbiw	r26, 0x0e	; 14
    4dd6:	81 30       	cpi	r24, 0x01	; 1
    4dd8:	b9 f0       	breq	.+46     	; 0x4e08 <verifyPage+0x8a>
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    4dda:	1e 96       	adiw	r26, 0x0e	; 14
    4ddc:	2c 91       	ld	r18, X
    4dde:	00 d0       	rcall	.+0      	; 0x4de0 <verifyPage+0x62>
    4de0:	0f 92       	push	r0
    4de2:	ed b7       	in	r30, 0x3d	; 61
    4de4:	fe b7       	in	r31, 0x3e	; 62
    4de6:	31 96       	adiw	r30, 0x01	; 1
    4de8:	8b ed       	ldi	r24, 0xDB	; 219
    4dea:	91 e1       	ldi	r25, 0x11	; 17
    4dec:	ad b7       	in	r26, 0x3d	; 61
    4dee:	be b7       	in	r27, 0x3e	; 62
    4df0:	11 96       	adiw	r26, 0x01	; 1
    4df2:	8d 93       	st	X+, r24
    4df4:	9c 93       	st	X, r25
    4df6:	12 97       	sbiw	r26, 0x02	; 2
    4df8:	22 83       	std	Z+2, r18	; 0x02
    4dfa:	13 82       	std	Z+3, r1	; 0x03
    4dfc:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    4e00:	0f 90       	pop	r0
    4e02:	0f 90       	pop	r0
    4e04:	0f 90       	pop	r0
    4e06:	0f 90       	pop	r0
    4e08:	de 01       	movw	r26, r28
    4e0a:	31 e0       	ldi	r19, 0x01	; 1
    4e0c:	20 e0       	ldi	r18, 0x00	; 0
    4e0e:	0d c0       	rjmp	.+26     	; 0x4e2a <verifyPage+0xac>
    }
    match = 1;
    for (i = 0; i < psize; i++) {
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
    4e10:	e5 01       	movw	r28, r10
    4e12:	ed 81       	ldd	r30, Y+5	; 0x05
    4e14:	fe 81       	ldd	r31, Y+6	; 0x06
    4e16:	e2 0f       	add	r30, r18
    4e18:	f1 1d       	adc	r31, r1
    4e1a:	90 81       	ld	r25, Z
    4e1c:	15 96       	adiw	r26, 0x05	; 5
    4e1e:	8c 91       	ld	r24, X
    4e20:	15 97       	sbiw	r26, 0x05	; 5
    4e22:	98 13       	cpse	r25, r24
    4e24:	30 e0       	ldi	r19, 0x00	; 0
    }
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    }
    match = 1;
    for (i = 0; i < psize; i++) {
    4e26:	2f 5f       	subi	r18, 0xFF	; 255
    4e28:	11 96       	adiw	r26, 0x01	; 1
    4e2a:	29 15       	cp	r18, r9
    4e2c:	88 f3       	brcs	.-30     	; 0x4e10 <verifyPage+0x92>
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
            match = 0;
    }
    return match;
}
    4e2e:	83 2f       	mov	r24, r19
    4e30:	90 e0       	ldi	r25, 0x00	; 0
    4e32:	cd b7       	in	r28, 0x3d	; 61
    4e34:	de b7       	in	r29, 0x3e	; 62
    4e36:	eb e0       	ldi	r30, 0x0B	; 11
    4e38:	0c 94 1c 5b 	jmp	0xb638	; 0xb638 <__epilogue_restores__+0xe>

00004e3c <readPage>:
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash write, result = %u\n"), twi->result);
    }
}

void readPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    4e3c:	a0 e0       	ldi	r26, 0x00	; 0
    4e3e:	b0 e0       	ldi	r27, 0x00	; 0
    4e40:	e4 e2       	ldi	r30, 0x24	; 36
    4e42:	f7 e2       	ldi	r31, 0x27	; 39
    4e44:	0c 94 00 5b 	jmp	0xb600	; 0xb600 <__prologue_saves__+0xe>
    4e48:	5c 01       	movw	r10, r24
    4e4a:	6a 01       	movw	r12, r20
    4e4c:	7b 01       	movw	r14, r22
    4e4e:	92 2e       	mov	r9, r18
    4e50:	e8 01       	movw	r28, r16
    uint8_t i;
    
    xputs(PSTR("#"));
    4e52:	87 e1       	ldi	r24, 0x17	; 23
    4e54:	92 e1       	ldi	r25, 0x12	; 18
    4e56:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
    buff[0] = 'g';
    4e5a:	87 e6       	ldi	r24, 0x67	; 103
    4e5c:	88 83       	st	Y, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    4e5e:	bb 27       	eor	r27, r27
    4e60:	af 2d       	mov	r26, r15
    4e62:	9e 2d       	mov	r25, r14
    4e64:	8d 2d       	mov	r24, r13
    4e66:	89 83       	std	Y+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    4e68:	ca 82       	std	Y+2, r12	; 0x02
    buff[3] = psize>>1;
    4e6a:	89 2d       	mov	r24, r9
    4e6c:	86 95       	lsr	r24
    4e6e:	8b 83       	std	Y+3, r24	; 0x03
    buff[4] = 'F';
    4e70:	86 e4       	ldi	r24, 0x46	; 70
    4e72:	8c 83       	std	Y+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], HEADER_SIZE, psize);
    4e74:	c5 01       	movw	r24, r10
    4e76:	60 e7       	ldi	r22, 0x70	; 112
    4e78:	a8 01       	movw	r20, r16
    4e7a:	25 e0       	ldi	r18, 0x05	; 5
    4e7c:	09 2d       	mov	r16, r9
    4e7e:	0e 94 9c 32 	call	0x6538	; 0x6538 <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    4e82:	d5 01       	movw	r26, r10
    4e84:	1d 96       	adiw	r26, 0x0d	; 13
    4e86:	8c 91       	ld	r24, X
    4e88:	1d 97       	sbiw	r26, 0x0d	; 13
    4e8a:	88 23       	and	r24, r24
    4e8c:	d1 f7       	brne	.-12     	; 0x4e82 <readPage+0x46>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    4e8e:	1e 96       	adiw	r26, 0x0e	; 14
    4e90:	8c 91       	ld	r24, X
    4e92:	1e 97       	sbiw	r26, 0x0e	; 14
    4e94:	81 30       	cpi	r24, 0x01	; 1
    4e96:	b9 f0       	breq	.+46     	; 0x4ec6 <readPage+0x8a>
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    4e98:	1e 96       	adiw	r26, 0x0e	; 14
    4e9a:	2c 91       	ld	r18, X
    4e9c:	00 d0       	rcall	.+0      	; 0x4e9e <readPage+0x62>
    4e9e:	0f 92       	push	r0
    4ea0:	ed b7       	in	r30, 0x3d	; 61
    4ea2:	fe b7       	in	r31, 0x3e	; 62
    4ea4:	31 96       	adiw	r30, 0x01	; 1
    4ea6:	8a ef       	ldi	r24, 0xFA	; 250
    4ea8:	91 e1       	ldi	r25, 0x11	; 17
    4eaa:	ad b7       	in	r26, 0x3d	; 61
    4eac:	be b7       	in	r27, 0x3e	; 62
    4eae:	11 96       	adiw	r26, 0x01	; 1
    4eb0:	8d 93       	st	X+, r24
    4eb2:	9c 93       	st	X, r25
    4eb4:	12 97       	sbiw	r26, 0x02	; 2
    4eb6:	22 83       	std	Z+2, r18	; 0x02
    4eb8:	13 82       	std	Z+3, r1	; 0x03
    4eba:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    4ebe:	0f 90       	pop	r0
    4ec0:	0f 90       	pop	r0
    4ec2:	0f 90       	pop	r0
    4ec4:	0f 90       	pop	r0
    4ec6:	de 01       	movw	r26, r28
    4ec8:	90 e0       	ldi	r25, 0x00	; 0
    4eca:	0a c0       	rjmp	.+20     	; 0x4ee0 <readPage+0xa4>
    }
    
    for (i = 0; i < psize; i++) {
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    4ecc:	e5 01       	movw	r28, r10
    4ece:	ed 81       	ldd	r30, Y+5	; 0x05
    4ed0:	fe 81       	ldd	r31, Y+6	; 0x06
    4ed2:	e9 0f       	add	r30, r25
    4ed4:	f1 1d       	adc	r31, r1
    4ed6:	80 81       	ld	r24, Z
    4ed8:	14 96       	adiw	r26, 0x04	; 4
    4eda:	8c 93       	st	X, r24
    4edc:	14 97       	sbiw	r26, 0x04	; 4
    }
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    }
    
    for (i = 0; i < psize; i++) {
    4ede:	9f 5f       	subi	r25, 0xFF	; 255
    4ee0:	11 96       	adiw	r26, 0x01	; 1
    4ee2:	99 15       	cp	r25, r9
    4ee4:	98 f3       	brcs	.-26     	; 0x4ecc <readPage+0x90>
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    }
}
    4ee6:	cd b7       	in	r28, 0x3d	; 61
    4ee8:	de b7       	in	r29, 0x3e	; 62
    4eea:	eb e0       	ldi	r30, 0x0B	; 11
    4eec:	0c 94 1c 5b 	jmp	0xb638	; 0xb638 <__epilogue_restores__+0xe>

00004ef0 <progPage>:
		}
		ledToggle(1);  //toggle LED, once per triangle wave pulse
	}	 	
}

void progPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    4ef0:	a0 e0       	ldi	r26, 0x00	; 0
    4ef2:	b0 e0       	ldi	r27, 0x00	; 0
    4ef4:	ee e7       	ldi	r30, 0x7E	; 126
    4ef6:	f7 e2       	ldi	r31, 0x27	; 39
    4ef8:	0c 94 02 5b 	jmp	0xb604	; 0xb604 <__prologue_saves__+0x12>
    4efc:	ec 01       	movw	r28, r24
    4efe:	6a 01       	movw	r12, r20
    4f00:	7b 01       	movw	r14, r22
    4f02:	b2 2e       	mov	r11, r18
    xputs(PSTR("#"));
    4f04:	87 e3       	ldi	r24, 0x37	; 55
    4f06:	92 e1       	ldi	r25, 0x12	; 18
    4f08:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
//  xprintf(PSTR("flash page write: 0x%lX 0x%X\n"), paddr, psize);
    buff[0] = 'B';
    4f0c:	82 e4       	ldi	r24, 0x42	; 66
    4f0e:	d8 01       	movw	r26, r16
    4f10:	8c 93       	st	X, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    4f12:	bb 27       	eor	r27, r27
    4f14:	af 2d       	mov	r26, r15
    4f16:	9e 2d       	mov	r25, r14
    4f18:	8d 2d       	mov	r24, r13
    4f1a:	f8 01       	movw	r30, r16
    4f1c:	81 83       	std	Z+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    4f1e:	c2 82       	std	Z+2, r12	; 0x02
    buff[3] = psize>>1;
    4f20:	8b 2d       	mov	r24, r11
    4f22:	86 95       	lsr	r24
    4f24:	83 83       	std	Z+3, r24	; 0x03
    buff[4] = 'F';
    4f26:	86 e4       	ldi	r24, 0x46	; 70
    4f28:	84 83       	std	Z+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], psize+HEADER_SIZE, 0);
    4f2a:	f5 e0       	ldi	r31, 0x05	; 5
    4f2c:	bf 0e       	add	r11, r31
    4f2e:	ce 01       	movw	r24, r28
    4f30:	60 e7       	ldi	r22, 0x70	; 112
    4f32:	a8 01       	movw	r20, r16
    4f34:	2b 2d       	mov	r18, r11
    4f36:	00 e0       	ldi	r16, 0x00	; 0
    4f38:	0e 94 9c 32 	call	0x6538	; 0x6538 <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    4f3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f3e:	88 23       	and	r24, r24
    4f40:	e9 f7       	brne	.-6      	; 0x4f3c <progPage+0x4c>
        /* Wait until transaction is complete. */
        //xputs(PSTR("I am waiting.\n"));
    }
    if (twi->result != TWIM_RESULT_OK) {
    4f42:	8e 85       	ldd	r24, Y+14	; 0x0e
    4f44:	81 30       	cpi	r24, 0x01	; 1
    4f46:	b1 f0       	breq	.+44     	; 0x4f74 <progPage+0x84>
        xprintf(PSTR("Bad flash write, result = %u\n"), twi->result);
    4f48:	2e 85       	ldd	r18, Y+14	; 0x0e
    4f4a:	00 d0       	rcall	.+0      	; 0x4f4c <progPage+0x5c>
    4f4c:	0f 92       	push	r0
    4f4e:	ed b7       	in	r30, 0x3d	; 61
    4f50:	fe b7       	in	r31, 0x3e	; 62
    4f52:	31 96       	adiw	r30, 0x01	; 1
    4f54:	89 e1       	ldi	r24, 0x19	; 25
    4f56:	92 e1       	ldi	r25, 0x12	; 18
    4f58:	ad b7       	in	r26, 0x3d	; 61
    4f5a:	be b7       	in	r27, 0x3e	; 62
    4f5c:	11 96       	adiw	r26, 0x01	; 1
    4f5e:	8d 93       	st	X+, r24
    4f60:	9c 93       	st	X, r25
    4f62:	12 97       	sbiw	r26, 0x02	; 2
    4f64:	22 83       	std	Z+2, r18	; 0x02
    4f66:	13 82       	std	Z+3, r1	; 0x03
    4f68:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    4f6c:	0f 90       	pop	r0
    4f6e:	0f 90       	pop	r0
    4f70:	0f 90       	pop	r0
    4f72:	0f 90       	pop	r0
    }
}
    4f74:	cd b7       	in	r28, 0x3d	; 61
    4f76:	de b7       	in	r29, 0x3e	; 62
    4f78:	e9 e0       	ldi	r30, 0x09	; 9
    4f7a:	0c 94 1e 5b 	jmp	0xb63c	; 0xb63c <__epilogue_restores__+0x12>

00004f7e <ihex_readrec>:
    }
    xprintf(PSTR("%S\n"), p);
}

static
        int16_t ihex_readrec(ihexrec_t * ihex, char * rec) {
    4f7e:	af e0       	ldi	r26, 0x0F	; 15
    4f80:	b0 e0       	ldi	r27, 0x00	; 0
    4f82:	e5 ec       	ldi	r30, 0xC5	; 197
    4f84:	f7 e2       	ldi	r31, 0x27	; 39
    4f86:	0c 94 f9 5a 	jmp	0xb5f2	; 0xb5f2 <__prologue_saves__>
    4f8a:	7c 01       	movw	r14, r24
    4f8c:	8b 01       	movw	r16, r22
    int offset, len;
    char * e;
    unsigned char cksum;
    int rc;
    
    len    = strlen(rec);
    4f8e:	db 01       	movw	r26, r22
    4f90:	0d 90       	ld	r0, X+
    4f92:	00 20       	and	r0, r0
    4f94:	e9 f7       	brne	.-6      	; 0x4f90 <ihex_readrec+0x12>
    4f96:	6d 01       	movw	r12, r26
    4f98:	08 94       	sec
    4f9a:	c1 08       	sbc	r12, r1
    4f9c:	d1 08       	sbc	r13, r1
    4f9e:	c6 1a       	sub	r12, r22
    4fa0:	d7 0a       	sbc	r13, r23
    offset = 1;
    cksum  = 0;
    
    /* reclen */
    if (offset + 2 > len)
    4fa2:	b3 e0       	ldi	r27, 0x03	; 3
    4fa4:	cb 16       	cp	r12, r27
    4fa6:	d1 04       	cpc	r13, r1
    4fa8:	0c f4       	brge	.+2      	; 0x4fac <ihex_readrec+0x2e>
    4faa:	f2 c0       	rjmp	.+484    	; 0x5190 <ihex_readrec+0x212>
        return -1;
    for (i=0; i<2; i++)
        buf[i] = rec[offset++];
    4fac:	fb 01       	movw	r30, r22
    4fae:	81 81       	ldd	r24, Z+1	; 0x01
    4fb0:	8b 83       	std	Y+3, r24	; 0x03
    4fb2:	82 81       	ldd	r24, Z+2	; 0x02
    4fb4:	8c 83       	std	Y+4, r24	; 0x04
    buf[i] = 0;
    4fb6:	1d 82       	std	Y+5, r1	; 0x05
    ihex->reclen = strtoul(buf, &e, 16);
    4fb8:	ce 01       	movw	r24, r28
    4fba:	03 96       	adiw	r24, 0x03	; 3
    4fbc:	8c 87       	std	Y+12, r24	; 0x0c
    4fbe:	9d 87       	std	Y+13, r25	; 0x0d
    4fc0:	ce 01       	movw	r24, r28
    4fc2:	03 96       	adiw	r24, 0x03	; 3
    4fc4:	be 01       	movw	r22, r28
    4fc6:	6f 5f       	subi	r22, 0xFF	; 255
    4fc8:	7f 4f       	sbci	r23, 0xFF	; 255
    4fca:	40 e1       	ldi	r20, 0x10	; 16
    4fcc:	50 e0       	ldi	r21, 0x00	; 0
    4fce:	0e 94 3b 5c 	call	0xb876	; 0xb876 <strtoul>
    4fd2:	d7 01       	movw	r26, r14
    4fd4:	6c 93       	st	X, r22
    if (e == buf || *e != 0)
    4fd6:	e9 81       	ldd	r30, Y+1	; 0x01
    4fd8:	fa 81       	ldd	r31, Y+2	; 0x02
    4fda:	8c 85       	ldd	r24, Y+12	; 0x0c
    4fdc:	9d 85       	ldd	r25, Y+13	; 0x0d
    4fde:	e8 17       	cp	r30, r24
    4fe0:	f9 07       	cpc	r31, r25
    4fe2:	09 f4       	brne	.+2      	; 0x4fe6 <ihex_readrec+0x68>
    4fe4:	d5 c0       	rjmp	.+426    	; 0x5190 <ihex_readrec+0x212>
    4fe6:	80 81       	ld	r24, Z
    4fe8:	88 23       	and	r24, r24
    4fea:	09 f0       	breq	.+2      	; 0x4fee <ihex_readrec+0x70>
    4fec:	d1 c0       	rjmp	.+418    	; 0x5190 <ihex_readrec+0x212>
        return -1;
    
    /* load offset */
    if (offset + 4 > len)
    4fee:	97 e0       	ldi	r25, 0x07	; 7
    4ff0:	c9 16       	cp	r12, r25
    4ff2:	d1 04       	cpc	r13, r1
    4ff4:	0c f4       	brge	.+2      	; 0x4ff8 <ihex_readrec+0x7a>
    4ff6:	cc c0       	rjmp	.+408    	; 0x5190 <ihex_readrec+0x212>
        return -1;
    for (i=0; i<4; i++)
        buf[i] = rec[offset++];
    4ff8:	d8 01       	movw	r26, r16
    4ffa:	13 96       	adiw	r26, 0x03	; 3
    4ffc:	8c 91       	ld	r24, X
    4ffe:	13 97       	sbiw	r26, 0x03	; 3
    5000:	8b 83       	std	Y+3, r24	; 0x03
    5002:	14 96       	adiw	r26, 0x04	; 4
    5004:	8c 91       	ld	r24, X
    5006:	14 97       	sbiw	r26, 0x04	; 4
    5008:	8c 83       	std	Y+4, r24	; 0x04
    500a:	15 96       	adiw	r26, 0x05	; 5
    500c:	8c 91       	ld	r24, X
    500e:	15 97       	sbiw	r26, 0x05	; 5
    5010:	8d 83       	std	Y+5, r24	; 0x05
    5012:	16 96       	adiw	r26, 0x06	; 6
    5014:	8c 91       	ld	r24, X
    5016:	8e 83       	std	Y+6, r24	; 0x06
    buf[i] = 0;
    5018:	1f 82       	std	Y+7, r1	; 0x07
    ihex->loadofs = strtoul(buf, &e, 16);
    501a:	ce 01       	movw	r24, r28
    501c:	03 96       	adiw	r24, 0x03	; 3
    501e:	be 01       	movw	r22, r28
    5020:	6f 5f       	subi	r22, 0xFF	; 255
    5022:	7f 4f       	sbci	r23, 0xFF	; 255
    5024:	40 e1       	ldi	r20, 0x10	; 16
    5026:	50 e0       	ldi	r21, 0x00	; 0
    5028:	0e 94 3b 5c 	call	0xb876	; 0xb876 <strtoul>
    502c:	f7 01       	movw	r30, r14
    502e:	61 83       	std	Z+1, r22	; 0x01
    5030:	72 83       	std	Z+2, r23	; 0x02
    if (e == buf || *e != 0)
    5032:	e9 81       	ldd	r30, Y+1	; 0x01
    5034:	fa 81       	ldd	r31, Y+2	; 0x02
    5036:	8c 85       	ldd	r24, Y+12	; 0x0c
    5038:	9d 85       	ldd	r25, Y+13	; 0x0d
    503a:	e8 17       	cp	r30, r24
    503c:	f9 07       	cpc	r31, r25
    503e:	09 f4       	brne	.+2      	; 0x5042 <ihex_readrec+0xc4>
    5040:	a7 c0       	rjmp	.+334    	; 0x5190 <ihex_readrec+0x212>
    5042:	80 81       	ld	r24, Z
    5044:	88 23       	and	r24, r24
    5046:	09 f0       	breq	.+2      	; 0x504a <ihex_readrec+0xcc>
    5048:	a3 c0       	rjmp	.+326    	; 0x5190 <ihex_readrec+0x212>
        return -1;
    
    /* record type */
    if (offset + 2 > len)
    504a:	99 e0       	ldi	r25, 0x09	; 9
    504c:	c9 16       	cp	r12, r25
    504e:	d1 04       	cpc	r13, r1
    5050:	0c f4       	brge	.+2      	; 0x5054 <ihex_readrec+0xd6>
    5052:	9e c0       	rjmp	.+316    	; 0x5190 <ihex_readrec+0x212>
        return -1;
    for (i=0; i<2; i++)
        buf[i] = rec[offset++];
    5054:	d8 01       	movw	r26, r16
    5056:	17 96       	adiw	r26, 0x07	; 7
    5058:	8c 91       	ld	r24, X
    505a:	17 97       	sbiw	r26, 0x07	; 7
    505c:	8b 83       	std	Y+3, r24	; 0x03
    505e:	18 96       	adiw	r26, 0x08	; 8
    5060:	8c 91       	ld	r24, X
    5062:	8c 83       	std	Y+4, r24	; 0x04
    buf[i] = 0;
    5064:	1d 82       	std	Y+5, r1	; 0x05
    ihex->rectyp = strtoul(buf, &e, 16);
    5066:	ce 01       	movw	r24, r28
    5068:	03 96       	adiw	r24, 0x03	; 3
    506a:	be 01       	movw	r22, r28
    506c:	6f 5f       	subi	r22, 0xFF	; 255
    506e:	7f 4f       	sbci	r23, 0xFF	; 255
    5070:	40 e1       	ldi	r20, 0x10	; 16
    5072:	50 e0       	ldi	r21, 0x00	; 0
    5074:	0e 94 3b 5c 	call	0xb876	; 0xb876 <strtoul>
    5078:	f7 01       	movw	r30, r14
    507a:	63 83       	std	Z+3, r22	; 0x03
    if (e == buf || *e != 0)
    507c:	e9 81       	ldd	r30, Y+1	; 0x01
    507e:	fa 81       	ldd	r31, Y+2	; 0x02
    5080:	8c 85       	ldd	r24, Y+12	; 0x0c
    5082:	9d 85       	ldd	r25, Y+13	; 0x0d
    5084:	e8 17       	cp	r30, r24
    5086:	f9 07       	cpc	r31, r25
    5088:	09 f4       	brne	.+2      	; 0x508c <ihex_readrec+0x10e>
    508a:	82 c0       	rjmp	.+260    	; 0x5190 <ihex_readrec+0x212>
    508c:	80 81       	ld	r24, Z
    508e:	88 23       	and	r24, r24
    5090:	09 f0       	breq	.+2      	; 0x5094 <ihex_readrec+0x116>
    5092:	7e c0       	rjmp	.+252    	; 0x5190 <ihex_readrec+0x212>
        return -1;
    
    cksum = ihex->reclen + ((ihex->loadofs >> 8) & 0x0ff) +
    5094:	d7 01       	movw	r26, r14
    5096:	11 96       	adiw	r26, 0x01	; 1
    5098:	8c 91       	ld	r24, X
    509a:	11 97       	sbiw	r26, 0x01	; 1
    509c:	12 96       	adiw	r26, 0x02	; 2
    509e:	9c 91       	ld	r25, X
    50a0:	12 97       	sbiw	r26, 0x02	; 2
    50a2:	7c 90       	ld	r7, X
    50a4:	78 0e       	add	r7, r24
    50a6:	79 0e       	add	r7, r25
    50a8:	76 0e       	add	r7, r22
    50aa:	48 01       	movw	r8, r16
    50ac:	17 01       	movw	r2, r14
    50ae:	44 24       	eor	r4, r4
    50b0:	55 24       	eor	r5, r5
    50b2:	b9 e0       	ldi	r27, 0x09	; 9
    50b4:	ab 2e       	mov	r10, r27
    50b6:	b1 2c       	mov	r11, r1
        if (offset + 2 > len)
            return -1;
        for (i=0; i<2; i++)
            buf[i] = rec[offset++];
        buf[i] = 0;
        ihex->data[j] = strtoul(buf, &e, 16);
    50b8:	fe 01       	movw	r30, r28
    50ba:	33 96       	adiw	r30, 0x03	; 3
    50bc:	ee 87       	std	Y+14, r30	; 0x0e
    50be:	ff 87       	std	Y+15, r31	; 0x0f
    50c0:	ce 01       	movw	r24, r28
    50c2:	01 96       	adiw	r24, 0x01	; 1
    50c4:	8b 87       	std	Y+11, r24	; 0x0b
    50c6:	69 2e       	mov	r6, r25
    50c8:	32 c0       	rjmp	.+100    	; 0x512e <ihex_readrec+0x1b0>
    cksum = ihex->reclen + ((ihex->loadofs >> 8) & 0x0ff) +
            (ihex->loadofs & 0x0ff) + ihex->rectyp;
    
    /* data */
    for (j=0; j<ihex->reclen; j++) {
        if (offset + 2 > len)
    50ca:	2c 15       	cp	r18, r12
    50cc:	3d 05       	cpc	r19, r13
    50ce:	0c f0       	brlt	.+2      	; 0x50d2 <ihex_readrec+0x154>
    50d0:	5f c0       	rjmp	.+190    	; 0x5190 <ihex_readrec+0x212>
            return -1;
        for (i=0; i<2; i++)
            buf[i] = rec[offset++];
    50d2:	d4 01       	movw	r26, r8
    50d4:	19 96       	adiw	r26, 0x09	; 9
    50d6:	8c 91       	ld	r24, X
    50d8:	19 97       	sbiw	r26, 0x09	; 9
    50da:	8b 83       	std	Y+3, r24	; 0x03
    50dc:	1a 96       	adiw	r26, 0x0a	; 10
    50de:	8c 91       	ld	r24, X
    50e0:	8c 83       	std	Y+4, r24	; 0x04
    50e2:	e2 e0       	ldi	r30, 0x02	; 2
    50e4:	f0 e0       	ldi	r31, 0x00	; 0
    50e6:	ae 0e       	add	r10, r30
    50e8:	bf 1e       	adc	r11, r31
        buf[i] = 0;
    50ea:	1d 82       	std	Y+5, r1	; 0x05
        ihex->data[j] = strtoul(buf, &e, 16);
    50ec:	ce 01       	movw	r24, r28
    50ee:	03 96       	adiw	r24, 0x03	; 3
    50f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    50f2:	76 2d       	mov	r23, r6
    50f4:	40 e1       	ldi	r20, 0x10	; 16
    50f6:	50 e0       	ldi	r21, 0x00	; 0
    50f8:	0e 94 3b 5c 	call	0xb876	; 0xb876 <strtoul>
    50fc:	d1 01       	movw	r26, r2
    50fe:	14 96       	adiw	r26, 0x04	; 4
    5100:	6c 93       	st	X, r22
        if (e == buf || *e != 0)
    5102:	e9 81       	ldd	r30, Y+1	; 0x01
    5104:	fa 81       	ldd	r31, Y+2	; 0x02
    5106:	8e 85       	ldd	r24, Y+14	; 0x0e
    5108:	9f 85       	ldd	r25, Y+15	; 0x0f
    510a:	e8 17       	cp	r30, r24
    510c:	f9 07       	cpc	r31, r25
    510e:	09 f4       	brne	.+2      	; 0x5112 <ihex_readrec+0x194>
    5110:	3f c0       	rjmp	.+126    	; 0x5190 <ihex_readrec+0x212>
    5112:	a2 e0       	ldi	r26, 0x02	; 2
    5114:	b0 e0       	ldi	r27, 0x00	; 0
    5116:	8a 0e       	add	r8, r26
    5118:	9b 1e       	adc	r9, r27
    511a:	08 94       	sec
    511c:	21 1c       	adc	r2, r1
    511e:	31 1c       	adc	r3, r1
    5120:	80 81       	ld	r24, Z
    5122:	88 23       	and	r24, r24
    5124:	a9 f5       	brne	.+106    	; 0x5190 <ihex_readrec+0x212>
            return -1;
        cksum += ihex->data[j];
    5126:	76 0e       	add	r7, r22
    
    cksum = ihex->reclen + ((ihex->loadofs >> 8) & 0x0ff) +
            (ihex->loadofs & 0x0ff) + ihex->rectyp;
    
    /* data */
    for (j=0; j<ihex->reclen; j++) {
    5128:	08 94       	sec
    512a:	41 1c       	adc	r4, r1
    512c:	51 1c       	adc	r5, r1
    512e:	f7 01       	movw	r30, r14
    5130:	80 81       	ld	r24, Z
    5132:	90 e0       	ldi	r25, 0x00	; 0
    5134:	95 01       	movw	r18, r10
    5136:	2f 5f       	subi	r18, 0xFF	; 255
    5138:	3f 4f       	sbci	r19, 0xFF	; 255
    513a:	48 16       	cp	r4, r24
    513c:	59 06       	cpc	r5, r25
    513e:	2c f2       	brlt	.-118    	; 0x50ca <ihex_readrec+0x14c>
            return -1;
        cksum += ihex->data[j];
    }
    
    /* cksum */
    if (offset + 2 > len)
    5140:	2c 15       	cp	r18, r12
    5142:	3d 05       	cpc	r19, r13
    5144:	2c f5       	brge	.+74     	; 0x5190 <ihex_readrec+0x212>
        return -1;
    for (i=0; i<2; i++)
        buf[i] = rec[offset++];
    5146:	f8 01       	movw	r30, r16
    5148:	ea 0d       	add	r30, r10
    514a:	fb 1d       	adc	r31, r11
    514c:	80 81       	ld	r24, Z
    514e:	8b 83       	std	Y+3, r24	; 0x03
    5150:	81 81       	ldd	r24, Z+1	; 0x01
    5152:	8c 83       	std	Y+4, r24	; 0x04
    buf[i] = 0;
    5154:	1d 82       	std	Y+5, r1	; 0x05
    ihex->cksum = strtoul(buf, &e, 16);
    5156:	8e 01       	movw	r16, r28
    5158:	0d 5f       	subi	r16, 0xFD	; 253
    515a:	1f 4f       	sbci	r17, 0xFF	; 255
    515c:	c8 01       	movw	r24, r16
    515e:	be 01       	movw	r22, r28
    5160:	6f 5f       	subi	r22, 0xFF	; 255
    5162:	7f 4f       	sbci	r23, 0xFF	; 255
    5164:	40 e1       	ldi	r20, 0x10	; 16
    5166:	50 e0       	ldi	r21, 0x00	; 0
    5168:	0e 94 3b 5c 	call	0xb876	; 0xb876 <strtoul>
    516c:	84 e0       	ldi	r24, 0x04	; 4
    516e:	91 e0       	ldi	r25, 0x01	; 1
    5170:	e8 0e       	add	r14, r24
    5172:	f9 1e       	adc	r15, r25
    5174:	d7 01       	movw	r26, r14
    5176:	6c 93       	st	X, r22
    if (e == buf || *e != 0)
    5178:	e9 81       	ldd	r30, Y+1	; 0x01
    517a:	fa 81       	ldd	r31, Y+2	; 0x02
    517c:	e0 17       	cp	r30, r16
    517e:	f1 07       	cpc	r31, r17
    5180:	39 f0       	breq	.+14     	; 0x5190 <ihex_readrec+0x212>
    5182:	80 81       	ld	r24, Z
    5184:	88 23       	and	r24, r24
    5186:	21 f4       	brne	.+8      	; 0x5190 <ihex_readrec+0x212>
        return -1;
    
    rc = -cksum & 0x000000ff;
    5188:	71 94       	neg	r7
    518a:	27 2d       	mov	r18, r7
    518c:	30 e0       	ldi	r19, 0x00	; 0
    518e:	02 c0       	rjmp	.+4      	; 0x5194 <ihex_readrec+0x216>
    
    return rc;
    5190:	2f ef       	ldi	r18, 0xFF	; 255
    5192:	3f ef       	ldi	r19, 0xFF	; 255
}
    5194:	c9 01       	movw	r24, r18
    5196:	2f 96       	adiw	r28, 0x0f	; 15
    5198:	e2 e1       	ldi	r30, 0x12	; 18
    519a:	0c 94 15 5b 	jmp	0xb62a	; 0xb62a <__epilogue_restores__>

0000519e <eeprom_panel>:
    }else{
        xprintf(PSTR("Cannot find the panel %d.\n"), panel_num);
    }
};

void eeprom_panel(uint8_t panel_num) {
    519e:	a0 e9       	ldi	r26, 0x90	; 144
    51a0:	b2 e0       	ldi	r27, 0x02	; 2
    51a2:	e5 ed       	ldi	r30, 0xD5	; 213
    51a4:	f8 e2       	ldi	r31, 0x28	; 40
    51a6:	0c 94 f9 5a 	jmp	0xb5f2	; 0xb5f2 <__prologue_saves__>
    51aa:	08 2f       	mov	r16, r24
    uint16_t len, i;
    TWI_Master_t *twi;
    uint8_t ch;
    uint8_t eepromBuff[256];
    
    ch = chMap[panel_num];
    51ac:	e8 2e       	mov	r14, r24
    51ae:	ff 24       	eor	r15, r15
    51b0:	f7 01       	movw	r30, r14
    51b2:	ea 5c       	subi	r30, 0xCA	; 202
    51b4:	f8 4d       	sbci	r31, 0xD8	; 216
    51b6:	e0 81       	ld	r30, Z
    if (ch != 0){
    51b8:	ee 23       	and	r30, r30
    51ba:	09 f4       	brne	.+2      	; 0x51be <eeprom_panel+0x20>
    51bc:	cd c2       	rjmp	.+1434   	; 0x5758 <eeprom_panel+0x5ba>
        
        switch (ch) {
    51be:	e3 30       	cpi	r30, 0x03	; 3
    51c0:	71 f0       	breq	.+28     	; 0x51de <eeprom_panel+0x40>
    51c2:	e4 30       	cpi	r30, 0x04	; 4
    51c4:	89 f0       	breq	.+34     	; 0x51e8 <eeprom_panel+0x4a>
    51c6:	e2 30       	cpi	r30, 0x02	; 2
    51c8:	29 f4       	brne	.+10     	; 0x51d4 <eeprom_panel+0x36>
    51ca:	80 e9       	ldi	r24, 0x90	; 144
    51cc:	88 2e       	mov	r8, r24
    51ce:	89 e2       	ldi	r24, 0x29	; 41
    51d0:	98 2e       	mov	r9, r24
    51d2:	0e c0       	rjmp	.+28     	; 0x51f0 <eeprom_panel+0x52>
    51d4:	18 e7       	ldi	r17, 0x78	; 120
    51d6:	81 2e       	mov	r8, r17
    51d8:	16 e2       	ldi	r17, 0x26	; 38
    51da:	91 2e       	mov	r9, r17
    51dc:	09 c0       	rjmp	.+18     	; 0x51f0 <eeprom_panel+0x52>
    51de:	b6 e2       	ldi	r27, 0x26	; 38
    51e0:	8b 2e       	mov	r8, r27
    51e2:	b7 e2       	ldi	r27, 0x27	; 39
    51e4:	9b 2e       	mov	r9, r27
    51e6:	04 c0       	rjmp	.+8      	; 0x51f0 <eeprom_panel+0x52>
            case 2:
                twi = &twi2;
                break;
            case 3:
                twi = &twi3;
                break;
    51e8:	ac e9       	ldi	r26, 0x9C	; 156
    51ea:	8a 2e       	mov	r8, r26
    51ec:	a5 e2       	ldi	r26, 0x25	; 37
    51ee:	9a 2e       	mov	r9, r26
                twi = &twi1;
                break;
        }
        
        // open the hex file for reading
        res = f_open(&file6, panelEEprom, FA_OPEN_EXISTING | FA_READ);
    51f0:	81 ee       	ldi	r24, 0xE1	; 225
    51f2:	97 e2       	ldi	r25, 0x27	; 39
    51f4:	61 ed       	ldi	r22, 0xD1	; 209
    51f6:	73 e2       	ldi	r23, 0x23	; 35
    51f8:	41 e0       	ldi	r20, 0x01	; 1
    51fa:	0e 94 68 4f 	call	0x9ed0	; 0x9ed0 <f_open>
    51fe:	18 2f       	mov	r17, r24
        if (res != FR_OK) {
    5200:	88 23       	and	r24, r24
    5202:	49 f0       	breq	.+18     	; 0x5216 <eeprom_panel+0x78>
            // could'n open the file
            xputs(PSTR("Error f_open in eeprom.hex.\n"));
    5204:	86 e8       	ldi	r24, 0x86	; 134
    5206:	9e e0       	ldi	r25, 0x0E	; 14
    5208:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
            put_rc(res);
    520c:	81 2f       	mov	r24, r17
    520e:	90 e0       	ldi	r25, 0x00	; 0
    5210:	0e 94 9f 25 	call	0x4b3e	; 0x4b3e <put_rc>
    5214:	3d c0       	rjmp	.+122    	; 0x5290 <eeprom_panel+0xf2>
            } else {
                // use cmd reset (assumes panel firmware already loaded)
                //i2cMasterSend(panel_num, 2, RESET);
                
                // use cmd reset (assumes panel firmware already loaded)
                xprintf(PSTR("eeprom panel %u.\n"), panel_num);
    5216:	00 d0       	rcall	.+0      	; 0x5218 <eeprom_panel+0x7a>
    5218:	0f 92       	push	r0
    521a:	84 e7       	ldi	r24, 0x74	; 116
    521c:	9e e0       	ldi	r25, 0x0E	; 14
    521e:	ad b7       	in	r26, 0x3d	; 61
    5220:	be b7       	in	r27, 0x3e	; 62
    5222:	11 96       	adiw	r26, 0x01	; 1
    5224:	8d 93       	st	X+, r24
    5226:	9c 93       	st	X, r25
    5228:	12 97       	sbiw	r26, 0x02	; 2
    522a:	13 96       	adiw	r26, 0x03	; 3
    522c:	ed 92       	st	X+, r14
    522e:	fc 92       	st	X, r15
    5230:	14 97       	sbiw	r26, 0x04	; 4
    5232:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
                pagebuff[0] = 0x00;
    5236:	19 82       	std	Y+1, r1	; 0x01
                pagebuff[1] = 0x01;
    5238:	81 e0       	ldi	r24, 0x01	; 1
    523a:	8a 83       	std	Y+2, r24	; 0x02
                TWI_MasterWriteRead(twi, panel_num, &pagebuff[0], 2, 0);
    523c:	0f 90       	pop	r0
    523e:	0f 90       	pop	r0
    5240:	0f 90       	pop	r0
    5242:	0f 90       	pop	r0
    5244:	c4 01       	movw	r24, r8
    5246:	60 2f       	mov	r22, r16
    5248:	ae 01       	movw	r20, r28
    524a:	4f 5f       	subi	r20, 0xFF	; 255
    524c:	5f 4f       	sbci	r21, 0xFF	; 255
    524e:	22 e0       	ldi	r18, 0x02	; 2
    5250:	00 e0       	ldi	r16, 0x00	; 0
    5252:	0e 94 9c 32 	call	0x6538	; 0x6538 <TWI_MasterWriteRead>
                while (twi->status != TWIM_STATUS_READY) {
    5256:	f4 01       	movw	r30, r8
    5258:	85 85       	ldd	r24, Z+13	; 0x0d
    525a:	88 23       	and	r24, r24
    525c:	e1 f7       	brne	.-8      	; 0x5256 <eeprom_panel+0xb8>
                    /* Wait until transaction is complete. */
                }
                if (twi->result != TWIM_RESULT_OK) {
    525e:	86 85       	ldd	r24, Z+14	; 0x0e
    5260:	81 30       	cpi	r24, 0x01	; 1
    5262:	b1 f0       	breq	.+44     	; 0x5290 <eeprom_panel+0xf2>
                    xprintf(PSTR("Bad panel reset, result = %u\n"), twi->result);
    5264:	26 85       	ldd	r18, Z+14	; 0x0e
    5266:	00 d0       	rcall	.+0      	; 0x5268 <eeprom_panel+0xca>
    5268:	0f 92       	push	r0
    526a:	ed b7       	in	r30, 0x3d	; 61
    526c:	fe b7       	in	r31, 0x3e	; 62
    526e:	31 96       	adiw	r30, 0x01	; 1
    5270:	86 e5       	ldi	r24, 0x56	; 86
    5272:	9e e0       	ldi	r25, 0x0E	; 14
    5274:	ad b7       	in	r26, 0x3d	; 61
    5276:	be b7       	in	r27, 0x3e	; 62
    5278:	11 96       	adiw	r26, 0x01	; 1
    527a:	8d 93       	st	X+, r24
    527c:	9c 93       	st	X, r25
    527e:	12 97       	sbiw	r26, 0x02	; 2
    5280:	22 83       	std	Z+2, r18	; 0x02
    5282:	13 82       	std	Z+3, r1	; 0x03
    5284:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    5288:	0f 90       	pop	r0
    528a:	0f 90       	pop	r0
    528c:	0f 90       	pop	r0
    528e:	0f 90       	pop	r0
    5290:	88 e8       	ldi	r24, 0x88	; 136
    5292:	93 e1       	ldi	r25, 0x13	; 19
    5294:	20 e2       	ldi	r18, 0x20	; 32
    5296:	33 e0       	ldi	r19, 0x03	; 3
    5298:	f9 01       	movw	r30, r18
    529a:	31 97       	sbiw	r30, 0x01	; 1
    529c:	f1 f7       	brne	.-4      	; 0x529a <eeprom_panel+0xfc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    529e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52a0:	d9 f7       	brne	.-10     	; 0x5298 <eeprom_panel+0xfa>
        _delay_ms(500); // wait .5 sec for the panel to come out of reset
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
    52a2:	89 e4       	ldi	r24, 0x49	; 73
    52a4:	9e e0       	ldi	r25, 0x0E	; 14
    52a6:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
    52aa:	0f ef       	ldi	r16, 0xFF	; 255
    52ac:	1f ef       	ldi	r17, 0xFF	; 255
    52ae:	cc 24       	eor	r12, r12
    52b0:	dd 24       	eor	r13, r13
    52b2:	66 24       	eor	r6, r6
    52b4:	77 24       	eor	r7, r7
        while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
    52b6:	f6 e8       	ldi	r31, 0x86	; 134
    52b8:	2f 2e       	mov	r2, r31
    52ba:	31 2c       	mov	r3, r1
    52bc:	2c 0e       	add	r2, r28
    52be:	3d 1e       	adc	r3, r29
            len = strlen(eepromBuff);
            if (eepromBuff[len-1] == '\n')
                eepromBuff[--len] = 0;
            if (eepromBuff[0] != ':')
                continue;
            rc = ihex_readrec(&ihex, eepromBuff);
    52c0:	e6 e8       	ldi	r30, 0x86	; 134
    52c2:	4e 2e       	mov	r4, r30
    52c4:	e1 e0       	ldi	r30, 0x01	; 1
    52c6:	5e 2e       	mov	r5, r30
    52c8:	4c 0e       	add	r4, r28
    52ca:	5d 1e       	adc	r5, r29
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    52cc:	f2 01       	movw	r30, r4
    52ce:	34 96       	adiw	r30, 0x04	; 4
    52d0:	c3 57       	subi	r28, 0x73	; 115
    52d2:	dd 4f       	sbci	r29, 0xFD	; 253
    52d4:	e8 83       	st	Y, r30
    52d6:	f9 83       	std	Y+1, r31	; 0x01
    52d8:	cd 58       	subi	r28, 0x8D	; 141
    52da:	d2 40       	sbci	r29, 0x02	; 2
    52dc:	cb c0       	rjmp	.+406    	; 0x5474 <eeprom_panel+0x2d6>
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
            lineno++;
    52de:	08 94       	sec
    52e0:	61 1c       	adc	r6, r1
    52e2:	71 1c       	adc	r7, r1
            len = strlen(eepromBuff);
    52e4:	f1 01       	movw	r30, r2
    52e6:	01 90       	ld	r0, Z+
    52e8:	00 20       	and	r0, r0
    52ea:	e9 f7       	brne	.-6      	; 0x52e6 <eeprom_panel+0x148>
            if (eepromBuff[len-1] == '\n')
    52ec:	32 97       	sbiw	r30, 0x02	; 2
    52ee:	80 81       	ld	r24, Z
    52f0:	8a 30       	cpi	r24, 0x0A	; 10
    52f2:	09 f4       	brne	.+2      	; 0x52f6 <eeprom_panel+0x158>
                eepromBuff[--len] = 0;
    52f4:	10 82       	st	Z, r1
            if (eepromBuff[0] != ':')
    52f6:	d1 01       	movw	r26, r2
    52f8:	8c 91       	ld	r24, X
    52fa:	8a 33       	cpi	r24, 0x3A	; 58
    52fc:	09 f0       	breq	.+2      	; 0x5300 <eeprom_panel+0x162>
    52fe:	ba c0       	rjmp	.+372    	; 0x5474 <eeprom_panel+0x2d6>
                continue;
            rc = ihex_readrec(&ihex, eepromBuff);
    5300:	c2 01       	movw	r24, r4
    5302:	b1 01       	movw	r22, r2
    5304:	0e 94 bf 27 	call	0x4f7e	; 0x4f7e <ihex_readrec>
    5308:	f8 2e       	mov	r15, r24
            if (rc < 0) {
                xprintf(PSTR("invalid record at line %d of eeprom.hex.\n"), lineno);
                break;
            } else if (rc != ihex.cksum) {
    530a:	c6 57       	subi	r28, 0x76	; 118
    530c:	dd 4f       	sbci	r29, 0xFD	; 253
    530e:	88 81       	ld	r24, Y
    5310:	ca 58       	subi	r28, 0x8A	; 138
    5312:	d2 40       	sbci	r29, 0x02	; 2
    5314:	f8 16       	cp	r15, r24
    5316:	19 f1       	breq	.+70     	; 0x535e <eeprom_panel+0x1c0>
                xprintf(PSTR("ERROR: checksum mismatch at line %d of eeprom.hex.\n"), lineno);
    5318:	00 d0       	rcall	.+0      	; 0x531a <eeprom_panel+0x17c>
    531a:	0f 92       	push	r0
    531c:	85 e1       	ldi	r24, 0x15	; 21
    531e:	9e e0       	ldi	r25, 0x0E	; 14
    5320:	ed b7       	in	r30, 0x3d	; 61
    5322:	fe b7       	in	r31, 0x3e	; 62
    5324:	81 83       	std	Z+1, r24	; 0x01
    5326:	92 83       	std	Z+2, r25	; 0x02
    5328:	63 82       	std	Z+3, r6	; 0x03
    532a:	74 82       	std	Z+4, r7	; 0x04
    532c:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
                xprintf(PSTR("checksum=0x%02x, computed checksum=0x%02x\n"), ihex.cksum, rc);
    5330:	0f 92       	push	r0
    5332:	0f 92       	push	r0
    5334:	ed b7       	in	r30, 0x3d	; 61
    5336:	fe b7       	in	r31, 0x3e	; 62
    5338:	31 96       	adiw	r30, 0x01	; 1
    533a:	8a ee       	ldi	r24, 0xEA	; 234
    533c:	9d e0       	ldi	r25, 0x0D	; 13
    533e:	ad b7       	in	r26, 0x3d	; 61
    5340:	be b7       	in	r27, 0x3e	; 62
    5342:	11 96       	adiw	r26, 0x01	; 1
    5344:	8d 93       	st	X+, r24
    5346:	9c 93       	st	X, r25
    5348:	12 97       	sbiw	r26, 0x02	; 2
    534a:	c6 57       	subi	r28, 0x76	; 118
    534c:	dd 4f       	sbci	r29, 0xFD	; 253
    534e:	88 81       	ld	r24, Y
    5350:	ca 58       	subi	r28, 0x8A	; 138
    5352:	d2 40       	sbci	r29, 0x02	; 2
    5354:	82 83       	std	Z+2, r24	; 0x02
    5356:	13 82       	std	Z+3, r1	; 0x03
    5358:	f4 82       	std	Z+4, r15	; 0x04
    535a:	15 82       	std	Z+5, r1	; 0x05
    535c:	82 c0       	rjmp	.+260    	; 0x5462 <eeprom_panel+0x2c4>
                break;
            } else {
                if (ihex.rectyp == 0) {
    535e:	d2 01       	movw	r26, r4
    5360:	13 96       	adiw	r26, 0x03	; 3
    5362:	2c 91       	ld	r18, X
    5364:	13 97       	sbiw	r26, 0x03	; 3
    5366:	22 23       	and	r18, r18
    5368:	09 f0       	breq	.+2      	; 0x536c <eeprom_panel+0x1ce>
    536a:	53 c0       	rjmp	.+166    	; 0x5412 <eeprom_panel+0x274>
                    // data record
                    nextaddr = ihex.loadofs;
    536c:	11 96       	adiw	r26, 0x01	; 1
    536e:	ed 90       	ld	r14, X+
    5370:	fc 90       	ld	r15, X
    5372:	12 97       	sbiw	r26, 0x02	; 2
                    if ((nextaddr >> PAGE_SIZE_SHIFT) != page) {
    5374:	57 01       	movw	r10, r14
    5376:	aa 0c       	add	r10, r10
    5378:	ab 2c       	mov	r10, r11
    537a:	aa 1c       	adc	r10, r10
    537c:	bb 08       	sbc	r11, r11
    537e:	b1 94       	neg	r11
    5380:	a0 16       	cp	r10, r16
    5382:	b1 06       	cpc	r11, r17
    5384:	c1 f0       	breq	.+48     	; 0x53b6 <eeprom_panel+0x218>
                        // this record is for a different page - check if we need to flush the current page
                        if (pagestartaddr != pageendaddr) {
    5386:	cd 14       	cp	r12, r13
    5388:	91 f0       	breq	.+36     	; 0x53ae <eeprom_panel+0x210>
                            // flush data in page buffer
                            paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                            psize = pageendaddr - pagestartaddr;
                            progEEPage(twi, paddr, psize, &pagebuff[0]);
    538a:	16 95       	lsr	r17
    538c:	10 2f       	mov	r17, r16
    538e:	00 27       	eor	r16, r16
    5390:	17 95       	ror	r17
    5392:	07 95       	ror	r16
    5394:	0c 0d       	add	r16, r12
    5396:	11 1d       	adc	r17, r1
    5398:	a8 01       	movw	r20, r16
    539a:	60 e0       	ldi	r22, 0x00	; 0
    539c:	70 e0       	ldi	r23, 0x00	; 0
    539e:	dc 18       	sub	r13, r12
    53a0:	c4 01       	movw	r24, r8
    53a2:	2d 2d       	mov	r18, r13
    53a4:	8e 01       	movw	r16, r28
    53a6:	0f 5f       	subi	r16, 0xFF	; 255
    53a8:	1f 4f       	sbci	r17, 0xFF	; 255
    53aa:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <progEEPage>
                        }
                        page = (nextaddr >> PAGE_SIZE_SHIFT);
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
    53ae:	5f e7       	ldi	r21, 0x7F	; 127
    53b0:	d5 2e       	mov	r13, r21
    53b2:	de 20       	and	r13, r14
    53b4:	cd 2c       	mov	r12, r13
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
    53b6:	4e 2d       	mov	r20, r14
    53b8:	4f 77       	andi	r20, 0x7F	; 127
    53ba:	4c 15       	cp	r20, r12
    53bc:	08 f4       	brcc	.+2      	; 0x53c0 <eeprom_panel+0x222>
    53be:	c4 2e       	mov	r12, r20
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    53c0:	f2 01       	movw	r30, r4
    53c2:	50 81       	ld	r21, Z
    53c4:	25 2f       	mov	r18, r21
    53c6:	30 e0       	ldi	r19, 0x00	; 0
    53c8:	c3 57       	subi	r28, 0x73	; 115
    53ca:	dd 4f       	sbci	r29, 0xFD	; 253
    53cc:	a8 81       	ld	r26, Y
    53ce:	b9 81       	ldd	r27, Y+1	; 0x01
    53d0:	cd 58       	subi	r28, 0x8D	; 141
    53d2:	d2 40       	sbci	r29, 0x02	; 2
    53d4:	e4 2f       	mov	r30, r20
    53d6:	f0 e0       	ldi	r31, 0x00	; 0
    53d8:	35 96       	adiw	r30, 0x05	; 5
    53da:	81 e0       	ldi	r24, 0x01	; 1
    53dc:	90 e0       	ldi	r25, 0x00	; 0
    53de:	8c 0f       	add	r24, r28
    53e0:	9d 1f       	adc	r25, r29
    53e2:	e8 0f       	add	r30, r24
    53e4:	f9 1f       	adc	r31, r25
    53e6:	2c 5f       	subi	r18, 0xFC	; 252
    53e8:	3f 4f       	sbci	r19, 0xFF	; 255
    53ea:	24 0d       	add	r18, r4
    53ec:	35 1d       	adc	r19, r5
    53ee:	02 c0       	rjmp	.+4      	; 0x53f4 <eeprom_panel+0x256>
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    53f0:	8d 91       	ld	r24, X+
    53f2:	81 93       	st	Z+, r24
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    53f4:	a2 17       	cp	r26, r18
    53f6:	b3 07       	cpc	r27, r19
    53f8:	d9 f7       	brne	.-10     	; 0x53f0 <eeprom_panel+0x252>
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
                    }
                    if ((pageoffset + ihex.reclen) > pageendaddr)
    53fa:	85 2f       	mov	r24, r21
    53fc:	90 e0       	ldi	r25, 0x00	; 0
    53fe:	84 0f       	add	r24, r20
    5400:	91 1d       	adc	r25, r1
    5402:	2d 2d       	mov	r18, r13
    5404:	30 e0       	ldi	r19, 0x00	; 0
    5406:	28 17       	cp	r18, r24
    5408:	39 07       	cpc	r19, r25
    540a:	9c f5       	brge	.+102    	; 0x5472 <eeprom_panel+0x2d4>
                        pageendaddr = pageoffset+ihex.reclen;
    540c:	d4 2e       	mov	r13, r20
    540e:	d5 0e       	add	r13, r21
    5410:	30 c0       	rjmp	.+96     	; 0x5472 <eeprom_panel+0x2d4>
                } else if (ihex.rectyp == 1) {
    5412:	21 30       	cpi	r18, 0x01	; 1
    5414:	a9 f4       	brne	.+42     	; 0x5440 <eeprom_panel+0x2a2>
                    // end of file record
                    if (pagestartaddr != pageendaddr) {
    5416:	cd 14       	cp	r12, r13
    5418:	b9 f1       	breq	.+110    	; 0x5488 <eeprom_panel+0x2ea>
                        // flush the data in page buffer
                        paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                        psize = pageendaddr - pagestartaddr;
                        progEEPage(twi, paddr, psize, &pagebuff[0]);
    541a:	16 95       	lsr	r17
    541c:	10 2f       	mov	r17, r16
    541e:	00 27       	eor	r16, r16
    5420:	17 95       	ror	r17
    5422:	07 95       	ror	r16
    5424:	0c 0d       	add	r16, r12
    5426:	11 1d       	adc	r17, r1
    5428:	a8 01       	movw	r20, r16
    542a:	60 e0       	ldi	r22, 0x00	; 0
    542c:	70 e0       	ldi	r23, 0x00	; 0
    542e:	dc 18       	sub	r13, r12
    5430:	c4 01       	movw	r24, r8
    5432:	2d 2d       	mov	r18, r13
    5434:	8e 01       	movw	r16, r28
    5436:	0f 5f       	subi	r16, 0xFF	; 255
    5438:	1f 4f       	sbci	r17, 0xFF	; 255
    543a:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <progEEPage>
    543e:	24 c0       	rjmp	.+72     	; 0x5488 <eeprom_panel+0x2ea>
                    }
                    break;
                } else {
                    xprintf(PSTR("don't know how to deal with rectype=%d at line %d of eeprom.hex.\n"),
    5440:	00 d0       	rcall	.+0      	; 0x5442 <eeprom_panel+0x2a4>
    5442:	00 d0       	rcall	.+0      	; 0x5444 <eeprom_panel+0x2a6>
    5444:	ed b7       	in	r30, 0x3d	; 61
    5446:	fe b7       	in	r31, 0x3e	; 62
    5448:	31 96       	adiw	r30, 0x01	; 1
    544a:	88 ea       	ldi	r24, 0xA8	; 168
    544c:	9d e0       	ldi	r25, 0x0D	; 13
    544e:	ad b7       	in	r26, 0x3d	; 61
    5450:	be b7       	in	r27, 0x3e	; 62
    5452:	11 96       	adiw	r26, 0x01	; 1
    5454:	8d 93       	st	X+, r24
    5456:	9c 93       	st	X, r25
    5458:	12 97       	sbiw	r26, 0x02	; 2
    545a:	22 83       	std	Z+2, r18	; 0x02
    545c:	13 82       	std	Z+3, r1	; 0x03
    545e:	64 82       	std	Z+4, r6	; 0x04
    5460:	75 82       	std	Z+5, r7	; 0x05
    5462:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    5466:	ed b7       	in	r30, 0x3d	; 61
    5468:	fe b7       	in	r31, 0x3e	; 62
    546a:	36 96       	adiw	r30, 0x06	; 6
    546c:	ed bf       	out	0x3d, r30	; 61
    546e:	fe bf       	out	0x3e, r31	; 62
    5470:	0b c0       	rjmp	.+22     	; 0x5488 <eeprom_panel+0x2ea>
                            ihex.rectyp, lineno);
                    break;
    5472:	85 01       	movw	r16, r10
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
    5474:	c1 01       	movw	r24, r2
    5476:	60 e0       	ldi	r22, 0x00	; 0
    5478:	71 e0       	ldi	r23, 0x01	; 1
    547a:	41 ee       	ldi	r20, 0xE1	; 225
    547c:	57 e2       	ldi	r21, 0x27	; 39
    547e:	0e 94 29 52 	call	0xa452	; 0xa452 <f_gets>
    5482:	89 2b       	or	r24, r25
    5484:	09 f0       	breq	.+2      	; 0x5488 <eeprom_panel+0x2ea>
    5486:	2b cf       	rjmp	.-426    	; 0x52de <eeprom_panel+0x140>
                    break;
                }
            }
        }
        // rewind the the input file to the start for verification
        res = f_lseek(&file6, 0);
    5488:	81 ee       	ldi	r24, 0xE1	; 225
    548a:	97 e2       	ldi	r25, 0x27	; 39
    548c:	40 e0       	ldi	r20, 0x00	; 0
    548e:	50 e0       	ldi	r21, 0x00	; 0
    5490:	60 e0       	ldi	r22, 0x00	; 0
    5492:	70 e0       	ldi	r23, 0x00	; 0
    5494:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <f_lseek>
    5498:	18 2f       	mov	r17, r24
        if (res != FR_OK) {
    549a:	88 23       	and	r24, r24
    549c:	49 f0       	breq	.+18     	; 0x54b0 <eeprom_panel+0x312>
            xputs(PSTR("Error f_lseek in eeprom.hex.\n"));
    549e:	8a e8       	ldi	r24, 0x8A	; 138
    54a0:	9d e0       	ldi	r25, 0x0D	; 13
    54a2:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
            put_rc(res);
    54a6:	81 2f       	mov	r24, r17
    54a8:	90 e0       	ldi	r25, 0x00	; 0
    54aa:	0e 94 9f 25 	call	0x4b3e	; 0x4b3e <put_rc>
    54ae:	2c c1       	rjmp	.+600    	; 0x5708 <eeprom_panel+0x56a>
            // verify the panel data
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
    54b0:	8d e7       	ldi	r24, 0x7D	; 125
    54b2:	9d e0       	ldi	r25, 0x0D	; 13
    54b4:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
    54b8:	cc 24       	eor	r12, r12
    54ba:	ca 94       	dec	r12
    54bc:	dc 2c       	mov	r13, r12
    54be:	00 e0       	ldi	r16, 0x00	; 0
    54c0:	10 e0       	ldi	r17, 0x00	; 0
    54c2:	66 24       	eor	r6, r6
    54c4:	77 24       	eor	r7, r7
            while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
                lineno++;
                len = strlen(eepromBuff);
    54c6:	ce 01       	movw	r24, r28
    54c8:	8a 57       	subi	r24, 0x7A	; 122
    54ca:	9f 4f       	sbci	r25, 0xFF	; 255
    54cc:	c1 57       	subi	r28, 0x71	; 113
    54ce:	dd 4f       	sbci	r29, 0xFD	; 253
    54d0:	88 83       	st	Y, r24
    54d2:	99 83       	std	Y+1, r25	; 0x01
    54d4:	cf 58       	subi	r28, 0x8F	; 143
    54d6:	d2 40       	sbci	r29, 0x02	; 2
                if (eepromBuff[len-1] == '\n')
                    eepromBuff[--len] = 0;
                if (eepromBuff[0] != ':')
                    continue;
                rc = ihex_readrec(&ihex, eepromBuff);
    54d8:	36 e8       	ldi	r19, 0x86	; 134
    54da:	43 2e       	mov	r4, r19
    54dc:	31 e0       	ldi	r19, 0x01	; 1
    54de:	53 2e       	mov	r5, r19
    54e0:	4c 0e       	add	r4, r28
    54e2:	5d 1e       	adc	r5, r29
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    54e4:	d2 01       	movw	r26, r4
    54e6:	14 96       	adiw	r26, 0x04	; 4
    54e8:	c5 57       	subi	r28, 0x75	; 117
    54ea:	dd 4f       	sbci	r29, 0xFD	; 253
    54ec:	a8 83       	st	Y, r26
    54ee:	b9 83       	std	Y+1, r27	; 0x01
    54f0:	cb 58       	subi	r28, 0x8B	; 139
    54f2:	d2 40       	sbci	r29, 0x02	; 2
    54f4:	ff c0       	rjmp	.+510    	; 0x56f4 <eeprom_panel+0x556>
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
            while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
                lineno++;
    54f6:	08 94       	sec
    54f8:	61 1c       	adc	r6, r1
    54fa:	71 1c       	adc	r7, r1
                len = strlen(eepromBuff);
    54fc:	c1 57       	subi	r28, 0x71	; 113
    54fe:	dd 4f       	sbci	r29, 0xFD	; 253
    5500:	e8 81       	ld	r30, Y
    5502:	f9 81       	ldd	r31, Y+1	; 0x01
    5504:	cf 58       	subi	r28, 0x8F	; 143
    5506:	d2 40       	sbci	r29, 0x02	; 2
    5508:	01 90       	ld	r0, Z+
    550a:	00 20       	and	r0, r0
    550c:	e9 f7       	brne	.-6      	; 0x5508 <eeprom_panel+0x36a>
                if (eepromBuff[len-1] == '\n')
    550e:	32 97       	sbiw	r30, 0x02	; 2
    5510:	80 81       	ld	r24, Z
    5512:	8a 30       	cpi	r24, 0x0A	; 10
    5514:	09 f4       	brne	.+2      	; 0x5518 <eeprom_panel+0x37a>
                    eepromBuff[--len] = 0;
    5516:	10 82       	st	Z, r1
                if (eepromBuff[0] != ':')
    5518:	ca 57       	subi	r28, 0x7A	; 122
    551a:	df 4f       	sbci	r29, 0xFF	; 255
    551c:	88 81       	ld	r24, Y
    551e:	c6 58       	subi	r28, 0x86	; 134
    5520:	d0 40       	sbci	r29, 0x00	; 0
    5522:	8a 33       	cpi	r24, 0x3A	; 58
    5524:	09 f0       	breq	.+2      	; 0x5528 <eeprom_panel+0x38a>
    5526:	e6 c0       	rjmp	.+460    	; 0x56f4 <eeprom_panel+0x556>
                    continue;
                rc = ihex_readrec(&ihex, eepromBuff);
    5528:	c2 01       	movw	r24, r4
    552a:	b1 01       	movw	r22, r2
    552c:	0e 94 bf 27 	call	0x4f7e	; 0x4f7e <ihex_readrec>
    5530:	f8 2e       	mov	r15, r24
                if (rc < 0) {
                    xprintf(PSTR("invalid record at line %d of eeprom.hex\n"), lineno);
                    break;
                } else if (rc != ihex.cksum) {
    5532:	c6 57       	subi	r28, 0x76	; 118
    5534:	dd 4f       	sbci	r29, 0xFD	; 253
    5536:	88 81       	ld	r24, Y
    5538:	ca 58       	subi	r28, 0x8A	; 138
    553a:	d2 40       	sbci	r29, 0x02	; 2
    553c:	f8 16       	cp	r15, r24
    553e:	19 f1       	breq	.+70     	; 0x5586 <eeprom_panel+0x3e8>
                    xprintf(PSTR("ERROR: checksum mismatch at line %d of eeprom.hex\n"), lineno);
    5540:	00 d0       	rcall	.+0      	; 0x5542 <eeprom_panel+0x3a4>
    5542:	0f 92       	push	r0
    5544:	8a e4       	ldi	r24, 0x4A	; 74
    5546:	9d e0       	ldi	r25, 0x0D	; 13
    5548:	ed b7       	in	r30, 0x3d	; 61
    554a:	fe b7       	in	r31, 0x3e	; 62
    554c:	81 83       	std	Z+1, r24	; 0x01
    554e:	92 83       	std	Z+2, r25	; 0x02
    5550:	63 82       	std	Z+3, r6	; 0x03
    5552:	74 82       	std	Z+4, r7	; 0x04
    5554:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
                    xprintf(PSTR("checksum=0x%02x, computed checksum=0x%02x\n"), ihex.cksum, rc);
    5558:	0f 92       	push	r0
    555a:	0f 92       	push	r0
    555c:	ed b7       	in	r30, 0x3d	; 61
    555e:	fe b7       	in	r31, 0x3e	; 62
    5560:	31 96       	adiw	r30, 0x01	; 1
    5562:	8f e1       	ldi	r24, 0x1F	; 31
    5564:	9d e0       	ldi	r25, 0x0D	; 13
    5566:	ad b7       	in	r26, 0x3d	; 61
    5568:	be b7       	in	r27, 0x3e	; 62
    556a:	11 96       	adiw	r26, 0x01	; 1
    556c:	8d 93       	st	X+, r24
    556e:	9c 93       	st	X, r25
    5570:	12 97       	sbiw	r26, 0x02	; 2
    5572:	c6 57       	subi	r28, 0x76	; 118
    5574:	dd 4f       	sbci	r29, 0xFD	; 253
    5576:	88 81       	ld	r24, Y
    5578:	ca 58       	subi	r28, 0x8A	; 138
    557a:	d2 40       	sbci	r29, 0x02	; 2
    557c:	82 83       	std	Z+2, r24	; 0x02
    557e:	13 82       	std	Z+3, r1	; 0x03
    5580:	f4 82       	std	Z+4, r15	; 0x04
    5582:	15 82       	std	Z+5, r1	; 0x05
    5584:	ae c0       	rjmp	.+348    	; 0x56e2 <eeprom_panel+0x544>
                    break;
                } else {
                    if (ihex.rectyp == 0) {
    5586:	d2 01       	movw	r26, r4
    5588:	13 96       	adiw	r26, 0x03	; 3
    558a:	2c 91       	ld	r18, X
    558c:	13 97       	sbiw	r26, 0x03	; 3
    558e:	22 23       	and	r18, r18
    5590:	09 f0       	breq	.+2      	; 0x5594 <eeprom_panel+0x3f6>
    5592:	65 c0       	rjmp	.+202    	; 0x565e <eeprom_panel+0x4c0>
                        // data record
                        nextaddr = ihex.loadofs;
    5594:	11 96       	adiw	r26, 0x01	; 1
    5596:	ed 90       	ld	r14, X+
    5598:	fc 90       	ld	r15, X
    559a:	12 97       	sbiw	r26, 0x02	; 2
                        if ((nextaddr >> PAGE_SIZE_SHIFT) != page) {
    559c:	57 01       	movw	r10, r14
    559e:	aa 0c       	add	r10, r10
    55a0:	ab 2c       	mov	r10, r11
    55a2:	aa 1c       	adc	r10, r10
    55a4:	bb 08       	sbc	r11, r11
    55a6:	b1 94       	neg	r11
    55a8:	ac 14       	cp	r10, r12
    55aa:	bd 04       	cpc	r11, r13
    55ac:	49 f1       	breq	.+82     	; 0x5600 <eeprom_panel+0x462>
                            // this record is for a different page - check if we need to flush the current page
                            if (pagestartaddr != pageendaddr) {
    55ae:	01 17       	cp	r16, r17
    55b0:	21 f1       	breq	.+72     	; 0x55fa <eeprom_panel+0x45c>
                                // flush data in page buffer
                                paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                                psize = pageendaddr - pagestartaddr;
                                if (verifyEEPage(twi, paddr, psize, &pagebuff[0])==0) {
    55b2:	a6 01       	movw	r20, r12
    55b4:	56 95       	lsr	r21
    55b6:	54 2f       	mov	r21, r20
    55b8:	44 27       	eor	r20, r20
    55ba:	57 95       	ror	r21
    55bc:	47 95       	ror	r20
    55be:	40 0f       	add	r20, r16
    55c0:	51 1d       	adc	r21, r1
    55c2:	60 e0       	ldi	r22, 0x00	; 0
    55c4:	70 e0       	ldi	r23, 0x00	; 0
    55c6:	10 1b       	sub	r17, r16
    55c8:	c4 01       	movw	r24, r8
    55ca:	21 2f       	mov	r18, r17
    55cc:	8e 01       	movw	r16, r28
    55ce:	0f 5f       	subi	r16, 0xFF	; 255
    55d0:	1f 4f       	sbci	r17, 0xFF	; 255
    55d2:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <verifyEEPage>
    55d6:	89 2b       	or	r24, r25
    55d8:	81 f4       	brne	.+32     	; 0x55fa <eeprom_panel+0x45c>
                                    xprintf(PSTR("verify mismatch for page %d\n"), page);
    55da:	00 d0       	rcall	.+0      	; 0x55dc <eeprom_panel+0x43e>
    55dc:	0f 92       	push	r0
    55de:	82 e0       	ldi	r24, 0x02	; 2
    55e0:	9d e0       	ldi	r25, 0x0D	; 13
    55e2:	ed b7       	in	r30, 0x3d	; 61
    55e4:	fe b7       	in	r31, 0x3e	; 62
    55e6:	81 83       	std	Z+1, r24	; 0x01
    55e8:	92 83       	std	Z+2, r25	; 0x02
    55ea:	c3 82       	std	Z+3, r12	; 0x03
    55ec:	d4 82       	std	Z+4, r13	; 0x04
    55ee:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    55f2:	0f 90       	pop	r0
    55f4:	0f 90       	pop	r0
    55f6:	0f 90       	pop	r0
    55f8:	0f 90       	pop	r0
                                }
                            }
                            page = (nextaddr >> PAGE_SIZE_SHIFT);
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
    55fa:	1e 2d       	mov	r17, r14
    55fc:	1f 77       	andi	r17, 0x7F	; 127
    55fe:	01 2f       	mov	r16, r17
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
    5600:	4e 2d       	mov	r20, r14
    5602:	4f 77       	andi	r20, 0x7F	; 127
    5604:	40 17       	cp	r20, r16
    5606:	08 f4       	brcc	.+2      	; 0x560a <eeprom_panel+0x46c>
    5608:	04 2f       	mov	r16, r20
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    560a:	d2 01       	movw	r26, r4
    560c:	5c 91       	ld	r21, X
    560e:	25 2f       	mov	r18, r21
    5610:	30 e0       	ldi	r19, 0x00	; 0
    5612:	c5 57       	subi	r28, 0x75	; 117
    5614:	dd 4f       	sbci	r29, 0xFD	; 253
    5616:	a8 81       	ld	r26, Y
    5618:	b9 81       	ldd	r27, Y+1	; 0x01
    561a:	cb 58       	subi	r28, 0x8B	; 139
    561c:	d2 40       	sbci	r29, 0x02	; 2
    561e:	e4 2f       	mov	r30, r20
    5620:	f0 e0       	ldi	r31, 0x00	; 0
    5622:	35 96       	adiw	r30, 0x05	; 5
    5624:	81 e0       	ldi	r24, 0x01	; 1
    5626:	90 e0       	ldi	r25, 0x00	; 0
    5628:	8c 0f       	add	r24, r28
    562a:	9d 1f       	adc	r25, r29
    562c:	e8 0f       	add	r30, r24
    562e:	f9 1f       	adc	r31, r25
    5630:	2c 5f       	subi	r18, 0xFC	; 252
    5632:	3f 4f       	sbci	r19, 0xFF	; 255
    5634:	24 0d       	add	r18, r4
    5636:	35 1d       	adc	r19, r5
    5638:	02 c0       	rjmp	.+4      	; 0x563e <eeprom_panel+0x4a0>
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    563a:	8d 91       	ld	r24, X+
    563c:	81 93       	st	Z+, r24
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    563e:	a2 17       	cp	r26, r18
    5640:	b3 07       	cpc	r27, r19
    5642:	d9 f7       	brne	.-10     	; 0x563a <eeprom_panel+0x49c>
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
                        }
                        if ((pageoffset + ihex.reclen) > pageendaddr)
    5644:	85 2f       	mov	r24, r21
    5646:	90 e0       	ldi	r25, 0x00	; 0
    5648:	84 0f       	add	r24, r20
    564a:	91 1d       	adc	r25, r1
    564c:	21 2f       	mov	r18, r17
    564e:	30 e0       	ldi	r19, 0x00	; 0
    5650:	28 17       	cp	r18, r24
    5652:	39 07       	cpc	r19, r25
    5654:	0c f0       	brlt	.+2      	; 0x5658 <eeprom_panel+0x4ba>
    5656:	4d c0       	rjmp	.+154    	; 0x56f2 <eeprom_panel+0x554>
                            pageendaddr = pageoffset+ihex.reclen;
    5658:	14 2f       	mov	r17, r20
    565a:	15 0f       	add	r17, r21
    565c:	4a c0       	rjmp	.+148    	; 0x56f2 <eeprom_panel+0x554>
                    } else if (ihex.rectyp == 1) {
    565e:	21 30       	cpi	r18, 0x01	; 1
    5660:	79 f5       	brne	.+94     	; 0x56c0 <eeprom_panel+0x522>
                        // end of file record
                        if (pagestartaddr != pageendaddr) {
    5662:	01 17       	cp	r16, r17
    5664:	41 f1       	breq	.+80     	; 0x56b6 <eeprom_panel+0x518>
                            // flush the data in page buffer
                            paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                            psize = pageendaddr - pagestartaddr;
                            if (verifyEEPage(twi, paddr, psize, &pagebuff[0])==0) {
    5666:	a6 01       	movw	r20, r12
    5668:	56 95       	lsr	r21
    566a:	54 2f       	mov	r21, r20
    566c:	44 27       	eor	r20, r20
    566e:	57 95       	ror	r21
    5670:	47 95       	ror	r20
    5672:	40 0f       	add	r20, r16
    5674:	51 1d       	adc	r21, r1
    5676:	60 e0       	ldi	r22, 0x00	; 0
    5678:	70 e0       	ldi	r23, 0x00	; 0
    567a:	10 1b       	sub	r17, r16
    567c:	c4 01       	movw	r24, r8
    567e:	21 2f       	mov	r18, r17
    5680:	8e 01       	movw	r16, r28
    5682:	0f 5f       	subi	r16, 0xFF	; 255
    5684:	1f 4f       	sbci	r17, 0xFF	; 255
    5686:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <verifyEEPage>
    568a:	89 2b       	or	r24, r25
    568c:	a1 f4       	brne	.+40     	; 0x56b6 <eeprom_panel+0x518>
                                xprintf(PSTR("verify mismatch for page %d\n"), page);
    568e:	00 d0       	rcall	.+0      	; 0x5690 <eeprom_panel+0x4f2>
    5690:	0f 92       	push	r0
    5692:	85 ee       	ldi	r24, 0xE5	; 229
    5694:	9c e0       	ldi	r25, 0x0C	; 12
    5696:	ad b7       	in	r26, 0x3d	; 61
    5698:	be b7       	in	r27, 0x3e	; 62
    569a:	11 96       	adiw	r26, 0x01	; 1
    569c:	8d 93       	st	X+, r24
    569e:	9c 93       	st	X, r25
    56a0:	12 97       	sbiw	r26, 0x02	; 2
    56a2:	13 96       	adiw	r26, 0x03	; 3
    56a4:	cd 92       	st	X+, r12
    56a6:	dc 92       	st	X, r13
    56a8:	14 97       	sbiw	r26, 0x04	; 4
    56aa:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    56ae:	0f 90       	pop	r0
    56b0:	0f 90       	pop	r0
    56b2:	0f 90       	pop	r0
    56b4:	0f 90       	pop	r0
                            }
                        }
                        xputs(PSTR("\n"));
    56b6:	83 ee       	ldi	r24, 0xE3	; 227
    56b8:	9c e0       	ldi	r25, 0x0C	; 12
    56ba:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
    56be:	24 c0       	rjmp	.+72     	; 0x5708 <eeprom_panel+0x56a>
                        break;
                    } else {
                        xprintf(PSTR("don't know how to deal with rectype=%d at line %d of eeprom.hex\n"),
    56c0:	00 d0       	rcall	.+0      	; 0x56c2 <eeprom_panel+0x524>
    56c2:	00 d0       	rcall	.+0      	; 0x56c4 <eeprom_panel+0x526>
    56c4:	ed b7       	in	r30, 0x3d	; 61
    56c6:	fe b7       	in	r31, 0x3e	; 62
    56c8:	31 96       	adiw	r30, 0x01	; 1
    56ca:	82 ea       	ldi	r24, 0xA2	; 162
    56cc:	9c e0       	ldi	r25, 0x0C	; 12
    56ce:	ad b7       	in	r26, 0x3d	; 61
    56d0:	be b7       	in	r27, 0x3e	; 62
    56d2:	11 96       	adiw	r26, 0x01	; 1
    56d4:	8d 93       	st	X+, r24
    56d6:	9c 93       	st	X, r25
    56d8:	12 97       	sbiw	r26, 0x02	; 2
    56da:	22 83       	std	Z+2, r18	; 0x02
    56dc:	13 82       	std	Z+3, r1	; 0x03
    56de:	64 82       	std	Z+4, r6	; 0x04
    56e0:	75 82       	std	Z+5, r7	; 0x05
    56e2:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    56e6:	ed b7       	in	r30, 0x3d	; 61
    56e8:	fe b7       	in	r31, 0x3e	; 62
    56ea:	36 96       	adiw	r30, 0x06	; 6
    56ec:	ed bf       	out	0x3d, r30	; 61
    56ee:	fe bf       	out	0x3e, r31	; 62
    56f0:	0b c0       	rjmp	.+22     	; 0x5708 <eeprom_panel+0x56a>
                                ihex.rectyp, lineno);
                        break;
    56f2:	65 01       	movw	r12, r10
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
            while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
    56f4:	c1 01       	movw	r24, r2
    56f6:	60 e0       	ldi	r22, 0x00	; 0
    56f8:	71 e0       	ldi	r23, 0x01	; 1
    56fa:	41 ee       	ldi	r20, 0xE1	; 225
    56fc:	57 e2       	ldi	r21, 0x27	; 39
    56fe:	0e 94 29 52 	call	0xa452	; 0xa452 <f_gets>
    5702:	89 2b       	or	r24, r25
    5704:	09 f0       	breq	.+2      	; 0x5708 <eeprom_panel+0x56a>
    5706:	f7 ce       	rjmp	.-530    	; 0x54f6 <eeprom_panel+0x358>
                    }
                }
            }
        }
        // exit bootloader
        pagebuff[0] = 'E';
    5708:	85 e4       	ldi	r24, 0x45	; 69
    570a:	89 83       	std	Y+1, r24	; 0x01
        TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &pagebuff[0], 1, 0);
    570c:	c4 01       	movw	r24, r8
    570e:	60 e7       	ldi	r22, 0x70	; 112
    5710:	ae 01       	movw	r20, r28
    5712:	4f 5f       	subi	r20, 0xFF	; 255
    5714:	5f 4f       	sbci	r21, 0xFF	; 255
    5716:	21 e0       	ldi	r18, 0x01	; 1
    5718:	00 e0       	ldi	r16, 0x00	; 0
    571a:	0e 94 9c 32 	call	0x6538	; 0x6538 <TWI_MasterWriteRead>
        while (twi->status != TWIM_STATUS_READY) {
    571e:	d4 01       	movw	r26, r8
    5720:	1d 96       	adiw	r26, 0x0d	; 13
    5722:	8c 91       	ld	r24, X
    5724:	1d 97       	sbiw	r26, 0x0d	; 13
    5726:	88 23       	and	r24, r24
    5728:	d1 f7       	brne	.-12     	; 0x571e <eeprom_panel+0x580>
            /* Wait until transaction is complete. */
        }
        if (twi->result != TWIM_RESULT_OK) {
    572a:	1e 96       	adiw	r26, 0x0e	; 14
    572c:	8c 91       	ld	r24, X
    572e:	1e 97       	sbiw	r26, 0x0e	; 14
    5730:	81 30       	cpi	r24, 0x01	; 1
    5732:	11 f1       	breq	.+68     	; 0x5778 <eeprom_panel+0x5da>
            xprintf(PSTR("Bad exit cmd, result = %u\n"), twi->result);
    5734:	1e 96       	adiw	r26, 0x0e	; 14
    5736:	2c 91       	ld	r18, X
    5738:	00 d0       	rcall	.+0      	; 0x573a <eeprom_panel+0x59c>
    573a:	0f 92       	push	r0
    573c:	ed b7       	in	r30, 0x3d	; 61
    573e:	fe b7       	in	r31, 0x3e	; 62
    5740:	31 96       	adiw	r30, 0x01	; 1
    5742:	87 e8       	ldi	r24, 0x87	; 135
    5744:	9c e0       	ldi	r25, 0x0C	; 12
    5746:	ad b7       	in	r26, 0x3d	; 61
    5748:	be b7       	in	r27, 0x3e	; 62
    574a:	11 96       	adiw	r26, 0x01	; 1
    574c:	8d 93       	st	X+, r24
    574e:	9c 93       	st	X, r25
    5750:	12 97       	sbiw	r26, 0x02	; 2
    5752:	22 83       	std	Z+2, r18	; 0x02
    5754:	13 82       	std	Z+3, r1	; 0x03
    5756:	0a c0       	rjmp	.+20     	; 0x576c <eeprom_panel+0x5ce>
        }
        
    }else{
        xprintf(PSTR("Cannot find the panel %d.\n"), panel_num);
    5758:	00 d0       	rcall	.+0      	; 0x575a <eeprom_panel+0x5bc>
    575a:	0f 92       	push	r0
    575c:	8c e6       	ldi	r24, 0x6C	; 108
    575e:	9c e0       	ldi	r25, 0x0C	; 12
    5760:	ed b7       	in	r30, 0x3d	; 61
    5762:	fe b7       	in	r31, 0x3e	; 62
    5764:	81 83       	std	Z+1, r24	; 0x01
    5766:	92 83       	std	Z+2, r25	; 0x02
    5768:	e3 82       	std	Z+3, r14	; 0x03
    576a:	f4 82       	std	Z+4, r15	; 0x04
    576c:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    5770:	0f 90       	pop	r0
    5772:	0f 90       	pop	r0
    5774:	0f 90       	pop	r0
    5776:	0f 90       	pop	r0
    }
    
};
    5778:	c0 57       	subi	r28, 0x70	; 112
    577a:	dd 4f       	sbci	r29, 0xFD	; 253
    577c:	e2 e1       	ldi	r30, 0x12	; 18
    577e:	0c 94 15 5b 	jmp	0xb62a	; 0xb62a <__epilogue_restores__>

00005782 <flash_panel>:
            match = 0;
    }
    return match;
}

void flash_panel(uint8_t panel_num) {
    5782:	a0 e9       	ldi	r26, 0x90	; 144
    5784:	b2 e0       	ldi	r27, 0x02	; 2
    5786:	e7 ec       	ldi	r30, 0xC7	; 199
    5788:	fb e2       	ldi	r31, 0x2B	; 43
    578a:	0c 94 f9 5a 	jmp	0xb5f2	; 0xb5f2 <__prologue_saves__>
    578e:	08 2f       	mov	r16, r24
    uint16_t len, i;
    TWI_Master_t *twi;
    uint8_t ch;
    uint8_t flashBuff[256];
    
    ch = chMap[panel_num];
    5790:	e8 2e       	mov	r14, r24
    5792:	ff 24       	eor	r15, r15
    5794:	f7 01       	movw	r30, r14
    5796:	ea 5c       	subi	r30, 0xCA	; 202
    5798:	f8 4d       	sbci	r31, 0xD8	; 216
    579a:	e0 81       	ld	r30, Z
    if (ch != 0){
    579c:	ee 23       	and	r30, r30
    579e:	09 f4       	brne	.+2      	; 0x57a2 <flash_panel+0x20>
    57a0:	e1 c2       	rjmp	.+1474   	; 0x5d64 <flash_panel+0x5e2>
        
        switch (ch) {
    57a2:	e3 30       	cpi	r30, 0x03	; 3
    57a4:	71 f0       	breq	.+28     	; 0x57c2 <flash_panel+0x40>
    57a6:	e4 30       	cpi	r30, 0x04	; 4
    57a8:	89 f0       	breq	.+34     	; 0x57cc <flash_panel+0x4a>
    57aa:	e2 30       	cpi	r30, 0x02	; 2
    57ac:	29 f4       	brne	.+10     	; 0x57b8 <flash_panel+0x36>
    57ae:	90 e9       	ldi	r25, 0x90	; 144
    57b0:	89 2e       	mov	r8, r25
    57b2:	99 e2       	ldi	r25, 0x29	; 41
    57b4:	99 2e       	mov	r9, r25
    57b6:	0e c0       	rjmp	.+28     	; 0x57d4 <flash_panel+0x52>
    57b8:	88 e7       	ldi	r24, 0x78	; 120
    57ba:	88 2e       	mov	r8, r24
    57bc:	86 e2       	ldi	r24, 0x26	; 38
    57be:	98 2e       	mov	r9, r24
    57c0:	09 c0       	rjmp	.+18     	; 0x57d4 <flash_panel+0x52>
    57c2:	16 e2       	ldi	r17, 0x26	; 38
    57c4:	81 2e       	mov	r8, r17
    57c6:	17 e2       	ldi	r17, 0x27	; 39
    57c8:	91 2e       	mov	r9, r17
    57ca:	04 c0       	rjmp	.+8      	; 0x57d4 <flash_panel+0x52>
                
                break;
            case 3:
                twi = &twi3;
                
                break;
    57cc:	bc e9       	ldi	r27, 0x9C	; 156
    57ce:	8b 2e       	mov	r8, r27
    57d0:	b5 e2       	ldi	r27, 0x25	; 37
    57d2:	9b 2e       	mov	r9, r27
                
                break;
        }
        
        // open the hex file for reading
        res = f_open(&file5, panelFlash, FA_OPEN_EXISTING | FA_READ);
    57d4:	81 ec       	ldi	r24, 0xC1	; 193
    57d6:	97 e2       	ldi	r25, 0x27	; 39
    57d8:	6c ed       	ldi	r22, 0xDC	; 220
    57da:	73 e2       	ldi	r23, 0x23	; 35
    57dc:	41 e0       	ldi	r20, 0x01	; 1
    57de:	0e 94 68 4f 	call	0x9ed0	; 0x9ed0 <f_open>
    57e2:	18 2f       	mov	r17, r24
        if (res != FR_OK) {
    57e4:	88 23       	and	r24, r24
    57e6:	49 f0       	breq	.+18     	; 0x57fa <flash_panel+0x78>
            // could'n open the file
            xputs(PSTR("Error f_open in panel.hex.\n"));
    57e8:	80 e6       	ldi	r24, 0x60	; 96
    57ea:	91 e1       	ldi	r25, 0x11	; 17
    57ec:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
            put_rc(res);
    57f0:	81 2f       	mov	r24, r17
    57f2:	90 e0       	ldi	r25, 0x00	; 0
    57f4:	0e 94 9f 25 	call	0x4b3e	; 0x4b3e <put_rc>
    57f8:	51 c0       	rjmp	.+162    	; 0x589c <flash_panel+0x11a>
        } else {
            // file open OK, get the panel address
            //paddr = panel_num;
            if (panel_num >= 128) {
    57fa:	07 ff       	sbrs	r16, 7
    57fc:	12 c0       	rjmp	.+36     	; 0x5822 <flash_panel+0xa0>
                // use hardware reset
                PORTD.OUTCLR = 0x04;
    57fe:	84 e0       	ldi	r24, 0x04	; 4
    5800:	e0 e6       	ldi	r30, 0x60	; 96
    5802:	f6 e0       	ldi	r31, 0x06	; 6
    5804:	86 83       	std	Z+6, r24	; 0x06
    5806:	84 e6       	ldi	r24, 0x64	; 100
    5808:	90 e0       	ldi	r25, 0x00	; 0
    580a:	20 e2       	ldi	r18, 0x20	; 32
    580c:	33 e0       	ldi	r19, 0x03	; 3
    580e:	f9 01       	movw	r30, r18
    5810:	31 97       	sbiw	r30, 0x01	; 1
    5812:	f1 f7       	brne	.-4      	; 0x5810 <flash_panel+0x8e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5814:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5816:	d9 f7       	brne	.-10     	; 0x580e <flash_panel+0x8c>
                _delay_ms(10);
                PORTD.OUTSET = 0x04;
    5818:	84 e0       	ldi	r24, 0x04	; 4
    581a:	e0 e6       	ldi	r30, 0x60	; 96
    581c:	f6 e0       	ldi	r31, 0x06	; 6
    581e:	85 83       	std	Z+5, r24	; 0x05
    5820:	3d c0       	rjmp	.+122    	; 0x589c <flash_panel+0x11a>
            } else {
                // use cmd reset (assumes panel firmware already loaded)
                xprintf(PSTR("flash panel %u.\n"), panel_num);
    5822:	00 d0       	rcall	.+0      	; 0x5824 <flash_panel+0xa2>
    5824:	0f 92       	push	r0
    5826:	8f e4       	ldi	r24, 0x4F	; 79
    5828:	91 e1       	ldi	r25, 0x11	; 17
    582a:	ad b7       	in	r26, 0x3d	; 61
    582c:	be b7       	in	r27, 0x3e	; 62
    582e:	11 96       	adiw	r26, 0x01	; 1
    5830:	8d 93       	st	X+, r24
    5832:	9c 93       	st	X, r25
    5834:	12 97       	sbiw	r26, 0x02	; 2
    5836:	13 96       	adiw	r26, 0x03	; 3
    5838:	ed 92       	st	X+, r14
    583a:	fc 92       	st	X, r15
    583c:	14 97       	sbiw	r26, 0x04	; 4
    583e:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
                pagebuff[0] = 0x00;
    5842:	19 82       	std	Y+1, r1	; 0x01
                pagebuff[1] = 0x01;
    5844:	81 e0       	ldi	r24, 0x01	; 1
    5846:	8a 83       	std	Y+2, r24	; 0x02
                TWI_MasterWriteRead(twi, panel_num, &pagebuff[0], 2, 0);
    5848:	0f 90       	pop	r0
    584a:	0f 90       	pop	r0
    584c:	0f 90       	pop	r0
    584e:	0f 90       	pop	r0
    5850:	c4 01       	movw	r24, r8
    5852:	60 2f       	mov	r22, r16
    5854:	ae 01       	movw	r20, r28
    5856:	4f 5f       	subi	r20, 0xFF	; 255
    5858:	5f 4f       	sbci	r21, 0xFF	; 255
    585a:	22 e0       	ldi	r18, 0x02	; 2
    585c:	00 e0       	ldi	r16, 0x00	; 0
    585e:	0e 94 9c 32 	call	0x6538	; 0x6538 <TWI_MasterWriteRead>
                while (twi->status != TWIM_STATUS_READY) {
    5862:	f4 01       	movw	r30, r8
    5864:	85 85       	ldd	r24, Z+13	; 0x0d
    5866:	88 23       	and	r24, r24
    5868:	e1 f7       	brne	.-8      	; 0x5862 <flash_panel+0xe0>
                    /* Wait until transaction is complete. */
                }
                if (twi->result != TWIM_RESULT_OK) {
    586a:	86 85       	ldd	r24, Z+14	; 0x0e
    586c:	81 30       	cpi	r24, 0x01	; 1
    586e:	b1 f0       	breq	.+44     	; 0x589c <flash_panel+0x11a>
                    xprintf(PSTR("Bad panel reset, result = %u\n"), twi->result);
    5870:	26 85       	ldd	r18, Z+14	; 0x0e
    5872:	00 d0       	rcall	.+0      	; 0x5874 <flash_panel+0xf2>
    5874:	0f 92       	push	r0
    5876:	ed b7       	in	r30, 0x3d	; 61
    5878:	fe b7       	in	r31, 0x3e	; 62
    587a:	31 96       	adiw	r30, 0x01	; 1
    587c:	81 e3       	ldi	r24, 0x31	; 49
    587e:	91 e1       	ldi	r25, 0x11	; 17
    5880:	ad b7       	in	r26, 0x3d	; 61
    5882:	be b7       	in	r27, 0x3e	; 62
    5884:	11 96       	adiw	r26, 0x01	; 1
    5886:	8d 93       	st	X+, r24
    5888:	9c 93       	st	X, r25
    588a:	12 97       	sbiw	r26, 0x02	; 2
    588c:	22 83       	std	Z+2, r18	; 0x02
    588e:	13 82       	std	Z+3, r1	; 0x03
    5890:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    5894:	0f 90       	pop	r0
    5896:	0f 90       	pop	r0
    5898:	0f 90       	pop	r0
    589a:	0f 90       	pop	r0
    589c:	88 e8       	ldi	r24, 0x88	; 136
    589e:	93 e1       	ldi	r25, 0x13	; 19
    58a0:	20 e2       	ldi	r18, 0x20	; 32
    58a2:	33 e0       	ldi	r19, 0x03	; 3
    58a4:	f9 01       	movw	r30, r18
    58a6:	31 97       	sbiw	r30, 0x01	; 1
    58a8:	f1 f7       	brne	.-4      	; 0x58a6 <flash_panel+0x124>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58aa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58ac:	d9 f7       	brne	.-10     	; 0x58a4 <flash_panel+0x122>
        _delay_ms(500); // wait .5 sec for the panel to come out of reset
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
    58ae:	84 e2       	ldi	r24, 0x24	; 36
    58b0:	91 e1       	ldi	r25, 0x11	; 17
    58b2:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
    58b6:	0f ef       	ldi	r16, 0xFF	; 255
    58b8:	1f ef       	ldi	r17, 0xFF	; 255
    58ba:	cc 24       	eor	r12, r12
    58bc:	dd 24       	eor	r13, r13
    58be:	66 24       	eor	r6, r6
    58c0:	77 24       	eor	r7, r7
        while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
    58c2:	a6 e8       	ldi	r26, 0x86	; 134
    58c4:	2a 2e       	mov	r2, r26
    58c6:	31 2c       	mov	r3, r1
    58c8:	2c 0e       	add	r2, r28
    58ca:	3d 1e       	adc	r3, r29
            len = strlen(flashBuff);
            if (flashBuff[len-1] == '\n')
                flashBuff[--len] = 0;
            if (flashBuff[0] != ':')
                continue;
            rc = ihex_readrec(&ihex, flashBuff);
    58cc:	f6 e8       	ldi	r31, 0x86	; 134
    58ce:	4f 2e       	mov	r4, r31
    58d0:	f1 e0       	ldi	r31, 0x01	; 1
    58d2:	5f 2e       	mov	r5, r31
    58d4:	4c 0e       	add	r4, r28
    58d6:	5d 1e       	adc	r5, r29
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    58d8:	f2 01       	movw	r30, r4
    58da:	34 96       	adiw	r30, 0x04	; 4
    58dc:	c3 57       	subi	r28, 0x73	; 115
    58de:	dd 4f       	sbci	r29, 0xFD	; 253
    58e0:	e8 83       	st	Y, r30
    58e2:	f9 83       	std	Y+1, r31	; 0x01
    58e4:	cd 58       	subi	r28, 0x8D	; 141
    58e6:	d2 40       	sbci	r29, 0x02	; 2
    58e8:	cb c0       	rjmp	.+406    	; 0x5a80 <flash_panel+0x2fe>
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
            lineno++;
    58ea:	08 94       	sec
    58ec:	61 1c       	adc	r6, r1
    58ee:	71 1c       	adc	r7, r1
            len = strlen(flashBuff);
    58f0:	f1 01       	movw	r30, r2
    58f2:	01 90       	ld	r0, Z+
    58f4:	00 20       	and	r0, r0
    58f6:	e9 f7       	brne	.-6      	; 0x58f2 <flash_panel+0x170>
            if (flashBuff[len-1] == '\n')
    58f8:	32 97       	sbiw	r30, 0x02	; 2
    58fa:	80 81       	ld	r24, Z
    58fc:	8a 30       	cpi	r24, 0x0A	; 10
    58fe:	09 f4       	brne	.+2      	; 0x5902 <flash_panel+0x180>
                flashBuff[--len] = 0;
    5900:	10 82       	st	Z, r1
            if (flashBuff[0] != ':')
    5902:	d1 01       	movw	r26, r2
    5904:	8c 91       	ld	r24, X
    5906:	8a 33       	cpi	r24, 0x3A	; 58
    5908:	09 f0       	breq	.+2      	; 0x590c <flash_panel+0x18a>
    590a:	ba c0       	rjmp	.+372    	; 0x5a80 <flash_panel+0x2fe>
                continue;
            rc = ihex_readrec(&ihex, flashBuff);
    590c:	c2 01       	movw	r24, r4
    590e:	b1 01       	movw	r22, r2
    5910:	0e 94 bf 27 	call	0x4f7e	; 0x4f7e <ihex_readrec>
    5914:	f8 2e       	mov	r15, r24
            if (rc < 0) {
                xprintf(PSTR("invalid record at line %d of panel.hex.\n"), lineno);
                break;
            } else if (rc != ihex.cksum) {
    5916:	c6 57       	subi	r28, 0x76	; 118
    5918:	dd 4f       	sbci	r29, 0xFD	; 253
    591a:	88 81       	ld	r24, Y
    591c:	ca 58       	subi	r28, 0x8A	; 138
    591e:	d2 40       	sbci	r29, 0x02	; 2
    5920:	f8 16       	cp	r15, r24
    5922:	19 f1       	breq	.+70     	; 0x596a <flash_panel+0x1e8>
                xprintf(PSTR("ERROR: checksum mismatch at line %d of panel.hex.\n"), lineno);
    5924:	00 d0       	rcall	.+0      	; 0x5926 <flash_panel+0x1a4>
    5926:	0f 92       	push	r0
    5928:	81 ef       	ldi	r24, 0xF1	; 241
    592a:	90 e1       	ldi	r25, 0x10	; 16
    592c:	ed b7       	in	r30, 0x3d	; 61
    592e:	fe b7       	in	r31, 0x3e	; 62
    5930:	81 83       	std	Z+1, r24	; 0x01
    5932:	92 83       	std	Z+2, r25	; 0x02
    5934:	63 82       	std	Z+3, r6	; 0x03
    5936:	74 82       	std	Z+4, r7	; 0x04
    5938:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
                xprintf(PSTR("checksum=0x%02x, computed checksum=0x%02x\n"), ihex.cksum, rc);
    593c:	0f 92       	push	r0
    593e:	0f 92       	push	r0
    5940:	ed b7       	in	r30, 0x3d	; 61
    5942:	fe b7       	in	r31, 0x3e	; 62
    5944:	31 96       	adiw	r30, 0x01	; 1
    5946:	86 ec       	ldi	r24, 0xC6	; 198
    5948:	90 e1       	ldi	r25, 0x10	; 16
    594a:	ad b7       	in	r26, 0x3d	; 61
    594c:	be b7       	in	r27, 0x3e	; 62
    594e:	11 96       	adiw	r26, 0x01	; 1
    5950:	8d 93       	st	X+, r24
    5952:	9c 93       	st	X, r25
    5954:	12 97       	sbiw	r26, 0x02	; 2
    5956:	c6 57       	subi	r28, 0x76	; 118
    5958:	dd 4f       	sbci	r29, 0xFD	; 253
    595a:	88 81       	ld	r24, Y
    595c:	ca 58       	subi	r28, 0x8A	; 138
    595e:	d2 40       	sbci	r29, 0x02	; 2
    5960:	82 83       	std	Z+2, r24	; 0x02
    5962:	13 82       	std	Z+3, r1	; 0x03
    5964:	f4 82       	std	Z+4, r15	; 0x04
    5966:	15 82       	std	Z+5, r1	; 0x05
    5968:	82 c0       	rjmp	.+260    	; 0x5a6e <flash_panel+0x2ec>
                break;
            } else {
                if (ihex.rectyp == 0) {
    596a:	d2 01       	movw	r26, r4
    596c:	13 96       	adiw	r26, 0x03	; 3
    596e:	2c 91       	ld	r18, X
    5970:	13 97       	sbiw	r26, 0x03	; 3
    5972:	22 23       	and	r18, r18
    5974:	09 f0       	breq	.+2      	; 0x5978 <flash_panel+0x1f6>
    5976:	53 c0       	rjmp	.+166    	; 0x5a1e <flash_panel+0x29c>
                    // data record
                    nextaddr = ihex.loadofs;
    5978:	11 96       	adiw	r26, 0x01	; 1
    597a:	ed 90       	ld	r14, X+
    597c:	fc 90       	ld	r15, X
    597e:	12 97       	sbiw	r26, 0x02	; 2
                    if ((nextaddr >> PAGE_SIZE_SHIFT) != page) {
    5980:	57 01       	movw	r10, r14
    5982:	aa 0c       	add	r10, r10
    5984:	ab 2c       	mov	r10, r11
    5986:	aa 1c       	adc	r10, r10
    5988:	bb 08       	sbc	r11, r11
    598a:	b1 94       	neg	r11
    598c:	a0 16       	cp	r10, r16
    598e:	b1 06       	cpc	r11, r17
    5990:	c1 f0       	breq	.+48     	; 0x59c2 <flash_panel+0x240>
                        // this record is for a different page - check if we need to flush the current page
                        if (pagestartaddr != pageendaddr) {
    5992:	cd 14       	cp	r12, r13
    5994:	91 f0       	breq	.+36     	; 0x59ba <flash_panel+0x238>
                            // flush data in page buffer
                            paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                            psize = pageendaddr - pagestartaddr;
                            progPage(twi, paddr, psize, &pagebuff[0]);
    5996:	16 95       	lsr	r17
    5998:	10 2f       	mov	r17, r16
    599a:	00 27       	eor	r16, r16
    599c:	17 95       	ror	r17
    599e:	07 95       	ror	r16
    59a0:	0c 0d       	add	r16, r12
    59a2:	11 1d       	adc	r17, r1
    59a4:	a8 01       	movw	r20, r16
    59a6:	60 e0       	ldi	r22, 0x00	; 0
    59a8:	70 e0       	ldi	r23, 0x00	; 0
    59aa:	dc 18       	sub	r13, r12
    59ac:	c4 01       	movw	r24, r8
    59ae:	2d 2d       	mov	r18, r13
    59b0:	8e 01       	movw	r16, r28
    59b2:	0f 5f       	subi	r16, 0xFF	; 255
    59b4:	1f 4f       	sbci	r17, 0xFF	; 255
    59b6:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <progPage>
                        }
                        page = (nextaddr >> PAGE_SIZE_SHIFT);
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
    59ba:	6f e7       	ldi	r22, 0x7F	; 127
    59bc:	d6 2e       	mov	r13, r22
    59be:	de 20       	and	r13, r14
    59c0:	cd 2c       	mov	r12, r13
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
    59c2:	4e 2d       	mov	r20, r14
    59c4:	4f 77       	andi	r20, 0x7F	; 127
    59c6:	4c 15       	cp	r20, r12
    59c8:	08 f4       	brcc	.+2      	; 0x59cc <flash_panel+0x24a>
    59ca:	c4 2e       	mov	r12, r20
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    59cc:	f2 01       	movw	r30, r4
    59ce:	50 81       	ld	r21, Z
    59d0:	25 2f       	mov	r18, r21
    59d2:	30 e0       	ldi	r19, 0x00	; 0
    59d4:	c3 57       	subi	r28, 0x73	; 115
    59d6:	dd 4f       	sbci	r29, 0xFD	; 253
    59d8:	a8 81       	ld	r26, Y
    59da:	b9 81       	ldd	r27, Y+1	; 0x01
    59dc:	cd 58       	subi	r28, 0x8D	; 141
    59de:	d2 40       	sbci	r29, 0x02	; 2
    59e0:	e4 2f       	mov	r30, r20
    59e2:	f0 e0       	ldi	r31, 0x00	; 0
    59e4:	35 96       	adiw	r30, 0x05	; 5
    59e6:	81 e0       	ldi	r24, 0x01	; 1
    59e8:	90 e0       	ldi	r25, 0x00	; 0
    59ea:	8c 0f       	add	r24, r28
    59ec:	9d 1f       	adc	r25, r29
    59ee:	e8 0f       	add	r30, r24
    59f0:	f9 1f       	adc	r31, r25
    59f2:	2c 5f       	subi	r18, 0xFC	; 252
    59f4:	3f 4f       	sbci	r19, 0xFF	; 255
    59f6:	24 0d       	add	r18, r4
    59f8:	35 1d       	adc	r19, r5
    59fa:	02 c0       	rjmp	.+4      	; 0x5a00 <flash_panel+0x27e>
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    59fc:	8d 91       	ld	r24, X+
    59fe:	81 93       	st	Z+, r24
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    5a00:	a2 17       	cp	r26, r18
    5a02:	b3 07       	cpc	r27, r19
    5a04:	d9 f7       	brne	.-10     	; 0x59fc <flash_panel+0x27a>
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
                    }
                    if ((pageoffset + ihex.reclen) > pageendaddr)
    5a06:	85 2f       	mov	r24, r21
    5a08:	90 e0       	ldi	r25, 0x00	; 0
    5a0a:	84 0f       	add	r24, r20
    5a0c:	91 1d       	adc	r25, r1
    5a0e:	2d 2d       	mov	r18, r13
    5a10:	30 e0       	ldi	r19, 0x00	; 0
    5a12:	28 17       	cp	r18, r24
    5a14:	39 07       	cpc	r19, r25
    5a16:	9c f5       	brge	.+102    	; 0x5a7e <flash_panel+0x2fc>
                        pageendaddr = pageoffset+ihex.reclen;
    5a18:	d4 2e       	mov	r13, r20
    5a1a:	d5 0e       	add	r13, r21
    5a1c:	30 c0       	rjmp	.+96     	; 0x5a7e <flash_panel+0x2fc>
                } else if (ihex.rectyp == 1) {
    5a1e:	21 30       	cpi	r18, 0x01	; 1
    5a20:	a9 f4       	brne	.+42     	; 0x5a4c <flash_panel+0x2ca>
                    // end of file record
                    if (pagestartaddr != pageendaddr) {
    5a22:	cd 14       	cp	r12, r13
    5a24:	b9 f1       	breq	.+110    	; 0x5a94 <flash_panel+0x312>
                        // flush the data in page buffer
                        paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                        psize = pageendaddr - pagestartaddr;
                        progPage(twi, paddr, psize, &pagebuff[0]);
    5a26:	16 95       	lsr	r17
    5a28:	10 2f       	mov	r17, r16
    5a2a:	00 27       	eor	r16, r16
    5a2c:	17 95       	ror	r17
    5a2e:	07 95       	ror	r16
    5a30:	0c 0d       	add	r16, r12
    5a32:	11 1d       	adc	r17, r1
    5a34:	a8 01       	movw	r20, r16
    5a36:	60 e0       	ldi	r22, 0x00	; 0
    5a38:	70 e0       	ldi	r23, 0x00	; 0
    5a3a:	dc 18       	sub	r13, r12
    5a3c:	c4 01       	movw	r24, r8
    5a3e:	2d 2d       	mov	r18, r13
    5a40:	8e 01       	movw	r16, r28
    5a42:	0f 5f       	subi	r16, 0xFF	; 255
    5a44:	1f 4f       	sbci	r17, 0xFF	; 255
    5a46:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <progPage>
    5a4a:	24 c0       	rjmp	.+72     	; 0x5a94 <flash_panel+0x312>
                    }
                    break;
                } else {
                    xprintf(PSTR("don't know how to deal with rectype=%d at line %d of panel.hex\n"),
    5a4c:	00 d0       	rcall	.+0      	; 0x5a4e <flash_panel+0x2cc>
    5a4e:	00 d0       	rcall	.+0      	; 0x5a50 <flash_panel+0x2ce>
    5a50:	ed b7       	in	r30, 0x3d	; 61
    5a52:	fe b7       	in	r31, 0x3e	; 62
    5a54:	31 96       	adiw	r30, 0x01	; 1
    5a56:	86 e8       	ldi	r24, 0x86	; 134
    5a58:	90 e1       	ldi	r25, 0x10	; 16
    5a5a:	ad b7       	in	r26, 0x3d	; 61
    5a5c:	be b7       	in	r27, 0x3e	; 62
    5a5e:	11 96       	adiw	r26, 0x01	; 1
    5a60:	8d 93       	st	X+, r24
    5a62:	9c 93       	st	X, r25
    5a64:	12 97       	sbiw	r26, 0x02	; 2
    5a66:	22 83       	std	Z+2, r18	; 0x02
    5a68:	13 82       	std	Z+3, r1	; 0x03
    5a6a:	64 82       	std	Z+4, r6	; 0x04
    5a6c:	75 82       	std	Z+5, r7	; 0x05
    5a6e:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    5a72:	ed b7       	in	r30, 0x3d	; 61
    5a74:	fe b7       	in	r31, 0x3e	; 62
    5a76:	36 96       	adiw	r30, 0x06	; 6
    5a78:	ed bf       	out	0x3d, r30	; 61
    5a7a:	fe bf       	out	0x3e, r31	; 62
    5a7c:	0b c0       	rjmp	.+22     	; 0x5a94 <flash_panel+0x312>
                            ihex.rectyp, lineno);
                    break;
    5a7e:	85 01       	movw	r16, r10
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
    5a80:	c1 01       	movw	r24, r2
    5a82:	60 e0       	ldi	r22, 0x00	; 0
    5a84:	71 e0       	ldi	r23, 0x01	; 1
    5a86:	41 ec       	ldi	r20, 0xC1	; 193
    5a88:	57 e2       	ldi	r21, 0x27	; 39
    5a8a:	0e 94 29 52 	call	0xa452	; 0xa452 <f_gets>
    5a8e:	89 2b       	or	r24, r25
    5a90:	09 f0       	breq	.+2      	; 0x5a94 <flash_panel+0x312>
    5a92:	2b cf       	rjmp	.-426    	; 0x58ea <flash_panel+0x168>
                    break;
                }
            }
        }
        // rewind the the input file to the start for verification
        res = f_lseek(&file5, 0);
    5a94:	81 ec       	ldi	r24, 0xC1	; 193
    5a96:	97 e2       	ldi	r25, 0x27	; 39
    5a98:	40 e0       	ldi	r20, 0x00	; 0
    5a9a:	50 e0       	ldi	r21, 0x00	; 0
    5a9c:	60 e0       	ldi	r22, 0x00	; 0
    5a9e:	70 e0       	ldi	r23, 0x00	; 0
    5aa0:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <f_lseek>
    5aa4:	18 2f       	mov	r17, r24
        if (res != FR_OK) {
    5aa6:	88 23       	and	r24, r24
    5aa8:	49 f0       	breq	.+18     	; 0x5abc <flash_panel+0x33a>
            xputs(PSTR("Error f_lseek in panel.hex.\n"));
    5aaa:	89 e6       	ldi	r24, 0x69	; 105
    5aac:	90 e1       	ldi	r25, 0x10	; 16
    5aae:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
            put_rc(res);
    5ab2:	81 2f       	mov	r24, r17
    5ab4:	90 e0       	ldi	r25, 0x00	; 0
    5ab6:	0e 94 9f 25 	call	0x4b3e	; 0x4b3e <put_rc>
    5aba:	2c c1       	rjmp	.+600    	; 0x5d14 <flash_panel+0x592>
            // verify the panel data
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
    5abc:	8c e5       	ldi	r24, 0x5C	; 92
    5abe:	90 e1       	ldi	r25, 0x10	; 16
    5ac0:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
    5ac4:	cc 24       	eor	r12, r12
    5ac6:	ca 94       	dec	r12
    5ac8:	dc 2c       	mov	r13, r12
    5aca:	00 e0       	ldi	r16, 0x00	; 0
    5acc:	10 e0       	ldi	r17, 0x00	; 0
    5ace:	66 24       	eor	r6, r6
    5ad0:	77 24       	eor	r7, r7
            while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
                lineno++;
                len = strlen(flashBuff);
    5ad2:	ce 01       	movw	r24, r28
    5ad4:	8a 57       	subi	r24, 0x7A	; 122
    5ad6:	9f 4f       	sbci	r25, 0xFF	; 255
    5ad8:	c1 57       	subi	r28, 0x71	; 113
    5ada:	dd 4f       	sbci	r29, 0xFD	; 253
    5adc:	88 83       	st	Y, r24
    5ade:	99 83       	std	Y+1, r25	; 0x01
    5ae0:	cf 58       	subi	r28, 0x8F	; 143
    5ae2:	d2 40       	sbci	r29, 0x02	; 2
                if (flashBuff[len-1] == '\n')
                    flashBuff[--len] = 0;
                if (flashBuff[0] != ':')
                    continue;
                rc = ihex_readrec(&ihex, flashBuff);
    5ae4:	46 e8       	ldi	r20, 0x86	; 134
    5ae6:	44 2e       	mov	r4, r20
    5ae8:	41 e0       	ldi	r20, 0x01	; 1
    5aea:	54 2e       	mov	r5, r20
    5aec:	4c 0e       	add	r4, r28
    5aee:	5d 1e       	adc	r5, r29
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    5af0:	d2 01       	movw	r26, r4
    5af2:	14 96       	adiw	r26, 0x04	; 4
    5af4:	c5 57       	subi	r28, 0x75	; 117
    5af6:	dd 4f       	sbci	r29, 0xFD	; 253
    5af8:	a8 83       	st	Y, r26
    5afa:	b9 83       	std	Y+1, r27	; 0x01
    5afc:	cb 58       	subi	r28, 0x8B	; 139
    5afe:	d2 40       	sbci	r29, 0x02	; 2
    5b00:	ff c0       	rjmp	.+510    	; 0x5d00 <flash_panel+0x57e>
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
            while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
                lineno++;
    5b02:	08 94       	sec
    5b04:	61 1c       	adc	r6, r1
    5b06:	71 1c       	adc	r7, r1
                len = strlen(flashBuff);
    5b08:	c1 57       	subi	r28, 0x71	; 113
    5b0a:	dd 4f       	sbci	r29, 0xFD	; 253
    5b0c:	e8 81       	ld	r30, Y
    5b0e:	f9 81       	ldd	r31, Y+1	; 0x01
    5b10:	cf 58       	subi	r28, 0x8F	; 143
    5b12:	d2 40       	sbci	r29, 0x02	; 2
    5b14:	01 90       	ld	r0, Z+
    5b16:	00 20       	and	r0, r0
    5b18:	e9 f7       	brne	.-6      	; 0x5b14 <flash_panel+0x392>
                if (flashBuff[len-1] == '\n')
    5b1a:	32 97       	sbiw	r30, 0x02	; 2
    5b1c:	80 81       	ld	r24, Z
    5b1e:	8a 30       	cpi	r24, 0x0A	; 10
    5b20:	09 f4       	brne	.+2      	; 0x5b24 <flash_panel+0x3a2>
                    flashBuff[--len] = 0;
    5b22:	10 82       	st	Z, r1
                if (flashBuff[0] != ':')
    5b24:	ca 57       	subi	r28, 0x7A	; 122
    5b26:	df 4f       	sbci	r29, 0xFF	; 255
    5b28:	88 81       	ld	r24, Y
    5b2a:	c6 58       	subi	r28, 0x86	; 134
    5b2c:	d0 40       	sbci	r29, 0x00	; 0
    5b2e:	8a 33       	cpi	r24, 0x3A	; 58
    5b30:	09 f0       	breq	.+2      	; 0x5b34 <flash_panel+0x3b2>
    5b32:	e6 c0       	rjmp	.+460    	; 0x5d00 <flash_panel+0x57e>
                    continue;
                rc = ihex_readrec(&ihex, flashBuff);
    5b34:	c2 01       	movw	r24, r4
    5b36:	b1 01       	movw	r22, r2
    5b38:	0e 94 bf 27 	call	0x4f7e	; 0x4f7e <ihex_readrec>
    5b3c:	f8 2e       	mov	r15, r24
                if (rc < 0) {
                    xprintf(PSTR("invalid record at line %d of panel.hex\n"), lineno);
                    break;
                } else if (rc != ihex.cksum) {
    5b3e:	c6 57       	subi	r28, 0x76	; 118
    5b40:	dd 4f       	sbci	r29, 0xFD	; 253
    5b42:	88 81       	ld	r24, Y
    5b44:	ca 58       	subi	r28, 0x8A	; 138
    5b46:	d2 40       	sbci	r29, 0x02	; 2
    5b48:	f8 16       	cp	r15, r24
    5b4a:	19 f1       	breq	.+70     	; 0x5b92 <flash_panel+0x410>
                    xprintf(PSTR("ERROR: checksum mismatch at line %d of panel.hex\n"), lineno);
    5b4c:	00 d0       	rcall	.+0      	; 0x5b4e <flash_panel+0x3cc>
    5b4e:	0f 92       	push	r0
    5b50:	8a e2       	ldi	r24, 0x2A	; 42
    5b52:	90 e1       	ldi	r25, 0x10	; 16
    5b54:	ed b7       	in	r30, 0x3d	; 61
    5b56:	fe b7       	in	r31, 0x3e	; 62
    5b58:	81 83       	std	Z+1, r24	; 0x01
    5b5a:	92 83       	std	Z+2, r25	; 0x02
    5b5c:	63 82       	std	Z+3, r6	; 0x03
    5b5e:	74 82       	std	Z+4, r7	; 0x04
    5b60:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
                    xprintf(PSTR("checksum=0x%02x, computed checksum=0x%02x\n"), ihex.cksum, rc);
    5b64:	0f 92       	push	r0
    5b66:	0f 92       	push	r0
    5b68:	ed b7       	in	r30, 0x3d	; 61
    5b6a:	fe b7       	in	r31, 0x3e	; 62
    5b6c:	31 96       	adiw	r30, 0x01	; 1
    5b6e:	8f ef       	ldi	r24, 0xFF	; 255
    5b70:	9f e0       	ldi	r25, 0x0F	; 15
    5b72:	ad b7       	in	r26, 0x3d	; 61
    5b74:	be b7       	in	r27, 0x3e	; 62
    5b76:	11 96       	adiw	r26, 0x01	; 1
    5b78:	8d 93       	st	X+, r24
    5b7a:	9c 93       	st	X, r25
    5b7c:	12 97       	sbiw	r26, 0x02	; 2
    5b7e:	c6 57       	subi	r28, 0x76	; 118
    5b80:	dd 4f       	sbci	r29, 0xFD	; 253
    5b82:	88 81       	ld	r24, Y
    5b84:	ca 58       	subi	r28, 0x8A	; 138
    5b86:	d2 40       	sbci	r29, 0x02	; 2
    5b88:	82 83       	std	Z+2, r24	; 0x02
    5b8a:	13 82       	std	Z+3, r1	; 0x03
    5b8c:	f4 82       	std	Z+4, r15	; 0x04
    5b8e:	15 82       	std	Z+5, r1	; 0x05
    5b90:	ae c0       	rjmp	.+348    	; 0x5cee <flash_panel+0x56c>
                    break;
                } else {
                    if (ihex.rectyp == 0) {
    5b92:	d2 01       	movw	r26, r4
    5b94:	13 96       	adiw	r26, 0x03	; 3
    5b96:	2c 91       	ld	r18, X
    5b98:	13 97       	sbiw	r26, 0x03	; 3
    5b9a:	22 23       	and	r18, r18
    5b9c:	09 f0       	breq	.+2      	; 0x5ba0 <flash_panel+0x41e>
    5b9e:	65 c0       	rjmp	.+202    	; 0x5c6a <flash_panel+0x4e8>
                        // data record
                        nextaddr = ihex.loadofs;
    5ba0:	11 96       	adiw	r26, 0x01	; 1
    5ba2:	ed 90       	ld	r14, X+
    5ba4:	fc 90       	ld	r15, X
    5ba6:	12 97       	sbiw	r26, 0x02	; 2
                        if ((nextaddr >> PAGE_SIZE_SHIFT) != page) {
    5ba8:	57 01       	movw	r10, r14
    5baa:	aa 0c       	add	r10, r10
    5bac:	ab 2c       	mov	r10, r11
    5bae:	aa 1c       	adc	r10, r10
    5bb0:	bb 08       	sbc	r11, r11
    5bb2:	b1 94       	neg	r11
    5bb4:	ac 14       	cp	r10, r12
    5bb6:	bd 04       	cpc	r11, r13
    5bb8:	49 f1       	breq	.+82     	; 0x5c0c <flash_panel+0x48a>
                            // this record is for a different page - check if we need to flush the current page
                            if (pagestartaddr != pageendaddr) {
    5bba:	01 17       	cp	r16, r17
    5bbc:	21 f1       	breq	.+72     	; 0x5c06 <flash_panel+0x484>
                                // flush data in page buffer
                                paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                                psize = pageendaddr - pagestartaddr;
                                if (verifyPage(twi, paddr, psize, &pagebuff[0])==0) {
    5bbe:	a6 01       	movw	r20, r12
    5bc0:	56 95       	lsr	r21
    5bc2:	54 2f       	mov	r21, r20
    5bc4:	44 27       	eor	r20, r20
    5bc6:	57 95       	ror	r21
    5bc8:	47 95       	ror	r20
    5bca:	40 0f       	add	r20, r16
    5bcc:	51 1d       	adc	r21, r1
    5bce:	60 e0       	ldi	r22, 0x00	; 0
    5bd0:	70 e0       	ldi	r23, 0x00	; 0
    5bd2:	10 1b       	sub	r17, r16
    5bd4:	c4 01       	movw	r24, r8
    5bd6:	21 2f       	mov	r18, r17
    5bd8:	8e 01       	movw	r16, r28
    5bda:	0f 5f       	subi	r16, 0xFF	; 255
    5bdc:	1f 4f       	sbci	r17, 0xFF	; 255
    5bde:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <verifyPage>
    5be2:	89 2b       	or	r24, r25
    5be4:	81 f4       	brne	.+32     	; 0x5c06 <flash_panel+0x484>
                                    xprintf(PSTR("verify mismatch for page %d\n"), page);
    5be6:	00 d0       	rcall	.+0      	; 0x5be8 <flash_panel+0x466>
    5be8:	0f 92       	push	r0
    5bea:	82 ee       	ldi	r24, 0xE2	; 226
    5bec:	9f e0       	ldi	r25, 0x0F	; 15
    5bee:	ed b7       	in	r30, 0x3d	; 61
    5bf0:	fe b7       	in	r31, 0x3e	; 62
    5bf2:	81 83       	std	Z+1, r24	; 0x01
    5bf4:	92 83       	std	Z+2, r25	; 0x02
    5bf6:	c3 82       	std	Z+3, r12	; 0x03
    5bf8:	d4 82       	std	Z+4, r13	; 0x04
    5bfa:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    5bfe:	0f 90       	pop	r0
    5c00:	0f 90       	pop	r0
    5c02:	0f 90       	pop	r0
    5c04:	0f 90       	pop	r0
                                }
                            }
                            page = (nextaddr >> PAGE_SIZE_SHIFT);
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
    5c06:	1e 2d       	mov	r17, r14
    5c08:	1f 77       	andi	r17, 0x7F	; 127
    5c0a:	01 2f       	mov	r16, r17
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
    5c0c:	4e 2d       	mov	r20, r14
    5c0e:	4f 77       	andi	r20, 0x7F	; 127
    5c10:	40 17       	cp	r20, r16
    5c12:	08 f4       	brcc	.+2      	; 0x5c16 <flash_panel+0x494>
    5c14:	04 2f       	mov	r16, r20
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    5c16:	d2 01       	movw	r26, r4
    5c18:	5c 91       	ld	r21, X
    5c1a:	25 2f       	mov	r18, r21
    5c1c:	30 e0       	ldi	r19, 0x00	; 0
    5c1e:	c5 57       	subi	r28, 0x75	; 117
    5c20:	dd 4f       	sbci	r29, 0xFD	; 253
    5c22:	a8 81       	ld	r26, Y
    5c24:	b9 81       	ldd	r27, Y+1	; 0x01
    5c26:	cb 58       	subi	r28, 0x8B	; 139
    5c28:	d2 40       	sbci	r29, 0x02	; 2
    5c2a:	e4 2f       	mov	r30, r20
    5c2c:	f0 e0       	ldi	r31, 0x00	; 0
    5c2e:	35 96       	adiw	r30, 0x05	; 5
    5c30:	81 e0       	ldi	r24, 0x01	; 1
    5c32:	90 e0       	ldi	r25, 0x00	; 0
    5c34:	8c 0f       	add	r24, r28
    5c36:	9d 1f       	adc	r25, r29
    5c38:	e8 0f       	add	r30, r24
    5c3a:	f9 1f       	adc	r31, r25
    5c3c:	2c 5f       	subi	r18, 0xFC	; 252
    5c3e:	3f 4f       	sbci	r19, 0xFF	; 255
    5c40:	24 0d       	add	r18, r4
    5c42:	35 1d       	adc	r19, r5
    5c44:	02 c0       	rjmp	.+4      	; 0x5c4a <flash_panel+0x4c8>
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    5c46:	8d 91       	ld	r24, X+
    5c48:	81 93       	st	Z+, r24
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    5c4a:	a2 17       	cp	r26, r18
    5c4c:	b3 07       	cpc	r27, r19
    5c4e:	d9 f7       	brne	.-10     	; 0x5c46 <flash_panel+0x4c4>
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
                        }
                        if ((pageoffset + ihex.reclen) > pageendaddr)
    5c50:	85 2f       	mov	r24, r21
    5c52:	90 e0       	ldi	r25, 0x00	; 0
    5c54:	84 0f       	add	r24, r20
    5c56:	91 1d       	adc	r25, r1
    5c58:	21 2f       	mov	r18, r17
    5c5a:	30 e0       	ldi	r19, 0x00	; 0
    5c5c:	28 17       	cp	r18, r24
    5c5e:	39 07       	cpc	r19, r25
    5c60:	0c f0       	brlt	.+2      	; 0x5c64 <flash_panel+0x4e2>
    5c62:	4d c0       	rjmp	.+154    	; 0x5cfe <flash_panel+0x57c>
                            pageendaddr = pageoffset+ihex.reclen;
    5c64:	14 2f       	mov	r17, r20
    5c66:	15 0f       	add	r17, r21
    5c68:	4a c0       	rjmp	.+148    	; 0x5cfe <flash_panel+0x57c>
                    } else if (ihex.rectyp == 1) {
    5c6a:	21 30       	cpi	r18, 0x01	; 1
    5c6c:	79 f5       	brne	.+94     	; 0x5ccc <flash_panel+0x54a>
                        // end of file record
                        if (pagestartaddr != pageendaddr) {
    5c6e:	01 17       	cp	r16, r17
    5c70:	41 f1       	breq	.+80     	; 0x5cc2 <flash_panel+0x540>
                            // flush the data in page buffer
                            paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                            psize = pageendaddr - pagestartaddr;
                            if (verifyPage(twi, paddr, psize, &pagebuff[0])==0) {
    5c72:	a6 01       	movw	r20, r12
    5c74:	56 95       	lsr	r21
    5c76:	54 2f       	mov	r21, r20
    5c78:	44 27       	eor	r20, r20
    5c7a:	57 95       	ror	r21
    5c7c:	47 95       	ror	r20
    5c7e:	40 0f       	add	r20, r16
    5c80:	51 1d       	adc	r21, r1
    5c82:	60 e0       	ldi	r22, 0x00	; 0
    5c84:	70 e0       	ldi	r23, 0x00	; 0
    5c86:	10 1b       	sub	r17, r16
    5c88:	c4 01       	movw	r24, r8
    5c8a:	21 2f       	mov	r18, r17
    5c8c:	8e 01       	movw	r16, r28
    5c8e:	0f 5f       	subi	r16, 0xFF	; 255
    5c90:	1f 4f       	sbci	r17, 0xFF	; 255
    5c92:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <verifyPage>
    5c96:	89 2b       	or	r24, r25
    5c98:	a1 f4       	brne	.+40     	; 0x5cc2 <flash_panel+0x540>
                                xprintf(PSTR("verify mismatch for page %d\n"), page);
    5c9a:	00 d0       	rcall	.+0      	; 0x5c9c <flash_panel+0x51a>
    5c9c:	0f 92       	push	r0
    5c9e:	85 ec       	ldi	r24, 0xC5	; 197
    5ca0:	9f e0       	ldi	r25, 0x0F	; 15
    5ca2:	ad b7       	in	r26, 0x3d	; 61
    5ca4:	be b7       	in	r27, 0x3e	; 62
    5ca6:	11 96       	adiw	r26, 0x01	; 1
    5ca8:	8d 93       	st	X+, r24
    5caa:	9c 93       	st	X, r25
    5cac:	12 97       	sbiw	r26, 0x02	; 2
    5cae:	13 96       	adiw	r26, 0x03	; 3
    5cb0:	cd 92       	st	X+, r12
    5cb2:	dc 92       	st	X, r13
    5cb4:	14 97       	sbiw	r26, 0x04	; 4
    5cb6:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    5cba:	0f 90       	pop	r0
    5cbc:	0f 90       	pop	r0
    5cbe:	0f 90       	pop	r0
    5cc0:	0f 90       	pop	r0
                            }
                        }
                        xputs(PSTR("\n"));
    5cc2:	83 ec       	ldi	r24, 0xC3	; 195
    5cc4:	9f e0       	ldi	r25, 0x0F	; 15
    5cc6:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <xputs>
    5cca:	24 c0       	rjmp	.+72     	; 0x5d14 <flash_panel+0x592>
                        break;
                    } else {
                        xprintf(PSTR("don't know how to deal with rectype=%d at line %d of panel.hex\n"),
    5ccc:	00 d0       	rcall	.+0      	; 0x5cce <flash_panel+0x54c>
    5cce:	00 d0       	rcall	.+0      	; 0x5cd0 <flash_panel+0x54e>
    5cd0:	ed b7       	in	r30, 0x3d	; 61
    5cd2:	fe b7       	in	r31, 0x3e	; 62
    5cd4:	31 96       	adiw	r30, 0x01	; 1
    5cd6:	83 e8       	ldi	r24, 0x83	; 131
    5cd8:	9f e0       	ldi	r25, 0x0F	; 15
    5cda:	ad b7       	in	r26, 0x3d	; 61
    5cdc:	be b7       	in	r27, 0x3e	; 62
    5cde:	11 96       	adiw	r26, 0x01	; 1
    5ce0:	8d 93       	st	X+, r24
    5ce2:	9c 93       	st	X, r25
    5ce4:	12 97       	sbiw	r26, 0x02	; 2
    5ce6:	22 83       	std	Z+2, r18	; 0x02
    5ce8:	13 82       	std	Z+3, r1	; 0x03
    5cea:	64 82       	std	Z+4, r6	; 0x04
    5cec:	75 82       	std	Z+5, r7	; 0x05
    5cee:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    5cf2:	ed b7       	in	r30, 0x3d	; 61
    5cf4:	fe b7       	in	r31, 0x3e	; 62
    5cf6:	36 96       	adiw	r30, 0x06	; 6
    5cf8:	ed bf       	out	0x3d, r30	; 61
    5cfa:	fe bf       	out	0x3e, r31	; 62
    5cfc:	0b c0       	rjmp	.+22     	; 0x5d14 <flash_panel+0x592>
                                ihex.rectyp, lineno);
                        break;
    5cfe:	65 01       	movw	r12, r10
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
            while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
    5d00:	c1 01       	movw	r24, r2
    5d02:	60 e0       	ldi	r22, 0x00	; 0
    5d04:	71 e0       	ldi	r23, 0x01	; 1
    5d06:	41 ec       	ldi	r20, 0xC1	; 193
    5d08:	57 e2       	ldi	r21, 0x27	; 39
    5d0a:	0e 94 29 52 	call	0xa452	; 0xa452 <f_gets>
    5d0e:	89 2b       	or	r24, r25
    5d10:	09 f0       	breq	.+2      	; 0x5d14 <flash_panel+0x592>
    5d12:	f7 ce       	rjmp	.-530    	; 0x5b02 <flash_panel+0x380>
                    }
                }
            }
        }
        // exit bootloader
        pagebuff[0] = 'E';
    5d14:	85 e4       	ldi	r24, 0x45	; 69
    5d16:	89 83       	std	Y+1, r24	; 0x01
        TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &pagebuff[0], 1, 0);
    5d18:	c4 01       	movw	r24, r8
    5d1a:	60 e7       	ldi	r22, 0x70	; 112
    5d1c:	ae 01       	movw	r20, r28
    5d1e:	4f 5f       	subi	r20, 0xFF	; 255
    5d20:	5f 4f       	sbci	r21, 0xFF	; 255
    5d22:	21 e0       	ldi	r18, 0x01	; 1
    5d24:	00 e0       	ldi	r16, 0x00	; 0
    5d26:	0e 94 9c 32 	call	0x6538	; 0x6538 <TWI_MasterWriteRead>
        while (twi->status != TWIM_STATUS_READY) {
    5d2a:	d4 01       	movw	r26, r8
    5d2c:	1d 96       	adiw	r26, 0x0d	; 13
    5d2e:	8c 91       	ld	r24, X
    5d30:	1d 97       	sbiw	r26, 0x0d	; 13
    5d32:	88 23       	and	r24, r24
    5d34:	d1 f7       	brne	.-12     	; 0x5d2a <flash_panel+0x5a8>
            /* Wait until transaction is complete. */
        }
        if (twi->result != TWIM_RESULT_OK) {
    5d36:	1e 96       	adiw	r26, 0x0e	; 14
    5d38:	8c 91       	ld	r24, X
    5d3a:	1e 97       	sbiw	r26, 0x0e	; 14
    5d3c:	81 30       	cpi	r24, 0x01	; 1
    5d3e:	11 f1       	breq	.+68     	; 0x5d84 <flash_panel+0x602>
            xprintf(PSTR("Bad exit cmd, result = %u\n"), twi->result);
    5d40:	1e 96       	adiw	r26, 0x0e	; 14
    5d42:	2c 91       	ld	r18, X
    5d44:	00 d0       	rcall	.+0      	; 0x5d46 <flash_panel+0x5c4>
    5d46:	0f 92       	push	r0
    5d48:	ed b7       	in	r30, 0x3d	; 61
    5d4a:	fe b7       	in	r31, 0x3e	; 62
    5d4c:	31 96       	adiw	r30, 0x01	; 1
    5d4e:	88 e6       	ldi	r24, 0x68	; 104
    5d50:	9f e0       	ldi	r25, 0x0F	; 15
    5d52:	ad b7       	in	r26, 0x3d	; 61
    5d54:	be b7       	in	r27, 0x3e	; 62
    5d56:	11 96       	adiw	r26, 0x01	; 1
    5d58:	8d 93       	st	X+, r24
    5d5a:	9c 93       	st	X, r25
    5d5c:	12 97       	sbiw	r26, 0x02	; 2
    5d5e:	22 83       	std	Z+2, r18	; 0x02
    5d60:	13 82       	std	Z+3, r1	; 0x03
    5d62:	0a c0       	rjmp	.+20     	; 0x5d78 <flash_panel+0x5f6>
        }
        
        //i2cMasterSend(panel_num, 1, &pagebuff[0]);
        //TWI_MasterWriteRead(&twiMaster1, PANEL_BL_ADDR, &pagebuff[0], 1, 0);
    }else{
        xprintf(PSTR("Cannot find the panel %d.\n"), panel_num);
    5d64:	00 d0       	rcall	.+0      	; 0x5d66 <flash_panel+0x5e4>
    5d66:	0f 92       	push	r0
    5d68:	8d e4       	ldi	r24, 0x4D	; 77
    5d6a:	9f e0       	ldi	r25, 0x0F	; 15
    5d6c:	ed b7       	in	r30, 0x3d	; 61
    5d6e:	fe b7       	in	r31, 0x3e	; 62
    5d70:	81 83       	std	Z+1, r24	; 0x01
    5d72:	92 83       	std	Z+2, r25	; 0x02
    5d74:	e3 82       	std	Z+3, r14	; 0x03
    5d76:	f4 82       	std	Z+4, r15	; 0x04
    5d78:	0e 94 bd 59 	call	0xb37a	; 0xb37a <xprintf>
    5d7c:	0f 90       	pop	r0
    5d7e:	0f 90       	pop	r0
    5d80:	0f 90       	pop	r0
    5d82:	0f 90       	pop	r0
    }
};
    5d84:	c0 57       	subi	r28, 0x70	; 112
    5d86:	dd 4f       	sbci	r29, 0xFD	; 253
    5d88:	e2 e1       	ldi	r30, 0x12	; 18
    5d8a:	0c 94 15 5b 	jmp	0xb62a	; 0xb62a <__epilogue_restores__>

00005d8e <init_all>:
#include "utils.h"

void init_all()
{ 
    5d8e:	a1 e0       	ldi	r26, 0x01	; 1
    5d90:	b0 e0       	ldi	r27, 0x00	; 0
    5d92:	ed ec       	ldi	r30, 0xCD	; 205
    5d94:	fe e2       	ldi	r31, 0x2E	; 46
    5d96:	0c 94 07 5b 	jmp	0xb60e	; 0xb60e <__prologue_saves__+0x1c>
  ledWrite(LED0, ON);
    5d9a:	80 e0       	ldi	r24, 0x00	; 0
    5d9c:	61 e0       	ldi	r22, 0x01	; 1
    5d9e:	0e 94 aa 23 	call	0x4754	; 0x4754 <ledWrite>
  
  PORTC.DIRSET = PIN3_bm; // UART pin
    5da2:	e0 e4       	ldi	r30, 0x40	; 64
    5da4:	f6 e0       	ldi	r31, 0x06	; 6
    5da6:	88 e0       	ldi	r24, 0x08	; 8
    5da8:	81 83       	std	Z+1, r24	; 0x01
  PORTC.DIRCLR = PIN2_bm; // UART pin
    5daa:	84 e0       	ldi	r24, 0x04	; 4
    5dac:	82 83       	std	Z+2, r24	; 0x02

  PORTC.DIRSET = PIN4_bm; // SS pin for SPI unit on port C
    5dae:	80 e1       	ldi	r24, 0x10	; 16
    5db0:	81 83       	std	Z+1, r24	; 0x01
  PORTC.DIRSET = PIN5_bm; // MOSI pin for SPI unit on port C
    5db2:	90 e2       	ldi	r25, 0x20	; 32
    5db4:	91 83       	std	Z+1, r25	; 0x01
  PORTC.DIRSET = PIN7_bm; // SCL pin for SPI unit on port C
    5db6:	20 e8       	ldi	r18, 0x80	; 128
    5db8:	21 83       	std	Z+1, r18	; 0x01
  PORTC.OUTSET = PIN4_bm; // Set SS high
    5dba:	85 83       	std	Z+5, r24	; 0x05

  PORTD.DIRSET = PIN4_bm; // SS pin for SPI unit on port D
    5dbc:	e0 e6       	ldi	r30, 0x60	; 96
    5dbe:	f6 e0       	ldi	r31, 0x06	; 6
    5dc0:	81 83       	std	Z+1, r24	; 0x01
  PORTD.DIRSET = PIN5_bm; // MOSI pin for SPI unit on port D
    5dc2:	91 83       	std	Z+1, r25	; 0x01
  PORTD.DIRSET = PIN7_bm; // SCL pin for SPI unit on port D
    5dc4:	21 83       	std	Z+1, r18	; 0x01
  PORTD.OUTSET = PIN4_bm; // Set SS high
    5dc6:	85 83       	std	Z+5, r24	; 0x05

  PORTE.DIR = 0xB0;       // SPI (SD-card)
    5dc8:	80 eb       	ldi	r24, 0xB0	; 176
    5dca:	80 93 80 06 	sts	0x0680, r24
  PORTE.OUT = 0x00;
    5dce:	e0 e8       	ldi	r30, 0x80	; 128
    5dd0:	f6 e0       	ldi	r31, 0x06	; 6
    5dd2:	14 82       	std	Z+4, r1	; 0x04

  PORTH.DIRSET = PIN5_bm; // LDAC
    5dd4:	e0 ee       	ldi	r30, 0xE0	; 224
    5dd6:	f6 e0       	ldi	r31, 0x06	; 6
    5dd8:	91 83       	std	Z+1, r25	; 0x01
  PORTH.DIRSET = PIN6_bm; // CLR
    5dda:	80 e4       	ldi	r24, 0x40	; 64
    5ddc:	81 83       	std	Z+1, r24	; 0x01
  PORTH.DIRSET = PIN7_bm; // BIN
    5dde:	21 83       	std	Z+1, r18	; 0x01
  PORTH.OUTCLR = PIN5_bm; // LDAC low
    5de0:	96 83       	std	Z+6, r25	; 0x06
  PORTH.OUTSET = PIN6_bm; // CLR high
    5de2:	85 83       	std	Z+5, r24	; 0x05
  PORTH.OUTCLR = PIN7_bm; // BIN low
    5de4:	26 83       	std	Z+6, r18	; 0x06

  PORTJ.DIR = 0xf0;       // LEDs are on bits 4 - 7
    5de6:	80 ef       	ldi	r24, 0xF0	; 240
    5de8:	80 93 00 07 	sts	0x0700, r24
  PORTJ.OUT = 0xf0;       // All LEDs off
    5dec:	e0 e0       	ldi	r30, 0x00	; 0
    5dee:	f7 e0       	ldi	r31, 0x07	; 7
    5df0:	84 83       	std	Z+4, r24	; 0x04


  PORTK.DIR = 0xf0;       // bit 4 - 7 are external signal direction control
    5df2:	00 e2       	ldi	r16, 0x20	; 32
    5df4:	17 e0       	ldi	r17, 0x07	; 7
    5df6:	80 93 20 07 	sts	0x0720, r24
  PORTK.OUT = 0xff;       // external signal direction set to input (0 = input)
    5dfa:	8f ef       	ldi	r24, 0xFF	; 255
    5dfc:	f8 01       	movw	r30, r16
    5dfe:	84 83       	std	Z+4, r24	; 0x04



 // set digital I/O signals to outputs
  digitalMode(0, OUTPUT);     //used to trigger laser
    5e00:	80 e0       	ldi	r24, 0x00	; 0
    5e02:	60 e0       	ldi	r22, 0x00	; 0
    5e04:	0e 94 f7 23 	call	0x47ee	; 0x47ee <digitalMode>
  digitalMode(1, OUTPUT);     //used as a sign for the start and end of fetch_display_frame function
    5e08:	81 e0       	ldi	r24, 0x01	; 1
    5e0a:	60 e0       	ldi	r22, 0x00	; 0
    5e0c:	0e 94 f7 23 	call	0x47ee	; 0x47ee <digitalMode>
  digitalMode(2, OUTPUT);     //used to trigger camera
    5e10:	82 e0       	ldi	r24, 0x02	; 2
    5e12:	60 e0       	ldi	r22, 0x00	; 0
    5e14:	0e 94 f7 23 	call	0x47ee	; 0x47ee <digitalMode>
  digitalMode(3, INPUT);      //Used to detect external trigger signal 
    5e18:	83 e0       	ldi	r24, 0x03	; 3
    5e1a:	61 e0       	ldi	r22, 0x01	; 1
    5e1c:	0e 94 f7 23 	call	0x47ee	; 0x47ee <digitalMode>
  PORTK.PIN3CTRL = 0x01;      //INT3 senses rising edge
    5e20:	81 e0       	ldi	r24, 0x01	; 1
    5e22:	f8 01       	movw	r30, r16
    5e24:	83 8b       	std	Z+19, r24	; 0x13
  PORTK.INT0MASK = 0x00;      //disable Int3 as source for port interrupt 0x00, enable it with 0x08.
    5e26:	12 86       	std	Z+10, r1	; 0x0a
  PORTK.INTCTRL = 0x02;       //Set Int3 INT0 Level medium   
    5e28:	82 e0       	ldi	r24, 0x02	; 2
    5e2a:	81 87       	std	Z+9, r24	; 0x09

  
  OSC.XOSCCTRL = 0x47;    // 0.4-16 MHz XTAL - 1K CLK Start Up
    5e2c:	e0 e5       	ldi	r30, 0x50	; 80
    5e2e:	f0 e0       	ldi	r31, 0x00	; 0
    5e30:	87 e4       	ldi	r24, 0x47	; 71
    5e32:	82 83       	std	Z+2, r24	; 0x02
  OSC.PLLCTRL = 0xC4;     // XOSC is PLL Source - 4x Factor (32MHz)
    5e34:	84 ec       	ldi	r24, 0xC4	; 196
    5e36:	85 83       	std	Z+5, r24	; 0x05
  OSC.CTRL = 0x18;        // Enable PLL & External Oscillator
    5e38:	88 e1       	ldi	r24, 0x18	; 24
    5e3a:	80 93 50 00 	sts	0x0050, r24

  // switch to 32 MHz oscillator
  while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable
    5e3e:	80 91 51 00 	lds	r24, 0x0051
    5e42:	84 ff       	sbrs	r24, 4
    5e44:	fc cf       	rjmp	.-8      	; 0x5e3e <init_all+0xb0>
}


// From Application Note AVR1003
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
  uint8_t volatile saved_sreg = SREG;
    5e46:	8f b7       	in	r24, 0x3f	; 63
    5e48:	89 83       	std	Y+1, r24	; 0x01
  cli();
    5e4a:	f8 94       	cli
  volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
  RAMPZ = 0;
    5e4c:	1b be       	out	0x3b, r1	; 59
#endif

  asm volatile(
    5e4e:	24 e0       	ldi	r18, 0x04	; 4
    5e50:	80 e4       	ldi	r24, 0x40	; 64
    5e52:	90 e0       	ldi	r25, 0x00	; 0
    5e54:	fc 01       	movw	r30, r24
    5e56:	08 ed       	ldi	r16, 0xD8	; 216
    5e58:	04 bf       	out	0x34, r16	; 52
    5e5a:	20 83       	st	Z, r18
    :
    : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
    : "r16", "r30", "r31"
    );

  SREG = saved_sreg;
    5e5c:	89 81       	ldd	r24, Y+1	; 0x01
    5e5e:	8f bf       	out	0x3f, r24	; 63
    5e60:	88 ee       	ldi	r24, 0xE8	; 232
    5e62:	93 e0       	ldi	r25, 0x03	; 3
    5e64:	20 e2       	ldi	r18, 0x20	; 32
    5e66:	33 e0       	ldi	r19, 0x03	; 3
    5e68:	f9 01       	movw	r30, r18
    5e6a:	31 97       	sbiw	r30, 0x01	; 1
    5e6c:	f1 f7       	brne	.-4      	; 0x5e6a <init_all+0xdc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e6e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e70:	d9 f7       	brne	.-10     	; 0x5e68 <init_all+0xda>
  while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable
  CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // 32MHz from PLL
  _delay_ms(100);         // Debounce ON Switch

  // Timer TCE1: 100Hz timer for SD Card routines
  TCE1.CTRLA = 0x04;      // Prescaler: clk/8
    5e72:	e0 e4       	ldi	r30, 0x40	; 64
    5e74:	fa e0       	ldi	r31, 0x0A	; 10
    5e76:	84 e0       	ldi	r24, 0x04	; 4
    5e78:	80 93 40 0a 	sts	0x0A40, r24
  TCE1.PER   = 39999;     // 100Hz
    5e7c:	8f e3       	ldi	r24, 0x3F	; 63
    5e7e:	9c e9       	ldi	r25, 0x9C	; 156
    5e80:	86 a3       	std	Z+38, r24	; 0x26
    5e82:	97 a3       	std	Z+39, r25	; 0x27
  TCE1.INTCTRLA = 0x02;   // Timer overflow is a medium level interrupt
    5e84:	82 e0       	ldi	r24, 0x02	; 2
    5e86:	86 83       	std	Z+6, r24	; 0x06

  // Initialize ADC (SPI master on port C)
  SPIC.CTRL = 0x58;       // Enable Master Mode, Mode 2, clkper/4
    5e88:	88 e5       	ldi	r24, 0x58	; 88
    5e8a:	80 93 c0 08 	sts	0x08C0, r24

  // range register 1: -5V-+5v range on ch 0,1 0-10V on ch 2, 3
  PORTC.OUTCLR = PIN4_bm;
    5e8e:	80 e1       	ldi	r24, 0x10	; 16
    5e90:	e0 e4       	ldi	r30, 0x40	; 64
    5e92:	f6 e0       	ldi	r31, 0x06	; 6
    5e94:	86 83       	std	Z+6, r24	; 0x06
  SPIC.DATA = 0xab;
    5e96:	8b ea       	ldi	r24, 0xAB	; 171
    5e98:	e0 ec       	ldi	r30, 0xC0	; 192
    5e9a:	f8 e0       	ldi	r31, 0x08	; 8
    5e9c:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    5e9e:	80 91 c2 08 	lds	r24, 0x08C2
    5ea2:	87 ff       	sbrs	r24, 7
    5ea4:	fc cf       	rjmp	.-8      	; 0x5e9e <init_all+0x110>
  SPIC.DATA = 0xe0;
    5ea6:	80 ee       	ldi	r24, 0xE0	; 224
    5ea8:	e0 ec       	ldi	r30, 0xC0	; 192
    5eaa:	f8 e0       	ldi	r31, 0x08	; 8
    5eac:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    5eae:	80 91 c2 08 	lds	r24, 0x08C2
    5eb2:	87 ff       	sbrs	r24, 7
    5eb4:	fc cf       	rjmp	.-8      	; 0x5eae <init_all+0x120>
  PORTC.OUTSET = PIN4_bm;
    5eb6:	e0 e4       	ldi	r30, 0x40	; 64
    5eb8:	f6 e0       	ldi	r31, 0x06	; 6
    5eba:	80 e1       	ldi	r24, 0x10	; 16
    5ebc:	85 83       	std	Z+5, r24	; 0x05

  // range register 2: 0-10v range on ch 4,5,6,7
  PORTC.OUTCLR = PIN4_bm;
    5ebe:	86 83       	std	Z+6, r24	; 0x06
  SPIC.DATA = 0xdf;
    5ec0:	8f ed       	ldi	r24, 0xDF	; 223
    5ec2:	e0 ec       	ldi	r30, 0xC0	; 192
    5ec4:	f8 e0       	ldi	r31, 0x08	; 8
    5ec6:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    5ec8:	80 91 c2 08 	lds	r24, 0x08C2
    5ecc:	87 ff       	sbrs	r24, 7
    5ece:	fc cf       	rjmp	.-8      	; 0x5ec8 <init_all+0x13a>
  SPIC.DATA = 0xe0;
    5ed0:	80 ee       	ldi	r24, 0xE0	; 224
    5ed2:	e0 ec       	ldi	r30, 0xC0	; 192
    5ed4:	f8 e0       	ldi	r31, 0x08	; 8
    5ed6:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    5ed8:	80 91 c2 08 	lds	r24, 0x08C2
    5edc:	87 ff       	sbrs	r24, 7
    5ede:	fc cf       	rjmp	.-8      	; 0x5ed8 <init_all+0x14a>
  PORTC.OUTSET = PIN4_bm;
    5ee0:	e0 e4       	ldi	r30, 0x40	; 64
    5ee2:	f6 e0       	ldi	r31, 0x06	; 6
    5ee4:	80 e1       	ldi	r24, 0x10	; 16
    5ee6:	85 83       	std	Z+5, r24	; 0x05

  // sequence register: all sequence bits off
  PORTC.OUTCLR = PIN4_bm;
    5ee8:	86 83       	std	Z+6, r24	; 0x06
  SPIC.DATA = 0xe0;
    5eea:	80 ee       	ldi	r24, 0xE0	; 224
    5eec:	e0 ec       	ldi	r30, 0xC0	; 192
    5eee:	f8 e0       	ldi	r31, 0x08	; 8
    5ef0:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    5ef2:	80 91 c2 08 	lds	r24, 0x08C2
    5ef6:	87 ff       	sbrs	r24, 7
    5ef8:	fc cf       	rjmp	.-8      	; 0x5ef2 <init_all+0x164>
  SPIC.DATA = 0x00;
    5efa:	e0 ec       	ldi	r30, 0xC0	; 192
    5efc:	f8 e0       	ldi	r31, 0x08	; 8
    5efe:	13 82       	std	Z+3, r1	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    5f00:	80 91 c2 08 	lds	r24, 0x08C2
    5f04:	87 ff       	sbrs	r24, 7
    5f06:	fc cf       	rjmp	.-8      	; 0x5f00 <init_all+0x172>
  PORTC.OUTSET = PIN4_bm;
    5f08:	e0 e4       	ldi	r30, 0x40	; 64
    5f0a:	f6 e0       	ldi	r31, 0x06	; 6
    5f0c:	80 e1       	ldi	r24, 0x10	; 16
    5f0e:	85 83       	std	Z+5, r24	; 0x05

  // control register: ch 000, mode = 00, pm = 00, code = 0(twos complement), ref = 1, seq = 00
  PORTC.OUTCLR = PIN4_bm;
    5f10:	86 83       	std	Z+6, r24	; 0x06
  SPIC.DATA = 0x80;
    5f12:	80 e8       	ldi	r24, 0x80	; 128
    5f14:	e0 ec       	ldi	r30, 0xC0	; 192
    5f16:	f8 e0       	ldi	r31, 0x08	; 8
    5f18:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    5f1a:	80 91 c2 08 	lds	r24, 0x08C2
    5f1e:	87 ff       	sbrs	r24, 7
    5f20:	fc cf       	rjmp	.-8      	; 0x5f1a <init_all+0x18c>
  SPIC.DATA = 0x10;
    5f22:	80 e1       	ldi	r24, 0x10	; 16
    5f24:	e0 ec       	ldi	r30, 0xC0	; 192
    5f26:	f8 e0       	ldi	r31, 0x08	; 8
    5f28:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    5f2a:	80 91 c2 08 	lds	r24, 0x08C2
    5f2e:	87 ff       	sbrs	r24, 7
    5f30:	fc cf       	rjmp	.-8      	; 0x5f2a <init_all+0x19c>
  PORTC.OUTSET = PIN4_bm;
    5f32:	90 e1       	ldi	r25, 0x10	; 16
    5f34:	e0 e4       	ldi	r30, 0x40	; 64
    5f36:	f6 e0       	ldi	r31, 0x06	; 6
    5f38:	95 83       	std	Z+5, r25	; 0x05


  // Initialize DAC (SPI master on port D)
  SPID.CTRL = 0x58;       // Enable Master Mode, Mode 2, clkper/4
    5f3a:	88 e5       	ldi	r24, 0x58	; 88
    5f3c:	80 93 c0 09 	sts	0x09C0, r24

  // DAC power control register (all ch + ref powered up)
  PORTD.OUTCLR = PIN4_bm;
    5f40:	e0 e6       	ldi	r30, 0x60	; 96
    5f42:	f6 e0       	ldi	r31, 0x06	; 6
    5f44:	96 83       	std	Z+6, r25	; 0x06
  SPID.DATA = 0x10;
    5f46:	e0 ec       	ldi	r30, 0xC0	; 192
    5f48:	f9 e0       	ldi	r31, 0x09	; 9
    5f4a:	93 83       	std	Z+3, r25	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    5f4c:	80 91 c2 09 	lds	r24, 0x09C2
    5f50:	87 ff       	sbrs	r24, 7
    5f52:	fc cf       	rjmp	.-8      	; 0x5f4c <init_all+0x1be>
  SPID.DATA = 0x00;
    5f54:	e0 ec       	ldi	r30, 0xC0	; 192
    5f56:	f9 e0       	ldi	r31, 0x09	; 9
    5f58:	13 82       	std	Z+3, r1	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    5f5a:	80 91 c2 09 	lds	r24, 0x09C2
    5f5e:	87 ff       	sbrs	r24, 7
    5f60:	fc cf       	rjmp	.-8      	; 0x5f5a <init_all+0x1cc>
  SPID.DATA = 0x1f;
    5f62:	8f e1       	ldi	r24, 0x1F	; 31
    5f64:	e0 ec       	ldi	r30, 0xC0	; 192
    5f66:	f9 e0       	ldi	r31, 0x09	; 9
    5f68:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    5f6a:	80 91 c2 09 	lds	r24, 0x09C2
    5f6e:	87 ff       	sbrs	r24, 7
    5f70:	fc cf       	rjmp	.-8      	; 0x5f6a <init_all+0x1dc>
  PORTD.OUTSET = PIN4_bm;
    5f72:	e0 e6       	ldi	r30, 0x60	; 96
    5f74:	f6 e0       	ldi	r31, 0x06	; 6
    5f76:	80 e1       	ldi	r24, 0x10	; 16
    5f78:	85 83       	std	Z+5, r24	; 0x05

//DAC output range register (all ch +/-10V range)  
  PORTD.OUTCLR = PIN4_bm;
    5f7a:	86 83       	std	Z+6, r24	; 0x06
  SPID.DATA = 0x0c;
    5f7c:	8c e0       	ldi	r24, 0x0C	; 12
    5f7e:	e0 ec       	ldi	r30, 0xC0	; 192
    5f80:	f9 e0       	ldi	r31, 0x09	; 9
    5f82:	83 83       	std	Z+3, r24	; 0x03
//	SPID.DATA = 0x08; // only ch 0
  loop_until_bit_is_set(SPID.STATUS, 7);
    5f84:	80 91 c2 09 	lds	r24, 0x09C2
    5f88:	87 ff       	sbrs	r24, 7
    5f8a:	fc cf       	rjmp	.-8      	; 0x5f84 <init_all+0x1f6>
  SPID.DATA = 0x00;
    5f8c:	e0 ec       	ldi	r30, 0xC0	; 192
    5f8e:	f9 e0       	ldi	r31, 0x09	; 9
    5f90:	13 82       	std	Z+3, r1	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    5f92:	80 91 c2 09 	lds	r24, 0x09C2
    5f96:	87 ff       	sbrs	r24, 7
    5f98:	fc cf       	rjmp	.-8      	; 0x5f92 <init_all+0x204>
   SPID.DATA = 0x04;
    5f9a:	84 e0       	ldi	r24, 0x04	; 4
    5f9c:	e0 ec       	ldi	r30, 0xC0	; 192
    5f9e:	f9 e0       	ldi	r31, 0x09	; 9
    5fa0:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    5fa2:	80 91 c2 09 	lds	r24, 0x09C2
    5fa6:	87 ff       	sbrs	r24, 7
    5fa8:	fc cf       	rjmp	.-8      	; 0x5fa2 <init_all+0x214>
  PORTD.OUTSET = PIN4_bm;
    5faa:	80 e1       	ldi	r24, 0x10	; 16
    5fac:	e0 e6       	ldi	r30, 0x60	; 96
    5fae:	f6 e0       	ldi	r31, 0x06	; 6
    5fb0:	85 83       	std	Z+5, r24	; 0x05

  // initialize the UART
  uart_init();
    5fb2:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <uart_init>
  
  //initialize timer
  timer_init();
    5fb6:	0e 94 04 58 	call	0xb008	; 0xb008 <timer_init>
  
  Handler_Init();
    5fba:	0e 94 8d 31 	call	0x631a	; 0x631a <Handler_Init>

  // Enable interrupts
  PMIC.CTRL = 0x07;       // Enable High, Medium and Low level interrupts
    5fbe:	87 e0       	ldi	r24, 0x07	; 7
    5fc0:	e0 ea       	ldi	r30, 0xA0	; 160
    5fc2:	f0 e0       	ldi	r31, 0x00	; 0
    5fc4:	82 83       	std	Z+2, r24	; 0x02
  sei();
    5fc6:	78 94       	sei
}
    5fc8:	21 96       	adiw	r28, 0x01	; 1
    5fca:	e4 e0       	ldi	r30, 0x04	; 4
    5fcc:	0c 94 23 5b 	jmp	0xb646	; 0xb646 <__epilogue_restores__+0x1c>

00005fd0 <uart_init>:
/* Initialize UART */

void uart_init()
{

  rxfifo.idx_r = 0;
    5fd0:	10 92 62 25 	sts	0x2562, r1
    5fd4:	10 92 63 25 	sts	0x2563, r1
  rxfifo.idx_w = 0;
    5fd8:	10 92 60 25 	sts	0x2560, r1
    5fdc:	10 92 61 25 	sts	0x2561, r1
  rxfifo.count = 0;
    5fe0:	10 92 64 25 	sts	0x2564, r1
    5fe4:	10 92 65 25 	sts	0x2565, r1
  txfifo.idx_r = 0;
    5fe8:	10 92 1e 25 	sts	0x251E, r1
  txfifo.idx_w = 0;
    5fec:	10 92 1d 25 	sts	0x251D, r1
  txfifo.count = 0;
    5ff0:	10 92 1f 25 	sts	0x251F, r1
//  USARTC0.BAUDCTRLB = 0xA1;   // ==> 230400 bps 
  
//  USARTC0.BAUDCTRLA = 0xD6;   // BSCALE = -6, BSEL = 214
//  USARTC0.BAUDCTRLB = 0xA0;   // ==> 460800 bps
  
  USARTC0.BAUDCTRLA = 0x4B;   // BSCALE = -6, BSEL = 75
    5ff4:	e0 ea       	ldi	r30, 0xA0	; 160
    5ff6:	f8 e0       	ldi	r31, 0x08	; 8
    5ff8:	8b e4       	ldi	r24, 0x4B	; 75
    5ffa:	86 83       	std	Z+6, r24	; 0x06
  USARTC0.BAUDCTRLB = 0xA0;   // ==> 921600 bps
    5ffc:	80 ea       	ldi	r24, 0xA0	; 160
    5ffe:	87 83       	std	Z+7, r24	; 0x07
  
//  USARTC0.BAUDCTRLA = 0x05;   // BSCALE = -6, BSEL = 5
//  USARTC0.BAUDCTRLB = 0xA0;   // ==> 1843200 bps
  
  USARTC0.CTRLA = 0x10;       // RX is low level interrupt
    6000:	80 e1       	ldi	r24, 0x10	; 16
    6002:	83 83       	std	Z+3, r24	; 0x03
  USARTC0.CTRLC = 0x03;       // Async, No Parity, 1 stop bit, 8 data bits
    6004:	83 e0       	ldi	r24, 0x03	; 3
    6006:	85 83       	std	Z+5, r24	; 0x05
  USARTC0.CTRLB = 0x18;       // Enable RX and TX
    6008:	88 e1       	ldi	r24, 0x18	; 24
    600a:	84 83       	std	Z+4, r24	; 0x04
}
    600c:	08 95       	ret

0000600e <uart_test>:

/* Get a received character */

uint16_t uart_test ()
{
  return rxfifo.count;
    600e:	20 91 64 25 	lds	r18, 0x2564
    6012:	30 91 65 25 	lds	r19, 0x2565
}
    6016:	c9 01       	movw	r24, r18
    6018:	08 95       	ret

0000601a <uart_get>:
uint8_t uart_get ()
{
  uint16_t i;
  uint8_t d;

  i = rxfifo.idx_r;
    601a:	20 91 62 25 	lds	r18, 0x2562
    601e:	30 91 63 25 	lds	r19, 0x2563
  while(rxfifo.count == 0);
    6022:	80 91 64 25 	lds	r24, 0x2564
    6026:	90 91 65 25 	lds	r25, 0x2565
    602a:	89 2b       	or	r24, r25
    602c:	d1 f3       	breq	.-12     	; 0x6022 <uart_get+0x8>
  d = *(rxfifo.PRxBuff+i++);
    602e:	e0 91 68 25 	lds	r30, 0x2568
    6032:	f0 91 69 25 	lds	r31, 0x2569
    6036:	e2 0f       	add	r30, r18
    6038:	f3 1f       	adc	r31, r19
    603a:	e0 81       	ld	r30, Z
    603c:	2f 5f       	subi	r18, 0xFF	; 255
    603e:	3f 4f       	sbci	r19, 0xFF	; 255
  cli();
    6040:	f8 94       	cli
  rxfifo.count--;
    6042:	80 91 64 25 	lds	r24, 0x2564
    6046:	90 91 65 25 	lds	r25, 0x2565
    604a:	01 97       	sbiw	r24, 0x01	; 1
    604c:	80 93 64 25 	sts	0x2564, r24
    6050:	90 93 65 25 	sts	0x2565, r25
  sei();
    6054:	78 94       	sei
  if(i >= rxfifo.size)
    6056:	80 91 66 25 	lds	r24, 0x2566
    605a:	90 91 67 25 	lds	r25, 0x2567
    605e:	28 17       	cp	r18, r24
    6060:	39 07       	cpc	r19, r25
    6062:	10 f0       	brcs	.+4      	; 0x6068 <uart_get+0x4e>
    6064:	20 e0       	ldi	r18, 0x00	; 0
    6066:	30 e0       	ldi	r19, 0x00	; 0
    i = 0;
  rxfifo.idx_r = i;
    6068:	20 93 62 25 	sts	0x2562, r18
    606c:	30 93 63 25 	sts	0x2563, r19

  return d;
}
    6070:	8e 2f       	mov	r24, r30
    6072:	08 95       	ret

00006074 <uart_put>:


/* Put a character to transmit */

void uart_put (uint8_t d)
{
    6074:	28 2f       	mov	r18, r24
  uint8_t i;

  i = txfifo.idx_w;
    6076:	90 91 1d 25 	lds	r25, 0x251D
  while(txfifo.count >= sizeof(txfifo.buff));
    607a:	80 91 1f 25 	lds	r24, 0x251F
    607e:	80 34       	cpi	r24, 0x40	; 64
    6080:	e0 f7       	brcc	.-8      	; 0x607a <uart_put+0x6>
  txfifo.buff[i++] = d;
    6082:	e9 2f       	mov	r30, r25
    6084:	f0 e0       	ldi	r31, 0x00	; 0
    6086:	e3 5e       	subi	r30, 0xE3	; 227
    6088:	fa 4d       	sbci	r31, 0xDA	; 218
    608a:	23 83       	std	Z+3, r18	; 0x03
    608c:	9f 5f       	subi	r25, 0xFF	; 255
  cli();
    608e:	f8 94       	cli
  txfifo.count++;
    6090:	80 91 1f 25 	lds	r24, 0x251F
    6094:	8f 5f       	subi	r24, 0xFF	; 255
    6096:	80 93 1f 25 	sts	0x251F, r24
  USARTC0.CTRLA = USART_RXCINTLVL0_bm | USART_DREINTLVL0_bm;
    609a:	81 e1       	ldi	r24, 0x11	; 17
    609c:	e0 ea       	ldi	r30, 0xA0	; 160
    609e:	f8 e0       	ldi	r31, 0x08	; 8
    60a0:	83 83       	std	Z+3, r24	; 0x03

  sei();
    60a2:	78 94       	sei
  if(i >= sizeof(txfifo.buff))
    60a4:	90 34       	cpi	r25, 0x40	; 64
    60a6:	08 f0       	brcs	.+2      	; 0x60aa <uart_put+0x36>
    60a8:	90 e0       	ldi	r25, 0x00	; 0
    i = 0;
  txfifo.idx_w = i;
    60aa:	90 93 1d 25 	sts	0x251D, r25
}
    60ae:	08 95       	ret

000060b0 <uart_putstr>:

// Sends a String to the serial port
void uart_putstr(uint8_t *s)
{
    60b0:	cf 93       	push	r28
    60b2:	df 93       	push	r29
    60b4:	ec 01       	movw	r28, r24
    60b6:	03 c0       	rjmp	.+6      	; 0x60be <uart_putstr+0xe>
  uint8_t d;
  while(d = pgm_read_byte_near(s)) {
    uart_put(d);
    60b8:	0e 94 3a 30 	call	0x6074	; 0x6074 <uart_put>
    s++;
    60bc:	21 96       	adiw	r28, 0x01	; 1

// Sends a String to the serial port
void uart_putstr(uint8_t *s)
{
  uint8_t d;
  while(d = pgm_read_byte_near(s)) {
    60be:	fe 01       	movw	r30, r28
    60c0:	84 91       	lpm	r24, Z+
    60c2:	88 23       	and	r24, r24
    60c4:	c9 f7       	brne	.-14     	; 0x60b8 <uart_putstr+0x8>
    uart_put(d);
    s++;
  }
}
    60c6:	df 91       	pop	r29
    60c8:	cf 91       	pop	r28
    60ca:	08 95       	ret

000060cc <uart_crlf>:

// Sends a Carriage Return and Line Feed to the serial port
void uart_crlf()
{
  uart_put(CR);
    60cc:	8d e0       	ldi	r24, 0x0D	; 13
    60ce:	0e 94 3a 30 	call	0x6074	; 0x6074 <uart_put>
  uart_put(LF);
    60d2:	8a e0       	ldi	r24, 0x0A	; 10
    60d4:	0e 94 3a 30 	call	0x6074	; 0x6074 <uart_put>
}
    60d8:	08 95       	ret

000060da <fill_Rx_buffer>:

//Notes: this function expects the first byte in the buffer to be the length of the message
//only call this after a while(!(uart_test())); command

uint16_t fill_Rx_buffer(uint8_t *Rx_buffer)
{	
    60da:	cf 92       	push	r12
    60dc:	df 92       	push	r13
    60de:	ff 92       	push	r15
    60e0:	0f 93       	push	r16
    60e2:	1f 93       	push	r17
    60e4:	cf 93       	push	r28
    60e6:	df 93       	push	r29
    60e8:	6c 01       	movw	r12, r24

/* Get a received character */

uint16_t uart_test ()
{
  return rxfifo.count;
    60ea:	80 91 64 25 	lds	r24, 0x2564
    60ee:	90 91 65 25 	lds	r25, 0x2565
	uint16_t data_length, i;
	
	message_length = 0;
	//err_flag = 1;
	
	if (uart_test())
    60f2:	89 2b       	or	r24, r25
    60f4:	11 f4       	brne	.+4      	; 0x60fa <fill_Rx_buffer+0x20>
    60f6:	ff 24       	eor	r15, r15
    60f8:	3c c0       	rjmp	.+120    	; 0x6172 <fill_Rx_buffer+0x98>
	{
		message_length = uart_get();
    60fa:	0e 94 0d 30 	call	0x601a	; 0x601a <uart_get>
    60fe:	f8 2e       	mov	r15, r24
		
		if (message_length == 50)
    6100:	82 e3       	ldi	r24, 0x32	; 50
    6102:	f8 16       	cp	r15, r24
    6104:	29 f0       	breq	.+10     	; 0x6110 <fill_Rx_buffer+0x36>
    6106:	c0 e0       	ldi	r28, 0x00	; 0
    6108:	d0 e0       	ldi	r29, 0x00	; 0
			}
			
								
		}	
        else	
			for (i = 0; i < message_length; i++)
    610a:	0f 2d       	mov	r16, r15
    610c:	10 e0       	ldi	r17, 0x00	; 0
    610e:	2e c0       	rjmp	.+92     	; 0x616c <fill_Rx_buffer+0x92>
		
		if (message_length == 50)
		{
		//dump frame: header and data. read the first two bytes data which are the frame data length

			temp1 = uart_get();
    6110:	0e 94 0d 30 	call	0x601a	; 0x601a <uart_get>
    6114:	18 2f       	mov	r17, r24
			temp2 = uart_get();
    6116:	0e 94 0d 30 	call	0x601a	; 0x601a <uart_get>

			data_length = (uint16_t)temp1 + 256*(uint16_t)temp2;	
    611a:	38 2f       	mov	r19, r24
    611c:	20 e0       	ldi	r18, 0x00	; 0
    611e:	c9 01       	movw	r24, r18
    6120:	81 0f       	add	r24, r17
    6122:	91 1d       	adc	r25, r1
    6124:	8c 01       	movw	r16, r24
    6126:	c0 e0       	ldi	r28, 0x00	; 0
    6128:	d0 e0       	ldi	r29, 0x00	; 0

			for (i = 0; i < data_length+7; i++)
    612a:	09 5f       	subi	r16, 0xF9	; 249
    612c:	1f 4f       	sbci	r17, 0xFF	; 255
    612e:	0d c0       	rjmp	.+26     	; 0x614a <fill_Rx_buffer+0x70>

/* Get a received character */

uint16_t uart_test ()
{
  return rxfifo.count;
    6130:	80 91 64 25 	lds	r24, 0x2564
    6134:	90 91 65 25 	lds	r25, 0x2565

			data_length = (uint16_t)temp1 + 256*(uint16_t)temp2;	

			for (i = 0; i < data_length+7; i++)
			{
				while(!(uart_test()));
    6138:	89 2b       	or	r24, r25
    613a:	d1 f3       	breq	.-12     	; 0x6130 <fill_Rx_buffer+0x56>
				Rx_buffer[i] = uart_get();
    613c:	0e 94 0d 30 	call	0x601a	; 0x601a <uart_get>
    6140:	f6 01       	movw	r30, r12
    6142:	ec 0f       	add	r30, r28
    6144:	fd 1f       	adc	r31, r29
    6146:	80 83       	st	Z, r24
			temp1 = uart_get();
			temp2 = uart_get();

			data_length = (uint16_t)temp1 + 256*(uint16_t)temp2;	

			for (i = 0; i < data_length+7; i++)
    6148:	21 96       	adiw	r28, 0x01	; 1
    614a:	c0 17       	cp	r28, r16
    614c:	d1 07       	cpc	r29, r17
    614e:	80 f3       	brcs	.-32     	; 0x6130 <fill_Rx_buffer+0x56>
    6150:	10 c0       	rjmp	.+32     	; 0x6172 <fill_Rx_buffer+0x98>

/* Get a received character */

uint16_t uart_test ()
{
  return rxfifo.count;
    6152:	80 91 64 25 	lds	r24, 0x2564
    6156:	90 91 65 25 	lds	r25, 0x2565
								
		}	
        else	
			for (i = 0; i < message_length; i++)
			{
				while(!(uart_test()));
    615a:	89 2b       	or	r24, r25
    615c:	d1 f3       	breq	.-12     	; 0x6152 <fill_Rx_buffer+0x78>
				Rx_buffer[i] = uart_get();
    615e:	0e 94 0d 30 	call	0x601a	; 0x601a <uart_get>
    6162:	f6 01       	movw	r30, r12
    6164:	ec 0f       	add	r30, r28
    6166:	fd 1f       	adc	r31, r29
    6168:	80 83       	st	Z, r24
			}
			
								
		}	
        else	
			for (i = 0; i < message_length; i++)
    616a:	21 96       	adiw	r28, 0x01	; 1
    616c:	c0 17       	cp	r28, r16
    616e:	d1 07       	cpc	r29, r17
    6170:	80 f3       	brcs	.-32     	; 0x6152 <fill_Rx_buffer+0x78>
	}
	//else err_flag = 0;  - without other error check, message_length stays at zero.
	//message_length = err_flag*message_length;  - only useful for multiple error sources, but mult is overkill
	return message_length;			

}	
    6172:	8f 2d       	mov	r24, r15
    6174:	90 e0       	ldi	r25, 0x00	; 0
    6176:	df 91       	pop	r29
    6178:	cf 91       	pop	r28
    617a:	1f 91       	pop	r17
    617c:	0f 91       	pop	r16
    617e:	ff 90       	pop	r15
    6180:	df 90       	pop	r13
    6182:	cf 90       	pop	r12
    6184:	08 95       	ret

00006186 <send_Tx_buffer>:
//Return Values: none
//Limitations: messages can only be upto 255 bytes in length
//Notes: this function sends the message length as the first byte of the message

void send_Tx_buffer(uint8_t *Tx_buffer, uint8_t message_length)
{		
    6186:	ff 92       	push	r15
    6188:	0f 93       	push	r16
    618a:	1f 93       	push	r17
    618c:	cf 93       	push	r28
    618e:	df 93       	push	r29
    6190:	18 2f       	mov	r17, r24
    6192:	09 2f       	mov	r16, r25
    6194:	f6 2e       	mov	r15, r22
	uint8_t i;

	uart_put(message_length);
    6196:	86 2f       	mov	r24, r22
    6198:	0e 94 3a 30 	call	0x6074	; 0x6074 <uart_put>
    619c:	21 2f       	mov	r18, r17
    619e:	30 2f       	mov	r19, r16
    61a0:	c9 01       	movw	r24, r18
    61a2:	ec 01       	movw	r28, r24
    61a4:	10 e0       	ldi	r17, 0x00	; 0
    61a6:	04 c0       	rjmp	.+8      	; 0x61b0 <send_Tx_buffer+0x2a>
	for (i = 0; i < message_length;i++)
	{
		uart_put(Tx_buffer[i]);
    61a8:	89 91       	ld	r24, Y+
    61aa:	0e 94 3a 30 	call	0x6074	; 0x6074 <uart_put>
void send_Tx_buffer(uint8_t *Tx_buffer, uint8_t message_length)
{		
	uint8_t i;

	uart_put(message_length);
	for (i = 0; i < message_length;i++)
    61ae:	1f 5f       	subi	r17, 0xFF	; 255
    61b0:	1f 15       	cp	r17, r15
    61b2:	d0 f3       	brcs	.-12     	; 0x61a8 <send_Tx_buffer+0x22>
	{
		uart_put(Tx_buffer[i]);
	}	
}
    61b4:	cd b7       	in	r28, 0x3d	; 61
    61b6:	de b7       	in	r29, 0x3e	; 62
    61b8:	e5 e0       	ldi	r30, 0x05	; 5
    61ba:	0c 94 22 5b 	jmp	0xb644	; 0xb644 <__epilogue_restores__+0x1a>

000061be <__vector_25>:


/* UART RXC interrupt */

ISR(USARTC0_RXC_vect)
{
    61be:	1f 92       	push	r1
    61c0:	0f 92       	push	r0
    61c2:	0f b6       	in	r0, 0x3f	; 63
    61c4:	0f 92       	push	r0
    61c6:	08 b6       	in	r0, 0x38	; 56
    61c8:	0f 92       	push	r0
    61ca:	0b b6       	in	r0, 0x3b	; 59
    61cc:	0f 92       	push	r0
    61ce:	11 24       	eor	r1, r1
    61d0:	18 be       	out	0x38, r1	; 56
    61d2:	1b be       	out	0x3b, r1	; 59
    61d4:	2f 93       	push	r18
    61d6:	3f 93       	push	r19
    61d8:	4f 93       	push	r20
    61da:	8f 93       	push	r24
    61dc:	9f 93       	push	r25
    61de:	ef 93       	push	r30
    61e0:	ff 93       	push	r31
  uint8_t d;
  uint16_t n, i;

  d = USARTC0.DATA;
    61e2:	40 91 a0 08 	lds	r20, 0x08A0
  n = rxfifo.count;
    61e6:	20 91 64 25 	lds	r18, 0x2564
    61ea:	30 91 65 25 	lds	r19, 0x2565
  if(n < rxfifo.size) {
    61ee:	80 91 66 25 	lds	r24, 0x2566
    61f2:	90 91 67 25 	lds	r25, 0x2567
    61f6:	28 17       	cp	r18, r24
    61f8:	39 07       	cpc	r19, r25
    61fa:	08 f5       	brcc	.+66     	; 0x623e <__vector_25+0x80>
    rxfifo.count = ++n;
    61fc:	2f 5f       	subi	r18, 0xFF	; 255
    61fe:	3f 4f       	sbci	r19, 0xFF	; 255
    6200:	20 93 64 25 	sts	0x2564, r18
    6204:	30 93 65 25 	sts	0x2565, r19
    i = rxfifo.idx_w;
    6208:	80 91 60 25 	lds	r24, 0x2560
    620c:	90 91 61 25 	lds	r25, 0x2561
    *(rxfifo.PRxBuff + i++) = d;
    6210:	e0 91 68 25 	lds	r30, 0x2568
    6214:	f0 91 69 25 	lds	r31, 0x2569
    6218:	e8 0f       	add	r30, r24
    621a:	f9 1f       	adc	r31, r25
    621c:	40 83       	st	Z, r20
    621e:	9c 01       	movw	r18, r24
    6220:	2f 5f       	subi	r18, 0xFF	; 255
    6222:	3f 4f       	sbci	r19, 0xFF	; 255
    if(i >= rxfifo.size)
    6224:	80 91 66 25 	lds	r24, 0x2566
    6228:	90 91 67 25 	lds	r25, 0x2567
    622c:	28 17       	cp	r18, r24
    622e:	39 07       	cpc	r19, r25
    6230:	10 f0       	brcs	.+4      	; 0x6236 <__vector_25+0x78>
    6232:	20 e0       	ldi	r18, 0x00	; 0
    6234:	30 e0       	ldi	r19, 0x00	; 0
      i = 0;
    rxfifo.idx_w = i;
    6236:	20 93 60 25 	sts	0x2560, r18
    623a:	30 93 61 25 	sts	0x2561, r19
  }
}
    623e:	ff 91       	pop	r31
    6240:	ef 91       	pop	r30
    6242:	9f 91       	pop	r25
    6244:	8f 91       	pop	r24
    6246:	4f 91       	pop	r20
    6248:	3f 91       	pop	r19
    624a:	2f 91       	pop	r18
    624c:	0f 90       	pop	r0
    624e:	0b be       	out	0x3b, r0	; 59
    6250:	0f 90       	pop	r0
    6252:	08 be       	out	0x38, r0	; 56
    6254:	0f 90       	pop	r0
    6256:	0f be       	out	0x3f, r0	; 63
    6258:	0f 90       	pop	r0
    625a:	1f 90       	pop	r1
    625c:	18 95       	reti

0000625e <__vector_26>:


/* UART UDRE interrupt */

ISR(USARTC0_DRE_vect)
{
    625e:	1f 92       	push	r1
    6260:	0f 92       	push	r0
    6262:	0f b6       	in	r0, 0x3f	; 63
    6264:	0f 92       	push	r0
    6266:	08 b6       	in	r0, 0x38	; 56
    6268:	0f 92       	push	r0
    626a:	0b b6       	in	r0, 0x3b	; 59
    626c:	0f 92       	push	r0
    626e:	11 24       	eor	r1, r1
    6270:	18 be       	out	0x38, r1	; 56
    6272:	1b be       	out	0x3b, r1	; 59
    6274:	2f 93       	push	r18
    6276:	8f 93       	push	r24
    6278:	9f 93       	push	r25
    627a:	ef 93       	push	r30
    627c:	ff 93       	push	r31
  uint8_t n, i;

  n = txfifo.count;
    627e:	80 91 1f 25 	lds	r24, 0x251F
  if(n) {
    6282:	88 23       	and	r24, r24
    6284:	a9 f0       	breq	.+42     	; 0x62b0 <__vector_26+0x52>
    txfifo.count = --n;
    6286:	28 2f       	mov	r18, r24
    6288:	21 50       	subi	r18, 0x01	; 1
    628a:	20 93 1f 25 	sts	0x251F, r18
    i = txfifo.idx_r;
    628e:	80 91 1e 25 	lds	r24, 0x251E
    USARTC0.DATA = txfifo.buff[i++];
    6292:	e8 2f       	mov	r30, r24
    6294:	f0 e0       	ldi	r31, 0x00	; 0
    6296:	e3 5e       	subi	r30, 0xE3	; 227
    6298:	fa 4d       	sbci	r31, 0xDA	; 218
    629a:	93 81       	ldd	r25, Z+3	; 0x03
    629c:	90 93 a0 08 	sts	0x08A0, r25
    62a0:	8f 5f       	subi	r24, 0xFF	; 255
    if(i >= sizeof(txfifo.buff))
    62a2:	80 34       	cpi	r24, 0x40	; 64
    62a4:	08 f0       	brcs	.+2      	; 0x62a8 <__vector_26+0x4a>
    62a6:	80 e0       	ldi	r24, 0x00	; 0
      i = 0;
    txfifo.idx_r = i;
    62a8:	80 93 1e 25 	sts	0x251E, r24
  }
  if(n == 0)
    62ac:	22 23       	and	r18, r18
    62ae:	21 f4       	brne	.+8      	; 0x62b8 <__vector_26+0x5a>
    USARTC0.CTRLA = USART_RXCINTLVL0_bm;
    62b0:	80 e1       	ldi	r24, 0x10	; 16
    62b2:	e0 ea       	ldi	r30, 0xA0	; 160
    62b4:	f8 e0       	ldi	r31, 0x08	; 8
    62b6:	83 83       	std	Z+3, r24	; 0x03
}
    62b8:	ff 91       	pop	r31
    62ba:	ef 91       	pop	r30
    62bc:	9f 91       	pop	r25
    62be:	8f 91       	pop	r24
    62c0:	2f 91       	pop	r18
    62c2:	0f 90       	pop	r0
    62c4:	0b be       	out	0x3b, r0	; 59
    62c6:	0f 90       	pop	r0
    62c8:	08 be       	out	0x38, r0	; 56
    62ca:	0f 90       	pop	r0
    62cc:	0f be       	out	0x3f, r0	; 63
    62ce:	0f 90       	pop	r0
    62d0:	1f 90       	pop	r1
    62d2:	18 95       	reti

000062d4 <releaseRxBuff>:
}


void releaseRxBuff( ) {

free(rxfifo.PRxBuff);
    62d4:	80 91 68 25 	lds	r24, 0x2568
    62d8:	90 91 69 25 	lds	r25, 0x2569
    62dc:	0e 94 e3 5b 	call	0xb7c6	; 0xb7c6 <free>

}
    62e0:	08 95       	ret

000062e2 <createRxBuff>:
rxFIFO rxfifo;


void createRxBuff(uint8_t mode) {

if (mode == 0xff) {
    62e2:	8f 3f       	cpi	r24, 0xFF	; 255
    62e4:	59 f4       	brne	.+22     	; 0x62fc <createRxBuff+0x1a>
 rxfifo.PRxBuff = malloc(64);
    62e6:	80 e4       	ldi	r24, 0x40	; 64
    62e8:	90 e0       	ldi	r25, 0x00	; 0
    62ea:	0e 94 36 5b 	call	0xb66c	; 0xb66c <malloc>
    62ee:	80 93 68 25 	sts	0x2568, r24
    62f2:	90 93 69 25 	sts	0x2569, r25
 rxfifo.size = 64;
    62f6:	80 e4       	ldi	r24, 0x40	; 64
    62f8:	90 e0       	ldi	r25, 0x00	; 0
    62fa:	0a c0       	rjmp	.+20     	; 0x6310 <createRxBuff+0x2e>
}
else {
 rxfifo.PRxBuff = malloc(1550);
    62fc:	8e e0       	ldi	r24, 0x0E	; 14
    62fe:	96 e0       	ldi	r25, 0x06	; 6
    6300:	0e 94 36 5b 	call	0xb66c	; 0xb66c <malloc>
    6304:	80 93 68 25 	sts	0x2568, r24
    6308:	90 93 69 25 	sts	0x2569, r25
 rxfifo.size = 1550;
    630c:	8e e0       	ldi	r24, 0x0E	; 14
    630e:	96 e0       	ldi	r25, 0x06	; 6
    6310:	80 93 66 25 	sts	0x2566, r24
    6314:	90 93 67 25 	sts	0x2567, r25
    6318:	08 95       	ret

0000631a <Handler_Init>:
  uint8_t lcv;

  // Initialize masks to FALSE
  for(lcv=0;lcv<HANDLER_MAX;lcv++)
  {
    mask[lcv] = FALSE;
    631a:	10 92 df 2b 	sts	0x2BDF, r1
    631e:	10 92 e0 2b 	sts	0x2BE0, r1
    6322:	10 92 e1 2b 	sts	0x2BE1, r1
    6326:	10 92 e2 2b 	sts	0x2BE2, r1
    632a:	10 92 e3 2b 	sts	0x2BE3, r1
    632e:	10 92 e4 2b 	sts	0x2BE4, r1
  }

// Timer TCE0: set-up to match old system (32MHz/8/512 = 16MHz/8/256):
//  TCE0.CTRLA = 0x04;      // Prescaler: clk/8
//JL03092010 change the prescaler from 8 to 2 so the overflowrate inclrease 4 times
  TCE0.CTRLA = 0x02;      // Prescaler: clk/2
    6332:	e0 e0       	ldi	r30, 0x00	; 0
    6334:	fa e0       	ldi	r31, 0x0A	; 10
    6336:	82 e0       	ldi	r24, 0x02	; 2
    6338:	80 83       	st	Z, r24
  TCE0.PER   = 511;       // 256*2 - 1
    633a:	8f ef       	ldi	r24, 0xFF	; 255
    633c:	91 e0       	ldi	r25, 0x01	; 1
    633e:	86 a3       	std	Z+38, r24	; 0x26
    6340:	97 a3       	std	Z+39, r25	; 0x27
  TCE0.INTCTRLA = 0x03;   // Timer overflow is a the highest level interrupt
    6342:	83 e0       	ldi	r24, 0x03	; 3
    6344:	86 83       	std	Z+6, r24	; 0x06
}
    6346:	08 95       	ret

00006348 <__vector_47>:


// The interrupt handler function of the timer E0 interrupt.

ISR(TCE0_OVF_vect)
{
    6348:	1f 92       	push	r1
    634a:	0f 92       	push	r0
    634c:	0f b6       	in	r0, 0x3f	; 63
    634e:	0f 92       	push	r0
    6350:	08 b6       	in	r0, 0x38	; 56
    6352:	0f 92       	push	r0
    6354:	09 b6       	in	r0, 0x39	; 57
    6356:	0f 92       	push	r0
    6358:	0a b6       	in	r0, 0x3a	; 58
    635a:	0f 92       	push	r0
    635c:	0b b6       	in	r0, 0x3b	; 59
    635e:	0f 92       	push	r0
    6360:	11 24       	eor	r1, r1
    6362:	18 be       	out	0x38, r1	; 56
    6364:	19 be       	out	0x39, r1	; 57
    6366:	1a be       	out	0x3a, r1	; 58
    6368:	1b be       	out	0x3b, r1	; 59
    636a:	ef 92       	push	r14
    636c:	ff 92       	push	r15
    636e:	0f 93       	push	r16
    6370:	1f 93       	push	r17
    6372:	2f 93       	push	r18
    6374:	3f 93       	push	r19
    6376:	4f 93       	push	r20
    6378:	5f 93       	push	r21
    637a:	6f 93       	push	r22
    637c:	7f 93       	push	r23
    637e:	8f 93       	push	r24
    6380:	9f 93       	push	r25
    6382:	af 93       	push	r26
    6384:	bf 93       	push	r27
    6386:	cf 93       	push	r28
    6388:	df 93       	push	r29
    638a:	ef 93       	push	r30
    638c:	ff 93       	push	r31
    638e:	95 ee       	ldi	r25, 0xE5	; 229
    6390:	e9 2e       	mov	r14, r25
    6392:	9b e2       	ldi	r25, 0x2B	; 43
    6394:	f9 2e       	mov	r15, r25
    6396:	03 ed       	ldi	r16, 0xD3	; 211
    6398:	1b e2       	ldi	r17, 0x2B	; 43
    639a:	c0 e0       	ldi	r28, 0x00	; 0
    639c:	d0 e0       	ldi	r29, 0x00	; 0
//ledToggle(1);
//xputs(PSTR("\nISR Works\n"));

   for(lcv=0;lcv<HANDLER_MAX;lcv++)		/* check and act on all vectors */
   {
     if(mask[lcv]==TRUE)			/* if int enabled check count */
    639e:	fe 01       	movw	r30, r28
    63a0:	e1 52       	subi	r30, 0x21	; 33
    63a2:	f4 4d       	sbci	r31, 0xD4	; 212
    63a4:	80 81       	ld	r24, Z
    63a6:	81 30       	cpi	r24, 0x01	; 1
    63a8:	39 f5       	brne	.+78     	; 0x63f8 <__vector_47+0xb0>
     {
       count[lcv]--;			
    63aa:	fe 01       	movw	r30, r28
    63ac:	ee 0f       	add	r30, r30
    63ae:	ff 1f       	adc	r31, r31
    63b0:	ee 0f       	add	r30, r30
    63b2:	ff 1f       	adc	r31, r31
    63b4:	e3 50       	subi	r30, 0x03	; 3
    63b6:	f4 4d       	sbci	r31, 0xD4	; 212
    63b8:	80 81       	ld	r24, Z
    63ba:	91 81       	ldd	r25, Z+1	; 0x01
    63bc:	a2 81       	ldd	r26, Z+2	; 0x02
    63be:	b3 81       	ldd	r27, Z+3	; 0x03
    63c0:	01 97       	sbiw	r24, 0x01	; 1
    63c2:	a1 09       	sbc	r26, r1
    63c4:	b1 09       	sbc	r27, r1
    63c6:	80 83       	st	Z, r24
    63c8:	91 83       	std	Z+1, r25	; 0x01
    63ca:	a2 83       	std	Z+2, r26	; 0x02
    63cc:	b3 83       	std	Z+3, r27	; 0x03
       if(count[lcv]==0)		/* if count=0, perform function call and reset */
    63ce:	80 81       	ld	r24, Z
    63d0:	91 81       	ldd	r25, Z+1	; 0x01
    63d2:	a2 81       	ldd	r26, Z+2	; 0x02
    63d4:	b3 81       	ldd	r27, Z+3	; 0x03
    63d6:	00 97       	sbiw	r24, 0x00	; 0
    63d8:	a1 05       	cpc	r26, r1
    63da:	b1 05       	cpc	r27, r1
    63dc:	69 f4       	brne	.+26     	; 0x63f8 <__vector_47+0xb0>
       {
         count[lcv]=start_count[lcv];
    63de:	d7 01       	movw	r26, r14
    63e0:	2d 91       	ld	r18, X+
    63e2:	3d 91       	ld	r19, X+
    63e4:	4d 91       	ld	r20, X+
    63e6:	5c 91       	ld	r21, X
    63e8:	20 83       	st	Z, r18
    63ea:	31 83       	std	Z+1, r19	; 0x01
    63ec:	42 83       	std	Z+2, r20	; 0x02
    63ee:	53 83       	std	Z+3, r21	; 0x03
		 //*
         (*p_handler_func[lcv]) ();
    63f0:	d8 01       	movw	r26, r16
    63f2:	ed 91       	ld	r30, X+
    63f4:	fc 91       	ld	r31, X
    63f6:	19 95       	eicall
    63f8:	21 96       	adiw	r28, 0x01	; 1
    63fa:	84 e0       	ldi	r24, 0x04	; 4
    63fc:	90 e0       	ldi	r25, 0x00	; 0
    63fe:	e8 0e       	add	r14, r24
    6400:	f9 1e       	adc	r15, r25
    6402:	0e 5f       	subi	r16, 0xFE	; 254
    6404:	1f 4f       	sbci	r17, 0xFF	; 255
 uint8_t lcv;
  
//ledToggle(1);
//xputs(PSTR("\nISR Works\n"));

   for(lcv=0;lcv<HANDLER_MAX;lcv++)		/* check and act on all vectors */
    6406:	c6 30       	cpi	r28, 0x06	; 6
    6408:	d1 05       	cpc	r29, r1
    640a:	49 f6       	brne	.-110    	; 0x639e <__vector_47+0x56>
     }
   }



}
    640c:	ff 91       	pop	r31
    640e:	ef 91       	pop	r30
    6410:	df 91       	pop	r29
    6412:	cf 91       	pop	r28
    6414:	bf 91       	pop	r27
    6416:	af 91       	pop	r26
    6418:	9f 91       	pop	r25
    641a:	8f 91       	pop	r24
    641c:	7f 91       	pop	r23
    641e:	6f 91       	pop	r22
    6420:	5f 91       	pop	r21
    6422:	4f 91       	pop	r20
    6424:	3f 91       	pop	r19
    6426:	2f 91       	pop	r18
    6428:	1f 91       	pop	r17
    642a:	0f 91       	pop	r16
    642c:	ff 90       	pop	r15
    642e:	ef 90       	pop	r14
    6430:	0f 90       	pop	r0
    6432:	0b be       	out	0x3b, r0	; 59
    6434:	0f 90       	pop	r0
    6436:	0a be       	out	0x3a, r0	; 58
    6438:	0f 90       	pop	r0
    643a:	09 be       	out	0x39, r0	; 57
    643c:	0f 90       	pop	r0
    643e:	08 be       	out	0x38, r0	; 56
    6440:	0f 90       	pop	r0
    6442:	0f be       	out	0x3f, r0	; 63
    6444:	0f 90       	pop	r0
    6446:	1f 90       	pop	r1
    6448:	18 95       	reti

0000644a <Reg_Handler>:
//            long s_cnt = start count of the timer
//            unsigned char priority = priority of the interrupt request
//            unsigned char msk = the mask of the interrupt. TRUE/FALSE value
            
void Reg_Handler(void* fptr,uint32_t s_cnt, uint8_t priority, uint8_t msk)
{	
    644a:	0f 93       	push	r16
    644c:	cf 93       	push	r28
    644e:	df 93       	push	r29
    6450:	a2 2f       	mov	r26, r18
  mask[priority]=FALSE;             // disable while modifying vector
    6452:	b0 e0       	ldi	r27, 0x00	; 0
  p_handler_func[priority]=fptr;    // set function pointer
    6454:	fd 01       	movw	r30, r26
    6456:	ee 0f       	add	r30, r30
    6458:	ff 1f       	adc	r31, r31
    645a:	ed 52       	subi	r30, 0x2D	; 45
    645c:	f4 4d       	sbci	r31, 0xD4	; 212
    645e:	80 83       	st	Z, r24
    6460:	91 83       	std	Z+1, r25	; 0x01
  start_count[priority]=s_cnt;      // set start count
    6462:	fd 01       	movw	r30, r26
    6464:	ee 0f       	add	r30, r30
    6466:	ff 1f       	adc	r31, r31
    6468:	ee 0f       	add	r30, r30
    646a:	ff 1f       	adc	r31, r31
    646c:	cf 01       	movw	r24, r30
    646e:	8b 51       	subi	r24, 0x1B	; 27
    6470:	94 4d       	sbci	r25, 0xD4	; 212
    6472:	ec 01       	movw	r28, r24
    6474:	48 83       	st	Y, r20
    6476:	59 83       	std	Y+1, r21	; 0x01
    6478:	6a 83       	std	Y+2, r22	; 0x02
    647a:	7b 83       	std	Y+3, r23	; 0x03
  count[priority]=s_cnt;            // set count
    647c:	e3 50       	subi	r30, 0x03	; 3
    647e:	f4 4d       	sbci	r31, 0xD4	; 212
    6480:	40 83       	st	Z, r20
    6482:	51 83       	std	Z+1, r21	; 0x01
    6484:	62 83       	std	Z+2, r22	; 0x02
    6486:	73 83       	std	Z+3, r23	; 0x03
  mask[priority]=msk;				        // set interrupt mask
    6488:	a1 52       	subi	r26, 0x21	; 33
    648a:	b4 4d       	sbci	r27, 0xD4	; 212
    648c:	0c 93       	st	X, r16
}
    648e:	df 91       	pop	r29
    6490:	cf 91       	pop	r28
    6492:	0f 91       	pop	r16
    6494:	08 95       	ret

00006496 <Update_Reg_Handler>:

void Update_Reg_Handler(void* fptr, uint32_t s_cnt, uint8_t priority, uint8_t msk)
{	
    6496:	0f 93       	push	r16
    6498:	cf 93       	push	r28
    649a:	df 93       	push	r29
  mask[priority]=FALSE;             // disable while modifying vector
    649c:	c2 2f       	mov	r28, r18
    649e:	d0 e0       	ldi	r29, 0x00	; 0
  p_handler_func[priority]=fptr;    // set function pointer
    64a0:	fe 01       	movw	r30, r28
    64a2:	ee 0f       	add	r30, r30
    64a4:	ff 1f       	adc	r31, r31
    64a6:	ed 52       	subi	r30, 0x2D	; 45
    64a8:	f4 4d       	sbci	r31, 0xD4	; 212
    64aa:	80 83       	st	Z, r24
    64ac:	91 83       	std	Z+1, r25	; 0x01
  start_count[priority]=s_cnt;      // set start count
    64ae:	ce 01       	movw	r24, r28
    64b0:	88 0f       	add	r24, r24
    64b2:	99 1f       	adc	r25, r25
    64b4:	88 0f       	add	r24, r24
    64b6:	99 1f       	adc	r25, r25
    64b8:	fc 01       	movw	r30, r24
    64ba:	eb 51       	subi	r30, 0x1B	; 27
    64bc:	f4 4d       	sbci	r31, 0xD4	; 212
    64be:	40 83       	st	Z, r20
    64c0:	51 83       	std	Z+1, r21	; 0x01
    64c2:	62 83       	std	Z+2, r22	; 0x02
    64c4:	73 83       	std	Z+3, r23	; 0x03
	
  //if current count is greater than the desired count, then reset current count
  if (count[priority] > s_cnt){
    64c6:	fc 01       	movw	r30, r24
    64c8:	e3 50       	subi	r30, 0x03	; 3
    64ca:	f4 4d       	sbci	r31, 0xD4	; 212
    64cc:	80 81       	ld	r24, Z
    64ce:	91 81       	ldd	r25, Z+1	; 0x01
    64d0:	a2 81       	ldd	r26, Z+2	; 0x02
    64d2:	b3 81       	ldd	r27, Z+3	; 0x03
    64d4:	48 17       	cp	r20, r24
    64d6:	59 07       	cpc	r21, r25
    64d8:	6a 07       	cpc	r22, r26
    64da:	7b 07       	cpc	r23, r27
    64dc:	20 f4       	brcc	.+8      	; 0x64e6 <Update_Reg_Handler+0x50>
    count[priority]=s_cnt;          // set count
    64de:	40 83       	st	Z, r20
    64e0:	51 83       	std	Z+1, r21	; 0x01
    64e2:	62 83       	std	Z+2, r22	; 0x02
    64e4:	73 83       	std	Z+3, r23	; 0x03
  }

  mask[priority]=msk;               // set interrupt mask
    64e6:	c1 52       	subi	r28, 0x21	; 33
    64e8:	d4 4d       	sbci	r29, 0xD4	; 212
    64ea:	08 83       	st	Y, r16
}
    64ec:	df 91       	pop	r29
    64ee:	cf 91       	pop	r28
    64f0:	0f 91       	pop	r16
    64f2:	08 95       	ret

000064f4 <TWI_MasterInit>:
 */
void TWI_MasterInit(TWI_Master_t *twi,
                    TWI_t *module,
                    TWI_MASTER_INTLVL_t intLevel,
                    uint8_t baudRateRegisterSetting)
{
    64f4:	dc 01       	movw	r26, r24
    64f6:	fb 01       	movw	r30, r22
	twi->interface = module;
    64f8:	6d 93       	st	X+, r22
    64fa:	7c 93       	st	X, r23
    64fc:	11 97       	sbiw	r26, 0x01	; 1
	twi->interface->MASTER.CTRLA = intLevel |
    64fe:	48 63       	ori	r20, 0x38	; 56
    6500:	41 83       	std	Z+1, r20	; 0x01
	                               TWI_MASTER_RIEN_bm |
	                               TWI_MASTER_WIEN_bm |
	                               TWI_MASTER_ENABLE_bm;
	twi->interface->MASTER.BAUD = baudRateRegisterSetting;
    6502:	ed 91       	ld	r30, X+
    6504:	fc 91       	ld	r31, X
    6506:	11 97       	sbiw	r26, 0x01	; 1
    6508:	25 83       	std	Z+5, r18	; 0x05
	twi->interface->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    650a:	ed 91       	ld	r30, X+
    650c:	fc 91       	ld	r31, X
    650e:	81 e0       	ldi	r24, 0x01	; 1
    6510:	84 83       	std	Z+4, r24	; 0x04
}
    6512:	08 95       	ret

00006514 <TWI_MasterState>:
 *  \retval TWI_MASTER_BUSSTATE_IDLE_gc    Bus state is idle.
 *  \retval TWI_MASTER_BUSSTATE_OWNER_gc   Bus state is owned by the master.
 *  \retval TWI_MASTER_BUSSTATE_BUSY_gc    Bus state is busy.
 */
TWI_MASTER_BUSSTATE_t TWI_MasterState(TWI_Master_t *twi)
{
    6514:	fc 01       	movw	r30, r24
	TWI_MASTER_BUSSTATE_t twi_status;
	twi_status = (TWI_MASTER_BUSSTATE_t) (twi->interface->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm);
    6516:	01 90       	ld	r0, Z+
    6518:	f0 81       	ld	r31, Z
    651a:	e0 2d       	mov	r30, r0
    651c:	24 81       	ldd	r18, Z+4	; 0x04
    651e:	30 e0       	ldi	r19, 0x00	; 0
    6520:	23 70       	andi	r18, 0x03	; 3
    6522:	30 70       	andi	r19, 0x00	; 0
	return twi_status;
}
    6524:	c9 01       	movw	r24, r18
    6526:	08 95       	ret

00006528 <TWI_MasterReady>:
 *
 *  \retval true  If transaction could be started.
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterReady(TWI_Master_t *twi)
{
    6528:	fc 01       	movw	r30, r24
	bool twi_status = (twi->status == TWIM_STATUS_READY);
    652a:	85 85       	ldd	r24, Z+13	; 0x0d
    652c:	90 e0       	ldi	r25, 0x00	; 0
    652e:	88 23       	and	r24, r24
    6530:	09 f4       	brne	.+2      	; 0x6534 <TWI_MasterReady+0xc>
    6532:	91 e0       	ldi	r25, 0x01	; 1
	return twi_status;
}
    6534:	89 2f       	mov	r24, r25
    6536:	08 95       	ret

00006538 <TWI_MasterWriteRead>:
bool TWI_MasterWriteRead(TWI_Master_t *twi,
                         uint8_t address,
                         uint8_t *writeData,
                         uint8_t bytesToWrite,
                         uint8_t bytesToRead)
{
    6538:	0f 93       	push	r16
    653a:	cf 93       	push	r28
    653c:	df 93       	push	r29
    653e:	dc 01       	movw	r26, r24
    6540:	72 2f       	mov	r23, r18
  /*Parameter sanity check. */
  if (bytesToWrite > twi->writeBuffSize) {
    6542:	17 96       	adiw	r26, 0x07	; 7
    6544:	8c 91       	ld	r24, X
    6546:	17 97       	sbiw	r26, 0x07	; 7
    6548:	82 17       	cp	r24, r18
    654a:	08 f4       	brcc	.+2      	; 0x654e <TWI_MasterWriteRead+0x16>
    654c:	48 c0       	rjmp	.+144    	; 0x65de <TWI_MasterWriteRead+0xa6>
    return false;
  }
  if (bytesToRead > twi->readBuffSize) {
    654e:	18 96       	adiw	r26, 0x08	; 8
    6550:	8c 91       	ld	r24, X
    6552:	18 97       	sbiw	r26, 0x08	; 8
    6554:	80 17       	cp	r24, r16
    6556:	08 f4       	brcc	.+2      	; 0x655a <TWI_MasterWriteRead+0x22>
    6558:	42 c0       	rjmp	.+132    	; 0x65de <TWI_MasterWriteRead+0xa6>
    return false;
  }

  /*Initiate transaction if bus is ready. */
  if (twi->status == TWIM_STATUS_READY) {
    655a:	1d 96       	adiw	r26, 0x0d	; 13
    655c:	8c 91       	ld	r24, X
    655e:	1d 97       	sbiw	r26, 0x0d	; 13
    6560:	88 23       	and	r24, r24
    6562:	e9 f5       	brne	.+122    	; 0x65de <TWI_MasterWriteRead+0xa6>

    twi->status = TWIM_STATUS_BUSY;
    6564:	81 e0       	ldi	r24, 0x01	; 1
    6566:	1d 96       	adiw	r26, 0x0d	; 13
    6568:	8c 93       	st	X, r24
    656a:	1d 97       	sbiw	r26, 0x0d	; 13
    twi->result = TWIM_RESULT_UNKNOWN;
    656c:	1e 96       	adiw	r26, 0x0e	; 14
    656e:	1c 92       	st	X, r1
    6570:	1e 97       	sbiw	r26, 0x0e	; 14

    twi->address = address<<1;
    6572:	66 0f       	add	r22, r22
    6574:	12 96       	adiw	r26, 0x02	; 2
    6576:	6c 93       	st	X, r22
    6578:	12 97       	sbiw	r26, 0x02	; 2
    657a:	ea 01       	movw	r28, r20
    657c:	90 e0       	ldi	r25, 0x00	; 0
    657e:	09 c0       	rjmp	.+18     	; 0x6592 <TWI_MasterWriteRead+0x5a>

    /* Fill write data buffer. */
    for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) {
      *(twi->PwriteData + bufferIndex) = writeData[bufferIndex];
    6580:	13 96       	adiw	r26, 0x03	; 3
    6582:	ed 91       	ld	r30, X+
    6584:	fc 91       	ld	r31, X
    6586:	14 97       	sbiw	r26, 0x04	; 4
    6588:	e9 0f       	add	r30, r25
    658a:	f1 1d       	adc	r31, r1
    658c:	89 91       	ld	r24, Y+
    658e:	80 83       	st	Z, r24
    twi->result = TWIM_RESULT_UNKNOWN;

    twi->address = address<<1;

    /* Fill write data buffer. */
    for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) {
    6590:	9f 5f       	subi	r25, 0xFF	; 255
    6592:	97 17       	cp	r25, r23
    6594:	a8 f3       	brcs	.-22     	; 0x6580 <TWI_MasterWriteRead+0x48>
      *(twi->PwriteData + bufferIndex) = writeData[bufferIndex];
    }

    twi->bytesToWrite = bytesToWrite;
    6596:	19 96       	adiw	r26, 0x09	; 9
    6598:	7c 93       	st	X, r23
    659a:	19 97       	sbiw	r26, 0x09	; 9
    twi->bytesToRead = bytesToRead;
    659c:	1a 96       	adiw	r26, 0x0a	; 10
    659e:	0c 93       	st	X, r16
    65a0:	1a 97       	sbiw	r26, 0x0a	; 10
    twi->bytesWritten = 0;
    65a2:	1b 96       	adiw	r26, 0x0b	; 11
    65a4:	1c 92       	st	X, r1
    65a6:	1b 97       	sbiw	r26, 0x0b	; 11
    twi->bytesRead = 0;
    65a8:	1c 96       	adiw	r26, 0x0c	; 12
    65aa:	1c 92       	st	X, r1
    65ac:	1c 97       	sbiw	r26, 0x0c	; 12

    /* If write command, send the START condition + Address + 'R/_W = 0' */
    if (twi->bytesToWrite > 0) {
    65ae:	19 96       	adiw	r26, 0x09	; 9
    65b0:	8c 91       	ld	r24, X
    65b2:	19 97       	sbiw	r26, 0x09	; 9
    65b4:	88 23       	and	r24, r24
    65b6:	29 f0       	breq	.+10     	; 0x65c2 <TWI_MasterWriteRead+0x8a>
      uint8_t writeAddress = twi->address & ~0x01;
    65b8:	12 96       	adiw	r26, 0x02	; 2
    65ba:	8c 91       	ld	r24, X
    65bc:	12 97       	sbiw	r26, 0x02	; 2
    65be:	8e 7f       	andi	r24, 0xFE	; 254
    65c0:	09 c0       	rjmp	.+18     	; 0x65d4 <TWI_MasterWriteRead+0x9c>
      twi->interface->MASTER.ADDR = writeAddress;
    }

    /* If read command, send the START condition + Address + 'R/_W = 1' */
    else if (twi->bytesToRead > 0) {
    65c2:	1a 96       	adiw	r26, 0x0a	; 10
    65c4:	8c 91       	ld	r24, X
    65c6:	1a 97       	sbiw	r26, 0x0a	; 10
    65c8:	88 23       	and	r24, r24
    65ca:	39 f0       	breq	.+14     	; 0x65da <TWI_MasterWriteRead+0xa2>
      uint8_t readAddress = twi->address | 0x01;
    65cc:	12 96       	adiw	r26, 0x02	; 2
    65ce:	8c 91       	ld	r24, X
    65d0:	12 97       	sbiw	r26, 0x02	; 2
    65d2:	81 60       	ori	r24, 0x01	; 1
      twi->interface->MASTER.ADDR = readAddress;
    65d4:	ed 91       	ld	r30, X+
    65d6:	fc 91       	ld	r31, X
    65d8:	86 83       	std	Z+6, r24	; 0x06
    65da:	81 e0       	ldi	r24, 0x01	; 1
    65dc:	01 c0       	rjmp	.+2      	; 0x65e0 <TWI_MasterWriteRead+0xa8>
    65de:	80 e0       	ldi	r24, 0x00	; 0
    }
    return true;
  } else {
    return false;
  }
}
    65e0:	df 91       	pop	r29
    65e2:	cf 91       	pop	r28
    65e4:	0f 91       	pop	r16
    65e6:	08 95       	ret

000065e8 <TWI_MasterRead>:
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterRead(TWI_Master_t *twi,
                    uint8_t address,
                    uint8_t bytesToRead)
{
    65e8:	0f 93       	push	r16
    65ea:	04 2f       	mov	r16, r20
	bool twi_status = TWI_MasterWriteRead(twi, address, 0, 0, bytesToRead);
    65ec:	40 e0       	ldi	r20, 0x00	; 0
    65ee:	50 e0       	ldi	r21, 0x00	; 0
    65f0:	20 e0       	ldi	r18, 0x00	; 0
    65f2:	0e 94 9c 32 	call	0x6538	; 0x6538 <TWI_MasterWriteRead>
	return twi_status;
}
    65f6:	0f 91       	pop	r16
    65f8:	08 95       	ret

000065fa <TWI_MasterWrite>:
 */
bool TWI_MasterWrite(TWI_Master_t *twi,
                     uint8_t address,
                     uint8_t *writeData,
                     uint8_t bytesToWrite)
{
    65fa:	0f 93       	push	r16
	bool twi_status = TWI_MasterWriteRead(twi, address, writeData, bytesToWrite, 0);
    65fc:	00 e0       	ldi	r16, 0x00	; 0
    65fe:	0e 94 9c 32 	call	0x6538	; 0x6538 <TWI_MasterWriteRead>
	return twi_status;
}
    6602:	0f 91       	pop	r16
    6604:	08 95       	ret

00006606 <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
    6606:	dc 01       	movw	r26, r24
  uint8_t currentStatus = twi->interface->MASTER.STATUS;
    6608:	ed 91       	ld	r30, X+
    660a:	fc 91       	ld	r31, X
    660c:	11 97       	sbiw	r26, 0x01	; 1
    660e:	94 81       	ldd	r25, Z+4	; 0x04

  /* If bus error. */
  if (currentStatus & TWI_MASTER_BUSERR_bm) {
    6610:	92 ff       	sbrs	r25, 2
    6612:	02 c0       	rjmp	.+4      	; 0x6618 <TWI_MasterArbitrationLostBusErrorHandler+0x12>
    twi->result = TWIM_RESULT_BUS_ERROR;
    6614:	84 e0       	ldi	r24, 0x04	; 4
    6616:	01 c0       	rjmp	.+2      	; 0x661a <TWI_MasterArbitrationLostBusErrorHandler+0x14>
  }
  /* If arbitration lost. */
  else {
    twi->result = TWIM_RESULT_ARBITRATION_LOST;
    6618:	83 e0       	ldi	r24, 0x03	; 3
    661a:	1e 96       	adiw	r26, 0x0e	; 14
    661c:	8c 93       	st	X, r24
    661e:	1e 97       	sbiw	r26, 0x0e	; 14
  }

  /* Clear interrupt flag. */
  twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
    6620:	ed 91       	ld	r30, X+
    6622:	fc 91       	ld	r31, X
    6624:	11 97       	sbiw	r26, 0x01	; 1
    6626:	98 60       	ori	r25, 0x08	; 8
    6628:	94 83       	std	Z+4, r25	; 0x04
  twi->status = TWIM_STATUS_READY;
    662a:	1d 96       	adiw	r26, 0x0d	; 13
    662c:	1c 92       	st	X, r1
}
    662e:	08 95       	ret

00006630 <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
    6630:	cf 93       	push	r28
    6632:	df 93       	push	r29
    6634:	dc 01       	movw	r26, r24
  /* Local variables used in if tests to avoid compiler warning. */
  uint8_t bytesToWrite  = twi->bytesToWrite;
    6636:	19 96       	adiw	r26, 0x09	; 9
    6638:	9c 91       	ld	r25, X
    663a:	19 97       	sbiw	r26, 0x09	; 9
  uint8_t bytesToRead   = twi->bytesToRead;
    663c:	1a 96       	adiw	r26, 0x0a	; 10
    663e:	2c 91       	ld	r18, X
    6640:	1a 97       	sbiw	r26, 0x0a	; 10

  /* If NOT acknowledged (NACK) by slave cancel the transaction. */
  if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    6642:	cd 91       	ld	r28, X+
    6644:	dc 91       	ld	r29, X
    6646:	11 97       	sbiw	r26, 0x01	; 1
    6648:	8c 81       	ldd	r24, Y+4	; 0x04
    664a:	84 ff       	sbrs	r24, 4
    664c:	04 c0       	rjmp	.+8      	; 0x6656 <TWI_MasterWriteHandler+0x26>
    twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    664e:	83 e0       	ldi	r24, 0x03	; 3
    6650:	8b 83       	std	Y+3, r24	; 0x03
    twi->result = TWIM_RESULT_NACK_RECEIVED;
    6652:	85 e0       	ldi	r24, 0x05	; 5
    6654:	24 c0       	rjmp	.+72     	; 0x669e <TWI_MasterWriteHandler+0x6e>
    twi->status = TWIM_STATUS_READY;
  }

  /* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
    6656:	1b 96       	adiw	r26, 0x0b	; 11
    6658:	8c 91       	ld	r24, X
    665a:	1b 97       	sbiw	r26, 0x0b	; 11
    665c:	89 17       	cp	r24, r25
    665e:	90 f4       	brcc	.+36     	; 0x6684 <TWI_MasterWriteHandler+0x54>
    uint8_t data = *(twi->PwriteData + twi->bytesWritten);
    6660:	1b 96       	adiw	r26, 0x0b	; 11
    6662:	8c 91       	ld	r24, X
    6664:	1b 97       	sbiw	r26, 0x0b	; 11
    6666:	13 96       	adiw	r26, 0x03	; 3
    6668:	ed 91       	ld	r30, X+
    666a:	fc 91       	ld	r31, X
    666c:	14 97       	sbiw	r26, 0x04	; 4
    666e:	e8 0f       	add	r30, r24
    6670:	f1 1d       	adc	r31, r1
    6672:	80 81       	ld	r24, Z
    twi->interface->MASTER.DATA = data;
    6674:	8f 83       	std	Y+7, r24	; 0x07
    ++twi->bytesWritten;
    6676:	1b 96       	adiw	r26, 0x0b	; 11
    6678:	8c 91       	ld	r24, X
    667a:	1b 97       	sbiw	r26, 0x0b	; 11
    667c:	8f 5f       	subi	r24, 0xFF	; 255
    667e:	1b 96       	adiw	r26, 0x0b	; 11
    6680:	8c 93       	st	X, r24
    6682:	12 c0       	rjmp	.+36     	; 0x66a8 <TWI_MasterWriteHandler+0x78>
  }

  /* If bytes to read, send repeated START condition + Address + 'R/_W = 1' */
  else if (twi->bytesRead < bytesToRead) {
    6684:	1c 96       	adiw	r26, 0x0c	; 12
    6686:	8c 91       	ld	r24, X
    6688:	1c 97       	sbiw	r26, 0x0c	; 12
    668a:	82 17       	cp	r24, r18
    668c:	28 f4       	brcc	.+10     	; 0x6698 <TWI_MasterWriteHandler+0x68>
    uint8_t readAddress = twi->address | 0x01;
    668e:	12 96       	adiw	r26, 0x02	; 2
    6690:	8c 91       	ld	r24, X
    6692:	81 60       	ori	r24, 0x01	; 1
    twi->interface->MASTER.ADDR = readAddress;
    6694:	8e 83       	std	Y+6, r24	; 0x06
    6696:	08 c0       	rjmp	.+16     	; 0x66a8 <TWI_MasterWriteHandler+0x78>
  }

  /* If transaction finished, send STOP condition and set RESULT OK. */
  else {
    twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    6698:	83 e0       	ldi	r24, 0x03	; 3
    669a:	8b 83       	std	Y+3, r24	; 0x03
	  twi->result = TWIM_RESULT_OK;
    669c:	81 e0       	ldi	r24, 0x01	; 1
    669e:	1e 96       	adiw	r26, 0x0e	; 14
    66a0:	8c 93       	st	X, r24
    66a2:	1e 97       	sbiw	r26, 0x0e	; 14
	  twi->status = TWIM_STATUS_READY;
    66a4:	1d 96       	adiw	r26, 0x0d	; 13
    66a6:	1c 92       	st	X, r1
	}
}
    66a8:	df 91       	pop	r29
    66aa:	cf 91       	pop	r28
    66ac:	08 95       	ret

000066ae <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
    66ae:	dc 01       	movw	r26, r24
  /* Fetch data if bytes to be read. */
  if (twi->bytesRead < twi->readBuffSize) {
    66b0:	1c 96       	adiw	r26, 0x0c	; 12
    66b2:	9c 91       	ld	r25, X
    66b4:	1c 97       	sbiw	r26, 0x0c	; 12
    66b6:	18 96       	adiw	r26, 0x08	; 8
    66b8:	8c 91       	ld	r24, X
    66ba:	18 97       	sbiw	r26, 0x08	; 8
    66bc:	ed 91       	ld	r30, X+
    66be:	fc 91       	ld	r31, X
    66c0:	11 97       	sbiw	r26, 0x01	; 1
    66c2:	98 17       	cp	r25, r24
    66c4:	98 f4       	brcc	.+38     	; 0x66ec <TWI_MasterReadHandler+0x3e>
    uint8_t data = twi->interface->MASTER.DATA;
    66c6:	97 81       	ldd	r25, Z+7	; 0x07
    *(twi->PreadData + twi->bytesRead) = data;
    66c8:	1c 96       	adiw	r26, 0x0c	; 12
    66ca:	8c 91       	ld	r24, X
    66cc:	1c 97       	sbiw	r26, 0x0c	; 12
    66ce:	15 96       	adiw	r26, 0x05	; 5
    66d0:	ed 91       	ld	r30, X+
    66d2:	fc 91       	ld	r31, X
    66d4:	16 97       	sbiw	r26, 0x06	; 6
    66d6:	e8 0f       	add	r30, r24
    66d8:	f1 1d       	adc	r31, r1
    66da:	90 83       	st	Z, r25
    twi->bytesRead++;
    66dc:	1c 96       	adiw	r26, 0x0c	; 12
    66de:	8c 91       	ld	r24, X
    66e0:	1c 97       	sbiw	r26, 0x0c	; 12
    66e2:	8f 5f       	subi	r24, 0xFF	; 255
    66e4:	1c 96       	adiw	r26, 0x0c	; 12
    66e6:	8c 93       	st	X, r24
    66e8:	1c 97       	sbiw	r26, 0x0c	; 12
    66ea:	09 c0       	rjmp	.+18     	; 0x66fe <TWI_MasterReadHandler+0x50>
  }

  /* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
  else {
    twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    66ec:	83 e0       	ldi	r24, 0x03	; 3
    66ee:	83 83       	std	Z+3, r24	; 0x03
	  twi->result = TWIM_RESULT_BUFFER_OVERFLOW;
    66f0:	82 e0       	ldi	r24, 0x02	; 2
    66f2:	1e 96       	adiw	r26, 0x0e	; 14
    66f4:	8c 93       	st	X, r24
    66f6:	1e 97       	sbiw	r26, 0x0e	; 14
	  twi->status = TWIM_STATUS_READY;
    66f8:	1d 96       	adiw	r26, 0x0d	; 13
    66fa:	1c 92       	st	X, r1
    66fc:	1d 97       	sbiw	r26, 0x0d	; 13
  }

  /* Local variable used in if test to avoid compiler warning. */
  uint8_t bytesToRead = twi->bytesToRead;
    66fe:	1a 96       	adiw	r26, 0x0a	; 10
    6700:	9c 91       	ld	r25, X
    6702:	1a 97       	sbiw	r26, 0x0a	; 10

  /* If more bytes to read, issue ACK and start a byte read. */
  if (twi->bytesRead < bytesToRead) {
    6704:	1c 96       	adiw	r26, 0x0c	; 12
    6706:	8c 91       	ld	r24, X
    6708:	1c 97       	sbiw	r26, 0x0c	; 12
    670a:	ed 91       	ld	r30, X+
    670c:	fc 91       	ld	r31, X
    670e:	11 97       	sbiw	r26, 0x01	; 1
    6710:	89 17       	cp	r24, r25
    6712:	18 f4       	brcc	.+6      	; 0x671a <TWI_MasterReadHandler+0x6c>
    twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    6714:	82 e0       	ldi	r24, 0x02	; 2
    6716:	83 83       	std	Z+3, r24	; 0x03
    6718:	08 95       	ret
  }

  /* If transaction finished, issue NACK and STOP condition. */
  else {
    twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    671a:	87 e0       	ldi	r24, 0x07	; 7
    671c:	83 83       	std	Z+3, r24	; 0x03
	  twi->result = TWIM_RESULT_OK;
    671e:	81 e0       	ldi	r24, 0x01	; 1
    6720:	1e 96       	adiw	r26, 0x0e	; 14
    6722:	8c 93       	st	X, r24
    6724:	1e 97       	sbiw	r26, 0x0e	; 14
	  twi->status = TWIM_STATUS_READY;
    6726:	1d 96       	adiw	r26, 0x0d	; 13
    6728:	1c 92       	st	X, r1
    672a:	08 95       	ret

0000672c <TWI_MasterInterruptHandler>:
 *  Check current status and calls the appropriate handler.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
    672c:	dc 01       	movw	r26, r24
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    672e:	ed 91       	ld	r30, X+
    6730:	fc 91       	ld	r31, X
    6732:	11 97       	sbiw	r26, 0x01	; 1
    6734:	44 81       	ldd	r20, Z+4	; 0x04

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
    6736:	24 2f       	mov	r18, r20
    6738:	30 e0       	ldi	r19, 0x00	; 0
    673a:	c9 01       	movw	r24, r18
    673c:	8c 70       	andi	r24, 0x0C	; 12
    673e:	90 70       	andi	r25, 0x00	; 0
    6740:	89 2b       	or	r24, r25
    6742:	21 f0       	breq	.+8      	; 0x674c <TWI_MasterInterruptHandler+0x20>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
    6744:	cd 01       	movw	r24, r26
    6746:	0e 94 03 33 	call	0x6606	; 0x6606 <TWI_MasterArbitrationLostBusErrorHandler>
    674a:	08 95       	ret
  }

  /* If master write interrupt. */
  else if (currentStatus & TWI_MASTER_WIF_bm) {
    674c:	46 ff       	sbrs	r20, 6
    674e:	04 c0       	rjmp	.+8      	; 0x6758 <TWI_MasterInterruptHandler+0x2c>
    TWI_MasterWriteHandler(twi);
    6750:	cd 01       	movw	r24, r26
    6752:	0e 94 18 33 	call	0x6630	; 0x6630 <TWI_MasterWriteHandler>
    6756:	08 95       	ret
  }

	/* If master read interrupt. */
  else if (currentStatus & TWI_MASTER_RIF_bm) {
    6758:	47 ff       	sbrs	r20, 7
    675a:	04 c0       	rjmp	.+8      	; 0x6764 <TWI_MasterInterruptHandler+0x38>
    TWI_MasterReadHandler(twi);
    675c:	cd 01       	movw	r24, r26
    675e:	0e 94 57 33 	call	0x66ae	; 0x66ae <TWI_MasterReadHandler>
    6762:	08 95       	ret
  }

	/* If unexpected state. */
  else {
    twi->result = TWIM_RESULT_FAIL;
    6764:	86 e0       	ldi	r24, 0x06	; 6
    6766:	1e 96       	adiw	r26, 0x0e	; 14
    6768:	8c 93       	st	X, r24
    676a:	1e 97       	sbiw	r26, 0x0e	; 14
    twi->status = TWIM_STATUS_READY;
    676c:	1d 96       	adiw	r26, 0x0d	; 13
    676e:	1c 92       	st	X, r1
    6770:	08 95       	ret

00006772 <TWI_MasterReleaseBuff>:
 }
}


void TWI_MasterReleaseBuff(TWI_Master_t *twi)
{
    6772:	0f 93       	push	r16
    6774:	1f 93       	push	r17
    6776:	8c 01       	movw	r16, r24
 free(twi->PreadData);
    6778:	fc 01       	movw	r30, r24
    677a:	85 81       	ldd	r24, Z+5	; 0x05
    677c:	96 81       	ldd	r25, Z+6	; 0x06
    677e:	0e 94 e3 5b 	call	0xb7c6	; 0xb7c6 <free>
 free(twi->PwriteData);
    6782:	f8 01       	movw	r30, r16
    6784:	83 81       	ldd	r24, Z+3	; 0x03
    6786:	94 81       	ldd	r25, Z+4	; 0x04
    6788:	0e 94 e3 5b 	call	0xb7c6	; 0xb7c6 <free>
}
    678c:	1f 91       	pop	r17
    678e:	0f 91       	pop	r16
    6790:	08 95       	ret

00006792 <TWI_MasterCreateBuff>:
#include "twi.h"

void TWI_MasterCreateBuff(TWI_Master_t *twi, 
                          uint8_t mode)
{
    6792:	cf 93       	push	r28
    6794:	df 93       	push	r29
    6796:	ec 01       	movw	r28, r24
if (mode == 0xff) {
    6798:	6f 3f       	cpi	r22, 0xFF	; 255
    679a:	79 f4       	brne	.+30     	; 0x67ba <TWI_MasterCreateBuff+0x28>
 twi->PreadData = malloc(136);
    679c:	88 e8       	ldi	r24, 0x88	; 136
    679e:	90 e0       	ldi	r25, 0x00	; 0
    67a0:	0e 94 36 5b 	call	0xb66c	; 0xb66c <malloc>
    67a4:	8d 83       	std	Y+5, r24	; 0x05
    67a6:	9e 83       	std	Y+6, r25	; 0x06
 twi->PwriteData = malloc(136);
    67a8:	88 e8       	ldi	r24, 0x88	; 136
    67aa:	90 e0       	ldi	r25, 0x00	; 0
    67ac:	0e 94 36 5b 	call	0xb66c	; 0xb66c <malloc>
    67b0:	8b 83       	std	Y+3, r24	; 0x03
    67b2:	9c 83       	std	Y+4, r25	; 0x04
 twi->writeBuffSize = 136;
    67b4:	88 e8       	ldi	r24, 0x88	; 136
    67b6:	8f 83       	std	Y+7, r24	; 0x07
    67b8:	0f c0       	rjmp	.+30     	; 0x67d8 <TWI_MasterCreateBuff+0x46>
 twi->readBuffSize = 136;
}
else {
 twi->PreadData = malloc(30);
    67ba:	8e e1       	ldi	r24, 0x1E	; 30
    67bc:	90 e0       	ldi	r25, 0x00	; 0
    67be:	0e 94 36 5b 	call	0xb66c	; 0xb66c <malloc>
    67c2:	8d 83       	std	Y+5, r24	; 0x05
    67c4:	9e 83       	std	Y+6, r25	; 0x06
 twi->PwriteData = malloc(50);
    67c6:	82 e3       	ldi	r24, 0x32	; 50
    67c8:	90 e0       	ldi	r25, 0x00	; 0
    67ca:	0e 94 36 5b 	call	0xb66c	; 0xb66c <malloc>
    67ce:	8b 83       	std	Y+3, r24	; 0x03
    67d0:	9c 83       	std	Y+4, r25	; 0x04
 twi->writeBuffSize = 100;
    67d2:	84 e6       	ldi	r24, 0x64	; 100
    67d4:	8f 83       	std	Y+7, r24	; 0x07
 twi->readBuffSize = 50;
    67d6:	82 e3       	ldi	r24, 0x32	; 50
    67d8:	88 87       	std	Y+8, r24	; 0x08
 }
}
    67da:	df 91       	pop	r29
    67dc:	cf 91       	pop	r28
    67de:	08 95       	ret

000067e0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to store the file information */
)
{
    67e0:	0f 93       	push	r16
    67e2:	1f 93       	push	r17
    67e4:	cf 93       	push	r28
    67e6:	df 93       	push	r29
    67e8:	fc 01       	movw	r30, r24
    67ea:	8b 01       	movw	r16, r22
	int i;
	BYTE c, nt, *dir;
	char *p;


	p = fno->fname;
    67ec:	eb 01       	movw	r28, r22
    67ee:	29 96       	adiw	r28, 0x09	; 9
	if (dj->sect) {
    67f0:	86 85       	ldd	r24, Z+14	; 0x0e
    67f2:	97 85       	ldd	r25, Z+15	; 0x0f
    67f4:	a0 89       	ldd	r26, Z+16	; 0x10
    67f6:	b1 89       	ldd	r27, Z+17	; 0x11
    67f8:	00 97       	sbiw	r24, 0x00	; 0
    67fa:	a1 05       	cpc	r26, r1
    67fc:	b1 05       	cpc	r27, r1
    67fe:	09 f4       	brne	.+2      	; 0x6802 <get_fileinfo+0x22>
    6800:	63 c0       	rjmp	.+198    	; 0x68c8 <get_fileinfo+0xe8>
		dir = dj->dir;
    6802:	22 89       	ldd	r18, Z+18	; 0x12
    6804:	33 89       	ldd	r19, Z+19	; 0x13
		nt = dir[DIR_NTres];		/* NT flag */
    6806:	d9 01       	movw	r26, r18
    6808:	1c 96       	adiw	r26, 0x0c	; 12
    680a:	9c 91       	ld	r25, X
    680c:	40 e0       	ldi	r20, 0x00	; 0
    680e:	50 e0       	ldi	r21, 0x00	; 0
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
    6810:	69 2f       	mov	r22, r25
    6812:	70 e0       	ldi	r23, 0x00	; 0
    6814:	68 70       	andi	r22, 0x08	; 8
    6816:	70 70       	andi	r23, 0x00	; 0
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
    6818:	f9 01       	movw	r30, r18
    681a:	e4 0f       	add	r30, r20
    681c:	f5 1f       	adc	r31, r21
    681e:	e0 81       	ld	r30, Z
			if (c == ' ') break;
    6820:	e0 32       	cpi	r30, 0x20	; 32
    6822:	89 f0       	breq	.+34     	; 0x6846 <get_fileinfo+0x66>
			if (c == 0x05) c = 0xE5;
    6824:	e5 30       	cpi	r30, 0x05	; 5
    6826:	09 f4       	brne	.+2      	; 0x682a <get_fileinfo+0x4a>
    6828:	e5 ee       	ldi	r30, 0xE5	; 229
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
    682a:	61 15       	cp	r22, r1
    682c:	71 05       	cpc	r23, r1
    682e:	29 f0       	breq	.+10     	; 0x683a <get_fileinfo+0x5a>
    6830:	8e 2f       	mov	r24, r30
    6832:	81 54       	subi	r24, 0x41	; 65
    6834:	8a 31       	cpi	r24, 0x1A	; 26
    6836:	08 f4       	brcc	.+2      	; 0x683a <get_fileinfo+0x5a>
    6838:	e0 5e       	subi	r30, 0xE0	; 224
			*p++ = c;
    683a:	e9 93       	st	Y+, r30

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    683c:	4f 5f       	subi	r20, 0xFF	; 255
    683e:	5f 4f       	sbci	r21, 0xFF	; 255
    6840:	48 30       	cpi	r20, 0x08	; 8
    6842:	51 05       	cpc	r21, r1
    6844:	49 f7       	brne	.-46     	; 0x6818 <get_fileinfo+0x38>
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
    6846:	f9 01       	movw	r30, r18
    6848:	80 85       	ldd	r24, Z+8	; 0x08
    684a:	80 32       	cpi	r24, 0x20	; 32
    684c:	11 f4       	brne	.+4      	; 0x6852 <get_fileinfo+0x72>
    684e:	fe 01       	movw	r30, r28
    6850:	1d c0       	rjmp	.+58     	; 0x688c <get_fileinfo+0xac>
			*p++ = '.';
    6852:	fe 01       	movw	r30, r28
    6854:	8e e2       	ldi	r24, 0x2E	; 46
    6856:	81 93       	st	Z+, r24
    6858:	d9 01       	movw	r26, r18
			for (i = 8; i < 11; i++) {
				c = dir[i];
				if (c == ' ') break;
				if ((nt & 0x10) && IsUpper(c)) c += 0x20;
    685a:	49 2f       	mov	r20, r25
    685c:	50 e0       	ldi	r21, 0x00	; 0
    685e:	40 71       	andi	r20, 0x10	; 16
    6860:	50 70       	andi	r21, 0x00	; 0
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    6862:	be 01       	movw	r22, r28
    6864:	6c 5f       	subi	r22, 0xFC	; 252
    6866:	7f 4f       	sbci	r23, 0xFF	; 255
				c = dir[i];
    6868:	18 96       	adiw	r26, 0x08	; 8
    686a:	9c 91       	ld	r25, X
    686c:	18 97       	sbiw	r26, 0x08	; 8
				if (c == ' ') break;
    686e:	90 32       	cpi	r25, 0x20	; 32
    6870:	69 f0       	breq	.+26     	; 0x688c <get_fileinfo+0xac>
				if ((nt & 0x10) && IsUpper(c)) c += 0x20;
    6872:	41 15       	cp	r20, r1
    6874:	51 05       	cpc	r21, r1
    6876:	29 f0       	breq	.+10     	; 0x6882 <get_fileinfo+0xa2>
    6878:	89 2f       	mov	r24, r25
    687a:	81 54       	subi	r24, 0x41	; 65
    687c:	8a 31       	cpi	r24, 0x1A	; 26
    687e:	08 f4       	brcc	.+2      	; 0x6882 <get_fileinfo+0xa2>
    6880:	90 5e       	subi	r25, 0xE0	; 224
				*p++ = c;
    6882:	91 93       	st	Z+, r25
    6884:	11 96       	adiw	r26, 0x01	; 1
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    6886:	e6 17       	cp	r30, r22
    6888:	f7 07       	cpc	r31, r23
    688a:	71 f7       	brne	.-36     	; 0x6868 <get_fileinfo+0x88>
				if (c == ' ') break;
				if ((nt & 0x10) && IsUpper(c)) c += 0x20;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    688c:	d9 01       	movw	r26, r18
    688e:	1b 96       	adiw	r26, 0x0b	; 11
    6890:	8c 91       	ld	r24, X
    6892:	1b 97       	sbiw	r26, 0x0b	; 11
    6894:	e8 01       	movw	r28, r16
    6896:	88 87       	std	Y+8, r24	; 0x08
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    6898:	5c 96       	adiw	r26, 0x1c	; 28
    689a:	8d 91       	ld	r24, X+
    689c:	9d 91       	ld	r25, X+
    689e:	0d 90       	ld	r0, X+
    68a0:	bc 91       	ld	r27, X
    68a2:	a0 2d       	mov	r26, r0
    68a4:	88 83       	st	Y, r24
    68a6:	99 83       	std	Y+1, r25	; 0x01
    68a8:	aa 83       	std	Y+2, r26	; 0x02
    68aa:	bb 83       	std	Y+3, r27	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    68ac:	d9 01       	movw	r26, r18
    68ae:	58 96       	adiw	r26, 0x18	; 24
    68b0:	8d 91       	ld	r24, X+
    68b2:	9c 91       	ld	r25, X
    68b4:	59 97       	sbiw	r26, 0x19	; 25
    68b6:	8c 83       	std	Y+4, r24	; 0x04
    68b8:	9d 83       	std	Y+5, r25	; 0x05
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    68ba:	56 96       	adiw	r26, 0x16	; 22
    68bc:	8d 91       	ld	r24, X+
    68be:	9c 91       	ld	r25, X
    68c0:	57 97       	sbiw	r26, 0x17	; 23
    68c2:	8e 83       	std	Y+6, r24	; 0x06
    68c4:	9f 83       	std	Y+7, r25	; 0x07
    68c6:	ef 01       	movw	r28, r30
	}
	*p = 0;
    68c8:	18 82       	st	Y, r1
			}
		}
		tp[i] = 0;	/* Terminator */
	}
#endif
}
    68ca:	df 91       	pop	r29
    68cc:	cf 91       	pop	r28
    68ce:	1f 91       	pop	r17
    68d0:	0f 91       	pop	r16
    68d2:	08 95       	ret

000068d4 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    68d4:	cf 93       	push	r28
    68d6:	df 93       	push	r29
    68d8:	eb 01       	movw	r28, r22
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
    68da:	82 30       	cpi	r24, 0x02	; 2
    68dc:	18 f0       	brcs	.+6      	; 0x68e4 <f_mount+0x10>
    68de:	2b e0       	ldi	r18, 0x0B	; 11
    68e0:	30 e0       	ldi	r19, 0x00	; 0
    68e2:	18 c0       	rjmp	.+48     	; 0x6914 <f_mount+0x40>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
    68e4:	a8 2f       	mov	r26, r24
    68e6:	b0 e0       	ldi	r27, 0x00	; 0
    68e8:	fd 01       	movw	r30, r26
    68ea:	ee 0f       	add	r30, r30
    68ec:	ff 1f       	adc	r31, r31
    68ee:	e6 59       	subi	r30, 0x96	; 150
    68f0:	fa 4d       	sbci	r31, 0xDA	; 218
    68f2:	01 90       	ld	r0, Z+
    68f4:	f0 81       	ld	r31, Z
    68f6:	e0 2d       	mov	r30, r0

	if (rfs) {
    68f8:	30 97       	sbiw	r30, 0x00	; 0
    68fa:	09 f0       	breq	.+2      	; 0x68fe <f_mount+0x2a>
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
    68fc:	10 82       	st	Z, r1
	}

	if (fs) {
    68fe:	20 97       	sbiw	r28, 0x00	; 0
    6900:	09 f0       	breq	.+2      	; 0x6904 <f_mount+0x30>
		fs->fs_type = 0;			/* Clear new fs object */
    6902:	18 82       	st	Y, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
    6904:	aa 0f       	add	r26, r26
    6906:	bb 1f       	adc	r27, r27
    6908:	a6 59       	subi	r26, 0x96	; 150
    690a:	ba 4d       	sbci	r27, 0xDA	; 218
    690c:	cd 93       	st	X+, r28
    690e:	dc 93       	st	X, r29
    6910:	20 e0       	ldi	r18, 0x00	; 0
    6912:	30 e0       	ldi	r19, 0x00	; 0

	return FR_OK;
}
    6914:	c9 01       	movw	r24, r18
    6916:	df 91       	pop	r29
    6918:	cf 91       	pop	r28
    691a:	08 95       	ret

0000691c <f_chdrive>:

FRESULT f_chdrive (
	BYTE drv		/* Drive number */
)
{
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
    691c:	82 30       	cpi	r24, 0x02	; 2
    691e:	18 f0       	brcs	.+6      	; 0x6926 <f_chdrive+0xa>
    6920:	2b e0       	ldi	r18, 0x0B	; 11
    6922:	30 e0       	ldi	r19, 0x00	; 0
    6924:	04 c0       	rjmp	.+8      	; 0x692e <f_chdrive+0x12>

	Drive = drv;
    6926:	80 93 70 25 	sts	0x2570, r24
    692a:	20 e0       	ldi	r18, 0x00	; 0
    692c:	30 e0       	ldi	r19, 0x00	; 0

	return FR_OK;
}
    692e:	c9 01       	movw	r24, r18
    6930:	08 95       	ret

00006932 <f_mkfs>:
FRESULT f_mkfs (
	BYTE drv,			/* Logical drive number */
	BYTE partition,		/* Partitioning rule 0:FDISK, 1:SFD */
	WORD allocsize		/* Allocation unit size [bytes] */
)
{
    6932:	a5 e2       	ldi	r26, 0x25	; 37
    6934:	b0 e0       	ldi	r27, 0x00	; 0
    6936:	ef e9       	ldi	r30, 0x9F	; 159
    6938:	f4 e3       	ldi	r31, 0x34	; 52
    693a:	0c 94 f9 5a 	jmp	0xb5f2	; 0xb5f2 <__prologue_saves__>
    693e:	38 2e       	mov	r3, r24
    6940:	26 2e       	mov	r2, r22
    6942:	8a 01       	movw	r16, r20
	FATFS *fs;
	DSTATUS stat;


	/* Check validity of the parameters */
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
    6944:	21 e0       	ldi	r18, 0x01	; 1
    6946:	28 17       	cp	r18, r24
    6948:	18 f4       	brcc	.+6      	; 0x6950 <f_mkfs+0x1e>
    694a:	2b e0       	ldi	r18, 0x0B	; 11
    694c:	30 e0       	ldi	r19, 0x00	; 0
    694e:	58 c4       	rjmp	.+2224   	; 0x7200 <f_mkfs+0x8ce>
	if (partition >= 2) return FR_MKFS_ABORTED;
    6950:	31 e0       	ldi	r19, 0x01	; 1
    6952:	36 17       	cp	r19, r22
    6954:	08 f4       	brcc	.+2      	; 0x6958 <f_mkfs+0x26>
    6956:	4f c4       	rjmp	.+2206   	; 0x71f6 <f_mkfs+0x8c4>

	/* Check mounted drive and clear work area */
	fs = FatFs[drv];
    6958:	e8 2f       	mov	r30, r24
    695a:	f0 e0       	ldi	r31, 0x00	; 0
    695c:	ee 0f       	add	r30, r30
    695e:	ff 1f       	adc	r31, r31
    6960:	e6 59       	subi	r30, 0x96	; 150
    6962:	fa 4d       	sbci	r31, 0xDA	; 218
    6964:	80 80       	ld	r8, Z
    6966:	91 80       	ldd	r9, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;
    6968:	81 14       	cp	r8, r1
    696a:	91 04       	cpc	r9, r1
    696c:	19 f4       	brne	.+6      	; 0x6974 <f_mkfs+0x42>
    696e:	2c e0       	ldi	r18, 0x0C	; 12
    6970:	30 e0       	ldi	r19, 0x00	; 0
    6972:	46 c4       	rjmp	.+2188   	; 0x7200 <f_mkfs+0x8ce>
	fs->fs_type = 0;
    6974:	d4 01       	movw	r26, r8
    6976:	1c 92       	st	X, r1
	drv = LD2PD(drv);

	/* Get disk statics */
	stat = disk_initialize(drv);
    6978:	0e 94 d2 56 	call	0xada4	; 0xada4 <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
    697c:	80 ff       	sbrs	r24, 0
    697e:	03 c0       	rjmp	.+6      	; 0x6986 <f_mkfs+0x54>
    6980:	23 e0       	ldi	r18, 0x03	; 3
    6982:	30 e0       	ldi	r19, 0x00	; 0
    6984:	3d c4       	rjmp	.+2170   	; 0x7200 <f_mkfs+0x8ce>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    6986:	82 ff       	sbrs	r24, 2
    6988:	03 c0       	rjmp	.+6      	; 0x6990 <f_mkfs+0x5e>
    698a:	2a e0       	ldi	r18, 0x0A	; 10
    698c:	30 e0       	ldi	r19, 0x00	; 0
    698e:	38 c4       	rjmp	.+2160   	; 0x7200 <f_mkfs+0x8ce>
#if _MAX_SS != 512						/* Get disk sector size */
	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) > _MAX_SS)
		return FR_MKFS_ABORTED;
#endif
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_part) != RES_OK || n_part < MIN_SECTOR)
    6990:	83 2d       	mov	r24, r3
    6992:	61 e0       	ldi	r22, 0x01	; 1
    6994:	ae 01       	movw	r20, r28
    6996:	4f 5f       	subi	r20, 0xFF	; 255
    6998:	5f 4f       	sbci	r21, 0xFF	; 255
    699a:	0e 94 c6 54 	call	0xa98c	; 0xa98c <disk_ioctl>
    699e:	89 2b       	or	r24, r25
    69a0:	09 f0       	breq	.+2      	; 0x69a4 <f_mkfs+0x72>
    69a2:	29 c4       	rjmp	.+2130   	; 0x71f6 <f_mkfs+0x8c4>
    69a4:	89 81       	ldd	r24, Y+1	; 0x01
    69a6:	9a 81       	ldd	r25, Y+2	; 0x02
    69a8:	ab 81       	ldd	r26, Y+3	; 0x03
    69aa:	bc 81       	ldd	r27, Y+4	; 0x04
    69ac:	80 3d       	cpi	r24, 0xD0	; 208
    69ae:	e7 e0       	ldi	r30, 0x07	; 7
    69b0:	9e 07       	cpc	r25, r30
    69b2:	e0 e0       	ldi	r30, 0x00	; 0
    69b4:	ae 07       	cpc	r26, r30
    69b6:	e0 e0       	ldi	r30, 0x00	; 0
    69b8:	be 07       	cpc	r27, r30
    69ba:	08 f4       	brcc	.+2      	; 0x69be <f_mkfs+0x8c>
    69bc:	1c c4       	rjmp	.+2104   	; 0x71f6 <f_mkfs+0x8c4>
		return FR_MKFS_ABORTED;
	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
    69be:	81 50       	subi	r24, 0x01	; 1
    69c0:	90 40       	sbci	r25, 0x00	; 0
    69c2:	a0 4d       	sbci	r26, 0xD0	; 208
    69c4:	b7 40       	sbci	r27, 0x07	; 7
    69c6:	40 f0       	brcs	.+16     	; 0x69d8 <f_mkfs+0xa6>
    69c8:	80 e0       	ldi	r24, 0x00	; 0
    69ca:	90 e0       	ldi	r25, 0x00	; 0
    69cc:	a0 ed       	ldi	r26, 0xD0	; 208
    69ce:	b7 e0       	ldi	r27, 0x07	; 7
    69d0:	89 83       	std	Y+1, r24	; 0x01
    69d2:	9a 83       	std	Y+2, r25	; 0x02
    69d4:	ab 83       	std	Y+3, r26	; 0x03
    69d6:	bc 83       	std	Y+4, r27	; 0x04
	b_part = (!partition) ? 63 : 0;		/* Boot sector */
    69d8:	22 20       	and	r2, r2
    69da:	29 f0       	breq	.+10     	; 0x69e6 <f_mkfs+0xb4>
    69dc:	1b 8e       	std	Y+27, r1	; 0x1b
    69de:	1c 8e       	std	Y+28, r1	; 0x1c
    69e0:	1d 8e       	std	Y+29, r1	; 0x1d
    69e2:	1e 8e       	std	Y+30, r1	; 0x1e
    69e4:	08 c0       	rjmp	.+16     	; 0x69f6 <f_mkfs+0xc4>
    69e6:	2f e3       	ldi	r18, 0x3F	; 63
    69e8:	30 e0       	ldi	r19, 0x00	; 0
    69ea:	40 e0       	ldi	r20, 0x00	; 0
    69ec:	50 e0       	ldi	r21, 0x00	; 0
    69ee:	2b 8f       	std	Y+27, r18	; 0x1b
    69f0:	3c 8f       	std	Y+28, r19	; 0x1c
    69f2:	4d 8f       	std	Y+29, r20	; 0x1d
    69f4:	5e 8f       	std	Y+30, r21	; 0x1e
	n_part -= b_part;
    69f6:	a9 80       	ldd	r10, Y+1	; 0x01
    69f8:	ba 80       	ldd	r11, Y+2	; 0x02
    69fa:	cb 80       	ldd	r12, Y+3	; 0x03
    69fc:	dc 80       	ldd	r13, Y+4	; 0x04
    69fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6a00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6a02:	ad 8d       	ldd	r26, Y+29	; 0x1d
    6a04:	be 8d       	ldd	r27, Y+30	; 0x1e
    6a06:	a8 1a       	sub	r10, r24
    6a08:	b9 0a       	sbc	r11, r25
    6a0a:	ca 0a       	sbc	r12, r26
    6a0c:	db 0a       	sbc	r13, r27
    6a0e:	80 e0       	ldi	r24, 0x00	; 0
    6a10:	92 e0       	ldi	r25, 0x02	; 2
    6a12:	a0 e0       	ldi	r26, 0x00	; 0
    6a14:	b0 e0       	ldi	r27, 0x00	; 0
    6a16:	20 e0       	ldi	r18, 0x00	; 0
    6a18:	30 e0       	ldi	r19, 0x00	; 0
	for (d = 512; d <= 32768U && d != allocsize; d <<= 1) ;	/* Check validity of the allocation unit size */
    6a1a:	a8 01       	movw	r20, r16
    6a1c:	60 e0       	ldi	r22, 0x00	; 0
    6a1e:	70 e0       	ldi	r23, 0x00	; 0
    6a20:	09 c0       	rjmp	.+18     	; 0x6a34 <f_mkfs+0x102>
    6a22:	88 0f       	add	r24, r24
    6a24:	99 1f       	adc	r25, r25
    6a26:	aa 1f       	adc	r26, r26
    6a28:	bb 1f       	adc	r27, r27
    6a2a:	2f 5f       	subi	r18, 0xFF	; 255
    6a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    6a2e:	27 30       	cpi	r18, 0x07	; 7
    6a30:	31 05       	cpc	r19, r1
    6a32:	31 f0       	breq	.+12     	; 0x6a40 <f_mkfs+0x10e>
    6a34:	84 17       	cp	r24, r20
    6a36:	95 07       	cpc	r25, r21
    6a38:	a6 07       	cpc	r26, r22
    6a3a:	b7 07       	cpc	r27, r23
    6a3c:	91 f7       	brne	.-28     	; 0x6a22 <f_mkfs+0xf0>
    6a3e:	05 c0       	rjmp	.+10     	; 0x6a4a <f_mkfs+0x118>
	if (d != allocsize) allocsize = 0;
    6a40:	84 17       	cp	r24, r20
    6a42:	95 07       	cpc	r25, r21
    6a44:	a6 07       	cpc	r26, r22
    6a46:	b7 07       	cpc	r27, r23
    6a48:	19 f4       	brne	.+6      	; 0x6a50 <f_mkfs+0x11e>
	if (!allocsize) {					/* Auto selection of cluster size */
    6a4a:	01 15       	cp	r16, r1
    6a4c:	11 05       	cpc	r17, r1
    6a4e:	11 f5       	brne	.+68     	; 0x6a94 <f_mkfs+0x162>
		d = n_part;
		for (as = SS(fs); as > 512U; as >>= 1) d >>= 1;
		for (n = 0; d < sstbl[n]; n++) ;
    6a50:	e0 e3       	ldi	r30, 0x30	; 48
    6a52:	f4 e2       	ldi	r31, 0x24	; 36
    6a54:	20 e0       	ldi	r18, 0x00	; 0
    6a56:	30 e0       	ldi	r19, 0x00	; 0
    6a58:	40 e0       	ldi	r20, 0x00	; 0
    6a5a:	50 e0       	ldi	r21, 0x00	; 0
    6a5c:	81 91       	ld	r24, Z+
    6a5e:	91 91       	ld	r25, Z+
    6a60:	a1 91       	ld	r26, Z+
    6a62:	b1 91       	ld	r27, Z+
    6a64:	b9 01       	movw	r22, r18
    6a66:	14 2f       	mov	r17, r20
    6a68:	05 2f       	mov	r16, r21
    6a6a:	2f 5f       	subi	r18, 0xFF	; 255
    6a6c:	3f 4f       	sbci	r19, 0xFF	; 255
    6a6e:	4f 4f       	sbci	r20, 0xFF	; 255
    6a70:	5f 4f       	sbci	r21, 0xFF	; 255
    6a72:	a8 16       	cp	r10, r24
    6a74:	b9 06       	cpc	r11, r25
    6a76:	ca 06       	cpc	r12, r26
    6a78:	db 06       	cpc	r13, r27
    6a7a:	80 f3       	brcs	.-32     	; 0x6a5c <f_mkfs+0x12a>
    6a7c:	cb 01       	movw	r24, r22
    6a7e:	6d 83       	std	Y+5, r22	; 0x05
    6a80:	9e 83       	std	Y+6, r25	; 0x06
    6a82:	1f 83       	std	Y+7, r17	; 0x07
    6a84:	08 87       	std	Y+8, r16	; 0x08
		allocsize = cstbl[n];
    6a86:	fb 01       	movw	r30, r22
    6a88:	ee 0f       	add	r30, r30
    6a8a:	ff 1f       	adc	r31, r31
    6a8c:	e6 5e       	subi	r30, 0xE6	; 230
    6a8e:	fb 4d       	sbci	r31, 0xDB	; 219
    6a90:	00 81       	ld	r16, Z
    6a92:	11 81       	ldd	r17, Z+1	; 0x01
	}
	if (allocsize < SS(fs)) allocsize = SS(fs);
    6a94:	92 e0       	ldi	r25, 0x02	; 2
    6a96:	00 30       	cpi	r16, 0x00	; 0
    6a98:	19 07       	cpc	r17, r25
    6a9a:	10 f4       	brcc	.+4      	; 0x6aa0 <f_mkfs+0x16e>
    6a9c:	00 e0       	ldi	r16, 0x00	; 0
    6a9e:	12 e0       	ldi	r17, 0x02	; 2

	allocsize /= SS(fs);		/* Number of sectors per cluster */
    6aa0:	d8 01       	movw	r26, r16
    6aa2:	ab 2f       	mov	r26, r27
    6aa4:	bb 27       	eor	r27, r27
    6aa6:	a6 95       	lsr	r26
    6aa8:	ad 8b       	std	Y+21, r26	; 0x15
    6aaa:	be 8b       	std	Y+22, r27	; 0x16

	/* Pre-compute number of clusters and FAT type */
	n_clst = n_part / allocsize;
    6aac:	9d 01       	movw	r18, r26
    6aae:	40 e0       	ldi	r20, 0x00	; 0
    6ab0:	50 e0       	ldi	r21, 0x00	; 0
    6ab2:	29 8b       	std	Y+17, r18	; 0x11
    6ab4:	3a 8b       	std	Y+18, r19	; 0x12
    6ab6:	4b 8b       	std	Y+19, r20	; 0x13
    6ab8:	5c 8b       	std	Y+20, r21	; 0x14
    6aba:	c6 01       	movw	r24, r12
    6abc:	b5 01       	movw	r22, r10
    6abe:	0e 94 bc 5a 	call	0xb578	; 0xb578 <__udivmodsi4>
    6ac2:	c9 01       	movw	r24, r18
    6ac4:	da 01       	movw	r26, r20
	fmt = FS_FAT12;
	if (n_clst >= 0xFF5) fmt = FS_FAT16;
    6ac6:	85 3f       	cpi	r24, 0xF5	; 245
    6ac8:	5f e0       	ldi	r21, 0x0F	; 15
    6aca:	95 07       	cpc	r25, r21
    6acc:	50 e0       	ldi	r21, 0x00	; 0
    6ace:	a5 07       	cpc	r26, r21
    6ad0:	50 e0       	ldi	r21, 0x00	; 0
    6ad2:	b5 07       	cpc	r27, r21
    6ad4:	08 f4       	brcc	.+2      	; 0x6ad8 <f_mkfs+0x1a6>
    6ad6:	99 c3       	rjmp	.+1842   	; 0x720a <f_mkfs+0x8d8>
    6ad8:	22 2d       	mov	r18, r2
    6ada:	30 e0       	ldi	r19, 0x00	; 0
	if (n_clst >= 0xFFF5) fmt = FS_FAT32;
    6adc:	85 3f       	cpi	r24, 0xF5	; 245
    6ade:	ef ef       	ldi	r30, 0xFF	; 255
    6ae0:	9e 07       	cpc	r25, r30
    6ae2:	e0 e0       	ldi	r30, 0x00	; 0
    6ae4:	ae 07       	cpc	r26, r30
    6ae6:	e0 e0       	ldi	r30, 0x00	; 0
    6ae8:	be 07       	cpc	r27, r30
    6aea:	30 f5       	brcc	.+76     	; 0x6b38 <f_mkfs+0x206>
		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
		n_rsv = 1 + partition;
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
	case FS_FAT16:
		n_fat = ((n_clst * 2) + 4 + SS(fs) - 1) / SS(fs);
    6aec:	7c 01       	movw	r14, r24
    6aee:	8d 01       	movw	r16, r26
    6af0:	ee 0c       	add	r14, r14
    6af2:	ff 1c       	adc	r15, r15
    6af4:	00 1f       	adc	r16, r16
    6af6:	11 1f       	adc	r17, r17
    6af8:	83 e0       	ldi	r24, 0x03	; 3
    6afa:	92 e0       	ldi	r25, 0x02	; 2
    6afc:	a0 e0       	ldi	r26, 0x00	; 0
    6afe:	b0 e0       	ldi	r27, 0x00	; 0
    6b00:	e8 0e       	add	r14, r24
    6b02:	f9 1e       	adc	r15, r25
    6b04:	0a 1f       	adc	r16, r26
    6b06:	1b 1f       	adc	r17, r27
    6b08:	f9 e0       	ldi	r31, 0x09	; 9
    6b0a:	16 95       	lsr	r17
    6b0c:	07 95       	ror	r16
    6b0e:	f7 94       	ror	r15
    6b10:	e7 94       	ror	r14
    6b12:	fa 95       	dec	r31
    6b14:	d1 f7       	brne	.-12     	; 0x6b0a <f_mkfs+0x1d8>
		n_rsv = 1 + partition;
    6b16:	2f 5f       	subi	r18, 0xFF	; 255
    6b18:	3f 4f       	sbci	r19, 0xFF	; 255
    6b1a:	29 01       	movw	r4, r18
    6b1c:	66 24       	eor	r6, r6
    6b1e:	57 fc       	sbrc	r5, 7
    6b20:	60 94       	com	r6
    6b22:	76 2c       	mov	r7, r6
    6b24:	20 e2       	ldi	r18, 0x20	; 32
    6b26:	30 e0       	ldi	r19, 0x00	; 0
    6b28:	40 e0       	ldi	r20, 0x00	; 0
    6b2a:	50 e0       	ldi	r21, 0x00	; 0
    6b2c:	2f 8b       	std	Y+23, r18	; 0x17
    6b2e:	38 8f       	std	Y+24, r19	; 0x18
    6b30:	49 8f       	std	Y+25, r20	; 0x19
    6b32:	5a 8f       	std	Y+26, r21	; 0x1a
    6b34:	32 e0       	ldi	r19, 0x02	; 2
    6b36:	9c c3       	rjmp	.+1848   	; 0x7270 <f_mkfs+0x93e>
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
	default:
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
    6b38:	7c 01       	movw	r14, r24
    6b3a:	8d 01       	movw	r16, r26
    6b3c:	e2 e0       	ldi	r30, 0x02	; 2
    6b3e:	ee 0c       	add	r14, r14
    6b40:	ff 1c       	adc	r15, r15
    6b42:	00 1f       	adc	r16, r16
    6b44:	11 1f       	adc	r17, r17
    6b46:	ea 95       	dec	r30
    6b48:	d1 f7       	brne	.-12     	; 0x6b3e <f_mkfs+0x20c>
    6b4a:	87 e0       	ldi	r24, 0x07	; 7
    6b4c:	92 e0       	ldi	r25, 0x02	; 2
    6b4e:	a0 e0       	ldi	r26, 0x00	; 0
    6b50:	b0 e0       	ldi	r27, 0x00	; 0
    6b52:	e8 0e       	add	r14, r24
    6b54:	f9 1e       	adc	r15, r25
    6b56:	0a 1f       	adc	r16, r26
    6b58:	1b 1f       	adc	r17, r27
    6b5a:	79 e0       	ldi	r23, 0x09	; 9
    6b5c:	16 95       	lsr	r17
    6b5e:	07 95       	ror	r16
    6b60:	f7 94       	ror	r15
    6b62:	e7 94       	ror	r14
    6b64:	7a 95       	dec	r23
    6b66:	d1 f7       	brne	.-12     	; 0x6b5c <f_mkfs+0x22a>
		n_rsv = 33 - partition;
    6b68:	81 e2       	ldi	r24, 0x21	; 33
    6b6a:	90 e0       	ldi	r25, 0x00	; 0
    6b6c:	82 1b       	sub	r24, r18
    6b6e:	93 0b       	sbc	r25, r19
    6b70:	2c 01       	movw	r4, r24
    6b72:	66 24       	eor	r6, r6
    6b74:	57 fc       	sbrc	r5, 7
    6b76:	60 94       	com	r6
    6b78:	76 2c       	mov	r7, r6
    6b7a:	1f 8a       	std	Y+23, r1	; 0x17
    6b7c:	18 8e       	std	Y+24, r1	; 0x18
    6b7e:	19 8e       	std	Y+25, r1	; 0x19
    6b80:	1a 8e       	std	Y+26, r1	; 0x1a
    6b82:	93 e0       	ldi	r25, 0x03	; 3
    6b84:	9f 8f       	std	Y+31, r25	; 0x1f
#endif
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_part) != RES_OK || n_part < MIN_SECTOR)
		return FR_MKFS_ABORTED;
	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
	b_part = (!partition) ? 63 : 0;		/* Boot sector */
	n_part -= b_part;
    6b86:	a9 82       	std	Y+1, r10	; 0x01
    6b88:	ba 82       	std	Y+2, r11	; 0x02
    6b8a:	cb 82       	std	Y+3, r12	; 0x03
    6b8c:	dc 82       	std	Y+4, r13	; 0x04
	b_fat = b_part + n_rsv;			/* FATs start sector */
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
    6b8e:	83 2d       	mov	r24, r3
    6b90:	63 e0       	ldi	r22, 0x03	; 3
    6b92:	ae 01       	movw	r20, r28
    6b94:	4b 5f       	subi	r20, 0xFB	; 251
    6b96:	5f 4f       	sbci	r21, 0xFF	; 255
    6b98:	0e 94 c6 54 	call	0xa98c	; 0xa98c <disk_ioctl>
    6b9c:	89 2b       	or	r24, r25
    6b9e:	09 f0       	breq	.+2      	; 0x6ba2 <f_mkfs+0x270>
    6ba0:	2a c3       	rjmp	.+1620   	; 0x71f6 <f_mkfs+0x8c4>
	default:
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 33 - partition;
		n_dir = 0;
	}
	b_fat = b_part + n_rsv;			/* FATs start sector */
    6ba2:	2b 8d       	ldd	r18, Y+27	; 0x1b
    6ba4:	3c 8d       	ldd	r19, Y+28	; 0x1c
    6ba6:	4d 8d       	ldd	r20, Y+29	; 0x1d
    6ba8:	5e 8d       	ldd	r21, Y+30	; 0x1e
    6baa:	24 0d       	add	r18, r4
    6bac:	35 1d       	adc	r19, r5
    6bae:	46 1d       	adc	r20, r6
    6bb0:	57 1d       	adc	r21, r7
    6bb2:	2d 87       	std	Y+13, r18	; 0x0d
    6bb4:	3e 87       	std	Y+14, r19	; 0x0e
    6bb6:	4f 87       	std	Y+15, r20	; 0x0f
    6bb8:	58 8b       	std	Y+16, r21	; 0x10
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */
    6bba:	2f 89       	ldd	r18, Y+23	; 0x17
    6bbc:	38 8d       	ldd	r19, Y+24	; 0x18
    6bbe:	49 8d       	ldd	r20, Y+25	; 0x19
    6bc0:	5a 8d       	ldd	r21, Y+26	; 0x1a
    6bc2:	2e 0d       	add	r18, r14
    6bc4:	3f 1d       	adc	r19, r15
    6bc6:	40 1f       	adc	r20, r16
    6bc8:	51 1f       	adc	r21, r17
    6bca:	8d 85       	ldd	r24, Y+13	; 0x0d
    6bcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    6bce:	af 85       	ldd	r26, Y+15	; 0x0f
    6bd0:	b8 89       	ldd	r27, Y+16	; 0x10
    6bd2:	28 0f       	add	r18, r24
    6bd4:	39 1f       	adc	r19, r25
    6bd6:	4a 1f       	adc	r20, r26
    6bd8:	5b 1f       	adc	r21, r27

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
    6bda:	8d 81       	ldd	r24, Y+5	; 0x05
    6bdc:	9e 81       	ldd	r25, Y+6	; 0x06
    6bde:	af 81       	ldd	r26, Y+7	; 0x07
    6be0:	b8 85       	ldd	r27, Y+8	; 0x08
    6be2:	5c 01       	movw	r10, r24
    6be4:	6d 01       	movw	r12, r26
    6be6:	08 94       	sec
    6be8:	a1 08       	sbc	r10, r1
    6bea:	b1 08       	sbc	r11, r1
    6bec:	c1 08       	sbc	r12, r1
    6bee:	d1 08       	sbc	r13, r1
    6bf0:	a2 0e       	add	r10, r18
    6bf2:	b3 1e       	adc	r11, r19
    6bf4:	c4 1e       	adc	r12, r20
    6bf6:	d5 1e       	adc	r13, r21
    6bf8:	b0 95       	com	r27
    6bfa:	a0 95       	com	r26
    6bfc:	90 95       	com	r25
    6bfe:	81 95       	neg	r24
    6c00:	9f 4f       	sbci	r25, 0xFF	; 255
    6c02:	af 4f       	sbci	r26, 0xFF	; 255
    6c04:	bf 4f       	sbci	r27, 0xFF	; 255
    6c06:	a8 22       	and	r10, r24
    6c08:	b9 22       	and	r11, r25
    6c0a:	ca 22       	and	r12, r26
    6c0c:	db 22       	and	r13, r27
	n_fat += (n - b_data) / N_FATS;
    6c0e:	d8 01       	movw	r26, r16
    6c10:	c7 01       	movw	r24, r14
    6c12:	82 1b       	sub	r24, r18
    6c14:	93 0b       	sbc	r25, r19
    6c16:	a4 0b       	sbc	r26, r20
    6c18:	b5 0b       	sbc	r27, r21
    6c1a:	8a 0d       	add	r24, r10
    6c1c:	9b 1d       	adc	r25, r11
    6c1e:	ac 1d       	adc	r26, r12
    6c20:	bd 1d       	adc	r27, r13
    6c22:	89 87       	std	Y+9, r24	; 0x09
    6c24:	9a 87       	std	Y+10, r25	; 0x0a
    6c26:	ab 87       	std	Y+11, r26	; 0x0b
    6c28:	bc 87       	std	Y+12, r27	; 0x0c
	/* b_dir and b_data are no longer used below */

	/* Determine number of cluster and final check of validity of the FAT type */
	n_clst = (n_part - n_rsv - n_fat * N_FATS - n_dir) / allocsize;
    6c2a:	e9 80       	ldd	r14, Y+1	; 0x01
    6c2c:	fa 80       	ldd	r15, Y+2	; 0x02
    6c2e:	0b 81       	ldd	r16, Y+3	; 0x03
    6c30:	1c 81       	ldd	r17, Y+4	; 0x04
    6c32:	c8 01       	movw	r24, r16
    6c34:	b7 01       	movw	r22, r14
    6c36:	64 19       	sub	r22, r4
    6c38:	75 09       	sbc	r23, r5
    6c3a:	86 09       	sbc	r24, r6
    6c3c:	97 09       	sbc	r25, r7
    6c3e:	29 85       	ldd	r18, Y+9	; 0x09
    6c40:	3a 85       	ldd	r19, Y+10	; 0x0a
    6c42:	4b 85       	ldd	r20, Y+11	; 0x0b
    6c44:	5c 85       	ldd	r21, Y+12	; 0x0c
    6c46:	62 1b       	sub	r22, r18
    6c48:	73 0b       	sbc	r23, r19
    6c4a:	84 0b       	sbc	r24, r20
    6c4c:	95 0b       	sbc	r25, r21
    6c4e:	2f 89       	ldd	r18, Y+23	; 0x17
    6c50:	38 8d       	ldd	r19, Y+24	; 0x18
    6c52:	49 8d       	ldd	r20, Y+25	; 0x19
    6c54:	5a 8d       	ldd	r21, Y+26	; 0x1a
    6c56:	62 1b       	sub	r22, r18
    6c58:	73 0b       	sbc	r23, r19
    6c5a:	84 0b       	sbc	r24, r20
    6c5c:	95 0b       	sbc	r25, r21
    6c5e:	29 89       	ldd	r18, Y+17	; 0x11
    6c60:	3a 89       	ldd	r19, Y+18	; 0x12
    6c62:	4b 89       	ldd	r20, Y+19	; 0x13
    6c64:	5c 89       	ldd	r21, Y+20	; 0x14
    6c66:	0e 94 bc 5a 	call	0xb578	; 0xb578 <__udivmodsi4>
    6c6a:	2a a3       	std	Y+34, r18	; 0x22
    6c6c:	3b a3       	std	Y+35, r19	; 0x23
    6c6e:	4c a3       	std	Y+36, r20	; 0x24
    6c70:	5d a3       	std	Y+37, r21	; 0x25
	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
    6c72:	3f 8d       	ldd	r19, Y+31	; 0x1f
    6c74:	32 30       	cpi	r19, 0x02	; 2
    6c76:	51 f4       	brne	.+20     	; 0x6c8c <f_mkfs+0x35a>
    6c78:	8a a1       	ldd	r24, Y+34	; 0x22
    6c7a:	9b a1       	ldd	r25, Y+35	; 0x23
    6c7c:	ac a1       	ldd	r26, Y+36	; 0x24
    6c7e:	bd a1       	ldd	r27, Y+37	; 0x25
    6c80:	85 5f       	subi	r24, 0xF5	; 245
    6c82:	9f 40       	sbci	r25, 0x0F	; 15
    6c84:	a0 40       	sbci	r26, 0x00	; 0
    6c86:	b0 40       	sbci	r27, 0x00	; 0
    6c88:	70 f4       	brcc	.+28     	; 0x6ca6 <f_mkfs+0x374>
    6c8a:	b5 c2       	rjmp	.+1386   	; 0x71f6 <f_mkfs+0x8c4>
    6c8c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    6c8e:	f3 30       	cpi	r31, 0x03	; 3
    6c90:	51 f4       	brne	.+20     	; 0x6ca6 <f_mkfs+0x374>
    6c92:	2a a1       	ldd	r18, Y+34	; 0x22
    6c94:	3b a1       	ldd	r19, Y+35	; 0x23
    6c96:	4c a1       	ldd	r20, Y+36	; 0x24
    6c98:	5d a1       	ldd	r21, Y+37	; 0x25
    6c9a:	25 5f       	subi	r18, 0xF5	; 245
    6c9c:	3f 4f       	sbci	r19, 0xFF	; 255
    6c9e:	40 40       	sbci	r20, 0x00	; 0
    6ca0:	50 40       	sbci	r21, 0x00	; 0
    6ca2:	08 f4       	brcc	.+2      	; 0x6ca6 <f_mkfs+0x374>
    6ca4:	a8 c2       	rjmp	.+1360   	; 0x71f6 <f_mkfs+0x8c4>
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
    6ca6:	ad 82       	std	Y+5, r10	; 0x05
    6ca8:	be 82       	std	Y+6, r11	; 0x06
    6caa:	cf 82       	std	Y+7, r12	; 0x07
    6cac:	d8 86       	std	Y+8, r13	; 0x08
	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
		|| (fmt == FS_FAT32 && n_clst < 0xFFF5))
		return FR_MKFS_ABORTED;

	/* Create partition table if needed */
	if (!partition) {
    6cae:	22 20       	and	r2, r2
    6cb0:	11 f0       	breq	.+4      	; 0x6cb6 <f_mkfs+0x384>
    6cb2:	10 ef       	ldi	r17, 0xF0	; 240
    6cb4:	85 c0       	rjmp	.+266    	; 0x6dc0 <f_mkfs+0x48e>
		DWORD n_disk = b_part + n_part;
    6cb6:	2b 8d       	ldd	r18, Y+27	; 0x1b
    6cb8:	3c 8d       	ldd	r19, Y+28	; 0x1c
    6cba:	4d 8d       	ldd	r20, Y+29	; 0x1d
    6cbc:	5e 8d       	ldd	r21, Y+30	; 0x1e
    6cbe:	2e 0d       	add	r18, r14
    6cc0:	3f 1d       	adc	r19, r15
    6cc2:	40 1f       	adc	r20, r16
    6cc4:	51 1f       	adc	r21, r17

		mem_set(fs->win, 0, SS(fs));
    6cc6:	62 e3       	ldi	r22, 0x32	; 50
    6cc8:	e6 2e       	mov	r14, r22
    6cca:	f1 2c       	mov	r15, r1
    6ccc:	e8 0c       	add	r14, r8
    6cce:	f9 1c       	adc	r15, r9
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    6cd0:	f7 01       	movw	r30, r14
	while (cnt--) *d++ = (char)val;
    6cd2:	c4 01       	movw	r24, r8
    6cd4:	8e 5c       	subi	r24, 0xCE	; 206
    6cd6:	9d 4f       	sbci	r25, 0xFD	; 253
    6cd8:	01 c0       	rjmp	.+2      	; 0x6cdc <f_mkfs+0x3aa>
    6cda:	11 92       	st	Z+, r1
    6cdc:	e8 17       	cp	r30, r24
    6cde:	f9 07       	cpc	r31, r25
    6ce0:	e1 f7       	brne	.-8      	; 0x6cda <f_mkfs+0x3a8>
	/* Create partition table if needed */
	if (!partition) {
		DWORD n_disk = b_part + n_part;

		mem_set(fs->win, 0, SS(fs));
		tbl = fs->win+MBR_Table;
    6ce2:	84 01       	movw	r16, r8
    6ce4:	00 51       	subi	r16, 0x10	; 16
    6ce6:	1e 4f       	sbci	r17, 0xFE	; 254
		ST_DWORD(tbl, 0x00010180);		/* Partition start in CHS */
    6ce8:	80 e8       	ldi	r24, 0x80	; 128
    6cea:	91 e0       	ldi	r25, 0x01	; 1
    6cec:	a1 e0       	ldi	r26, 0x01	; 1
    6cee:	b0 e0       	ldi	r27, 0x00	; 0
    6cf0:	f8 01       	movw	r30, r16
    6cf2:	80 83       	st	Z, r24
    6cf4:	91 83       	std	Z+1, r25	; 0x01
    6cf6:	a2 83       	std	Z+2, r26	; 0x02
    6cf8:	b3 83       	std	Z+3, r27	; 0x03
		if (n_disk < 63UL * 255 * 1024) {	/* Partition end in CHS */
    6cfa:	20 30       	cpi	r18, 0x00	; 0
    6cfc:	f4 e0       	ldi	r31, 0x04	; 4
    6cfe:	3f 07       	cpc	r19, r31
    6d00:	fb ef       	ldi	r31, 0xFB	; 251
    6d02:	4f 07       	cpc	r20, r31
    6d04:	f0 e0       	ldi	r31, 0x00	; 0
    6d06:	5f 07       	cpc	r21, r31
    6d08:	b0 f4       	brcc	.+44     	; 0x6d36 <f_mkfs+0x404>
			n_disk = n_disk / 63 / 255;
    6d0a:	ca 01       	movw	r24, r20
    6d0c:	b9 01       	movw	r22, r18
    6d0e:	21 ec       	ldi	r18, 0xC1	; 193
    6d10:	3e e3       	ldi	r19, 0x3E	; 62
    6d12:	40 e0       	ldi	r20, 0x00	; 0
    6d14:	50 e0       	ldi	r21, 0x00	; 0
    6d16:	0e 94 bc 5a 	call	0xb578	; 0xb578 <__udivmodsi4>
    6d1a:	c9 01       	movw	r24, r18
    6d1c:	da 01       	movw	r26, r20
			tbl[7] = (BYTE)n_disk;
    6d1e:	f8 01       	movw	r30, r16
    6d20:	27 83       	std	Z+7, r18	; 0x07
			tbl[6] = (BYTE)((n_disk >> 2) | 63);
    6d22:	22 e0       	ldi	r18, 0x02	; 2
    6d24:	b6 95       	lsr	r27
    6d26:	a7 95       	ror	r26
    6d28:	97 95       	ror	r25
    6d2a:	87 95       	ror	r24
    6d2c:	2a 95       	dec	r18
    6d2e:	d1 f7       	brne	.-12     	; 0x6d24 <f_mkfs+0x3f2>
    6d30:	8f 63       	ori	r24, 0x3F	; 63
    6d32:	86 83       	std	Z+6, r24	; 0x06
    6d34:	07 c0       	rjmp	.+14     	; 0x6d44 <f_mkfs+0x412>
		} else {
			ST_WORD(&tbl[6], 0xFFFF);
    6d36:	8f ef       	ldi	r24, 0xFF	; 255
    6d38:	9f ef       	ldi	r25, 0xFF	; 255
    6d3a:	d8 01       	movw	r26, r16
    6d3c:	16 96       	adiw	r26, 0x06	; 6
    6d3e:	8d 93       	st	X+, r24
    6d40:	9c 93       	st	X, r25
    6d42:	17 97       	sbiw	r26, 0x07	; 7
		}
		tbl[5] = 254;
    6d44:	8e ef       	ldi	r24, 0xFE	; 254
    6d46:	f8 01       	movw	r30, r16
    6d48:	85 83       	std	Z+5, r24	; 0x05
		if (fmt != FS_FAT32)			/* System ID */
    6d4a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    6d4c:	f3 30       	cpi	r31, 0x03	; 3
    6d4e:	81 f0       	breq	.+32     	; 0x6d70 <f_mkfs+0x43e>
			tbl[4] = (n_part < 0x10000) ? 0x04 : 0x06;
    6d50:	89 81       	ldd	r24, Y+1	; 0x01
    6d52:	9a 81       	ldd	r25, Y+2	; 0x02
    6d54:	ab 81       	ldd	r26, Y+3	; 0x03
    6d56:	bc 81       	ldd	r27, Y+4	; 0x04
    6d58:	80 50       	subi	r24, 0x00	; 0
    6d5a:	90 40       	sbci	r25, 0x00	; 0
    6d5c:	a1 40       	sbci	r26, 0x01	; 1
    6d5e:	b0 40       	sbci	r27, 0x00	; 0
    6d60:	10 f0       	brcs	.+4      	; 0x6d66 <f_mkfs+0x434>
    6d62:	86 e0       	ldi	r24, 0x06	; 6
    6d64:	01 c0       	rjmp	.+2      	; 0x6d68 <f_mkfs+0x436>
    6d66:	84 e0       	ldi	r24, 0x04	; 4
    6d68:	d8 01       	movw	r26, r16
    6d6a:	14 96       	adiw	r26, 0x04	; 4
    6d6c:	8c 93       	st	X, r24
    6d6e:	03 c0       	rjmp	.+6      	; 0x6d76 <f_mkfs+0x444>
		else
			tbl[4] = 0x0c;
    6d70:	8c e0       	ldi	r24, 0x0C	; 12
    6d72:	f8 01       	movw	r30, r16
    6d74:	84 83       	std	Z+4, r24	; 0x04
		ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
    6d76:	8f e3       	ldi	r24, 0x3F	; 63
    6d78:	90 e0       	ldi	r25, 0x00	; 0
    6d7a:	a0 e0       	ldi	r26, 0x00	; 0
    6d7c:	b0 e0       	ldi	r27, 0x00	; 0
    6d7e:	f8 01       	movw	r30, r16
    6d80:	80 87       	std	Z+8, r24	; 0x08
    6d82:	91 87       	std	Z+9, r25	; 0x09
    6d84:	a2 87       	std	Z+10, r26	; 0x0a
    6d86:	b3 87       	std	Z+11, r27	; 0x0b
		ST_DWORD(tbl+12, n_part);		/* Partition size in LBA */
    6d88:	89 81       	ldd	r24, Y+1	; 0x01
    6d8a:	9a 81       	ldd	r25, Y+2	; 0x02
    6d8c:	ab 81       	ldd	r26, Y+3	; 0x03
    6d8e:	bc 81       	ldd	r27, Y+4	; 0x04
    6d90:	84 87       	std	Z+12, r24	; 0x0c
    6d92:	95 87       	std	Z+13, r25	; 0x0d
    6d94:	a6 87       	std	Z+14, r26	; 0x0e
    6d96:	b7 87       	std	Z+15, r27	; 0x0f
		ST_WORD(tbl+64, 0xAA55);		/* Signature */
    6d98:	00 5c       	subi	r16, 0xC0	; 192
    6d9a:	1f 4f       	sbci	r17, 0xFF	; 255
    6d9c:	85 e5       	ldi	r24, 0x55	; 85
    6d9e:	9a ea       	ldi	r25, 0xAA	; 170
    6da0:	d8 01       	movw	r26, r16
    6da2:	8d 93       	st	X+, r24
    6da4:	9c 93       	st	X, r25
		if (disk_write(drv, fs->win, 0, 1) != RES_OK)
    6da6:	83 2d       	mov	r24, r3
    6da8:	b7 01       	movw	r22, r14
    6daa:	20 e0       	ldi	r18, 0x00	; 0
    6dac:	30 e0       	ldi	r19, 0x00	; 0
    6dae:	40 e0       	ldi	r20, 0x00	; 0
    6db0:	50 e0       	ldi	r21, 0x00	; 0
    6db2:	01 e0       	ldi	r16, 0x01	; 1
    6db4:	0e 94 48 54 	call	0xa890	; 0xa890 <disk_write>
    6db8:	89 2b       	or	r24, r25
    6dba:	09 f0       	breq	.+2      	; 0x6dbe <f_mkfs+0x48c>
    6dbc:	1f c2       	rjmp	.+1086   	; 0x71fc <f_mkfs+0x8ca>
    6dbe:	18 ef       	ldi	r17, 0xF8	; 248
	} else {
		partition = 0xF0;
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
    6dc0:	72 e3       	ldi	r23, 0x32	; 50
    6dc2:	e7 2e       	mov	r14, r23
    6dc4:	f1 2c       	mov	r15, r1
    6dc6:	e8 0c       	add	r14, r8
    6dc8:	f9 1c       	adc	r15, r9
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    6dca:	57 01       	movw	r10, r14
    6dcc:	f7 01       	movw	r30, r14
FRESULT f_mkfs (
	BYTE drv,			/* Logical drive number */
	BYTE partition,		/* Partitioning rule 0:FDISK, 1:SFD */
	WORD allocsize		/* Allocation unit size [bytes] */
)
{
    6dce:	62 e3       	ldi	r22, 0x32	; 50
    6dd0:	c6 2e       	mov	r12, r22
    6dd2:	62 e0       	ldi	r22, 0x02	; 2
    6dd4:	d6 2e       	mov	r13, r22
    6dd6:	c8 0c       	add	r12, r8
    6dd8:	d9 1c       	adc	r13, r9
    6dda:	01 c0       	rjmp	.+2      	; 0x6dde <f_mkfs+0x4ac>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    6ddc:	11 92       	st	Z+, r1
    6dde:	ec 15       	cp	r30, r12
    6de0:	fd 05       	cpc	r31, r13
    6de2:	e1 f7       	brne	.-8      	; 0x6ddc <f_mkfs+0x4aa>
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
	mem_set(tbl, 0, SS(fs));
	ST_DWORD(tbl+BS_jmpBoot, 0x90FEEB);			/* Boot code (jmp $, nop) */
    6de4:	8b ee       	ldi	r24, 0xEB	; 235
    6de6:	9e ef       	ldi	r25, 0xFE	; 254
    6de8:	a0 e9       	ldi	r26, 0x90	; 144
    6dea:	b0 e0       	ldi	r27, 0x00	; 0
    6dec:	f4 01       	movw	r30, r8
    6dee:	82 ab       	std	Z+50, r24	; 0x32
    6df0:	93 ab       	std	Z+51, r25	; 0x33
    6df2:	a4 ab       	std	Z+52, r26	; 0x34
    6df4:	b5 ab       	std	Z+53, r27	; 0x35
	ST_WORD(tbl+BPB_BytsPerSec, SS(fs));		/* Sector size */
    6df6:	80 e0       	ldi	r24, 0x00	; 0
    6df8:	92 e0       	ldi	r25, 0x02	; 2
    6dfa:	d7 01       	movw	r26, r14
    6dfc:	1b 96       	adiw	r26, 0x0b	; 11
    6dfe:	8d 93       	st	X+, r24
    6e00:	9c 93       	st	X, r25
    6e02:	1c 97       	sbiw	r26, 0x0c	; 12
	tbl[BPB_SecPerClus] = (BYTE)allocsize;		/* Sectors per cluster */
    6e04:	2d 88       	ldd	r2, Y+21	; 0x15
    6e06:	27 ae       	std	Z+63, r2	; 0x3f
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);			/* Reserved sectors */
    6e08:	f7 01       	movw	r30, r14
    6e0a:	46 86       	std	Z+14, r4	; 0x0e
    6e0c:	57 86       	std	Z+15, r5	; 0x0f
	tbl[BPB_NumFATs] = N_FATS;					/* Number of FATs */
    6e0e:	22 e4       	ldi	r18, 0x42	; 66
    6e10:	30 e0       	ldi	r19, 0x00	; 0
    6e12:	82 0e       	add	r8, r18
    6e14:	93 1e       	adc	r9, r19
    6e16:	81 e0       	ldi	r24, 0x01	; 1
    6e18:	d4 01       	movw	r26, r8
    6e1a:	8c 93       	st	X, r24
    6e1c:	ee eb       	ldi	r30, 0xBE	; 190
    6e1e:	ff ef       	ldi	r31, 0xFF	; 255
    6e20:	8e 0e       	add	r8, r30
    6e22:	9f 1e       	adc	r9, r31
	ST_WORD(tbl+BPB_RootEntCnt, SS(fs) / 32 * n_dir); /* Number of rootdir entries */
    6e24:	8f 89       	ldd	r24, Y+23	; 0x17
    6e26:	98 8d       	ldd	r25, Y+24	; 0x18
    6e28:	a9 8d       	ldd	r26, Y+25	; 0x19
    6e2a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    6e2c:	54 e0       	ldi	r21, 0x04	; 4
    6e2e:	88 0f       	add	r24, r24
    6e30:	99 1f       	adc	r25, r25
    6e32:	aa 1f       	adc	r26, r26
    6e34:	bb 1f       	adc	r27, r27
    6e36:	5a 95       	dec	r21
    6e38:	d1 f7       	brne	.-12     	; 0x6e2e <f_mkfs+0x4fc>
    6e3a:	f7 01       	movw	r30, r14
    6e3c:	81 8b       	std	Z+17, r24	; 0x11
    6e3e:	92 8b       	std	Z+18, r25	; 0x12
	if (n_part < 0x10000) {						/* Number of total sectors */
    6e40:	89 81       	ldd	r24, Y+1	; 0x01
    6e42:	9a 81       	ldd	r25, Y+2	; 0x02
    6e44:	ab 81       	ldd	r26, Y+3	; 0x03
    6e46:	bc 81       	ldd	r27, Y+4	; 0x04
    6e48:	80 30       	cpi	r24, 0x00	; 0
    6e4a:	f0 e0       	ldi	r31, 0x00	; 0
    6e4c:	9f 07       	cpc	r25, r31
    6e4e:	f1 e0       	ldi	r31, 0x01	; 1
    6e50:	af 07       	cpc	r26, r31
    6e52:	f0 e0       	ldi	r31, 0x00	; 0
    6e54:	bf 07       	cpc	r27, r31
    6e56:	20 f4       	brcc	.+8      	; 0x6e60 <f_mkfs+0x52e>
		ST_WORD(tbl+BPB_TotSec16, n_part);
    6e58:	f7 01       	movw	r30, r14
    6e5a:	83 8b       	std	Z+19, r24	; 0x13
    6e5c:	94 8b       	std	Z+20, r25	; 0x14
    6e5e:	05 c0       	rjmp	.+10     	; 0x6e6a <f_mkfs+0x538>
	} else {
		ST_DWORD(tbl+BPB_TotSec32, n_part);
    6e60:	f7 01       	movw	r30, r14
    6e62:	80 a3       	std	Z+32, r24	; 0x20
    6e64:	91 a3       	std	Z+33, r25	; 0x21
    6e66:	a2 a3       	std	Z+34, r26	; 0x22
    6e68:	b3 a3       	std	Z+35, r27	; 0x23
	}
	tbl[BPB_Media] = partition;					/* Media descripter */
    6e6a:	27 e4       	ldi	r18, 0x47	; 71
    6e6c:	30 e0       	ldi	r19, 0x00	; 0
    6e6e:	82 0e       	add	r8, r18
    6e70:	93 1e       	adc	r9, r19
    6e72:	d4 01       	movw	r26, r8
    6e74:	1c 93       	st	X, r17
    6e76:	e9 eb       	ldi	r30, 0xB9	; 185
    6e78:	ff ef       	ldi	r31, 0xFF	; 255
    6e7a:	8e 0e       	add	r8, r30
    6e7c:	9f 1e       	adc	r9, r31
	ST_WORD(tbl+BPB_SecPerTrk, 63);				/* Number of sectors per track */
    6e7e:	8f e3       	ldi	r24, 0x3F	; 63
    6e80:	90 e0       	ldi	r25, 0x00	; 0
    6e82:	d7 01       	movw	r26, r14
    6e84:	58 96       	adiw	r26, 0x18	; 24
    6e86:	8d 93       	st	X+, r24
    6e88:	9c 93       	st	X, r25
    6e8a:	59 97       	sbiw	r26, 0x19	; 25
	ST_WORD(tbl+BPB_NumHeads, 255);				/* Number of heads */
    6e8c:	8f ef       	ldi	r24, 0xFF	; 255
    6e8e:	90 e0       	ldi	r25, 0x00	; 0
    6e90:	5a 96       	adiw	r26, 0x1a	; 26
    6e92:	8d 93       	st	X+, r24
    6e94:	9c 93       	st	X, r25
    6e96:	5b 97       	sbiw	r26, 0x1b	; 27
	ST_DWORD(tbl+BPB_HiddSec, b_part);			/* Hidden sectors */
    6e98:	2b 8d       	ldd	r18, Y+27	; 0x1b
    6e9a:	3c 8d       	ldd	r19, Y+28	; 0x1c
    6e9c:	4d 8d       	ldd	r20, Y+29	; 0x1d
    6e9e:	5e 8d       	ldd	r21, Y+30	; 0x1e
    6ea0:	5c 96       	adiw	r26, 0x1c	; 28
    6ea2:	2d 93       	st	X+, r18
    6ea4:	3d 93       	st	X+, r19
    6ea6:	4d 93       	st	X+, r20
    6ea8:	5c 93       	st	X, r21
    6eaa:	5f 97       	sbiw	r26, 0x1f	; 31
	n = get_fattime();							/* Use current time as a VSN */
    6eac:	0e 94 d0 57 	call	0xafa0	; 0xafa0 <get_fattime>
    6eb0:	6d 83       	std	Y+5, r22	; 0x05
    6eb2:	7e 83       	std	Y+6, r23	; 0x06
    6eb4:	8f 83       	std	Y+7, r24	; 0x07
    6eb6:	98 87       	std	Y+8, r25	; 0x08
	if (fmt != FS_FAT32) {
    6eb8:	bf 8d       	ldd	r27, Y+31	; 0x1f
    6eba:	b3 30       	cpi	r27, 0x03	; 3
    6ebc:	39 f1       	breq	.+78     	; 0x6f0c <f_mkfs+0x5da>
		ST_DWORD(tbl+BS_VolID, n);				/* Volume serial number */
    6ebe:	f7 01       	movw	r30, r14
    6ec0:	67 a3       	std	Z+39, r22	; 0x27
    6ec2:	70 a7       	std	Z+40, r23	; 0x28
    6ec4:	81 a7       	std	Z+41, r24	; 0x29
    6ec6:	92 a7       	std	Z+42, r25	; 0x2a
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
    6ec8:	29 85       	ldd	r18, Y+9	; 0x09
    6eca:	3a 85       	ldd	r19, Y+10	; 0x0a
    6ecc:	26 8b       	std	Z+22, r18	; 0x16
    6ece:	37 8b       	std	Z+23, r19	; 0x17
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
    6ed0:	46 e5       	ldi	r20, 0x56	; 86
    6ed2:	50 e0       	ldi	r21, 0x00	; 0
    6ed4:	84 0e       	add	r8, r20
    6ed6:	95 1e       	adc	r9, r21
    6ed8:	80 e8       	ldi	r24, 0x80	; 128
    6eda:	d4 01       	movw	r26, r8
    6edc:	8c 93       	st	X, r24
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
    6ede:	e2 e0       	ldi	r30, 0x02	; 2
    6ee0:	f0 e0       	ldi	r31, 0x00	; 0
    6ee2:	8e 0e       	add	r8, r30
    6ee4:	9f 1e       	adc	r9, r31
    6ee6:	89 e2       	ldi	r24, 0x29	; 41
    6ee8:	d4 01       	movw	r26, r8
    6eea:	8c 93       	st	X, r24
    6eec:	e8 ea       	ldi	r30, 0xA8	; 168
    6eee:	ff ef       	ldi	r31, 0xFF	; 255
    6ef0:	8e 0e       	add	r8, r30
    6ef2:	9f 1e       	adc	r9, r31
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    6ef4:	d7 01       	movw	r26, r14
    6ef6:	9b 96       	adiw	r26, 0x2b	; 43
    6ef8:	e7 ee       	ldi	r30, 0xE7	; 231
    6efa:	f3 e2       	ldi	r31, 0x23	; 35
    6efc:	02 c0       	rjmp	.+4      	; 0x6f02 <f_mkfs+0x5d0>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    6efe:	81 91       	ld	r24, Z+
    6f00:	8d 93       	st	X+, r24
    6f02:	23 e2       	ldi	r18, 0x23	; 35
    6f04:	ea 3f       	cpi	r30, 0xFA	; 250
    6f06:	f2 07       	cpc	r31, r18
    6f08:	d1 f7       	brne	.-12     	; 0x6efe <f_mkfs+0x5cc>
    6f0a:	48 c0       	rjmp	.+144    	; 0x6f9c <f_mkfs+0x66a>
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab, "NO NAME    FAT     ", 19);	/* Volume lavel, FAT signature */
	} else {
		ST_DWORD(tbl+BS_VolID32, n);			/* Volume serial number */
    6f0c:	43 e4       	ldi	r20, 0x43	; 67
    6f0e:	50 e0       	ldi	r21, 0x00	; 0
    6f10:	e4 0e       	add	r14, r20
    6f12:	f5 1e       	adc	r15, r21
    6f14:	d7 01       	movw	r26, r14
    6f16:	6d 93       	st	X+, r22
    6f18:	7d 93       	st	X+, r23
    6f1a:	8d 93       	st	X+, r24
    6f1c:	9c 93       	st	X, r25
    6f1e:	13 97       	sbiw	r26, 0x03	; 3
    6f20:	ed eb       	ldi	r30, 0xBD	; 189
    6f22:	ff ef       	ldi	r31, 0xFF	; 255
    6f24:	ee 0e       	add	r14, r30
    6f26:	ff 1e       	adc	r15, r31
		ST_DWORD(tbl+BPB_FATSz32, n_fat);		/* Number of secters per FAT */
    6f28:	29 85       	ldd	r18, Y+9	; 0x09
    6f2a:	3a 85       	ldd	r19, Y+10	; 0x0a
    6f2c:	4b 85       	ldd	r20, Y+11	; 0x0b
    6f2e:	5c 85       	ldd	r21, Y+12	; 0x0c
    6f30:	d7 01       	movw	r26, r14
    6f32:	94 96       	adiw	r26, 0x24	; 36
    6f34:	2d 93       	st	X+, r18
    6f36:	3d 93       	st	X+, r19
    6f38:	4d 93       	st	X+, r20
    6f3a:	5c 93       	st	X, r21
    6f3c:	97 97       	sbiw	r26, 0x27	; 39
		ST_DWORD(tbl+BPB_RootClus, 2);			/* Root directory cluster (2) */
    6f3e:	82 e0       	ldi	r24, 0x02	; 2
    6f40:	90 e0       	ldi	r25, 0x00	; 0
    6f42:	a0 e0       	ldi	r26, 0x00	; 0
    6f44:	b0 e0       	ldi	r27, 0x00	; 0
    6f46:	f7 01       	movw	r30, r14
    6f48:	84 a7       	std	Z+44, r24	; 0x2c
    6f4a:	95 a7       	std	Z+45, r25	; 0x2d
    6f4c:	a6 a7       	std	Z+46, r26	; 0x2e
    6f4e:	b7 a7       	std	Z+47, r27	; 0x2f
		ST_WORD(tbl+BPB_FSInfo, 1);				/* FSInfo record offset (bs+1) */
    6f50:	81 e0       	ldi	r24, 0x01	; 1
    6f52:	90 e0       	ldi	r25, 0x00	; 0
    6f54:	80 ab       	std	Z+48, r24	; 0x30
    6f56:	91 ab       	std	Z+49, r25	; 0x31
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
    6f58:	86 e0       	ldi	r24, 0x06	; 6
    6f5a:	90 e0       	ldi	r25, 0x00	; 0
    6f5c:	82 ab       	std	Z+50, r24	; 0x32
    6f5e:	93 ab       	std	Z+51, r25	; 0x33
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
    6f60:	22 e7       	ldi	r18, 0x72	; 114
    6f62:	30 e0       	ldi	r19, 0x00	; 0
    6f64:	82 0e       	add	r8, r18
    6f66:	93 1e       	adc	r9, r19
    6f68:	80 e8       	ldi	r24, 0x80	; 128
    6f6a:	d4 01       	movw	r26, r8
    6f6c:	8c 93       	st	X, r24
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
    6f6e:	e2 e0       	ldi	r30, 0x02	; 2
    6f70:	f0 e0       	ldi	r31, 0x00	; 0
    6f72:	8e 0e       	add	r8, r30
    6f74:	9f 1e       	adc	r9, r31
    6f76:	89 e2       	ldi	r24, 0x29	; 41
    6f78:	d4 01       	movw	r26, r8
    6f7a:	8c 93       	st	X, r24
    6f7c:	ec e8       	ldi	r30, 0x8C	; 140
    6f7e:	ff ef       	ldi	r31, 0xFF	; 255
    6f80:	8e 0e       	add	r8, r30
    6f82:	9f 1e       	adc	r9, r31
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    6f84:	d7 01       	movw	r26, r14
    6f86:	a9 5b       	subi	r26, 0xB9	; 185
    6f88:	bf 4f       	sbci	r27, 0xFF	; 255
    6f8a:	eb ef       	ldi	r30, 0xFB	; 251
    6f8c:	f3 e2       	ldi	r31, 0x23	; 35
    6f8e:	02 c0       	rjmp	.+4      	; 0x6f94 <f_mkfs+0x662>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    6f90:	81 91       	ld	r24, Z+
    6f92:	8d 93       	st	X+, r24
    6f94:	24 e2       	ldi	r18, 0x24	; 36
    6f96:	ee 30       	cpi	r30, 0x0E	; 14
    6f98:	f2 07       	cpc	r31, r18
    6f9a:	d1 f7       	brne	.-12     	; 0x6f90 <f_mkfs+0x65e>
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab32, "NO NAME    FAT32   ", 19);	/* Volume lavel, FAT signature */
	}
	ST_WORD(tbl+BS_55AA, 0xAA55);				/* Signature */
    6f9c:	a7 01       	movw	r20, r14
    6f9e:	42 50       	subi	r20, 0x02	; 2
    6fa0:	5e 4f       	sbci	r21, 0xFE	; 254
    6fa2:	48 a3       	std	Y+32, r20	; 0x20
    6fa4:	59 a3       	std	Y+33, r21	; 0x21
    6fa6:	85 e5       	ldi	r24, 0x55	; 85
    6fa8:	9a ea       	ldi	r25, 0xAA	; 170
    6faa:	da 01       	movw	r26, r20
    6fac:	8d 93       	st	X+, r24
    6fae:	9c 93       	st	X, r25
	if (SS(fs) > 512U) {
		ST_WORD(tbl+SS(fs)-2, 0xAA55);
	}
	if (disk_write(drv, tbl, b_part+0, 1) != RES_OK)
    6fb0:	83 2d       	mov	r24, r3
    6fb2:	b7 01       	movw	r22, r14
    6fb4:	2b 8d       	ldd	r18, Y+27	; 0x1b
    6fb6:	3c 8d       	ldd	r19, Y+28	; 0x1c
    6fb8:	4d 8d       	ldd	r20, Y+29	; 0x1d
    6fba:	5e 8d       	ldd	r21, Y+30	; 0x1e
    6fbc:	01 e0       	ldi	r16, 0x01	; 1
    6fbe:	0e 94 48 54 	call	0xa890	; 0xa890 <disk_write>
    6fc2:	89 2b       	or	r24, r25
    6fc4:	09 f0       	breq	.+2      	; 0x6fc8 <f_mkfs+0x696>
    6fc6:	1a c1       	rjmp	.+564    	; 0x71fc <f_mkfs+0x8ca>
		return FR_DISK_ERR;
	if (fmt == FS_FAT32)
    6fc8:	bf 8d       	ldd	r27, Y+31	; 0x1f
    6fca:	b3 30       	cpi	r27, 0x03	; 3
    6fcc:	61 f4       	brne	.+24     	; 0x6fe6 <f_mkfs+0x6b4>
		disk_write(drv, tbl, b_part+6, 1);
    6fce:	2b 8d       	ldd	r18, Y+27	; 0x1b
    6fd0:	3c 8d       	ldd	r19, Y+28	; 0x1c
    6fd2:	4d 8d       	ldd	r20, Y+29	; 0x1d
    6fd4:	5e 8d       	ldd	r21, Y+30	; 0x1e
    6fd6:	2a 5f       	subi	r18, 0xFA	; 250
    6fd8:	3f 4f       	sbci	r19, 0xFF	; 255
    6fda:	4f 4f       	sbci	r20, 0xFF	; 255
    6fdc:	5f 4f       	sbci	r21, 0xFF	; 255
    6fde:	83 2d       	mov	r24, r3
    6fe0:	b7 01       	movw	r22, r14
    6fe2:	0e 94 48 54 	call	0xa890	; 0xa890 <disk_write>
    6fe6:	f7 01       	movw	r30, r14
    6fe8:	01 c0       	rjmp	.+2      	; 0x6fec <f_mkfs+0x6ba>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    6fea:	11 92       	st	Z+, r1
    6fec:	ec 15       	cp	r30, r12
    6fee:	fd 05       	cpc	r31, r13
    6ff0:	e1 f7       	brne	.-8      	; 0x6fea <f_mkfs+0x6b8>
		disk_write(drv, tbl, b_part+6, 1);

	/* Initialize FAT area */
	for (m = 0; m < N_FATS; m++) {
		mem_set(tbl, 0, SS(fs));		/* 1st sector of the FAT  */
		if (fmt != FS_FAT32) {
    6ff2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    6ff4:	e3 30       	cpi	r30, 0x03	; 3
    6ff6:	e9 f0       	breq	.+58     	; 0x7032 <f_mkfs+0x700>
			n = (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
    6ff8:	e1 30       	cpi	r30, 0x01	; 1
    6ffa:	29 f0       	breq	.+10     	; 0x7006 <f_mkfs+0x6d4>
    6ffc:	20 e0       	ldi	r18, 0x00	; 0
    6ffe:	3f ef       	ldi	r19, 0xFF	; 255
    7000:	4f ef       	ldi	r20, 0xFF	; 255
    7002:	5f ef       	ldi	r21, 0xFF	; 255
    7004:	04 c0       	rjmp	.+8      	; 0x700e <f_mkfs+0x6dc>
    7006:	20 e0       	ldi	r18, 0x00	; 0
    7008:	3f ef       	ldi	r19, 0xFF	; 255
    700a:	4f ef       	ldi	r20, 0xFF	; 255
    700c:	50 e0       	ldi	r21, 0x00	; 0
			n |= partition;
    700e:	81 2f       	mov	r24, r17
    7010:	90 e0       	ldi	r25, 0x00	; 0
    7012:	a0 e0       	ldi	r26, 0x00	; 0
    7014:	b0 e0       	ldi	r27, 0x00	; 0
    7016:	82 2b       	or	r24, r18
    7018:	93 2b       	or	r25, r19
    701a:	a4 2b       	or	r26, r20
    701c:	b5 2b       	or	r27, r21
    701e:	8d 83       	std	Y+5, r24	; 0x05
    7020:	9e 83       	std	Y+6, r25	; 0x06
    7022:	af 83       	std	Y+7, r26	; 0x07
    7024:	b8 87       	std	Y+8, r27	; 0x08
			ST_DWORD(tbl, n);				/* Reserve cluster #0-1 (FAT12/16) */
    7026:	f4 01       	movw	r30, r8
    7028:	82 ab       	std	Z+50, r24	; 0x32
    702a:	93 ab       	std	Z+51, r25	; 0x33
    702c:	a4 ab       	std	Z+52, r26	; 0x34
    702e:	b5 ab       	std	Z+53, r27	; 0x35
    7030:	1a c0       	rjmp	.+52     	; 0x7066 <f_mkfs+0x734>
		} else {
			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
    7032:	88 ef       	ldi	r24, 0xF8	; 248
    7034:	9f ef       	ldi	r25, 0xFF	; 255
    7036:	af ef       	ldi	r26, 0xFF	; 255
    7038:	bf ef       	ldi	r27, 0xFF	; 255
    703a:	f4 01       	movw	r30, r8
    703c:	82 ab       	std	Z+50, r24	; 0x32
    703e:	93 ab       	std	Z+51, r25	; 0x33
    7040:	a4 ab       	std	Z+52, r26	; 0x34
    7042:	b5 ab       	std	Z+53, r27	; 0x35
			ST_DWORD(tbl+4, 0xFFFFFFFF);
    7044:	8f ef       	ldi	r24, 0xFF	; 255
    7046:	9f ef       	ldi	r25, 0xFF	; 255
    7048:	af ef       	ldi	r26, 0xFF	; 255
    704a:	bf ef       	ldi	r27, 0xFF	; 255
    704c:	f7 01       	movw	r30, r14
    704e:	84 83       	std	Z+4, r24	; 0x04
    7050:	95 83       	std	Z+5, r25	; 0x05
    7052:	a6 83       	std	Z+6, r26	; 0x06
    7054:	b7 83       	std	Z+7, r27	; 0x07
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
    7056:	8f ef       	ldi	r24, 0xFF	; 255
    7058:	9f ef       	ldi	r25, 0xFF	; 255
    705a:	af ef       	ldi	r26, 0xFF	; 255
    705c:	bf e0       	ldi	r27, 0x0F	; 15
    705e:	80 87       	std	Z+8, r24	; 0x08
    7060:	91 87       	std	Z+9, r25	; 0x09
    7062:	a2 87       	std	Z+10, r26	; 0x0a
    7064:	b3 87       	std	Z+11, r27	; 0x0b
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    7066:	83 2d       	mov	r24, r3
    7068:	b7 01       	movw	r22, r14
    706a:	2d 85       	ldd	r18, Y+13	; 0x0d
    706c:	3e 85       	ldd	r19, Y+14	; 0x0e
    706e:	4f 85       	ldd	r20, Y+15	; 0x0f
    7070:	58 89       	ldd	r21, Y+16	; 0x10
    7072:	01 e0       	ldi	r16, 0x01	; 1
    7074:	0e 94 48 54 	call	0xa890	; 0xa890 <disk_write>
    7078:	89 2b       	or	r24, r25
    707a:	21 f0       	breq	.+8      	; 0x7084 <f_mkfs+0x752>
    707c:	bf c0       	rjmp	.+382    	; 0x71fc <f_mkfs+0x8ca>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    707e:	d5 01       	movw	r26, r10
    7080:	1d 92       	st	X+, r1
    7082:	5d 01       	movw	r10, r26
    7084:	ac 14       	cp	r10, r12
    7086:	bd 04       	cpc	r11, r13
    7088:	d1 f7       	brne	.-12     	; 0x707e <f_mkfs+0x74c>
		} else {
			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
			ST_DWORD(tbl+4, 0xFFFFFFFF);
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    708a:	ad 84       	ldd	r10, Y+13	; 0x0d
    708c:	be 84       	ldd	r11, Y+14	; 0x0e
    708e:	cf 84       	ldd	r12, Y+15	; 0x0f
    7090:	d8 88       	ldd	r13, Y+16	; 0x10
    7092:	08 94       	sec
    7094:	a1 1c       	adc	r10, r1
    7096:	b1 1c       	adc	r11, r1
    7098:	c1 1c       	adc	r12, r1
    709a:	d1 1c       	adc	r13, r1
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
		for (n = 1; n < n_fat; n++) {
    709c:	81 e0       	ldi	r24, 0x01	; 1
    709e:	90 e0       	ldi	r25, 0x00	; 0
    70a0:	a0 e0       	ldi	r26, 0x00	; 0
    70a2:	b0 e0       	ldi	r27, 0x00	; 0
    70a4:	16 c0       	rjmp	.+44     	; 0x70d2 <f_mkfs+0x7a0>
			if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    70a6:	83 2d       	mov	r24, r3
    70a8:	b7 01       	movw	r22, r14
    70aa:	a6 01       	movw	r20, r12
    70ac:	95 01       	movw	r18, r10
    70ae:	01 e0       	ldi	r16, 0x01	; 1
    70b0:	0e 94 48 54 	call	0xa890	; 0xa890 <disk_write>
    70b4:	89 2b       	or	r24, r25
    70b6:	09 f0       	breq	.+2      	; 0x70ba <f_mkfs+0x788>
    70b8:	a1 c0       	rjmp	.+322    	; 0x71fc <f_mkfs+0x8ca>
    70ba:	08 94       	sec
    70bc:	a1 1c       	adc	r10, r1
    70be:	b1 1c       	adc	r11, r1
    70c0:	c1 1c       	adc	r12, r1
    70c2:	d1 1c       	adc	r13, r1
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
		for (n = 1; n < n_fat; n++) {
    70c4:	8d 81       	ldd	r24, Y+5	; 0x05
    70c6:	9e 81       	ldd	r25, Y+6	; 0x06
    70c8:	af 81       	ldd	r26, Y+7	; 0x07
    70ca:	b8 85       	ldd	r27, Y+8	; 0x08
    70cc:	01 96       	adiw	r24, 0x01	; 1
    70ce:	a1 1d       	adc	r26, r1
    70d0:	b1 1d       	adc	r27, r1
    70d2:	8d 83       	std	Y+5, r24	; 0x05
    70d4:	9e 83       	std	Y+6, r25	; 0x06
    70d6:	af 83       	std	Y+7, r26	; 0x07
    70d8:	b8 87       	std	Y+8, r27	; 0x08
    70da:	8d 81       	ldd	r24, Y+5	; 0x05
    70dc:	9e 81       	ldd	r25, Y+6	; 0x06
    70de:	af 81       	ldd	r26, Y+7	; 0x07
    70e0:	b8 85       	ldd	r27, Y+8	; 0x08
    70e2:	29 85       	ldd	r18, Y+9	; 0x09
    70e4:	3a 85       	ldd	r19, Y+10	; 0x0a
    70e6:	4b 85       	ldd	r20, Y+11	; 0x0b
    70e8:	5c 85       	ldd	r21, Y+12	; 0x0c
    70ea:	82 17       	cp	r24, r18
    70ec:	93 07       	cpc	r25, r19
    70ee:	a4 07       	cpc	r26, r20
    70f0:	b5 07       	cpc	r27, r21
    70f2:	c8 f2       	brcs	.-78     	; 0x70a6 <f_mkfs+0x774>
				return FR_DISK_ERR;
		}
	}

	/* Initialize Root directory */
	m = (BYTE)((fmt == FS_FAT32) ? allocsize : n_dir);
    70f4:	3f 8d       	ldd	r19, Y+31	; 0x1f
    70f6:	33 30       	cpi	r19, 0x03	; 3
    70f8:	09 f0       	breq	.+2      	; 0x70fc <f_mkfs+0x7ca>
    70fa:	2f 88       	ldd	r2, Y+23	; 0x17
	do {
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    70fc:	25 01       	movw	r4, r10
    70fe:	36 01       	movw	r6, r12
    7100:	08 94       	sec
    7102:	41 1c       	adc	r4, r1
    7104:	51 1c       	adc	r5, r1
    7106:	61 1c       	adc	r6, r1
    7108:	71 1c       	adc	r7, r1
    710a:	83 2d       	mov	r24, r3
    710c:	b7 01       	movw	r22, r14
    710e:	a6 01       	movw	r20, r12
    7110:	95 01       	movw	r18, r10
    7112:	01 e0       	ldi	r16, 0x01	; 1
    7114:	0e 94 48 54 	call	0xa890	; 0xa890 <disk_write>
    7118:	89 2b       	or	r24, r25
    711a:	09 f0       	breq	.+2      	; 0x711e <f_mkfs+0x7ec>
    711c:	6f c0       	rjmp	.+222    	; 0x71fc <f_mkfs+0x8ca>
			return FR_DISK_ERR;
	} while (--m);
    711e:	2a 94       	dec	r2
    7120:	19 f0       	breq	.+6      	; 0x7128 <f_mkfs+0x7f6>
    7122:	63 01       	movw	r12, r6
    7124:	52 01       	movw	r10, r4
    7126:	ea cf       	rjmp	.-44     	; 0x70fc <f_mkfs+0x7ca>

	/* Create FSInfo record if needed */
	if (fmt == FS_FAT32) {
    7128:	4f 8d       	ldd	r20, Y+31	; 0x1f
    712a:	43 30       	cpi	r20, 0x03	; 3
    712c:	09 f0       	breq	.+2      	; 0x7130 <f_mkfs+0x7fe>
    712e:	57 c0       	rjmp	.+174    	; 0x71de <f_mkfs+0x8ac>
		ST_WORD(tbl+BS_55AA, 0xAA55);
    7130:	85 e5       	ldi	r24, 0x55	; 85
    7132:	9a ea       	ldi	r25, 0xAA	; 170
    7134:	a8 a1       	ldd	r26, Y+32	; 0x20
    7136:	b9 a1       	ldd	r27, Y+33	; 0x21
    7138:	8d 93       	st	X+, r24
    713a:	9c 93       	st	X, r25
		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
    713c:	82 e5       	ldi	r24, 0x52	; 82
    713e:	92 e5       	ldi	r25, 0x52	; 82
    7140:	a1 e6       	ldi	r26, 0x61	; 97
    7142:	b1 e4       	ldi	r27, 0x41	; 65
    7144:	f4 01       	movw	r30, r8
    7146:	82 ab       	std	Z+50, r24	; 0x32
    7148:	93 ab       	std	Z+51, r25	; 0x33
    714a:	a4 ab       	std	Z+52, r26	; 0x34
    714c:	b5 ab       	std	Z+53, r27	; 0x35
		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
    714e:	24 ee       	ldi	r18, 0xE4	; 228
    7150:	31 e0       	ldi	r19, 0x01	; 1
    7152:	e2 0e       	add	r14, r18
    7154:	f3 1e       	adc	r15, r19
    7156:	82 e7       	ldi	r24, 0x72	; 114
    7158:	92 e7       	ldi	r25, 0x72	; 114
    715a:	a1 e4       	ldi	r26, 0x41	; 65
    715c:	b1 e6       	ldi	r27, 0x61	; 97
    715e:	f7 01       	movw	r30, r14
    7160:	81 93       	st	Z+, r24
    7162:	91 93       	st	Z+, r25
    7164:	a1 93       	st	Z+, r26
    7166:	b1 93       	st	Z+, r27
		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);
    7168:	2a a1       	ldd	r18, Y+34	; 0x22
    716a:	3b a1       	ldd	r19, Y+35	; 0x23
    716c:	4c a1       	ldd	r20, Y+36	; 0x24
    716e:	5d a1       	ldd	r21, Y+37	; 0x25
    7170:	21 50       	subi	r18, 0x01	; 1
    7172:	30 40       	sbci	r19, 0x00	; 0
    7174:	40 40       	sbci	r20, 0x00	; 0
    7176:	50 40       	sbci	r21, 0x00	; 0
    7178:	df 01       	movw	r26, r30
    717a:	2d 93       	st	X+, r18
    717c:	3d 93       	st	X+, r19
    717e:	4d 93       	st	X+, r20
    7180:	5d 93       	st	X+, r21
    7182:	7d 01       	movw	r14, r26
		ST_DWORD(tbl+FSI_Nxt_Free, 0xFFFFFFFF);
    7184:	8f ef       	ldi	r24, 0xFF	; 255
    7186:	9f ef       	ldi	r25, 0xFF	; 255
    7188:	af ef       	ldi	r26, 0xFF	; 255
    718a:	bf ef       	ldi	r27, 0xFF	; 255
    718c:	f7 01       	movw	r30, r14
    718e:	80 83       	st	Z, r24
    7190:	91 83       	std	Z+1, r25	; 0x01
    7192:	a2 83       	std	Z+2, r26	; 0x02
    7194:	b3 83       	std	Z+3, r27	; 0x03
    7196:	24 e1       	ldi	r18, 0x14	; 20
    7198:	3e ef       	ldi	r19, 0xFE	; 254
    719a:	e2 0e       	add	r14, r18
    719c:	f3 1e       	adc	r15, r19
		disk_write(drv, tbl, b_part+1, 1);
    719e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    71a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    71a2:	ad 8d       	ldd	r26, Y+29	; 0x1d
    71a4:	be 8d       	ldd	r27, Y+30	; 0x1e
    71a6:	01 96       	adiw	r24, 0x01	; 1
    71a8:	a1 1d       	adc	r26, r1
    71aa:	b1 1d       	adc	r27, r1
    71ac:	8b 8f       	std	Y+27, r24	; 0x1b
    71ae:	9c 8f       	std	Y+28, r25	; 0x1c
    71b0:	ad 8f       	std	Y+29, r26	; 0x1d
    71b2:	be 8f       	std	Y+30, r27	; 0x1e
    71b4:	83 2d       	mov	r24, r3
    71b6:	b7 01       	movw	r22, r14
    71b8:	2b 8d       	ldd	r18, Y+27	; 0x1b
    71ba:	3c 8d       	ldd	r19, Y+28	; 0x1c
    71bc:	4d 8d       	ldd	r20, Y+29	; 0x1d
    71be:	5e 8d       	ldd	r21, Y+30	; 0x1e
    71c0:	01 e0       	ldi	r16, 0x01	; 1
    71c2:	0e 94 48 54 	call	0xa890	; 0xa890 <disk_write>
		disk_write(drv, tbl, b_part+7, 1);
    71c6:	2b 8d       	ldd	r18, Y+27	; 0x1b
    71c8:	3c 8d       	ldd	r19, Y+28	; 0x1c
    71ca:	4d 8d       	ldd	r20, Y+29	; 0x1d
    71cc:	5e 8d       	ldd	r21, Y+30	; 0x1e
    71ce:	2a 5f       	subi	r18, 0xFA	; 250
    71d0:	3f 4f       	sbci	r19, 0xFF	; 255
    71d2:	4f 4f       	sbci	r20, 0xFF	; 255
    71d4:	5f 4f       	sbci	r21, 0xFF	; 255
    71d6:	83 2d       	mov	r24, r3
    71d8:	b7 01       	movw	r22, r14
    71da:	0e 94 48 54 	call	0xa890	; 0xa890 <disk_write>
	}

	return (disk_ioctl(drv, CTRL_SYNC, (void*)NULL) == RES_OK) ? FR_OK : FR_DISK_ERR;
    71de:	83 2d       	mov	r24, r3
    71e0:	60 e0       	ldi	r22, 0x00	; 0
    71e2:	40 e0       	ldi	r20, 0x00	; 0
    71e4:	50 e0       	ldi	r21, 0x00	; 0
    71e6:	0e 94 c6 54 	call	0xa98c	; 0xa98c <disk_ioctl>
    71ea:	00 97       	sbiw	r24, 0x00	; 0
    71ec:	11 f0       	breq	.+4      	; 0x71f2 <f_mkfs+0x8c0>
    71ee:	81 e0       	ldi	r24, 0x01	; 1
    71f0:	90 e0       	ldi	r25, 0x00	; 0
    71f2:	9c 01       	movw	r18, r24
    71f4:	05 c0       	rjmp	.+10     	; 0x7200 <f_mkfs+0x8ce>
    71f6:	2e e0       	ldi	r18, 0x0E	; 14
    71f8:	30 e0       	ldi	r19, 0x00	; 0
    71fa:	02 c0       	rjmp	.+4      	; 0x7200 <f_mkfs+0x8ce>
    71fc:	21 e0       	ldi	r18, 0x01	; 1
    71fe:	30 e0       	ldi	r19, 0x00	; 0
}
    7200:	c9 01       	movw	r24, r18
    7202:	a5 96       	adiw	r28, 0x25	; 37
    7204:	e2 e1       	ldi	r30, 0x12	; 18
    7206:	0c 94 15 5b 	jmp	0xb62a	; 0xb62a <__epilogue_restores__>
	if (n_clst >= 0xFFF5) fmt = FS_FAT32;

	/* Determine offset and size of FAT structure */
	switch (fmt) {
	case FS_FAT12:
		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
    720a:	7c 01       	movw	r14, r24
    720c:	8d 01       	movw	r16, r26
    720e:	ee 0c       	add	r14, r14
    7210:	ff 1c       	adc	r15, r15
    7212:	00 1f       	adc	r16, r16
    7214:	11 1f       	adc	r17, r17
    7216:	e8 0e       	add	r14, r24
    7218:	f9 1e       	adc	r15, r25
    721a:	0a 1f       	adc	r16, r26
    721c:	1b 1f       	adc	r17, r27
    721e:	08 94       	sec
    7220:	e1 1c       	adc	r14, r1
    7222:	f1 1c       	adc	r15, r1
    7224:	01 1d       	adc	r16, r1
    7226:	11 1d       	adc	r17, r1
    7228:	16 95       	lsr	r17
    722a:	07 95       	ror	r16
    722c:	f7 94       	ror	r15
    722e:	e7 94       	ror	r14
    7230:	82 e0       	ldi	r24, 0x02	; 2
    7232:	92 e0       	ldi	r25, 0x02	; 2
    7234:	a0 e0       	ldi	r26, 0x00	; 0
    7236:	b0 e0       	ldi	r27, 0x00	; 0
    7238:	e8 0e       	add	r14, r24
    723a:	f9 1e       	adc	r15, r25
    723c:	0a 1f       	adc	r16, r26
    723e:	1b 1f       	adc	r17, r27
    7240:	29 e0       	ldi	r18, 0x09	; 9
    7242:	16 95       	lsr	r17
    7244:	07 95       	ror	r16
    7246:	f7 94       	ror	r15
    7248:	e7 94       	ror	r14
    724a:	2a 95       	dec	r18
    724c:	d1 f7       	brne	.-12     	; 0x7242 <f_mkfs+0x910>
		n_rsv = 1 + partition;
    724e:	82 2d       	mov	r24, r2
    7250:	90 e0       	ldi	r25, 0x00	; 0
    7252:	01 96       	adiw	r24, 0x01	; 1
    7254:	2c 01       	movw	r4, r24
    7256:	66 24       	eor	r6, r6
    7258:	57 fc       	sbrc	r5, 7
    725a:	60 94       	com	r6
    725c:	76 2c       	mov	r7, r6
    725e:	20 e2       	ldi	r18, 0x20	; 32
    7260:	30 e0       	ldi	r19, 0x00	; 0
    7262:	40 e0       	ldi	r20, 0x00	; 0
    7264:	50 e0       	ldi	r21, 0x00	; 0
    7266:	2f 8b       	std	Y+23, r18	; 0x17
    7268:	38 8f       	std	Y+24, r19	; 0x18
    726a:	49 8f       	std	Y+25, r20	; 0x19
    726c:	5a 8f       	std	Y+26, r21	; 0x1a
    726e:	31 e0       	ldi	r19, 0x01	; 1
    7270:	3f 8f       	std	Y+31, r19	; 0x1f
    7272:	89 cc       	rjmp	.-1774   	; 0x6b86 <f_mkfs+0x254>

00007274 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    7274:	fc 01       	movw	r30, r24
	if (!fs || !fs->fs_type || fs->id != id)
    7276:	00 97       	sbiw	r24, 0x00	; 0
    7278:	99 f0       	breq	.+38     	; 0x72a0 <validate+0x2c>
    727a:	80 81       	ld	r24, Z
    727c:	88 23       	and	r24, r24
    727e:	81 f0       	breq	.+32     	; 0x72a0 <validate+0x2c>
    7280:	85 81       	ldd	r24, Z+5	; 0x05
    7282:	96 81       	ldd	r25, Z+6	; 0x06
    7284:	86 17       	cp	r24, r22
    7286:	97 07       	cpc	r25, r23
    7288:	59 f4       	brne	.+22     	; 0x72a0 <validate+0x2c>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
    728a:	81 81       	ldd	r24, Z+1	; 0x01
    728c:	0e 94 dc 53 	call	0xa7b8	; 0xa7b8 <disk_status>
    7290:	80 fd       	sbrc	r24, 0
    7292:	03 c0       	rjmp	.+6      	; 0x729a <validate+0x26>
    7294:	20 e0       	ldi	r18, 0x00	; 0
    7296:	30 e0       	ldi	r19, 0x00	; 0
    7298:	05 c0       	rjmp	.+10     	; 0x72a4 <validate+0x30>
    729a:	23 e0       	ldi	r18, 0x03	; 3
    729c:	30 e0       	ldi	r19, 0x00	; 0
    729e:	02 c0       	rjmp	.+4      	; 0x72a4 <validate+0x30>
    72a0:	29 e0       	ldi	r18, 0x09	; 9
    72a2:	30 e0       	ldi	r19, 0x00	; 0
		return FR_NOT_READY;

	return FR_OK;
}
    72a4:	c9 01       	movw	r24, r18
    72a6:	08 95       	ret

000072a8 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    72a8:	0f 93       	push	r16
    72aa:	cf 93       	push	r28
    72ac:	df 93       	push	r29
    72ae:	ec 01       	movw	r28, r24
    72b0:	9a 01       	movw	r18, r20
    72b2:	ab 01       	movw	r20, r22
	static const char fatstr[] = "FAT";


	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    72b4:	bc 01       	movw	r22, r24
    72b6:	6e 5c       	subi	r22, 0xCE	; 206
    72b8:	7f 4f       	sbci	r23, 0xFF	; 255
    72ba:	89 81       	ldd	r24, Y+1	; 0x01
    72bc:	01 e0       	ldi	r16, 0x01	; 1
    72be:	0e 94 e3 53 	call	0xa7c6	; 0xa7c6 <disk_read>
    72c2:	89 2b       	or	r24, r25
    72c4:	11 f0       	breq	.+4      	; 0x72ca <check_fs+0x22>
    72c6:	23 e0       	ldi	r18, 0x03	; 3
    72c8:	37 c0       	rjmp	.+110    	; 0x7338 <check_fs+0x90>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    72ca:	c0 5d       	subi	r28, 0xD0	; 208
    72cc:	dd 4f       	sbci	r29, 0xFD	; 253
    72ce:	88 81       	ld	r24, Y
    72d0:	99 81       	ldd	r25, Y+1	; 0x01
    72d2:	c0 53       	subi	r28, 0x30	; 48
    72d4:	d2 40       	sbci	r29, 0x02	; 2
    72d6:	85 55       	subi	r24, 0x55	; 85
    72d8:	9a 4a       	sbci	r25, 0xAA	; 170
    72da:	11 f0       	breq	.+4      	; 0x72e0 <check_fs+0x38>
    72dc:	22 e0       	ldi	r18, 0x02	; 2
    72de:	2c c0       	rjmp	.+88     	; 0x7338 <check_fs+0x90>
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
    72e0:	de 01       	movw	r26, r28
    72e2:	a8 59       	subi	r26, 0x98	; 152
    72e4:	bf 4f       	sbci	r27, 0xFF	; 255
    72e6:	ec e5       	ldi	r30, 0x5C	; 92
    72e8:	f4 e2       	ldi	r31, 0x24	; 36
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    72ea:	84 e2       	ldi	r24, 0x24	; 36
    72ec:	ef 35       	cpi	r30, 0x5F	; 95
    72ee:	f8 07       	cpc	r31, r24
    72f0:	11 f4       	brne	.+4      	; 0x72f6 <check_fs+0x4e>
    72f2:	20 e0       	ldi	r18, 0x00	; 0
    72f4:	21 c0       	rjmp	.+66     	; 0x7338 <check_fs+0x90>
    72f6:	9c 91       	ld	r25, X
    72f8:	80 81       	ld	r24, Z
    72fa:	98 17       	cp	r25, r24
    72fc:	19 f4       	brne	.+6      	; 0x7304 <check_fs+0x5c>
    72fe:	11 96       	adiw	r26, 0x01	; 1
    7300:	31 96       	adiw	r30, 0x01	; 1
    7302:	f3 cf       	rjmp	.-26     	; 0x72ea <check_fs+0x42>
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
    7304:	de 01       	movw	r26, r28
    7306:	ac 57       	subi	r26, 0x7C	; 124
    7308:	bf 4f       	sbci	r27, 0xFF	; 255
    730a:	ec e5       	ldi	r30, 0x5C	; 92
    730c:	f4 e2       	ldi	r31, 0x24	; 36
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    730e:	24 e2       	ldi	r18, 0x24	; 36
    7310:	ef 35       	cpi	r30, 0x5F	; 95
    7312:	f2 07       	cpc	r31, r18
    7314:	49 f0       	breq	.+18     	; 0x7328 <check_fs+0x80>
    7316:	9c 91       	ld	r25, X
    7318:	80 81       	ld	r24, Z
    731a:	98 17       	cp	r25, r24
    731c:	11 f0       	breq	.+4      	; 0x7322 <check_fs+0x7a>
    731e:	21 e0       	ldi	r18, 0x01	; 1
    7320:	0b c0       	rjmp	.+22     	; 0x7338 <check_fs+0x90>
    7322:	11 96       	adiw	r26, 0x01	; 1
    7324:	31 96       	adiw	r30, 0x01	; 1
    7326:	f3 cf       	rjmp	.-26     	; 0x730e <check_fs+0x66>
    7328:	20 e0       	ldi	r18, 0x00	; 0
    732a:	c6 5a       	subi	r28, 0xA6	; 166
    732c:	df 4f       	sbci	r29, 0xFF	; 255
    732e:	88 81       	ld	r24, Y
    7330:	87 ff       	sbrs	r24, 7
    7332:	21 e0       	ldi	r18, 0x01	; 1
    7334:	81 e0       	ldi	r24, 0x01	; 1
    7336:	28 27       	eor	r18, r24
		return 0;
	if (!mem_cmp(&fs->win[BS_FilSysType32], fatstr, 3) && !(fs->win[BPB_ExtFlags] & 0x80))
		return 0;

	return 1;
}
    7338:	82 2f       	mov	r24, r18
    733a:	df 91       	pop	r29
    733c:	cf 91       	pop	r28
    733e:	0f 91       	pop	r16
    7340:	08 95       	ret

00007342 <auto_mount>:
FRESULT auto_mount (	/* FR_OK(0): successful, !=0: any error occured */
	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    7342:	a0 e0       	ldi	r26, 0x00	; 0
    7344:	b0 e0       	ldi	r27, 0x00	; 0
    7346:	e7 ea       	ldi	r30, 0xA7	; 167
    7348:	f9 e3       	ldi	r31, 0x39	; 57
    734a:	0c 94 fd 5a 	jmp	0xb5fa	; 0xb5fa <__prologue_saves__+0x8>
    734e:	fc 01       	movw	r30, r24
    7350:	9b 01       	movw	r18, r22
    7352:	f4 2e       	mov	r15, r20
	FRESULT res;
	BYTE fmt, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fsize, tsect, mclst;
	const XCHAR *p = *path;
    7354:	a0 81       	ld	r26, Z
    7356:	b1 81       	ldd	r27, Z+1	; 0x01
	FATFS *fs;


	/* Get logical drive number from the path name */
	vol = p[0] - '0';				/* Is there a drive number? */
    7358:	8c 91       	ld	r24, X
    735a:	08 2f       	mov	r16, r24
    735c:	11 27       	eor	r17, r17
    735e:	07 fd       	sbrc	r16, 7
    7360:	10 95       	com	r17
    7362:	00 53       	subi	r16, 0x30	; 48
    7364:	10 40       	sbci	r17, 0x00	; 0
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
    7366:	0a 30       	cpi	r16, 0x0A	; 10
    7368:	11 05       	cpc	r17, r1
    736a:	48 f4       	brcc	.+18     	; 0x737e <auto_mount+0x3c>
    736c:	11 96       	adiw	r26, 0x01	; 1
    736e:	8c 91       	ld	r24, X
    7370:	11 97       	sbiw	r26, 0x01	; 1
    7372:	8a 33       	cpi	r24, 0x3A	; 58
    7374:	21 f4       	brne	.+8      	; 0x737e <auto_mount+0x3c>
		p += 2; *path = p;			/* Return pointer to the path name */
    7376:	12 96       	adiw	r26, 0x02	; 2
    7378:	a0 83       	st	Z, r26
    737a:	b1 83       	std	Z+1, r27	; 0x01
    737c:	04 c0       	rjmp	.+8      	; 0x7386 <auto_mount+0x44>
	} else {						/* No drive number is given */
#if _FS_RPATH
		vol = Drive;				/* Use current drive */
    737e:	80 91 70 25 	lds	r24, 0x2570
    7382:	08 2f       	mov	r16, r24
    7384:	10 e0       	ldi	r17, 0x00	; 0
		vol = 0;					/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
    7386:	02 30       	cpi	r16, 0x02	; 2
    7388:	11 05       	cpc	r17, r1
    738a:	18 f0       	brcs	.+6      	; 0x7392 <auto_mount+0x50>
    738c:	2b e0       	ldi	r18, 0x0B	; 11
    738e:	30 e0       	ldi	r19, 0x00	; 0
    7390:	84 c1       	rjmp	.+776    	; 0x769a <auto_mount+0x358>
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
    7392:	f8 01       	movw	r30, r16
    7394:	ee 0f       	add	r30, r30
    7396:	ff 1f       	adc	r31, r31
    7398:	e6 59       	subi	r30, 0x96	; 150
    739a:	fa 4d       	sbci	r31, 0xDA	; 218
    739c:	c0 81       	ld	r28, Z
    739e:	d1 81       	ldd	r29, Z+1	; 0x01
    73a0:	f9 01       	movw	r30, r18
    73a2:	c0 83       	st	Z, r28
    73a4:	d1 83       	std	Z+1, r29	; 0x01
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object registered? */
    73a6:	20 97       	sbiw	r28, 0x00	; 0
    73a8:	19 f4       	brne	.+6      	; 0x73b0 <auto_mount+0x6e>
    73aa:	2c e0       	ldi	r18, 0x0C	; 12
    73ac:	30 e0       	ldi	r19, 0x00	; 0
    73ae:	75 c1       	rjmp	.+746    	; 0x769a <auto_mount+0x358>

	ENTER_FF(fs);					/* Lock file system */

	if (fs->fs_type) {				/* If the logical drive has been mounted */
    73b0:	88 81       	ld	r24, Y
    73b2:	88 23       	and	r24, r24
    73b4:	59 f0       	breq	.+22     	; 0x73cc <auto_mount+0x8a>
		stat = disk_status(fs->drive);
    73b6:	89 81       	ldd	r24, Y+1	; 0x01
    73b8:	0e 94 dc 53 	call	0xa7b8	; 0xa7b8 <disk_status>
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
    73bc:	80 fd       	sbrc	r24, 0
    73be:	06 c0       	rjmp	.+12     	; 0x73cc <auto_mount+0x8a>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    73c0:	ff 20       	and	r15, r15
    73c2:	09 f4       	brne	.+2      	; 0x73c6 <auto_mount+0x84>
    73c4:	65 c1       	rjmp	.+714    	; 0x7690 <auto_mount+0x34e>
    73c6:	82 fd       	sbrc	r24, 2
    73c8:	60 c1       	rjmp	.+704    	; 0x768a <auto_mount+0x348>
    73ca:	62 c1       	rjmp	.+708    	; 0x7690 <auto_mount+0x34e>
		}
	}

	/* The logical drive must be mounted. Following code attempts to mount the volume */

	fs->fs_type = 0;					/* Clear the file system object */
    73cc:	18 82       	st	Y, r1
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
    73ce:	09 83       	std	Y+1, r16	; 0x01
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
    73d0:	80 2f       	mov	r24, r16
    73d2:	0e 94 d2 56 	call	0xada4	; 0xada4 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
    73d6:	80 ff       	sbrs	r24, 0
    73d8:	03 c0       	rjmp	.+6      	; 0x73e0 <auto_mount+0x9e>
    73da:	23 e0       	ldi	r18, 0x03	; 3
    73dc:	30 e0       	ldi	r19, 0x00	; 0
    73de:	5d c1       	rjmp	.+698    	; 0x769a <auto_mount+0x358>
#if _MAX_SS != 512						/* Get disk sector size if needed */
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    73e0:	ff 20       	and	r15, r15
    73e2:	11 f0       	breq	.+4      	; 0x73e8 <auto_mount+0xa6>
    73e4:	82 fd       	sbrc	r24, 2
    73e6:	51 c1       	rjmp	.+674    	; 0x768a <auto_mount+0x348>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
    73e8:	ce 01       	movw	r24, r28
    73ea:	40 e0       	ldi	r20, 0x00	; 0
    73ec:	50 e0       	ldi	r21, 0x00	; 0
    73ee:	60 e0       	ldi	r22, 0x00	; 0
    73f0:	70 e0       	ldi	r23, 0x00	; 0
    73f2:	0e 94 54 39 	call	0x72a8	; 0x72a8 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
    73f6:	81 30       	cpi	r24, 0x01	; 1
    73f8:	21 f0       	breq	.+8      	; 0x7402 <auto_mount+0xc0>
    73fa:	66 24       	eor	r6, r6
    73fc:	77 24       	eor	r7, r7
    73fe:	43 01       	movw	r8, r6
    7400:	10 c0       	rjmp	.+32     	; 0x7422 <auto_mount+0xe0>
		/* Check a partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
    7402:	fe 01       	movw	r30, r28
    7404:	e0 51       	subi	r30, 0x10	; 16
    7406:	fe 4f       	sbci	r31, 0xFE	; 254
		if (tbl[4]) {									/* Is the partition existing? */
    7408:	84 81       	ldd	r24, Z+4	; 0x04
    740a:	88 23       	and	r24, r24
    740c:	09 f4       	brne	.+2      	; 0x7410 <auto_mount+0xce>
    740e:	43 c1       	rjmp	.+646    	; 0x7696 <auto_mount+0x354>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
    7410:	60 84       	ldd	r6, Z+8	; 0x08
    7412:	71 84       	ldd	r7, Z+9	; 0x09
    7414:	82 84       	ldd	r8, Z+10	; 0x0a
    7416:	93 84       	ldd	r9, Z+11	; 0x0b
			fmt = check_fs(fs, bsect);					/* Check the partition */
    7418:	ce 01       	movw	r24, r28
    741a:	b4 01       	movw	r22, r8
    741c:	a3 01       	movw	r20, r6
    741e:	0e 94 54 39 	call	0x72a8	; 0x72a8 <check_fs>
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    7422:	83 30       	cpi	r24, 0x03	; 3
    7424:	19 f4       	brne	.+6      	; 0x742c <auto_mount+0xea>
    7426:	21 e0       	ldi	r18, 0x01	; 1
    7428:	30 e0       	ldi	r19, 0x00	; 0
    742a:	37 c1       	rjmp	.+622    	; 0x769a <auto_mount+0x358>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
    742c:	88 23       	and	r24, r24
    742e:	09 f0       	breq	.+2      	; 0x7432 <auto_mount+0xf0>
    7430:	32 c1       	rjmp	.+612    	; 0x7696 <auto_mount+0x354>
    7432:	8d ad       	ldd	r24, Y+61	; 0x3d
    7434:	9e ad       	ldd	r25, Y+62	; 0x3e
    7436:	80 50       	subi	r24, 0x00	; 0
    7438:	92 40       	sbci	r25, 0x02	; 2
    743a:	09 f0       	breq	.+2      	; 0x743e <auto_mount+0xfc>
    743c:	2c c1       	rjmp	.+600    	; 0x7696 <auto_mount+0x354>
		return FR_NO_FILESYSTEM;

	/* Initialize the file system object */
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    743e:	c8 5b       	subi	r28, 0xB8	; 184
    7440:	df 4f       	sbci	r29, 0xFF	; 255
    7442:	88 81       	ld	r24, Y
    7444:	99 81       	ldd	r25, Y+1	; 0x01
    7446:	c8 54       	subi	r28, 0x48	; 72
    7448:	d0 40       	sbci	r29, 0x00	; 0
    744a:	bc 01       	movw	r22, r24
    744c:	80 e0       	ldi	r24, 0x00	; 0
    744e:	90 e0       	ldi	r25, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
    7450:	61 15       	cp	r22, r1
    7452:	71 05       	cpc	r23, r1
    7454:	81 05       	cpc	r24, r1
    7456:	91 05       	cpc	r25, r1
    7458:	41 f4       	brne	.+16     	; 0x746a <auto_mount+0x128>
    745a:	ca 5a       	subi	r28, 0xAA	; 170
    745c:	df 4f       	sbci	r29, 0xFF	; 255
    745e:	68 81       	ld	r22, Y
    7460:	79 81       	ldd	r23, Y+1	; 0x01
    7462:	8a 81       	ldd	r24, Y+2	; 0x02
    7464:	9b 81       	ldd	r25, Y+3	; 0x03
    7466:	c6 55       	subi	r28, 0x56	; 86
    7468:	d0 40       	sbci	r29, 0x00	; 0
	fs->sects_fat = fsize;
    746a:	6a 8f       	std	Y+26, r22	; 0x1a
    746c:	7b 8f       	std	Y+27, r23	; 0x1b
    746e:	8c 8f       	std	Y+28, r24	; 0x1c
    7470:	9d 8f       	std	Y+29, r25	; 0x1d
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
    7472:	ce 5b       	subi	r28, 0xBE	; 190
    7474:	df 4f       	sbci	r29, 0xFF	; 255
    7476:	28 81       	ld	r18, Y
    7478:	c2 54       	subi	r28, 0x42	; 66
    747a:	d0 40       	sbci	r29, 0x00	; 0
    747c:	2b 83       	std	Y+3, r18	; 0x03
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
    747e:	30 e0       	ldi	r19, 0x00	; 0
    7480:	40 e0       	ldi	r20, 0x00	; 0
    7482:	50 e0       	ldi	r21, 0x00	; 0
    7484:	0e 94 76 5a 	call	0xb4ec	; 0xb4ec <__mulsi3>
    7488:	5b 01       	movw	r10, r22
    748a:	6c 01       	movw	r12, r24
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
    748c:	fe 01       	movw	r30, r28
    748e:	e0 5c       	subi	r30, 0xC0	; 192
    7490:	ff 4f       	sbci	r31, 0xFF	; 255
    7492:	80 81       	ld	r24, Z
    7494:	91 81       	ldd	r25, Z+1	; 0x01
    7496:	a0 e0       	ldi	r26, 0x00	; 0
    7498:	b0 e0       	ldi	r27, 0x00	; 0
    749a:	86 0d       	add	r24, r6
    749c:	97 1d       	adc	r25, r7
    749e:	a8 1d       	adc	r26, r8
    74a0:	b9 1d       	adc	r27, r9
    74a2:	8a a3       	std	Y+34, r24	; 0x22
    74a4:	9b a3       	std	Y+35, r25	; 0x23
    74a6:	ac a3       	std	Y+36, r26	; 0x24
    74a8:	bd a3       	std	Y+37, r27	; 0x25
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
    74aa:	8f ad       	ldd	r24, Y+63	; 0x3f
    74ac:	8a 83       	std	Y+2, r24	; 0x02
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
    74ae:	cd 5b       	subi	r28, 0xBD	; 189
    74b0:	df 4f       	sbci	r29, 0xFF	; 255
    74b2:	28 81       	ld	r18, Y
    74b4:	39 81       	ldd	r19, Y+1	; 0x01
    74b6:	c3 54       	subi	r28, 0x43	; 67
    74b8:	d0 40       	sbci	r29, 0x00	; 0
    74ba:	2f 83       	std	Y+7, r18	; 0x07
    74bc:	38 87       	std	Y+8, r19	; 0x08
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the file system */
    74be:	cb 5b       	subi	r28, 0xBB	; 187
    74c0:	df 4f       	sbci	r29, 0xFF	; 255
    74c2:	88 81       	ld	r24, Y
    74c4:	99 81       	ldd	r25, Y+1	; 0x01
    74c6:	c5 54       	subi	r28, 0x45	; 69
    74c8:	d0 40       	sbci	r29, 0x00	; 0
    74ca:	7c 01       	movw	r14, r24
    74cc:	00 e0       	ldi	r16, 0x00	; 0
    74ce:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    74d0:	e1 14       	cp	r14, r1
    74d2:	f1 04       	cpc	r15, r1
    74d4:	01 05       	cpc	r16, r1
    74d6:	11 05       	cpc	r17, r1
    74d8:	41 f4       	brne	.+16     	; 0x74ea <auto_mount+0x1a8>
    74da:	ce 5a       	subi	r28, 0xAE	; 174
    74dc:	df 4f       	sbci	r29, 0xFF	; 255
    74de:	e8 80       	ld	r14, Y
    74e0:	f9 80       	ldd	r15, Y+1	; 0x01
    74e2:	0a 81       	ldd	r16, Y+2	; 0x02
    74e4:	1b 81       	ldd	r17, Y+3	; 0x03
    74e6:	c2 55       	subi	r28, 0x52	; 82
    74e8:	d0 40       	sbci	r29, 0x00	; 0
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 */
    74ea:	80 81       	ld	r24, Z
    74ec:	91 81       	ldd	r25, Z+1	; 0x01
    74ee:	a0 e0       	ldi	r26, 0x00	; 0
    74f0:	b0 e0       	ldi	r27, 0x00	; 0
    74f2:	e8 1a       	sub	r14, r24
    74f4:	f9 0a       	sbc	r15, r25
    74f6:	0a 0b       	sbc	r16, r26
    74f8:	1b 0b       	sbc	r17, r27
    74fa:	ea 18       	sub	r14, r10
    74fc:	fb 08       	sbc	r15, r11
    74fe:	0c 09       	sbc	r16, r12
    7500:	1d 09       	sbc	r17, r13
    7502:	84 e0       	ldi	r24, 0x04	; 4
    7504:	36 95       	lsr	r19
    7506:	27 95       	ror	r18
    7508:	8a 95       	dec	r24
    750a:	e1 f7       	brne	.-8      	; 0x7504 <auto_mount+0x1c2>
    750c:	c9 01       	movw	r24, r18
    750e:	a0 e0       	ldi	r26, 0x00	; 0
    7510:	b0 e0       	ldi	r27, 0x00	; 0
    7512:	e8 1a       	sub	r14, r24
    7514:	f9 0a       	sbc	r15, r25
    7516:	0a 0b       	sbc	r16, r26
    7518:	1b 0b       	sbc	r17, r27
    751a:	2a 81       	ldd	r18, Y+2	; 0x02
    751c:	30 e0       	ldi	r19, 0x00	; 0
    751e:	40 e0       	ldi	r20, 0x00	; 0
    7520:	50 e0       	ldi	r21, 0x00	; 0
    7522:	c8 01       	movw	r24, r16
    7524:	b7 01       	movw	r22, r14
    7526:	0e 94 bc 5a 	call	0xb578	; 0xb578 <__udivmodsi4>
    752a:	2e 5f       	subi	r18, 0xFE	; 254
    752c:	3f 4f       	sbci	r19, 0xFF	; 255
    752e:	4f 4f       	sbci	r20, 0xFF	; 255
    7530:	5f 4f       	sbci	r21, 0xFF	; 255
    7532:	2e 8f       	std	Y+30, r18	; 0x1e
    7534:	3f 8f       	std	Y+31, r19	; 0x1f
    7536:	48 a3       	std	Y+32, r20	; 0x20
    7538:	59 a3       	std	Y+33, r21	; 0x21
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
    753a:	27 3f       	cpi	r18, 0xF7	; 247
    753c:	8f e0       	ldi	r24, 0x0F	; 15
    753e:	38 07       	cpc	r19, r24
    7540:	80 e0       	ldi	r24, 0x00	; 0
    7542:	48 07       	cpc	r20, r24
    7544:	80 e0       	ldi	r24, 0x00	; 0
    7546:	58 07       	cpc	r21, r24
    7548:	10 f4       	brcc	.+4      	; 0x754e <auto_mount+0x20c>
    754a:	11 e0       	ldi	r17, 0x01	; 1
    754c:	07 c0       	rjmp	.+14     	; 0x755c <auto_mount+0x21a>
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
    754e:	27 5f       	subi	r18, 0xF7	; 247
    7550:	3f 4f       	sbci	r19, 0xFF	; 255
    7552:	40 40       	sbci	r20, 0x00	; 0
    7554:	50 40       	sbci	r21, 0x00	; 0
    7556:	08 f0       	brcs	.+2      	; 0x755a <auto_mount+0x218>
    7558:	a6 c0       	rjmp	.+332    	; 0x76a6 <auto_mount+0x364>
    755a:	12 e0       	ldi	r17, 0x02	; 2

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    755c:	8a a1       	ldd	r24, Y+34	; 0x22
    755e:	9b a1       	ldd	r25, Y+35	; 0x23
    7560:	ac a1       	ldd	r26, Y+36	; 0x24
    7562:	bd a1       	ldd	r27, Y+37	; 0x25
    7564:	8a 0d       	add	r24, r10
    7566:	9b 1d       	adc	r25, r11
    7568:	ac 1d       	adc	r26, r12
    756a:	bd 1d       	adc	r27, r13
    756c:	8e a3       	std	Y+38, r24	; 0x26
    756e:	9f a3       	std	Y+39, r25	; 0x27
    7570:	a8 a7       	std	Y+40, r26	; 0x28
    7572:	b9 a7       	std	Y+41, r27	; 0x29
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
    7574:	8f 81       	ldd	r24, Y+7	; 0x07
    7576:	98 85       	ldd	r25, Y+8	; 0x08
    7578:	b4 e0       	ldi	r27, 0x04	; 4
    757a:	96 95       	lsr	r25
    757c:	87 95       	ror	r24
    757e:	ba 95       	dec	r27
    7580:	e1 f7       	brne	.-8      	; 0x757a <auto_mount+0x238>
    7582:	a0 e0       	ldi	r26, 0x00	; 0
    7584:	b0 e0       	ldi	r27, 0x00	; 0
    7586:	2a a1       	ldd	r18, Y+34	; 0x22
    7588:	3b a1       	ldd	r19, Y+35	; 0x23
    758a:	4c a1       	ldd	r20, Y+36	; 0x24
    758c:	5d a1       	ldd	r21, Y+37	; 0x25
    758e:	82 0f       	add	r24, r18
    7590:	93 1f       	adc	r25, r19
    7592:	a4 1f       	adc	r26, r20
    7594:	b5 1f       	adc	r27, r21
    7596:	8a 0d       	add	r24, r10
    7598:	9b 1d       	adc	r25, r11
    759a:	ac 1d       	adc	r26, r12
    759c:	bd 1d       	adc	r27, r13
    759e:	8a a7       	std	Y+42, r24	; 0x2a
    75a0:	9b a7       	std	Y+43, r25	; 0x2b
    75a2:	ac a7       	std	Y+44, r26	; 0x2c
    75a4:	bd a7       	std	Y+45, r27	; 0x2d

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
    75a6:	8f ef       	ldi	r24, 0xFF	; 255
    75a8:	9f ef       	ldi	r25, 0xFF	; 255
    75aa:	af ef       	ldi	r26, 0xFF	; 255
    75ac:	bf ef       	ldi	r27, 0xFF	; 255
    75ae:	8e 87       	std	Y+14, r24	; 0x0e
    75b0:	9f 87       	std	Y+15, r25	; 0x0f
    75b2:	a8 8b       	std	Y+16, r26	; 0x10
    75b4:	b9 8b       	std	Y+17, r27	; 0x11
	fs->wflag = 0;
    75b6:	1c 82       	std	Y+4, r1	; 0x04
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
    75b8:	13 30       	cpi	r17, 0x03	; 3
    75ba:	09 f0       	breq	.+2      	; 0x75be <auto_mount+0x27c>
    75bc:	51 c0       	rjmp	.+162    	; 0x7660 <auto_mount+0x31e>
	 	fs->fsi_flag = 0;
    75be:	19 86       	std	Y+9, r1	; 0x09
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    75c0:	ce 59       	subi	r28, 0x9E	; 158
    75c2:	df 4f       	sbci	r29, 0xFF	; 255
    75c4:	28 81       	ld	r18, Y
    75c6:	39 81       	ldd	r19, Y+1	; 0x01
    75c8:	c2 56       	subi	r28, 0x62	; 98
    75ca:	d0 40       	sbci	r29, 0x00	; 0
    75cc:	40 e0       	ldi	r20, 0x00	; 0
    75ce:	50 e0       	ldi	r21, 0x00	; 0
    75d0:	26 0d       	add	r18, r6
    75d2:	37 1d       	adc	r19, r7
    75d4:	48 1d       	adc	r20, r8
    75d6:	59 1d       	adc	r21, r9
    75d8:	2a 8b       	std	Y+18, r18	; 0x12
    75da:	3b 8b       	std	Y+19, r19	; 0x13
    75dc:	4c 8b       	std	Y+20, r20	; 0x14
    75de:	5d 8b       	std	Y+21, r21	; 0x15
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
    75e0:	be 01       	movw	r22, r28
    75e2:	6e 5c       	subi	r22, 0xCE	; 206
    75e4:	7f 4f       	sbci	r23, 0xFF	; 255
    75e6:	89 81       	ldd	r24, Y+1	; 0x01
    75e8:	01 e0       	ldi	r16, 0x01	; 1
    75ea:	0e 94 e3 53 	call	0xa7c6	; 0xa7c6 <disk_read>
    75ee:	89 2b       	or	r24, r25
    75f0:	b9 f5       	brne	.+110    	; 0x7660 <auto_mount+0x31e>
    75f2:	c0 5d       	subi	r28, 0xD0	; 208
    75f4:	dd 4f       	sbci	r29, 0xFD	; 253
    75f6:	88 81       	ld	r24, Y
    75f8:	99 81       	ldd	r25, Y+1	; 0x01
    75fa:	c0 53       	subi	r28, 0x30	; 48
    75fc:	d2 40       	sbci	r29, 0x02	; 2
    75fe:	85 55       	subi	r24, 0x55	; 85
    7600:	9a 4a       	sbci	r25, 0xAA	; 170
    7602:	71 f5       	brne	.+92     	; 0x7660 <auto_mount+0x31e>
    7604:	8a a9       	ldd	r24, Y+50	; 0x32
    7606:	9b a9       	ldd	r25, Y+51	; 0x33
    7608:	ac a9       	ldd	r26, Y+52	; 0x34
    760a:	bd a9       	ldd	r27, Y+53	; 0x35
    760c:	82 55       	subi	r24, 0x52	; 82
    760e:	92 45       	sbci	r25, 0x52	; 82
    7610:	a1 46       	sbci	r26, 0x61	; 97
    7612:	b1 44       	sbci	r27, 0x41	; 65
    7614:	29 f5       	brne	.+74     	; 0x7660 <auto_mount+0x31e>
    7616:	ca 5e       	subi	r28, 0xEA	; 234
    7618:	dd 4f       	sbci	r29, 0xFD	; 253
    761a:	88 81       	ld	r24, Y
    761c:	99 81       	ldd	r25, Y+1	; 0x01
    761e:	aa 81       	ldd	r26, Y+2	; 0x02
    7620:	bb 81       	ldd	r27, Y+3	; 0x03
    7622:	c6 51       	subi	r28, 0x16	; 22
    7624:	d2 40       	sbci	r29, 0x02	; 2
    7626:	82 57       	subi	r24, 0x72	; 114
    7628:	92 47       	sbci	r25, 0x72	; 114
    762a:	a1 44       	sbci	r26, 0x41	; 65
    762c:	b1 46       	sbci	r27, 0x61	; 97
    762e:	c1 f4       	brne	.+48     	; 0x7660 <auto_mount+0x31e>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    7630:	c2 5e       	subi	r28, 0xE2	; 226
    7632:	dd 4f       	sbci	r29, 0xFD	; 253
    7634:	88 81       	ld	r24, Y
    7636:	99 81       	ldd	r25, Y+1	; 0x01
    7638:	aa 81       	ldd	r26, Y+2	; 0x02
    763a:	bb 81       	ldd	r27, Y+3	; 0x03
    763c:	ce 51       	subi	r28, 0x1E	; 30
    763e:	d2 40       	sbci	r29, 0x02	; 2
    7640:	8a 87       	std	Y+10, r24	; 0x0a
    7642:	9b 87       	std	Y+11, r25	; 0x0b
    7644:	ac 87       	std	Y+12, r26	; 0x0c
    7646:	bd 87       	std	Y+13, r27	; 0x0d
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    7648:	c6 5e       	subi	r28, 0xE6	; 230
    764a:	dd 4f       	sbci	r29, 0xFD	; 253
    764c:	88 81       	ld	r24, Y
    764e:	99 81       	ldd	r25, Y+1	; 0x01
    7650:	aa 81       	ldd	r26, Y+2	; 0x02
    7652:	bb 81       	ldd	r27, Y+3	; 0x03
    7654:	ca 51       	subi	r28, 0x1A	; 26
    7656:	d2 40       	sbci	r29, 0x02	; 2
    7658:	8e 87       	std	Y+14, r24	; 0x0e
    765a:	9f 87       	std	Y+15, r25	; 0x0f
    765c:	a8 8b       	std	Y+16, r26	; 0x10
    765e:	b9 8b       	std	Y+17, r27	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    7660:	18 83       	st	Y, r17
	fs->winsect = 0;		/* Invalidate sector cache */
    7662:	1e a6       	std	Y+46, r1	; 0x2e
    7664:	1f a6       	std	Y+47, r1	; 0x2f
    7666:	18 aa       	std	Y+48, r1	; 0x30
    7668:	19 aa       	std	Y+49, r1	; 0x31
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
    766a:	1e 8a       	std	Y+22, r1	; 0x16
    766c:	1f 8a       	std	Y+23, r1	; 0x17
    766e:	18 8e       	std	Y+24, r1	; 0x18
    7670:	19 8e       	std	Y+25, r1	; 0x19
#endif
	fs->id = ++Fsid;		/* File system mount ID */
    7672:	80 91 6e 25 	lds	r24, 0x256E
    7676:	90 91 6f 25 	lds	r25, 0x256F
    767a:	01 96       	adiw	r24, 0x01	; 1
    767c:	80 93 6e 25 	sts	0x256E, r24
    7680:	90 93 6f 25 	sts	0x256F, r25
    7684:	8d 83       	std	Y+5, r24	; 0x05
    7686:	9e 83       	std	Y+6, r25	; 0x06
    7688:	03 c0       	rjmp	.+6      	; 0x7690 <auto_mount+0x34e>
	res = FR_OK;

	return res;
    768a:	2a e0       	ldi	r18, 0x0A	; 10
    768c:	30 e0       	ldi	r19, 0x00	; 0
    768e:	05 c0       	rjmp	.+10     	; 0x769a <auto_mount+0x358>
    7690:	20 e0       	ldi	r18, 0x00	; 0
    7692:	30 e0       	ldi	r19, 0x00	; 0
    7694:	02 c0       	rjmp	.+4      	; 0x769a <auto_mount+0x358>
    7696:	2d e0       	ldi	r18, 0x0D	; 13
    7698:	30 e0       	ldi	r19, 0x00	; 0
}
    769a:	c9 01       	movw	r24, r18
    769c:	cd b7       	in	r28, 0x3d	; 61
    769e:	de b7       	in	r29, 0x3e	; 62
    76a0:	ee e0       	ldi	r30, 0x0E	; 14
    76a2:	0c 94 19 5b 	jmp	0xb632	; 0xb632 <__epilogue_restores__+0x8>
	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    76a6:	c2 5a       	subi	r28, 0xA2	; 162
    76a8:	df 4f       	sbci	r29, 0xFF	; 255
    76aa:	88 81       	ld	r24, Y
    76ac:	99 81       	ldd	r25, Y+1	; 0x01
    76ae:	aa 81       	ldd	r26, Y+2	; 0x02
    76b0:	bb 81       	ldd	r27, Y+3	; 0x03
    76b2:	ce 55       	subi	r28, 0x5E	; 94
    76b4:	d0 40       	sbci	r29, 0x00	; 0
    76b6:	8e a3       	std	Y+38, r24	; 0x26
    76b8:	9f a3       	std	Y+39, r25	; 0x27
    76ba:	a8 a7       	std	Y+40, r26	; 0x28
    76bc:	b9 a7       	std	Y+41, r27	; 0x29
    76be:	13 e0       	ldi	r17, 0x03	; 3
    76c0:	59 cf       	rjmp	.-334    	; 0x7574 <auto_mount+0x232>

000076c2 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make apperance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    76c2:	a0 e0       	ldi	r26, 0x00	; 0
    76c4:	b0 e0       	ldi	r27, 0x00	; 0
    76c6:	e7 e6       	ldi	r30, 0x67	; 103
    76c8:	fb e3       	ldi	r31, 0x3B	; 59
    76ca:	0c 94 fd 5a 	jmp	0xb5fa	; 0xb5fa <__prologue_saves__+0x8>
    76ce:	ec 01       	movw	r28, r24
    76d0:	4a 01       	movw	r8, r20
    76d2:	5b 01       	movw	r10, r22
	DWORD wsect;


	wsect = fs->winsect;
    76d4:	ce a4       	ldd	r12, Y+46	; 0x2e
    76d6:	df a4       	ldd	r13, Y+47	; 0x2f
    76d8:	e8 a8       	ldd	r14, Y+48	; 0x30
    76da:	f9 a8       	ldd	r15, Y+49	; 0x31
	if (wsect != sector) {	/* Changed current window */
    76dc:	c4 16       	cp	r12, r20
    76de:	d5 06       	cpc	r13, r21
    76e0:	e6 06       	cpc	r14, r22
    76e2:	f7 06       	cpc	r15, r23
    76e4:	09 f4       	brne	.+2      	; 0x76e8 <move_window+0x26>
    76e6:	4f c0       	rjmp	.+158    	; 0x7786 <move_window+0xc4>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    76e8:	8c 81       	ldd	r24, Y+4	; 0x04
    76ea:	88 23       	and	r24, r24
    76ec:	a1 f1       	breq	.+104    	; 0x7756 <move_window+0x94>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
    76ee:	22 e3       	ldi	r18, 0x32	; 50
    76f0:	62 2e       	mov	r6, r18
    76f2:	71 2c       	mov	r7, r1
    76f4:	6c 0e       	add	r6, r28
    76f6:	7d 1e       	adc	r7, r29
    76f8:	89 81       	ldd	r24, Y+1	; 0x01
    76fa:	b3 01       	movw	r22, r6
    76fc:	a7 01       	movw	r20, r14
    76fe:	96 01       	movw	r18, r12
    7700:	01 e0       	ldi	r16, 0x01	; 1
    7702:	0e 94 48 54 	call	0xa890	; 0xa890 <disk_write>
    7706:	89 2b       	or	r24, r25
    7708:	d9 f5       	brne	.+118    	; 0x7780 <move_window+0xbe>
				return FR_DISK_ERR;
			fs->wflag = 0;
    770a:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
    770c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    770e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    7710:	ac 8d       	ldd	r26, Y+28	; 0x1c
    7712:	bd 8d       	ldd	r27, Y+29	; 0x1d
    7714:	2a a1       	ldd	r18, Y+34	; 0x22
    7716:	3b a1       	ldd	r19, Y+35	; 0x23
    7718:	4c a1       	ldd	r20, Y+36	; 0x24
    771a:	5d a1       	ldd	r21, Y+37	; 0x25
    771c:	82 0f       	add	r24, r18
    771e:	93 1f       	adc	r25, r19
    7720:	a4 1f       	adc	r26, r20
    7722:	b5 1f       	adc	r27, r21
    7724:	c8 16       	cp	r12, r24
    7726:	d9 06       	cpc	r13, r25
    7728:	ea 06       	cpc	r14, r26
    772a:	fb 06       	cpc	r15, r27
    772c:	a0 f4       	brcc	.+40     	; 0x7756 <move_window+0x94>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
    772e:	1b 81       	ldd	r17, Y+3	; 0x03
    7730:	10 c0       	rjmp	.+32     	; 0x7752 <move_window+0x90>
					wsect += fs->sects_fat;
    7732:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7734:	9b 8d       	ldd	r25, Y+27	; 0x1b
    7736:	ac 8d       	ldd	r26, Y+28	; 0x1c
    7738:	bd 8d       	ldd	r27, Y+29	; 0x1d
    773a:	c8 0e       	add	r12, r24
    773c:	d9 1e       	adc	r13, r25
    773e:	ea 1e       	adc	r14, r26
    7740:	fb 1e       	adc	r15, r27
					disk_write(fs->drive, fs->win, wsect, 1);
    7742:	89 81       	ldd	r24, Y+1	; 0x01
    7744:	b3 01       	movw	r22, r6
    7746:	a7 01       	movw	r20, r14
    7748:	96 01       	movw	r18, r12
    774a:	01 e0       	ldi	r16, 0x01	; 1
    774c:	0e 94 48 54 	call	0xa890	; 0xa890 <disk_write>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
    7750:	11 50       	subi	r17, 0x01	; 1
    7752:	12 30       	cpi	r17, 0x02	; 2
    7754:	70 f7       	brcc	.-36     	; 0x7732 <move_window+0x70>
					disk_write(fs->drive, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    7756:	81 14       	cp	r8, r1
    7758:	91 04       	cpc	r9, r1
    775a:	a1 04       	cpc	r10, r1
    775c:	b1 04       	cpc	r11, r1
    775e:	99 f0       	breq	.+38     	; 0x7786 <move_window+0xc4>
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
    7760:	be 01       	movw	r22, r28
    7762:	6e 5c       	subi	r22, 0xCE	; 206
    7764:	7f 4f       	sbci	r23, 0xFF	; 255
    7766:	89 81       	ldd	r24, Y+1	; 0x01
    7768:	a5 01       	movw	r20, r10
    776a:	94 01       	movw	r18, r8
    776c:	01 e0       	ldi	r16, 0x01	; 1
    776e:	0e 94 e3 53 	call	0xa7c6	; 0xa7c6 <disk_read>
    7772:	89 2b       	or	r24, r25
    7774:	29 f4       	brne	.+10     	; 0x7780 <move_window+0xbe>
				return FR_DISK_ERR;
			fs->winsect = sector;
    7776:	8e a6       	std	Y+46, r8	; 0x2e
    7778:	9f a6       	std	Y+47, r9	; 0x2f
    777a:	a8 aa       	std	Y+48, r10	; 0x30
    777c:	b9 aa       	std	Y+49, r11	; 0x31
    777e:	03 c0       	rjmp	.+6      	; 0x7786 <move_window+0xc4>
    7780:	21 e0       	ldi	r18, 0x01	; 1
    7782:	30 e0       	ldi	r19, 0x00	; 0
    7784:	02 c0       	rjmp	.+4      	; 0x778a <move_window+0xc8>
    7786:	20 e0       	ldi	r18, 0x00	; 0
    7788:	30 e0       	ldi	r19, 0x00	; 0
		}
	}

	return FR_OK;
}
    778a:	c9 01       	movw	r24, r18
    778c:	cd b7       	in	r28, 0x3d	; 61
    778e:	de b7       	in	r29, 0x3e	; 62
    7790:	ee e0       	ldi	r30, 0x0E	; 14
    7792:	0c 94 19 5b 	jmp	0xb632	; 0xb632 <__epilogue_restores__+0x8>

00007796 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Interal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    7796:	a0 e0       	ldi	r26, 0x00	; 0
    7798:	b0 e0       	ldi	r27, 0x00	; 0
    779a:	e1 ed       	ldi	r30, 0xD1	; 209
    779c:	fb e3       	ldi	r31, 0x3B	; 59
    779e:	0c 94 fe 5a 	jmp	0xb5fc	; 0xb5fc <__prologue_saves__+0xa>
    77a2:	4c 01       	movw	r8, r24
    77a4:	7a 01       	movw	r14, r20
    77a6:	8b 01       	movw	r16, r22
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
    77a8:	42 30       	cpi	r20, 0x02	; 2
    77aa:	51 05       	cpc	r21, r1
    77ac:	61 05       	cpc	r22, r1
    77ae:	71 05       	cpc	r23, r1
    77b0:	08 f4       	brcc	.+2      	; 0x77b4 <get_fat+0x1e>
    77b2:	97 c0       	rjmp	.+302    	; 0x78e2 <get_fat+0x14c>
    77b4:	f4 01       	movw	r30, r8
    77b6:	86 8d       	ldd	r24, Z+30	; 0x1e
    77b8:	97 8d       	ldd	r25, Z+31	; 0x1f
    77ba:	a0 a1       	ldd	r26, Z+32	; 0x20
    77bc:	b1 a1       	ldd	r27, Z+33	; 0x21
    77be:	48 17       	cp	r20, r24
    77c0:	59 07       	cpc	r21, r25
    77c2:	6a 07       	cpc	r22, r26
    77c4:	7b 07       	cpc	r23, r27
    77c6:	08 f0       	brcs	.+2      	; 0x77ca <get_fat+0x34>
    77c8:	8c c0       	rjmp	.+280    	; 0x78e2 <get_fat+0x14c>
		return 1;

	fsect = fs->fatbase;
    77ca:	a2 a0       	ldd	r10, Z+34	; 0x22
    77cc:	b3 a0       	ldd	r11, Z+35	; 0x23
    77ce:	c4 a0       	ldd	r12, Z+36	; 0x24
    77d0:	d5 a0       	ldd	r13, Z+37	; 0x25
	switch (fs->fs_type) {
    77d2:	80 81       	ld	r24, Z
    77d4:	82 30       	cpi	r24, 0x02	; 2
    77d6:	09 f4       	brne	.+2      	; 0x77da <get_fat+0x44>
    77d8:	4d c0       	rjmp	.+154    	; 0x7874 <get_fat+0xde>
    77da:	83 30       	cpi	r24, 0x03	; 3
    77dc:	09 f4       	brne	.+2      	; 0x77e0 <get_fat+0x4a>
    77de:	63 c0       	rjmp	.+198    	; 0x78a6 <get_fat+0x110>
    77e0:	81 30       	cpi	r24, 0x01	; 1
    77e2:	09 f0       	breq	.+2      	; 0x77e6 <get_fat+0x50>
    77e4:	83 c0       	rjmp	.+262    	; 0x78ec <get_fat+0x156>
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
    77e6:	ea 01       	movw	r28, r20
    77e8:	d6 95       	lsr	r29
    77ea:	c7 95       	ror	r28
    77ec:	c4 0f       	add	r28, r20
    77ee:	d5 1f       	adc	r29, r21
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    77f0:	ae 01       	movw	r20, r28
    77f2:	45 2f       	mov	r20, r21
    77f4:	55 27       	eor	r21, r21
    77f6:	46 95       	lsr	r20
    77f8:	60 e0       	ldi	r22, 0x00	; 0
    77fa:	70 e0       	ldi	r23, 0x00	; 0
    77fc:	4a 0d       	add	r20, r10
    77fe:	5b 1d       	adc	r21, r11
    7800:	6c 1d       	adc	r22, r12
    7802:	7d 1d       	adc	r23, r13
    7804:	c4 01       	movw	r24, r8
    7806:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <move_window>
    780a:	89 2b       	or	r24, r25
    780c:	09 f0       	breq	.+2      	; 0x7810 <get_fat+0x7a>
    780e:	6e c0       	rjmp	.+220    	; 0x78ec <get_fat+0x156>
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    7810:	fe 01       	movw	r30, r28
    7812:	f1 70       	andi	r31, 0x01	; 1
    7814:	e8 0d       	add	r30, r8
    7816:	f9 1d       	adc	r31, r9
    7818:	72 a8       	ldd	r7, Z+50	; 0x32
    781a:	21 96       	adiw	r28, 0x01	; 1
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    781c:	ae 01       	movw	r20, r28
    781e:	45 2f       	mov	r20, r21
    7820:	55 27       	eor	r21, r21
    7822:	46 95       	lsr	r20
    7824:	60 e0       	ldi	r22, 0x00	; 0
    7826:	70 e0       	ldi	r23, 0x00	; 0
    7828:	4a 0d       	add	r20, r10
    782a:	5b 1d       	adc	r21, r11
    782c:	6c 1d       	adc	r22, r12
    782e:	7d 1d       	adc	r23, r13
    7830:	c4 01       	movw	r24, r8
    7832:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <move_window>
    7836:	89 2b       	or	r24, r25
    7838:	09 f0       	breq	.+2      	; 0x783c <get_fat+0xa6>
    783a:	58 c0       	rjmp	.+176    	; 0x78ec <get_fat+0x156>
	fsect = fs->fatbase;
	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    783c:	67 2d       	mov	r22, r7
    783e:	70 e0       	ldi	r23, 0x00	; 0
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
    7840:	d1 70       	andi	r29, 0x01	; 1
    7842:	c8 0d       	add	r28, r8
    7844:	d9 1d       	adc	r29, r9
    7846:	9a a9       	ldd	r25, Y+50	; 0x32
    7848:	80 e0       	ldi	r24, 0x00	; 0
    784a:	68 2b       	or	r22, r24
    784c:	79 2b       	or	r23, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    784e:	c7 01       	movw	r24, r14
    7850:	81 70       	andi	r24, 0x01	; 1
    7852:	90 70       	andi	r25, 0x00	; 0
    7854:	89 2b       	or	r24, r25
    7856:	39 f0       	breq	.+14     	; 0x7866 <get_fat+0xd0>
    7858:	84 e0       	ldi	r24, 0x04	; 4
    785a:	76 95       	lsr	r23
    785c:	67 95       	ror	r22
    785e:	8a 95       	dec	r24
    7860:	e1 f7       	brne	.-8      	; 0x785a <get_fat+0xc4>
    7862:	9b 01       	movw	r18, r22
    7864:	1d c0       	rjmp	.+58     	; 0x78a0 <get_fat+0x10a>
    7866:	9b 01       	movw	r18, r22
    7868:	40 e0       	ldi	r20, 0x00	; 0
    786a:	50 e0       	ldi	r21, 0x00	; 0
    786c:	3f 70       	andi	r19, 0x0F	; 15
    786e:	40 70       	andi	r20, 0x00	; 0
    7870:	50 70       	andi	r21, 0x00	; 0
    7872:	40 c0       	rjmp	.+128    	; 0x78f4 <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
    7874:	45 2f       	mov	r20, r21
    7876:	56 2f       	mov	r21, r22
    7878:	67 2f       	mov	r22, r23
    787a:	77 27       	eor	r23, r23
    787c:	4a 0d       	add	r20, r10
    787e:	5b 1d       	adc	r21, r11
    7880:	6c 1d       	adc	r22, r12
    7882:	7d 1d       	adc	r23, r13
    7884:	c4 01       	movw	r24, r8
    7886:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <move_window>
    788a:	89 2b       	or	r24, r25
    788c:	79 f5       	brne	.+94     	; 0x78ec <get_fat+0x156>
		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
    788e:	f7 01       	movw	r30, r14
    7890:	ee 0f       	add	r30, r30
    7892:	ff 1f       	adc	r31, r31
    7894:	f1 70       	andi	r31, 0x01	; 1
    7896:	e8 0d       	add	r30, r8
    7898:	f9 1d       	adc	r31, r9
    789a:	82 a9       	ldd	r24, Z+50	; 0x32
    789c:	93 a9       	ldd	r25, Z+51	; 0x33
    789e:	9c 01       	movw	r18, r24
    78a0:	40 e0       	ldi	r20, 0x00	; 0
    78a2:	50 e0       	ldi	r21, 0x00	; 0
    78a4:	27 c0       	rjmp	.+78     	; 0x78f4 <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
    78a6:	e7 e0       	ldi	r30, 0x07	; 7
    78a8:	76 95       	lsr	r23
    78aa:	67 95       	ror	r22
    78ac:	57 95       	ror	r21
    78ae:	47 95       	ror	r20
    78b0:	ea 95       	dec	r30
    78b2:	d1 f7       	brne	.-12     	; 0x78a8 <get_fat+0x112>
    78b4:	4a 0d       	add	r20, r10
    78b6:	5b 1d       	adc	r21, r11
    78b8:	6c 1d       	adc	r22, r12
    78ba:	7d 1d       	adc	r23, r13
    78bc:	c4 01       	movw	r24, r8
    78be:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <move_window>
    78c2:	89 2b       	or	r24, r25
    78c4:	99 f4       	brne	.+38     	; 0x78ec <get_fat+0x156>
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
    78c6:	f7 01       	movw	r30, r14
    78c8:	ee 0f       	add	r30, r30
    78ca:	ff 1f       	adc	r31, r31
    78cc:	ee 0f       	add	r30, r30
    78ce:	ff 1f       	adc	r31, r31
    78d0:	f1 70       	andi	r31, 0x01	; 1
    78d2:	e8 0d       	add	r30, r8
    78d4:	f9 1d       	adc	r31, r9
    78d6:	22 a9       	ldd	r18, Z+50	; 0x32
    78d8:	33 a9       	ldd	r19, Z+51	; 0x33
    78da:	44 a9       	ldd	r20, Z+52	; 0x34
    78dc:	55 a9       	ldd	r21, Z+53	; 0x35
    78de:	5f 70       	andi	r21, 0x0F	; 15
    78e0:	09 c0       	rjmp	.+18     	; 0x78f4 <get_fat+0x15e>
    78e2:	21 e0       	ldi	r18, 0x01	; 1
    78e4:	30 e0       	ldi	r19, 0x00	; 0
    78e6:	40 e0       	ldi	r20, 0x00	; 0
    78e8:	50 e0       	ldi	r21, 0x00	; 0
    78ea:	04 c0       	rjmp	.+8      	; 0x78f4 <get_fat+0x15e>
    78ec:	2f ef       	ldi	r18, 0xFF	; 255
    78ee:	3f ef       	ldi	r19, 0xFF	; 255
    78f0:	4f ef       	ldi	r20, 0xFF	; 255
    78f2:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
}
    78f4:	b9 01       	movw	r22, r18
    78f6:	ca 01       	movw	r24, r20
    78f8:	cd b7       	in	r28, 0x3d	; 61
    78fa:	de b7       	in	r29, 0x3e	; 62
    78fc:	ed e0       	ldi	r30, 0x0D	; 13
    78fe:	0c 94 1a 5b 	jmp	0xb634	; 0xb634 <__epilogue_restores__+0xa>

00007902 <dir_seek>:
static
FRESULT dir_seek (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    7902:	a0 e0       	ldi	r26, 0x00	; 0
    7904:	b0 e0       	ldi	r27, 0x00	; 0
    7906:	e7 e8       	ldi	r30, 0x87	; 135
    7908:	fc e3       	ldi	r31, 0x3C	; 60
    790a:	0c 94 01 5b 	jmp	0xb602	; 0xb602 <__prologue_saves__+0x10>
    790e:	5c 01       	movw	r10, r24
    7910:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    7912:	dc 01       	movw	r26, r24
    7914:	14 96       	adiw	r26, 0x04	; 4
    7916:	6d 93       	st	X+, r22
    7918:	7c 93       	st	X, r23
    791a:	15 97       	sbiw	r26, 0x05	; 5
	clst = dj->sclust;
    791c:	16 96       	adiw	r26, 0x06	; 6
    791e:	4d 91       	ld	r20, X+
    7920:	5d 91       	ld	r21, X+
    7922:	6d 91       	ld	r22, X+
    7924:	7c 91       	ld	r23, X
    7926:	19 97       	sbiw	r26, 0x09	; 9
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
    7928:	41 30       	cpi	r20, 0x01	; 1
    792a:	51 05       	cpc	r21, r1
    792c:	61 05       	cpc	r22, r1
    792e:	71 05       	cpc	r23, r1
    7930:	09 f4       	brne	.+2      	; 0x7934 <dir_seek+0x32>
    7932:	d5 c0       	rjmp	.+426    	; 0x7ade <dir_seek+0x1dc>
    7934:	ed 91       	ld	r30, X+
    7936:	fc 91       	ld	r31, X
    7938:	86 8d       	ldd	r24, Z+30	; 0x1e
    793a:	97 8d       	ldd	r25, Z+31	; 0x1f
    793c:	a0 a1       	ldd	r26, Z+32	; 0x20
    793e:	b1 a1       	ldd	r27, Z+33	; 0x21
    7940:	48 17       	cp	r20, r24
    7942:	59 07       	cpc	r21, r25
    7944:	6a 07       	cpc	r22, r26
    7946:	7b 07       	cpc	r23, r27
    7948:	08 f0       	brcs	.+2      	; 0x794c <dir_seek+0x4a>
    794a:	c9 c0       	rjmp	.+402    	; 0x7ade <dir_seek+0x1dc>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    794c:	41 15       	cp	r20, r1
    794e:	51 05       	cpc	r21, r1
    7950:	61 05       	cpc	r22, r1
    7952:	71 05       	cpc	r23, r1
    7954:	81 f5       	brne	.+96     	; 0x79b6 <dir_seek+0xb4>
    7956:	80 81       	ld	r24, Z
    7958:	83 30       	cpi	r24, 0x03	; 3
    795a:	49 f4       	brne	.+18     	; 0x796e <dir_seek+0x6c>
		clst = dj->fs->dirbase;
    795c:	46 a1       	ldd	r20, Z+38	; 0x26
    795e:	57 a1       	ldd	r21, Z+39	; 0x27
    7960:	60 a5       	ldd	r22, Z+40	; 0x28
    7962:	71 a5       	ldd	r23, Z+41	; 0x29

	if (clst == 0) {	/* Static table */
    7964:	41 15       	cp	r20, r1
    7966:	51 05       	cpc	r21, r1
    7968:	61 05       	cpc	r22, r1
    796a:	71 05       	cpc	r23, r1
    796c:	21 f5       	brne	.+72     	; 0x79b6 <dir_seek+0xb4>
		dj->clust = clst;
    796e:	f5 01       	movw	r30, r10
    7970:	12 86       	std	Z+10, r1	; 0x0a
    7972:	13 86       	std	Z+11, r1	; 0x0b
    7974:	14 86       	std	Z+12, r1	; 0x0c
    7976:	15 86       	std	Z+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    7978:	01 90       	ld	r0, Z+
    797a:	f0 81       	ld	r31, Z
    797c:	e0 2d       	mov	r30, r0
    797e:	87 81       	ldd	r24, Z+7	; 0x07
    7980:	90 85       	ldd	r25, Z+8	; 0x08
    7982:	c8 16       	cp	r12, r24
    7984:	d9 06       	cpc	r13, r25
    7986:	08 f0       	brcs	.+2      	; 0x798a <dir_seek+0x88>
    7988:	aa c0       	rjmp	.+340    	; 0x7ade <dir_seek+0x1dc>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
    798a:	c6 01       	movw	r24, r12
    798c:	a4 e0       	ldi	r26, 0x04	; 4
    798e:	96 95       	lsr	r25
    7990:	87 95       	ror	r24
    7992:	aa 95       	dec	r26
    7994:	e1 f7       	brne	.-8      	; 0x798e <dir_seek+0x8c>
    7996:	a0 e0       	ldi	r26, 0x00	; 0
    7998:	b0 e0       	ldi	r27, 0x00	; 0
    799a:	26 a1       	ldd	r18, Z+38	; 0x26
    799c:	37 a1       	ldd	r19, Z+39	; 0x27
    799e:	40 a5       	ldd	r20, Z+40	; 0x28
    79a0:	51 a5       	ldd	r21, Z+41	; 0x29
    79a2:	82 0f       	add	r24, r18
    79a4:	93 1f       	adc	r25, r19
    79a6:	a4 1f       	adc	r26, r20
    79a8:	b5 1f       	adc	r27, r21
    79aa:	f5 01       	movw	r30, r10
    79ac:	86 87       	std	Z+14, r24	; 0x0e
    79ae:	97 87       	std	Z+15, r25	; 0x0f
    79b0:	a0 8b       	std	Z+16, r26	; 0x10
    79b2:	b1 8b       	std	Z+17, r27	; 0x11
    79b4:	7b c0       	rjmp	.+246    	; 0x7aac <dir_seek+0x1aa>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
    79b6:	82 81       	ldd	r24, Z+2	; 0x02
    79b8:	08 2f       	mov	r16, r24
    79ba:	10 e0       	ldi	r17, 0x00	; 0
    79bc:	f4 e0       	ldi	r31, 0x04	; 4
    79be:	00 0f       	add	r16, r16
    79c0:	11 1f       	adc	r17, r17
    79c2:	fa 95       	dec	r31
    79c4:	e1 f7       	brne	.-8      	; 0x79be <dir_seek+0xbc>
    79c6:	25 c0       	rjmp	.+74     	; 0x7a12 <dir_seek+0x110>
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    79c8:	ce 01       	movw	r24, r28
    79ca:	0e 94 cb 3b 	call	0x7796	; 0x7796 <get_fat>
    79ce:	ab 01       	movw	r20, r22
    79d0:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    79d2:	4f 3f       	cpi	r20, 0xFF	; 255
    79d4:	ff ef       	ldi	r31, 0xFF	; 255
    79d6:	5f 07       	cpc	r21, r31
    79d8:	ff ef       	ldi	r31, 0xFF	; 255
    79da:	6f 07       	cpc	r22, r31
    79dc:	ff ef       	ldi	r31, 0xFF	; 255
    79de:	7f 07       	cpc	r23, r31
    79e0:	19 f4       	brne	.+6      	; 0x79e8 <dir_seek+0xe6>
    79e2:	21 e0       	ldi	r18, 0x01	; 1
    79e4:	30 e0       	ldi	r19, 0x00	; 0
    79e6:	7d c0       	rjmp	.+250    	; 0x7ae2 <dir_seek+0x1e0>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
    79e8:	42 30       	cpi	r20, 0x02	; 2
    79ea:	51 05       	cpc	r21, r1
    79ec:	61 05       	cpc	r22, r1
    79ee:	71 05       	cpc	r23, r1
    79f0:	08 f4       	brcc	.+2      	; 0x79f4 <dir_seek+0xf2>
    79f2:	75 c0       	rjmp	.+234    	; 0x7ade <dir_seek+0x1dc>
    79f4:	d5 01       	movw	r26, r10
    79f6:	ed 91       	ld	r30, X+
    79f8:	fc 91       	ld	r31, X
    79fa:	86 8d       	ldd	r24, Z+30	; 0x1e
    79fc:	97 8d       	ldd	r25, Z+31	; 0x1f
    79fe:	a0 a1       	ldd	r26, Z+32	; 0x20
    7a00:	b1 a1       	ldd	r27, Z+33	; 0x21
    7a02:	48 17       	cp	r20, r24
    7a04:	59 07       	cpc	r21, r25
    7a06:	6a 07       	cpc	r22, r26
    7a08:	7b 07       	cpc	r23, r27
    7a0a:	08 f0       	brcs	.+2      	; 0x7a0e <dir_seek+0x10c>
    7a0c:	68 c0       	rjmp	.+208    	; 0x7ade <dir_seek+0x1dc>
				return FR_INT_ERR;
			idx -= ic;
    7a0e:	c0 1a       	sub	r12, r16
    7a10:	d1 0a       	sbc	r13, r17
    7a12:	f5 01       	movw	r30, r10
    7a14:	c0 81       	ld	r28, Z
    7a16:	d1 81       	ldd	r29, Z+1	; 0x01
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    7a18:	c0 16       	cp	r12, r16
    7a1a:	d1 06       	cpc	r13, r17
    7a1c:	a8 f6       	brcc	.-86     	; 0x79c8 <dir_seek+0xc6>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    7a1e:	d5 01       	movw	r26, r10
    7a20:	1a 96       	adiw	r26, 0x0a	; 10
    7a22:	4d 93       	st	X+, r20
    7a24:	5d 93       	st	X+, r21
    7a26:	6d 93       	st	X+, r22
    7a28:	7c 93       	st	X, r23
    7a2a:	1d 97       	sbiw	r26, 0x0d	; 13
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    7a2c:	ee ef       	ldi	r30, 0xFE	; 254
    7a2e:	ee 2e       	mov	r14, r30
    7a30:	ef ef       	ldi	r30, 0xFF	; 255
    7a32:	fe 2e       	mov	r15, r30
    7a34:	ef ef       	ldi	r30, 0xFF	; 255
    7a36:	0e 2f       	mov	r16, r30
    7a38:	ef ef       	ldi	r30, 0xFF	; 255
    7a3a:	1e 2f       	mov	r17, r30
    7a3c:	e4 0e       	add	r14, r20
    7a3e:	f5 1e       	adc	r15, r21
    7a40:	06 1f       	adc	r16, r22
    7a42:	17 1f       	adc	r17, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    7a44:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7a46:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7a48:	a8 a1       	ldd	r26, Y+32	; 0x20
    7a4a:	b9 a1       	ldd	r27, Y+33	; 0x21
    7a4c:	02 97       	sbiw	r24, 0x02	; 2
    7a4e:	a1 09       	sbc	r26, r1
    7a50:	b1 09       	sbc	r27, r1
    7a52:	e8 16       	cp	r14, r24
    7a54:	f9 06       	cpc	r15, r25
    7a56:	0a 07       	cpc	r16, r26
    7a58:	1b 07       	cpc	r17, r27
    7a5a:	28 f0       	brcs	.+10     	; 0x7a66 <dir_seek+0x164>
    7a5c:	20 e0       	ldi	r18, 0x00	; 0
    7a5e:	30 e0       	ldi	r19, 0x00	; 0
    7a60:	40 e0       	ldi	r20, 0x00	; 0
    7a62:	50 e0       	ldi	r21, 0x00	; 0
    7a64:	12 c0       	rjmp	.+36     	; 0x7a8a <dir_seek+0x188>
	return clst * fs->csize + fs->database;
    7a66:	2a 81       	ldd	r18, Y+2	; 0x02
    7a68:	30 e0       	ldi	r19, 0x00	; 0
    7a6a:	40 e0       	ldi	r20, 0x00	; 0
    7a6c:	50 e0       	ldi	r21, 0x00	; 0
    7a6e:	c8 01       	movw	r24, r16
    7a70:	b7 01       	movw	r22, r14
    7a72:	0e 94 76 5a 	call	0xb4ec	; 0xb4ec <__mulsi3>
    7a76:	9b 01       	movw	r18, r22
    7a78:	ac 01       	movw	r20, r24
    7a7a:	8a a5       	ldd	r24, Y+42	; 0x2a
    7a7c:	9b a5       	ldd	r25, Y+43	; 0x2b
    7a7e:	ac a5       	ldd	r26, Y+44	; 0x2c
    7a80:	bd a5       	ldd	r27, Y+45	; 0x2d
    7a82:	28 0f       	add	r18, r24
    7a84:	39 1f       	adc	r19, r25
    7a86:	4a 1f       	adc	r20, r26
    7a88:	5b 1f       	adc	r21, r27
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
    7a8a:	c6 01       	movw	r24, r12
    7a8c:	64 e0       	ldi	r22, 0x04	; 4
    7a8e:	96 95       	lsr	r25
    7a90:	87 95       	ror	r24
    7a92:	6a 95       	dec	r22
    7a94:	e1 f7       	brne	.-8      	; 0x7a8e <dir_seek+0x18c>
    7a96:	a0 e0       	ldi	r26, 0x00	; 0
    7a98:	b0 e0       	ldi	r27, 0x00	; 0
    7a9a:	28 0f       	add	r18, r24
    7a9c:	39 1f       	adc	r19, r25
    7a9e:	4a 1f       	adc	r20, r26
    7aa0:	5b 1f       	adc	r21, r27
    7aa2:	f5 01       	movw	r30, r10
    7aa4:	26 87       	std	Z+14, r18	; 0x0e
    7aa6:	37 87       	std	Z+15, r19	; 0x0f
    7aa8:	40 8b       	std	Z+16, r20	; 0x10
    7aaa:	51 8b       	std	Z+17, r21	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
    7aac:	ff e0       	ldi	r31, 0x0F	; 15
    7aae:	cf 22       	and	r12, r31
    7ab0:	dd 24       	eor	r13, r13
    7ab2:	45 e0       	ldi	r20, 0x05	; 5
    7ab4:	cc 0c       	add	r12, r12
    7ab6:	dd 1c       	adc	r13, r13
    7ab8:	4a 95       	dec	r20
    7aba:	e1 f7       	brne	.-8      	; 0x7ab4 <dir_seek+0x1b2>
    7abc:	82 e3       	ldi	r24, 0x32	; 50
    7abe:	90 e0       	ldi	r25, 0x00	; 0
    7ac0:	c8 0e       	add	r12, r24
    7ac2:	d9 1e       	adc	r13, r25
    7ac4:	d5 01       	movw	r26, r10
    7ac6:	8d 91       	ld	r24, X+
    7ac8:	9c 91       	ld	r25, X
    7aca:	11 97       	sbiw	r26, 0x01	; 1
    7acc:	8c 0d       	add	r24, r12
    7ace:	9d 1d       	adc	r25, r13
    7ad0:	52 96       	adiw	r26, 0x12	; 18
    7ad2:	8d 93       	st	X+, r24
    7ad4:	9c 93       	st	X, r25
    7ad6:	53 97       	sbiw	r26, 0x13	; 19
    7ad8:	20 e0       	ldi	r18, 0x00	; 0
    7ada:	30 e0       	ldi	r19, 0x00	; 0
    7adc:	02 c0       	rjmp	.+4      	; 0x7ae2 <dir_seek+0x1e0>

	return FR_OK;	/* Seek succeeded */
    7ade:	22 e0       	ldi	r18, 0x02	; 2
    7ae0:	30 e0       	ldi	r19, 0x00	; 0
}
    7ae2:	c9 01       	movw	r24, r18
    7ae4:	cd b7       	in	r28, 0x3d	; 61
    7ae6:	de b7       	in	r29, 0x3e	; 62
    7ae8:	ea e0       	ldi	r30, 0x0A	; 10
    7aea:	0c 94 1d 5b 	jmp	0xb63a	; 0xb63a <__epilogue_restores__+0x10>

00007aee <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    7aee:	a0 e0       	ldi	r26, 0x00	; 0
    7af0:	b0 e0       	ldi	r27, 0x00	; 0
    7af2:	ed e7       	ldi	r30, 0x7D	; 125
    7af4:	fd e3       	ldi	r31, 0x3D	; 61
    7af6:	0c 94 f9 5a 	jmp	0xb5f2	; 0xb5f2 <__prologue_saves__>
    7afa:	5c 01       	movw	r10, r24
    7afc:	6a 01       	movw	r12, r20
    7afe:	7b 01       	movw	r14, r22
    7b00:	38 01       	movw	r6, r16
    7b02:	49 01       	movw	r8, r18
	BYTE *p;
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
    7b04:	42 30       	cpi	r20, 0x02	; 2
    7b06:	51 05       	cpc	r21, r1
    7b08:	61 05       	cpc	r22, r1
    7b0a:	71 05       	cpc	r23, r1
    7b0c:	08 f4       	brcc	.+2      	; 0x7b10 <put_fat+0x22>
    7b0e:	b1 c0       	rjmp	.+354    	; 0x7c72 <put_fat+0x184>
    7b10:	f5 01       	movw	r30, r10
    7b12:	86 8d       	ldd	r24, Z+30	; 0x1e
    7b14:	97 8d       	ldd	r25, Z+31	; 0x1f
    7b16:	a0 a1       	ldd	r26, Z+32	; 0x20
    7b18:	b1 a1       	ldd	r27, Z+33	; 0x21
    7b1a:	48 17       	cp	r20, r24
    7b1c:	59 07       	cpc	r21, r25
    7b1e:	6a 07       	cpc	r22, r26
    7b20:	7b 07       	cpc	r23, r27
    7b22:	08 f0       	brcs	.+2      	; 0x7b26 <put_fat+0x38>
    7b24:	a6 c0       	rjmp	.+332    	; 0x7c72 <put_fat+0x184>
		res = FR_INT_ERR;

	} else {
		fsect = fs->fatbase;
    7b26:	22 a0       	ldd	r2, Z+34	; 0x22
    7b28:	33 a0       	ldd	r3, Z+35	; 0x23
    7b2a:	44 a0       	ldd	r4, Z+36	; 0x24
    7b2c:	55 a0       	ldd	r5, Z+37	; 0x25
		switch (fs->fs_type) {
    7b2e:	80 81       	ld	r24, Z
    7b30:	82 30       	cpi	r24, 0x02	; 2
    7b32:	09 f4       	brne	.+2      	; 0x7b36 <put_fat+0x48>
    7b34:	66 c0       	rjmp	.+204    	; 0x7c02 <put_fat+0x114>
    7b36:	83 30       	cpi	r24, 0x03	; 3
    7b38:	09 f4       	brne	.+2      	; 0x7b3c <put_fat+0x4e>
    7b3a:	7a c0       	rjmp	.+244    	; 0x7c30 <put_fat+0x142>
    7b3c:	81 30       	cpi	r24, 0x01	; 1
    7b3e:	19 f0       	breq	.+6      	; 0x7b46 <put_fat+0x58>
    7b40:	42 e0       	ldi	r20, 0x02	; 2
    7b42:	50 e0       	ldi	r21, 0x00	; 0
    7b44:	92 c0       	rjmp	.+292    	; 0x7c6a <put_fat+0x17c>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    7b46:	ea 01       	movw	r28, r20
    7b48:	d6 95       	lsr	r29
    7b4a:	c7 95       	ror	r28
    7b4c:	c4 0f       	add	r28, r20
    7b4e:	d5 1f       	adc	r29, r21
			res = move_window(fs, fsect + (bc / SS(fs)));
    7b50:	ae 01       	movw	r20, r28
    7b52:	45 2f       	mov	r20, r21
    7b54:	55 27       	eor	r21, r21
    7b56:	46 95       	lsr	r20
    7b58:	60 e0       	ldi	r22, 0x00	; 0
    7b5a:	70 e0       	ldi	r23, 0x00	; 0
    7b5c:	42 0d       	add	r20, r2
    7b5e:	53 1d       	adc	r21, r3
    7b60:	64 1d       	adc	r22, r4
    7b62:	75 1d       	adc	r23, r5
    7b64:	c5 01       	movw	r24, r10
    7b66:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <move_window>
    7b6a:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
    7b6c:	00 97       	sbiw	r24, 0x00	; 0
    7b6e:	09 f0       	breq	.+2      	; 0x7b72 <put_fat+0x84>
    7b70:	7c c0       	rjmp	.+248    	; 0x7c6a <put_fat+0x17c>
			p = &fs->win[bc & (SS(fs) - 1)];
    7b72:	de 01       	movw	r26, r28
    7b74:	b1 70       	andi	r27, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    7b76:	86 01       	movw	r16, r12
    7b78:	01 70       	andi	r16, 0x01	; 1
    7b7a:	10 70       	andi	r17, 0x00	; 0
    7b7c:	01 15       	cp	r16, r1
    7b7e:	11 05       	cpc	r17, r1
    7b80:	51 f0       	breq	.+20     	; 0x7b96 <put_fat+0xa8>
    7b82:	f5 01       	movw	r30, r10
    7b84:	ea 0f       	add	r30, r26
    7b86:	fb 1f       	adc	r31, r27
    7b88:	82 a9       	ldd	r24, Z+50	; 0x32
    7b8a:	8f 70       	andi	r24, 0x0F	; 15
    7b8c:	96 2d       	mov	r25, r6
    7b8e:	92 95       	swap	r25
    7b90:	90 7f       	andi	r25, 0xF0	; 240
    7b92:	98 2b       	or	r25, r24
    7b94:	01 c0       	rjmp	.+2      	; 0x7b98 <put_fat+0xaa>
    7b96:	96 2d       	mov	r25, r6
    7b98:	aa 0d       	add	r26, r10
    7b9a:	bb 1d       	adc	r27, r11
    7b9c:	d2 96       	adiw	r26, 0x32	; 50
    7b9e:	9c 93       	st	X, r25
			bc++;
    7ba0:	21 96       	adiw	r28, 0x01	; 1
			fs->wflag = 1;
    7ba2:	81 e0       	ldi	r24, 0x01	; 1
    7ba4:	f5 01       	movw	r30, r10
    7ba6:	84 83       	std	Z+4, r24	; 0x04
			res = move_window(fs, fsect + (bc / SS(fs)));
    7ba8:	ae 01       	movw	r20, r28
    7baa:	45 2f       	mov	r20, r21
    7bac:	55 27       	eor	r21, r21
    7bae:	46 95       	lsr	r20
    7bb0:	60 e0       	ldi	r22, 0x00	; 0
    7bb2:	70 e0       	ldi	r23, 0x00	; 0
    7bb4:	42 0d       	add	r20, r2
    7bb6:	53 1d       	adc	r21, r3
    7bb8:	64 1d       	adc	r22, r4
    7bba:	75 1d       	adc	r23, r5
    7bbc:	c5 01       	movw	r24, r10
    7bbe:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <move_window>
    7bc2:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
    7bc4:	00 97       	sbiw	r24, 0x00	; 0
    7bc6:	09 f0       	breq	.+2      	; 0x7bca <put_fat+0xdc>
    7bc8:	50 c0       	rjmp	.+160    	; 0x7c6a <put_fat+0x17c>
			p = &fs->win[bc & (SS(fs) - 1)];
    7bca:	d1 70       	andi	r29, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    7bcc:	01 15       	cp	r16, r1
    7bce:	11 05       	cpc	r17, r1
    7bd0:	49 f0       	breq	.+18     	; 0x7be4 <put_fat+0xf6>
    7bd2:	64 e0       	ldi	r22, 0x04	; 4
    7bd4:	96 94       	lsr	r9
    7bd6:	87 94       	ror	r8
    7bd8:	77 94       	ror	r7
    7bda:	67 94       	ror	r6
    7bdc:	6a 95       	dec	r22
    7bde:	d1 f7       	brne	.-12     	; 0x7bd4 <put_fat+0xe6>
    7be0:	66 2d       	mov	r22, r6
    7be2:	0b c0       	rjmp	.+22     	; 0x7bfa <put_fat+0x10c>
    7be4:	f5 01       	movw	r30, r10
    7be6:	ec 0f       	add	r30, r28
    7be8:	fd 1f       	adc	r31, r29
    7bea:	62 a9       	ldd	r22, Z+50	; 0x32
    7bec:	60 7f       	andi	r22, 0xF0	; 240
    7bee:	bb 27       	eor	r27, r27
    7bf0:	a9 2d       	mov	r26, r9
    7bf2:	98 2d       	mov	r25, r8
    7bf4:	87 2d       	mov	r24, r7
    7bf6:	8f 70       	andi	r24, 0x0F	; 15
    7bf8:	68 2b       	or	r22, r24
    7bfa:	ca 0d       	add	r28, r10
    7bfc:	db 1d       	adc	r29, r11
    7bfe:	6a ab       	std	Y+50, r22	; 0x32
    7c00:	34 c0       	rjmp	.+104    	; 0x7c6a <put_fat+0x17c>
			break;

		case FS_FAT16 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
    7c02:	45 2f       	mov	r20, r21
    7c04:	56 2f       	mov	r21, r22
    7c06:	67 2f       	mov	r22, r23
    7c08:	77 27       	eor	r23, r23
    7c0a:	42 0d       	add	r20, r2
    7c0c:	53 1d       	adc	r21, r3
    7c0e:	64 1d       	adc	r22, r4
    7c10:	75 1d       	adc	r23, r5
    7c12:	c5 01       	movw	r24, r10
    7c14:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <move_window>
    7c18:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
    7c1a:	00 97       	sbiw	r24, 0x00	; 0
    7c1c:	31 f5       	brne	.+76     	; 0x7c6a <put_fat+0x17c>
			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
    7c1e:	f6 01       	movw	r30, r12
    7c20:	ee 0f       	add	r30, r30
    7c22:	ff 1f       	adc	r31, r31
    7c24:	f1 70       	andi	r31, 0x01	; 1
    7c26:	ea 0d       	add	r30, r10
    7c28:	fb 1d       	adc	r31, r11
    7c2a:	62 aa       	std	Z+50, r6	; 0x32
    7c2c:	73 aa       	std	Z+51, r7	; 0x33
    7c2e:	1d c0       	rjmp	.+58     	; 0x7c6a <put_fat+0x17c>
			break;

		case FS_FAT32 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
    7c30:	87 e0       	ldi	r24, 0x07	; 7
    7c32:	76 95       	lsr	r23
    7c34:	67 95       	ror	r22
    7c36:	57 95       	ror	r21
    7c38:	47 95       	ror	r20
    7c3a:	8a 95       	dec	r24
    7c3c:	d1 f7       	brne	.-12     	; 0x7c32 <put_fat+0x144>
    7c3e:	42 0d       	add	r20, r2
    7c40:	53 1d       	adc	r21, r3
    7c42:	64 1d       	adc	r22, r4
    7c44:	75 1d       	adc	r23, r5
    7c46:	c5 01       	movw	r24, r10
    7c48:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <move_window>
    7c4c:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
    7c4e:	00 97       	sbiw	r24, 0x00	; 0
    7c50:	61 f4       	brne	.+24     	; 0x7c6a <put_fat+0x17c>
			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
    7c52:	f6 01       	movw	r30, r12
    7c54:	ee 0f       	add	r30, r30
    7c56:	ff 1f       	adc	r31, r31
    7c58:	ee 0f       	add	r30, r30
    7c5a:	ff 1f       	adc	r31, r31
    7c5c:	f1 70       	andi	r31, 0x01	; 1
    7c5e:	ea 0d       	add	r30, r10
    7c60:	fb 1d       	adc	r31, r11
    7c62:	62 aa       	std	Z+50, r6	; 0x32
    7c64:	73 aa       	std	Z+51, r7	; 0x33
    7c66:	84 aa       	std	Z+52, r8	; 0x34
    7c68:	95 aa       	std	Z+53, r9	; 0x35
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
    7c6a:	81 e0       	ldi	r24, 0x01	; 1
    7c6c:	f5 01       	movw	r30, r10
    7c6e:	84 83       	std	Z+4, r24	; 0x04
    7c70:	02 c0       	rjmp	.+4      	; 0x7c76 <put_fat+0x188>
    7c72:	42 e0       	ldi	r20, 0x02	; 2
    7c74:	50 e0       	ldi	r21, 0x00	; 0
	}

	return res;
}
    7c76:	ca 01       	movw	r24, r20
    7c78:	cd b7       	in	r28, 0x3d	; 61
    7c7a:	de b7       	in	r29, 0x3e	; 62
    7c7c:	e2 e1       	ldi	r30, 0x12	; 18
    7c7e:	0c 94 15 5b 	jmp	0xb62a	; 0xb62a <__epilogue_restores__>

00007c82 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    7c82:	a4 e0       	ldi	r26, 0x04	; 4
    7c84:	b0 e0       	ldi	r27, 0x00	; 0
    7c86:	e7 e4       	ldi	r30, 0x47	; 71
    7c88:	fe e3       	ldi	r31, 0x3E	; 62
    7c8a:	0c 94 f9 5a 	jmp	0xb5f2	; 0xb5f2 <__prologue_saves__>
    7c8e:	1c 01       	movw	r2, r24
    7c90:	2a 01       	movw	r4, r20
    7c92:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl, mcl;


	mcl = fs->max_clust;
    7c94:	dc 01       	movw	r26, r24
    7c96:	5e 96       	adiw	r26, 0x1e	; 30
    7c98:	8d 91       	ld	r24, X+
    7c9a:	9d 91       	ld	r25, X+
    7c9c:	0d 90       	ld	r0, X+
    7c9e:	bc 91       	ld	r27, X
    7ca0:	a0 2d       	mov	r26, r0
    7ca2:	89 83       	std	Y+1, r24	; 0x01
    7ca4:	9a 83       	std	Y+2, r25	; 0x02
    7ca6:	ab 83       	std	Y+3, r26	; 0x03
    7ca8:	bc 83       	std	Y+4, r27	; 0x04
	if (clst == 0) {		/* Create new chain */
    7caa:	41 15       	cp	r20, r1
    7cac:	51 05       	cpc	r21, r1
    7cae:	61 05       	cpc	r22, r1
    7cb0:	71 05       	cpc	r23, r1
    7cb2:	81 f4       	brne	.+32     	; 0x7cd4 <create_chain+0x52>
		scl = fs->last_clust;			/* Get suggested start point */
    7cb4:	f1 01       	movw	r30, r2
    7cb6:	82 84       	ldd	r8, Z+10	; 0x0a
    7cb8:	93 84       	ldd	r9, Z+11	; 0x0b
    7cba:	a4 84       	ldd	r10, Z+12	; 0x0c
    7cbc:	b5 84       	ldd	r11, Z+13	; 0x0d
		if (scl == 0 || scl >= mcl) scl = 1;
    7cbe:	81 14       	cp	r8, r1
    7cc0:	91 04       	cpc	r9, r1
    7cc2:	a1 04       	cpc	r10, r1
    7cc4:	b1 04       	cpc	r11, r1
    7cc6:	11 f1       	breq	.+68     	; 0x7d0c <create_chain+0x8a>
    7cc8:	88 16       	cp	r8, r24
    7cca:	99 06       	cpc	r9, r25
    7ccc:	aa 06       	cpc	r10, r26
    7cce:	bb 06       	cpc	r11, r27
    7cd0:	e8 f4       	brcc	.+58     	; 0x7d0c <create_chain+0x8a>
    7cd2:	21 c0       	rjmp	.+66     	; 0x7d16 <create_chain+0x94>
	}
	else {					/* Stretch existing chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    7cd4:	c1 01       	movw	r24, r2
    7cd6:	0e 94 cb 3b 	call	0x7796	; 0x7796 <get_fat>
    7cda:	9b 01       	movw	r18, r22
    7cdc:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    7cde:	62 30       	cpi	r22, 0x02	; 2
    7ce0:	71 05       	cpc	r23, r1
    7ce2:	81 05       	cpc	r24, r1
    7ce4:	91 05       	cpc	r25, r1
    7ce6:	28 f4       	brcc	.+10     	; 0x7cf2 <create_chain+0x70>
    7ce8:	21 e0       	ldi	r18, 0x01	; 1
    7cea:	30 e0       	ldi	r19, 0x00	; 0
    7cec:	40 e0       	ldi	r20, 0x00	; 0
    7cee:	50 e0       	ldi	r21, 0x00	; 0
    7cf0:	93 c0       	rjmp	.+294    	; 0x7e18 <create_chain+0x196>
		if (cs < mcl) return cs;		/* It is already followed by next cluster */
    7cf2:	89 81       	ldd	r24, Y+1	; 0x01
    7cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    7cf6:	ab 81       	ldd	r26, Y+3	; 0x03
    7cf8:	bc 81       	ldd	r27, Y+4	; 0x04
    7cfa:	28 17       	cp	r18, r24
    7cfc:	39 07       	cpc	r19, r25
    7cfe:	4a 07       	cpc	r20, r26
    7d00:	5b 07       	cpc	r21, r27
    7d02:	08 f4       	brcc	.+2      	; 0x7d06 <create_chain+0x84>
    7d04:	89 c0       	rjmp	.+274    	; 0x7e18 <create_chain+0x196>
    7d06:	53 01       	movw	r10, r6
    7d08:	42 01       	movw	r8, r4
    7d0a:	05 c0       	rjmp	.+10     	; 0x7d16 <create_chain+0x94>
    7d0c:	b1 e0       	ldi	r27, 0x01	; 1
    7d0e:	8b 2e       	mov	r8, r27
    7d10:	91 2c       	mov	r9, r1
    7d12:	a1 2c       	mov	r10, r1
    7d14:	b1 2c       	mov	r11, r1
    7d16:	75 01       	movw	r14, r10
    7d18:	64 01       	movw	r12, r8
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    7d1a:	08 94       	sec
    7d1c:	c1 1c       	adc	r12, r1
    7d1e:	d1 1c       	adc	r13, r1
    7d20:	e1 1c       	adc	r14, r1
    7d22:	f1 1c       	adc	r15, r1
		if (ncl >= mcl) {				/* Wrap around */
    7d24:	89 81       	ldd	r24, Y+1	; 0x01
    7d26:	9a 81       	ldd	r25, Y+2	; 0x02
    7d28:	ab 81       	ldd	r26, Y+3	; 0x03
    7d2a:	bc 81       	ldd	r27, Y+4	; 0x04
    7d2c:	c8 16       	cp	r12, r24
    7d2e:	d9 06       	cpc	r13, r25
    7d30:	ea 06       	cpc	r14, r26
    7d32:	fb 06       	cpc	r15, r27
    7d34:	60 f0       	brcs	.+24     	; 0x7d4e <create_chain+0xcc>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
    7d36:	92 e0       	ldi	r25, 0x02	; 2
    7d38:	89 16       	cp	r8, r25
    7d3a:	91 04       	cpc	r9, r1
    7d3c:	a1 04       	cpc	r10, r1
    7d3e:	b1 04       	cpc	r11, r1
    7d40:	08 f4       	brcc	.+2      	; 0x7d44 <create_chain+0xc2>
    7d42:	61 c0       	rjmp	.+194    	; 0x7e06 <create_chain+0x184>
    7d44:	a2 e0       	ldi	r26, 0x02	; 2
    7d46:	ca 2e       	mov	r12, r26
    7d48:	d1 2c       	mov	r13, r1
    7d4a:	e1 2c       	mov	r14, r1
    7d4c:	f1 2c       	mov	r15, r1
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    7d4e:	c1 01       	movw	r24, r2
    7d50:	b7 01       	movw	r22, r14
    7d52:	a6 01       	movw	r20, r12
    7d54:	0e 94 cb 3b 	call	0x7796	; 0x7796 <get_fat>
    7d58:	9b 01       	movw	r18, r22
    7d5a:	ac 01       	movw	r20, r24
		if (cs == 0) break;				/* Found a free cluster */
    7d5c:	61 15       	cp	r22, r1
    7d5e:	71 05       	cpc	r23, r1
    7d60:	81 05       	cpc	r24, r1
    7d62:	91 05       	cpc	r25, r1
    7d64:	a9 f0       	breq	.+42     	; 0x7d90 <create_chain+0x10e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
    7d66:	6f 3f       	cpi	r22, 0xFF	; 255
    7d68:	af ef       	ldi	r26, 0xFF	; 255
    7d6a:	7a 07       	cpc	r23, r26
    7d6c:	af ef       	ldi	r26, 0xFF	; 255
    7d6e:	8a 07       	cpc	r24, r26
    7d70:	af ef       	ldi	r26, 0xFF	; 255
    7d72:	9a 07       	cpc	r25, r26
    7d74:	09 f4       	brne	.+2      	; 0x7d78 <create_chain+0xf6>
    7d76:	50 c0       	rjmp	.+160    	; 0x7e18 <create_chain+0x196>
    7d78:	61 30       	cpi	r22, 0x01	; 1
    7d7a:	71 05       	cpc	r23, r1
    7d7c:	81 05       	cpc	r24, r1
    7d7e:	91 05       	cpc	r25, r1
    7d80:	09 f4       	brne	.+2      	; 0x7d84 <create_chain+0x102>
    7d82:	4a c0       	rjmp	.+148    	; 0x7e18 <create_chain+0x196>
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
    7d84:	c8 14       	cp	r12, r8
    7d86:	d9 04       	cpc	r13, r9
    7d88:	ea 04       	cpc	r14, r10
    7d8a:	fb 04       	cpc	r15, r11
    7d8c:	31 f6       	brne	.-116    	; 0x7d1a <create_chain+0x98>
    7d8e:	3b c0       	rjmp	.+118    	; 0x7e06 <create_chain+0x184>
    7d90:	bc 2c       	mov	r11, r12
    7d92:	ad 2c       	mov	r10, r13
    7d94:	9e 2c       	mov	r9, r14
    7d96:	8f 2c       	mov	r8, r15
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
    7d98:	c1 01       	movw	r24, r2
    7d9a:	a6 01       	movw	r20, r12
    7d9c:	b7 01       	movw	r22, r14
    7d9e:	0f ef       	ldi	r16, 0xFF	; 255
    7da0:	1f ef       	ldi	r17, 0xFF	; 255
    7da2:	2f ef       	ldi	r18, 0xFF	; 255
    7da4:	3f e0       	ldi	r19, 0x0F	; 15
    7da6:	0e 94 77 3d 	call	0x7aee	; 0x7aee <put_fat>
    7daa:	89 2b       	or	r24, r25
    7dac:	89 f5       	brne	.+98     	; 0x7e10 <create_chain+0x18e>
		return 0xFFFFFFFF;
	if (clst != 0) {					/* Link it to the previous one if needed */
    7dae:	41 14       	cp	r4, r1
    7db0:	51 04       	cpc	r5, r1
    7db2:	61 04       	cpc	r6, r1
    7db4:	71 04       	cpc	r7, r1
    7db6:	49 f0       	breq	.+18     	; 0x7dca <create_chain+0x148>
		if (put_fat(fs, clst, ncl))
    7db8:	c1 01       	movw	r24, r2
    7dba:	b3 01       	movw	r22, r6
    7dbc:	a2 01       	movw	r20, r4
    7dbe:	86 01       	movw	r16, r12
    7dc0:	97 01       	movw	r18, r14
    7dc2:	0e 94 77 3d 	call	0x7aee	; 0x7aee <put_fat>
    7dc6:	89 2b       	or	r24, r25
    7dc8:	19 f5       	brne	.+70     	; 0x7e10 <create_chain+0x18e>
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
    7dca:	f1 01       	movw	r30, r2
    7dcc:	b2 86       	std	Z+10, r11	; 0x0a
    7dce:	a3 86       	std	Z+11, r10	; 0x0b
    7dd0:	94 86       	std	Z+12, r9	; 0x0c
    7dd2:	85 86       	std	Z+13, r8	; 0x0d
	if (fs->free_clust != 0xFFFFFFFF) {
    7dd4:	86 85       	ldd	r24, Z+14	; 0x0e
    7dd6:	97 85       	ldd	r25, Z+15	; 0x0f
    7dd8:	a0 89       	ldd	r26, Z+16	; 0x10
    7dda:	b1 89       	ldd	r27, Z+17	; 0x11
    7ddc:	8f 3f       	cpi	r24, 0xFF	; 255
    7dde:	ff ef       	ldi	r31, 0xFF	; 255
    7de0:	9f 07       	cpc	r25, r31
    7de2:	ff ef       	ldi	r31, 0xFF	; 255
    7de4:	af 07       	cpc	r26, r31
    7de6:	ff ef       	ldi	r31, 0xFF	; 255
    7de8:	bf 07       	cpc	r27, r31
    7dea:	51 f0       	breq	.+20     	; 0x7e00 <create_chain+0x17e>
		fs->free_clust--;
    7dec:	01 97       	sbiw	r24, 0x01	; 1
    7dee:	a1 09       	sbc	r26, r1
    7df0:	b1 09       	sbc	r27, r1
    7df2:	f1 01       	movw	r30, r2
    7df4:	86 87       	std	Z+14, r24	; 0x0e
    7df6:	97 87       	std	Z+15, r25	; 0x0f
    7df8:	a0 8b       	std	Z+16, r26	; 0x10
    7dfa:	b1 8b       	std	Z+17, r27	; 0x11
		fs->fsi_flag = 1;
    7dfc:	81 e0       	ldi	r24, 0x01	; 1
    7dfe:	81 87       	std	Z+9, r24	; 0x09
    7e00:	a7 01       	movw	r20, r14
    7e02:	96 01       	movw	r18, r12
    7e04:	09 c0       	rjmp	.+18     	; 0x7e18 <create_chain+0x196>
    7e06:	20 e0       	ldi	r18, 0x00	; 0
    7e08:	30 e0       	ldi	r19, 0x00	; 0
    7e0a:	40 e0       	ldi	r20, 0x00	; 0
    7e0c:	50 e0       	ldi	r21, 0x00	; 0
    7e0e:	04 c0       	rjmp	.+8      	; 0x7e18 <create_chain+0x196>
    7e10:	2f ef       	ldi	r18, 0xFF	; 255
    7e12:	3f ef       	ldi	r19, 0xFF	; 255
    7e14:	4f ef       	ldi	r20, 0xFF	; 255
    7e16:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return ncl;		/* Return new cluster number */
}
    7e18:	b9 01       	movw	r22, r18
    7e1a:	ca 01       	movw	r24, r20
    7e1c:	24 96       	adiw	r28, 0x04	; 4
    7e1e:	e2 e1       	ldi	r30, 0x12	; 18
    7e20:	0c 94 15 5b 	jmp	0xb62a	; 0xb62a <__epilogue_restores__>

00007e24 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    7e24:	a6 e0       	ldi	r26, 0x06	; 6
    7e26:	b0 e0       	ldi	r27, 0x00	; 0
    7e28:	e8 e1       	ldi	r30, 0x18	; 24
    7e2a:	ff e3       	ldi	r31, 0x3F	; 63
    7e2c:	0c 94 f9 5a 	jmp	0xb5f2	; 0xb5f2 <__prologue_saves__>
    7e30:	8d 83       	std	Y+5, r24	; 0x05
    7e32:	9e 83       	std	Y+6, r25	; 0x06
    7e34:	3a 01       	movw	r6, r20
    7e36:	4b 01       	movw	r8, r22
	FRESULT res;
	DWORD clst, bcs, nsect, ifptr;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    7e38:	dc 01       	movw	r26, r24
    7e3a:	12 96       	adiw	r26, 0x02	; 2
    7e3c:	6d 91       	ld	r22, X+
    7e3e:	7c 91       	ld	r23, X
    7e40:	13 97       	sbiw	r26, 0x03	; 3
    7e42:	8d 91       	ld	r24, X+
    7e44:	9c 91       	ld	r25, X
    7e46:	0e 94 3a 39 	call	0x7274	; 0x7274 <validate>
    7e4a:	8b 83       	std	Y+3, r24	; 0x03
    7e4c:	9c 83       	std	Y+4, r25	; 0x04
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    7e4e:	89 2b       	or	r24, r25
    7e50:	09 f0       	breq	.+2      	; 0x7e54 <f_lseek+0x30>
    7e52:	c7 c1       	rjmp	.+910    	; 0x81e2 <f_lseek+0x3be>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    7e54:	ed 81       	ldd	r30, Y+5	; 0x05
    7e56:	fe 81       	ldd	r31, Y+6	; 0x06
    7e58:	84 81       	ldd	r24, Z+4	; 0x04
    7e5a:	87 fd       	sbrc	r24, 7
    7e5c:	92 c0       	rjmp	.+292    	; 0x7f82 <f_lseek+0x15e>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    7e5e:	ad 81       	ldd	r26, Y+5	; 0x05
    7e60:	be 81       	ldd	r27, Y+6	; 0x06
    7e62:	1a 96       	adiw	r26, 0x0a	; 10
    7e64:	ad 90       	ld	r10, X+
    7e66:	bd 90       	ld	r11, X+
    7e68:	cd 90       	ld	r12, X+
    7e6a:	dc 90       	ld	r13, X
    7e6c:	1d 97       	sbiw	r26, 0x0d	; 13
    7e6e:	a6 14       	cp	r10, r6
    7e70:	b7 04       	cpc	r11, r7
    7e72:	c8 04       	cpc	r12, r8
    7e74:	d9 04       	cpc	r13, r9
    7e76:	10 f4       	brcc	.+4      	; 0x7e7c <f_lseek+0x58>
    7e78:	81 ff       	sbrs	r24, 1
    7e7a:	02 c0       	rjmp	.+4      	; 0x7e80 <f_lseek+0x5c>
    7e7c:	64 01       	movw	r12, r8
    7e7e:	53 01       	movw	r10, r6
#if !_FS_READONLY
		 && !(fp->flag & FA_WRITE)
#endif
		) ofs = fp->fsize;

	ifptr = fp->fptr;
    7e80:	ed 81       	ldd	r30, Y+5	; 0x05
    7e82:	fe 81       	ldd	r31, Y+6	; 0x06
    7e84:	26 81       	ldd	r18, Z+6	; 0x06
    7e86:	37 81       	ldd	r19, Z+7	; 0x07
    7e88:	40 85       	ldd	r20, Z+8	; 0x08
    7e8a:	51 85       	ldd	r21, Z+9	; 0x09
	fp->fptr = nsect = 0; fp->csect = 255;
    7e8c:	16 82       	std	Z+6, r1	; 0x06
    7e8e:	17 82       	std	Z+7, r1	; 0x07
    7e90:	10 86       	std	Z+8, r1	; 0x08
    7e92:	11 86       	std	Z+9, r1	; 0x09
    7e94:	8f ef       	ldi	r24, 0xFF	; 255
    7e96:	85 83       	std	Z+5, r24	; 0x05
	if (ofs > 0) {
    7e98:	a1 14       	cp	r10, r1
    7e9a:	b1 04       	cpc	r11, r1
    7e9c:	c1 04       	cpc	r12, r1
    7e9e:	d1 04       	cpc	r13, r1
    7ea0:	09 f4       	brne	.+2      	; 0x7ea4 <f_lseek+0x80>
    7ea2:	6b c1       	rjmp	.+726    	; 0x817a <f_lseek+0x356>
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    7ea4:	01 90       	ld	r0, Z+
    7ea6:	f0 81       	ld	r31, Z
    7ea8:	e0 2d       	mov	r30, r0
    7eaa:	e9 83       	std	Y+1, r30	; 0x01
    7eac:	fa 83       	std	Y+2, r31	; 0x02
    7eae:	82 81       	ldd	r24, Z+2	; 0x02
    7eb0:	68 2e       	mov	r6, r24
    7eb2:	77 24       	eor	r7, r7
    7eb4:	88 24       	eor	r8, r8
    7eb6:	99 24       	eor	r9, r9
    7eb8:	69 e0       	ldi	r22, 0x09	; 9
    7eba:	66 0c       	add	r6, r6
    7ebc:	77 1c       	adc	r7, r7
    7ebe:	88 1c       	adc	r8, r8
    7ec0:	99 1c       	adc	r9, r9
    7ec2:	6a 95       	dec	r22
    7ec4:	d1 f7       	brne	.-12     	; 0x7eba <f_lseek+0x96>
		if (ifptr > 0 &&
    7ec6:	21 15       	cp	r18, r1
    7ec8:	31 05       	cpc	r19, r1
    7eca:	41 05       	cpc	r20, r1
    7ecc:	51 05       	cpc	r21, r1
    7ece:	c1 f1       	breq	.+112    	; 0x7f40 <f_lseek+0x11c>
    7ed0:	19 01       	movw	r2, r18
    7ed2:	2a 01       	movw	r4, r20
    7ed4:	08 94       	sec
    7ed6:	21 08       	sbc	r2, r1
    7ed8:	31 08       	sbc	r3, r1
    7eda:	41 08       	sbc	r4, r1
    7edc:	51 08       	sbc	r5, r1
    7ede:	c6 01       	movw	r24, r12
    7ee0:	b5 01       	movw	r22, r10
    7ee2:	61 50       	subi	r22, 0x01	; 1
    7ee4:	70 40       	sbci	r23, 0x00	; 0
    7ee6:	80 40       	sbci	r24, 0x00	; 0
    7ee8:	90 40       	sbci	r25, 0x00	; 0
    7eea:	a4 01       	movw	r20, r8
    7eec:	93 01       	movw	r18, r6
    7eee:	0e 94 bc 5a 	call	0xb578	; 0xb578 <__udivmodsi4>
    7ef2:	79 01       	movw	r14, r18
    7ef4:	8a 01       	movw	r16, r20
    7ef6:	c2 01       	movw	r24, r4
    7ef8:	b1 01       	movw	r22, r2
    7efa:	a4 01       	movw	r20, r8
    7efc:	93 01       	movw	r18, r6
    7efe:	0e 94 bc 5a 	call	0xb578	; 0xb578 <__udivmodsi4>
    7f02:	e2 16       	cp	r14, r18
    7f04:	f3 06       	cpc	r15, r19
    7f06:	04 07       	cpc	r16, r20
    7f08:	15 07       	cpc	r17, r21
    7f0a:	d0 f0       	brcs	.+52     	; 0x7f40 <f_lseek+0x11c>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    7f0c:	88 27       	eor	r24, r24
    7f0e:	99 27       	eor	r25, r25
    7f10:	dc 01       	movw	r26, r24
    7f12:	86 19       	sub	r24, r6
    7f14:	97 09       	sbc	r25, r7
    7f16:	a8 09       	sbc	r26, r8
    7f18:	b9 09       	sbc	r27, r9
    7f1a:	82 21       	and	r24, r2
    7f1c:	93 21       	and	r25, r3
    7f1e:	a4 21       	and	r26, r4
    7f20:	b5 21       	and	r27, r5
    7f22:	ed 81       	ldd	r30, Y+5	; 0x05
    7f24:	fe 81       	ldd	r31, Y+6	; 0x06
    7f26:	86 83       	std	Z+6, r24	; 0x06
    7f28:	97 83       	std	Z+7, r25	; 0x07
    7f2a:	a0 87       	std	Z+8, r26	; 0x08
    7f2c:	b1 87       	std	Z+9, r27	; 0x09
			ofs -= fp->fptr;
    7f2e:	a8 1a       	sub	r10, r24
    7f30:	b9 0a       	sbc	r11, r25
    7f32:	ca 0a       	sbc	r12, r26
    7f34:	db 0a       	sbc	r13, r27
			clst = fp->curr_clust;
    7f36:	42 89       	ldd	r20, Z+18	; 0x12
    7f38:	53 89       	ldd	r21, Z+19	; 0x13
    7f3a:	64 89       	ldd	r22, Z+20	; 0x14
    7f3c:	75 89       	ldd	r23, Z+21	; 0x15
    7f3e:	47 c0       	rjmp	.+142    	; 0x7fce <f_lseek+0x1aa>
		} else {									/* When seek to back cluster, */
			clst = fp->org_clust;					/* start from the first cluster */
    7f40:	ad 81       	ldd	r26, Y+5	; 0x05
    7f42:	be 81       	ldd	r27, Y+6	; 0x06
    7f44:	1e 96       	adiw	r26, 0x0e	; 14
    7f46:	4d 91       	ld	r20, X+
    7f48:	5d 91       	ld	r21, X+
    7f4a:	6d 91       	ld	r22, X+
    7f4c:	7c 91       	ld	r23, X
    7f4e:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
			if (clst == 0) {						/* If no cluster chain, create a new chain */
    7f50:	41 15       	cp	r20, r1
    7f52:	51 05       	cpc	r21, r1
    7f54:	61 05       	cpc	r22, r1
    7f56:	71 05       	cpc	r23, r1
    7f58:	a1 f5       	brne	.+104    	; 0x7fc2 <f_lseek+0x19e>
				clst = create_chain(fp->fs, 0);
    7f5a:	89 81       	ldd	r24, Y+1	; 0x01
    7f5c:	9a 81       	ldd	r25, Y+2	; 0x02
    7f5e:	40 e0       	ldi	r20, 0x00	; 0
    7f60:	50 e0       	ldi	r21, 0x00	; 0
    7f62:	60 e0       	ldi	r22, 0x00	; 0
    7f64:	70 e0       	ldi	r23, 0x00	; 0
    7f66:	0e 94 41 3e 	call	0x7c82	; 0x7c82 <create_chain>
    7f6a:	ab 01       	movw	r20, r22
    7f6c:	bc 01       	movw	r22, r24
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    7f6e:	41 30       	cpi	r20, 0x01	; 1
    7f70:	51 05       	cpc	r21, r1
    7f72:	61 05       	cpc	r22, r1
    7f74:	71 05       	cpc	r23, r1
    7f76:	51 f4       	brne	.+20     	; 0x7f8c <f_lseek+0x168>
    7f78:	ed 81       	ldd	r30, Y+5	; 0x05
    7f7a:	fe 81       	ldd	r31, Y+6	; 0x06
    7f7c:	84 81       	ldd	r24, Z+4	; 0x04
    7f7e:	80 68       	ori	r24, 0x80	; 128
    7f80:	84 83       	std	Z+4, r24	; 0x04
    7f82:	82 e0       	ldi	r24, 0x02	; 2
    7f84:	90 e0       	ldi	r25, 0x00	; 0
    7f86:	8b 83       	std	Y+3, r24	; 0x03
    7f88:	9c 83       	std	Y+4, r25	; 0x04
    7f8a:	2b c1       	rjmp	.+598    	; 0x81e2 <f_lseek+0x3be>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    7f8c:	4f 3f       	cpi	r20, 0xFF	; 255
    7f8e:	9f ef       	ldi	r25, 0xFF	; 255
    7f90:	59 07       	cpc	r21, r25
    7f92:	9f ef       	ldi	r25, 0xFF	; 255
    7f94:	69 07       	cpc	r22, r25
    7f96:	9f ef       	ldi	r25, 0xFF	; 255
    7f98:	79 07       	cpc	r23, r25
    7f9a:	59 f4       	brne	.+22     	; 0x7fb2 <f_lseek+0x18e>
    7f9c:	ad 81       	ldd	r26, Y+5	; 0x05
    7f9e:	be 81       	ldd	r27, Y+6	; 0x06
    7fa0:	14 96       	adiw	r26, 0x04	; 4
    7fa2:	8c 91       	ld	r24, X
    7fa4:	14 97       	sbiw	r26, 0x04	; 4
    7fa6:	80 68       	ori	r24, 0x80	; 128
    7fa8:	14 96       	adiw	r26, 0x04	; 4
    7faa:	8c 93       	st	X, r24
    7fac:	e1 e0       	ldi	r30, 0x01	; 1
    7fae:	f0 e0       	ldi	r31, 0x00	; 0
    7fb0:	d7 c0       	rjmp	.+430    	; 0x8160 <f_lseek+0x33c>
				fp->org_clust = clst;
    7fb2:	ad 81       	ldd	r26, Y+5	; 0x05
    7fb4:	be 81       	ldd	r27, Y+6	; 0x06
    7fb6:	1e 96       	adiw	r26, 0x0e	; 14
    7fb8:	4d 93       	st	X+, r20
    7fba:	5d 93       	st	X+, r21
    7fbc:	6d 93       	st	X+, r22
    7fbe:	7c 93       	st	X, r23
    7fc0:	51 97       	sbiw	r26, 0x11	; 17
			}
#endif
			fp->curr_clust = clst;
    7fc2:	ed 81       	ldd	r30, Y+5	; 0x05
    7fc4:	fe 81       	ldd	r31, Y+6	; 0x06
    7fc6:	42 8b       	std	Z+18, r20	; 0x12
    7fc8:	53 8b       	std	Z+19, r21	; 0x13
    7fca:	64 8b       	std	Z+20, r22	; 0x14
    7fcc:	75 8b       	std	Z+21, r23	; 0x15
		}
		if (clst != 0) {
    7fce:	41 15       	cp	r20, r1
    7fd0:	51 05       	cpc	r21, r1
    7fd2:	61 05       	cpc	r22, r1
    7fd4:	71 05       	cpc	r23, r1
    7fd6:	09 f0       	breq	.+2      	; 0x7fda <f_lseek+0x1b6>
    7fd8:	59 c0       	rjmp	.+178    	; 0x808c <f_lseek+0x268>
    7fda:	cf c0       	rjmp	.+414    	; 0x817a <f_lseek+0x356>
			while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    7fdc:	ad 81       	ldd	r26, Y+5	; 0x05
    7fde:	be 81       	ldd	r27, Y+6	; 0x06
    7fe0:	14 96       	adiw	r26, 0x04	; 4
    7fe2:	8c 91       	ld	r24, X
    7fe4:	14 97       	sbiw	r26, 0x04	; 4
    7fe6:	2d 91       	ld	r18, X+
    7fe8:	3c 91       	ld	r19, X
    7fea:	81 ff       	sbrs	r24, 1
    7fec:	0d c0       	rjmp	.+26     	; 0x8008 <f_lseek+0x1e4>
					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
    7fee:	c9 01       	movw	r24, r18
    7ff0:	0e 94 41 3e 	call	0x7c82	; 0x7c82 <create_chain>
    7ff4:	ab 01       	movw	r20, r22
    7ff6:	bc 01       	movw	r22, r24
					if (clst == 0) {				/* When disk gets full, clip file size */
    7ff8:	41 15       	cp	r20, r1
    7ffa:	51 05       	cpc	r21, r1
    7ffc:	61 05       	cpc	r22, r1
    7ffe:	71 05       	cpc	r23, r1
    8000:	41 f4       	brne	.+16     	; 0x8012 <f_lseek+0x1ee>
    8002:	64 01       	movw	r12, r8
    8004:	53 01       	movw	r10, r6
    8006:	48 c0       	rjmp	.+144    	; 0x8098 <f_lseek+0x274>
						ofs = bcs; break;
					}
				} else
#endif
					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    8008:	c9 01       	movw	r24, r18
    800a:	0e 94 cb 3b 	call	0x7796	; 0x7796 <get_fat>
    800e:	ab 01       	movw	r20, r22
    8010:	bc 01       	movw	r22, r24
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    8012:	4f 3f       	cpi	r20, 0xFF	; 255
    8014:	bf ef       	ldi	r27, 0xFF	; 255
    8016:	5b 07       	cpc	r21, r27
    8018:	bf ef       	ldi	r27, 0xFF	; 255
    801a:	6b 07       	cpc	r22, r27
    801c:	bf ef       	ldi	r27, 0xFF	; 255
    801e:	7b 07       	cpc	r23, r27
    8020:	41 f4       	brne	.+16     	; 0x8032 <f_lseek+0x20e>
    8022:	ed 81       	ldd	r30, Y+5	; 0x05
    8024:	fe 81       	ldd	r31, Y+6	; 0x06
    8026:	84 81       	ldd	r24, Z+4	; 0x04
    8028:	80 68       	ori	r24, 0x80	; 128
    802a:	84 83       	std	Z+4, r24	; 0x04
    802c:	81 e0       	ldi	r24, 0x01	; 1
    802e:	90 e0       	ldi	r25, 0x00	; 0
    8030:	aa cf       	rjmp	.-172    	; 0x7f86 <f_lseek+0x162>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
    8032:	42 30       	cpi	r20, 0x02	; 2
    8034:	51 05       	cpc	r21, r1
    8036:	61 05       	cpc	r22, r1
    8038:	71 05       	cpc	r23, r1
    803a:	08 f4       	brcc	.+2      	; 0x803e <f_lseek+0x21a>
    803c:	9d cf       	rjmp	.-198    	; 0x7f78 <f_lseek+0x154>
    803e:	ad 81       	ldd	r26, Y+5	; 0x05
    8040:	be 81       	ldd	r27, Y+6	; 0x06
    8042:	ed 91       	ld	r30, X+
    8044:	fc 91       	ld	r31, X
    8046:	86 8d       	ldd	r24, Z+30	; 0x1e
    8048:	97 8d       	ldd	r25, Z+31	; 0x1f
    804a:	a0 a1       	ldd	r26, Z+32	; 0x20
    804c:	b1 a1       	ldd	r27, Z+33	; 0x21
    804e:	48 17       	cp	r20, r24
    8050:	59 07       	cpc	r21, r25
    8052:	6a 07       	cpc	r22, r26
    8054:	7b 07       	cpc	r23, r27
    8056:	08 f0       	brcs	.+2      	; 0x805a <f_lseek+0x236>
    8058:	8f cf       	rjmp	.-226    	; 0x7f78 <f_lseek+0x154>
				fp->curr_clust = clst;
    805a:	ad 81       	ldd	r26, Y+5	; 0x05
    805c:	be 81       	ldd	r27, Y+6	; 0x06
    805e:	52 96       	adiw	r26, 0x12	; 18
    8060:	4d 93       	st	X+, r20
    8062:	5d 93       	st	X+, r21
    8064:	6d 93       	st	X+, r22
    8066:	7c 93       	st	X, r23
    8068:	55 97       	sbiw	r26, 0x15	; 21
				fp->fptr += bcs;
    806a:	fd 01       	movw	r30, r26
    806c:	86 81       	ldd	r24, Z+6	; 0x06
    806e:	97 81       	ldd	r25, Z+7	; 0x07
    8070:	a0 85       	ldd	r26, Z+8	; 0x08
    8072:	b1 85       	ldd	r27, Z+9	; 0x09
    8074:	86 0d       	add	r24, r6
    8076:	97 1d       	adc	r25, r7
    8078:	a8 1d       	adc	r26, r8
    807a:	b9 1d       	adc	r27, r9
    807c:	86 83       	std	Z+6, r24	; 0x06
    807e:	97 83       	std	Z+7, r25	; 0x07
    8080:	a0 87       	std	Z+8, r26	; 0x08
    8082:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= bcs;
    8084:	a6 18       	sub	r10, r6
    8086:	b7 08       	sbc	r11, r7
    8088:	c8 08       	sbc	r12, r8
    808a:	d9 08       	sbc	r13, r9
			}
#endif
			fp->curr_clust = clst;
		}
		if (clst != 0) {
			while (ofs > bcs) {						/* Cluster following loop */
    808c:	6a 14       	cp	r6, r10
    808e:	7b 04       	cpc	r7, r11
    8090:	8c 04       	cpc	r8, r12
    8092:	9d 04       	cpc	r9, r13
    8094:	08 f4       	brcc	.+2      	; 0x8098 <f_lseek+0x274>
    8096:	a2 cf       	rjmp	.-188    	; 0x7fdc <f_lseek+0x1b8>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
				fp->curr_clust = clst;
				fp->fptr += bcs;
				ofs -= bcs;
			}
			fp->fptr += ofs;
    8098:	ed 81       	ldd	r30, Y+5	; 0x05
    809a:	fe 81       	ldd	r31, Y+6	; 0x06
    809c:	86 81       	ldd	r24, Z+6	; 0x06
    809e:	97 81       	ldd	r25, Z+7	; 0x07
    80a0:	a0 85       	ldd	r26, Z+8	; 0x08
    80a2:	b1 85       	ldd	r27, Z+9	; 0x09
    80a4:	8a 0d       	add	r24, r10
    80a6:	9b 1d       	adc	r25, r11
    80a8:	ac 1d       	adc	r26, r12
    80aa:	bd 1d       	adc	r27, r13
    80ac:	86 83       	std	Z+6, r24	; 0x06
    80ae:	97 83       	std	Z+7, r25	; 0x07
    80b0:	a0 87       	std	Z+8, r26	; 0x08
    80b2:	b1 87       	std	Z+9, r27	; 0x09
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
    80b4:	d6 01       	movw	r26, r12
    80b6:	c5 01       	movw	r24, r10
    80b8:	29 e0       	ldi	r18, 0x09	; 9
    80ba:	b6 95       	lsr	r27
    80bc:	a7 95       	ror	r26
    80be:	97 95       	ror	r25
    80c0:	87 95       	ror	r24
    80c2:	2a 95       	dec	r18
    80c4:	d1 f7       	brne	.-12     	; 0x80ba <f_lseek+0x296>
    80c6:	e8 2e       	mov	r14, r24
    80c8:	85 83       	std	Z+5, r24	; 0x05
			if (ofs % SS(fp->fs)) {
    80ca:	8f ef       	ldi	r24, 0xFF	; 255
    80cc:	91 e0       	ldi	r25, 0x01	; 1
    80ce:	a0 e0       	ldi	r26, 0x00	; 0
    80d0:	b0 e0       	ldi	r27, 0x00	; 0
    80d2:	a8 22       	and	r10, r24
    80d4:	b9 22       	and	r11, r25
    80d6:	ca 22       	and	r12, r26
    80d8:	db 22       	and	r13, r27
    80da:	a1 14       	cp	r10, r1
    80dc:	b1 04       	cpc	r11, r1
    80de:	c1 04       	cpc	r12, r1
    80e0:	d1 04       	cpc	r13, r1
    80e2:	09 f4       	brne	.+2      	; 0x80e6 <f_lseek+0x2c2>
    80e4:	4a c0       	rjmp	.+148    	; 0x817a <f_lseek+0x356>
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
    80e6:	80 80       	ld	r8, Z
    80e8:	91 80       	ldd	r9, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    80ea:	8e ef       	ldi	r24, 0xFE	; 254
    80ec:	a8 2e       	mov	r10, r24
    80ee:	8f ef       	ldi	r24, 0xFF	; 255
    80f0:	b8 2e       	mov	r11, r24
    80f2:	8f ef       	ldi	r24, 0xFF	; 255
    80f4:	c8 2e       	mov	r12, r24
    80f6:	8f ef       	ldi	r24, 0xFF	; 255
    80f8:	d8 2e       	mov	r13, r24
    80fa:	a4 0e       	add	r10, r20
    80fc:	b5 1e       	adc	r11, r21
    80fe:	c6 1e       	adc	r12, r22
    8100:	d7 1e       	adc	r13, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    8102:	f4 01       	movw	r30, r8
    8104:	86 8d       	ldd	r24, Z+30	; 0x1e
    8106:	97 8d       	ldd	r25, Z+31	; 0x1f
    8108:	a0 a1       	ldd	r26, Z+32	; 0x20
    810a:	b1 a1       	ldd	r27, Z+33	; 0x21
    810c:	02 97       	sbiw	r24, 0x02	; 2
    810e:	a1 09       	sbc	r26, r1
    8110:	b1 09       	sbc	r27, r1
    8112:	a8 16       	cp	r10, r24
    8114:	b9 06       	cpc	r11, r25
    8116:	ca 06       	cpc	r12, r26
    8118:	db 06       	cpc	r13, r27
    811a:	c0 f4       	brcc	.+48     	; 0x814c <f_lseek+0x328>
	return clst * fs->csize + fs->database;
    811c:	22 81       	ldd	r18, Z+2	; 0x02
    811e:	30 e0       	ldi	r19, 0x00	; 0
    8120:	40 e0       	ldi	r20, 0x00	; 0
    8122:	50 e0       	ldi	r21, 0x00	; 0
    8124:	c6 01       	movw	r24, r12
    8126:	b5 01       	movw	r22, r10
    8128:	0e 94 76 5a 	call	0xb4ec	; 0xb4ec <__mulsi3>
    812c:	9b 01       	movw	r18, r22
    812e:	ac 01       	movw	r20, r24
    8130:	f4 01       	movw	r30, r8
    8132:	82 a5       	ldd	r24, Z+42	; 0x2a
    8134:	93 a5       	ldd	r25, Z+43	; 0x2b
    8136:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8138:	b5 a5       	ldd	r27, Z+45	; 0x2d
    813a:	28 0f       	add	r18, r24
    813c:	39 1f       	adc	r19, r25
    813e:	4a 1f       	adc	r20, r26
    8140:	5b 1f       	adc	r21, r27
			}
			fp->fptr += ofs;
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
			if (ofs % SS(fp->fs)) {
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    8142:	21 15       	cp	r18, r1
    8144:	31 05       	cpc	r19, r1
    8146:	41 05       	cpc	r20, r1
    8148:	51 05       	cpc	r21, r1
    814a:	69 f4       	brne	.+26     	; 0x8166 <f_lseek+0x342>
    814c:	ad 81       	ldd	r26, Y+5	; 0x05
    814e:	be 81       	ldd	r27, Y+6	; 0x06
    8150:	14 96       	adiw	r26, 0x04	; 4
    8152:	8c 91       	ld	r24, X
    8154:	14 97       	sbiw	r26, 0x04	; 4
    8156:	80 68       	ori	r24, 0x80	; 128
    8158:	14 96       	adiw	r26, 0x04	; 4
    815a:	8c 93       	st	X, r24
    815c:	e2 e0       	ldi	r30, 0x02	; 2
    815e:	f0 e0       	ldi	r31, 0x00	; 0
    8160:	eb 83       	std	Y+3, r30	; 0x03
    8162:	fc 83       	std	Y+4, r31	; 0x04
    8164:	3e c0       	rjmp	.+124    	; 0x81e2 <f_lseek+0x3be>
				nsect += fp->csect;
    8166:	2e 0d       	add	r18, r14
    8168:	31 1d       	adc	r19, r1
    816a:	41 1d       	adc	r20, r1
    816c:	51 1d       	adc	r21, r1
				fp->csect++;
    816e:	e3 94       	inc	r14
    8170:	ad 81       	ldd	r26, Y+5	; 0x05
    8172:	be 81       	ldd	r27, Y+6	; 0x06
    8174:	15 96       	adiw	r26, 0x05	; 5
    8176:	ec 92       	st	X, r14
    8178:	04 c0       	rjmp	.+8      	; 0x8182 <f_lseek+0x35e>
    817a:	20 e0       	ldi	r18, 0x00	; 0
    817c:	30 e0       	ldi	r19, 0x00	; 0
    817e:	40 e0       	ldi	r20, 0x00	; 0
    8180:	50 e0       	ldi	r21, 0x00	; 0
			}
		}
	}
	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    8182:	ed 81       	ldd	r30, Y+5	; 0x05
    8184:	fe 81       	ldd	r31, Y+6	; 0x06
    8186:	86 81       	ldd	r24, Z+6	; 0x06
    8188:	97 81       	ldd	r25, Z+7	; 0x07
    818a:	a0 85       	ldd	r26, Z+8	; 0x08
    818c:	b1 85       	ldd	r27, Z+9	; 0x09
    818e:	91 70       	andi	r25, 0x01	; 1
    8190:	a0 70       	andi	r26, 0x00	; 0
    8192:	b0 70       	andi	r27, 0x00	; 0
    8194:	00 97       	sbiw	r24, 0x00	; 0
    8196:	a1 05       	cpc	r26, r1
    8198:	b1 05       	cpc	r27, r1
    819a:	69 f0       	breq	.+26     	; 0x81b6 <f_lseek+0x392>
    819c:	86 89       	ldd	r24, Z+22	; 0x16
    819e:	97 89       	ldd	r25, Z+23	; 0x17
    81a0:	a0 8d       	ldd	r26, Z+24	; 0x18
    81a2:	b1 8d       	ldd	r27, Z+25	; 0x19
    81a4:	28 17       	cp	r18, r24
    81a6:	39 07       	cpc	r19, r25
    81a8:	4a 07       	cpc	r20, r26
    81aa:	5b 07       	cpc	r21, r27
    81ac:	21 f0       	breq	.+8      	; 0x81b6 <f_lseek+0x392>
		}
#endif
		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
			ABORT(fp->fs, FR_DISK_ERR);
#endif
		fp->dsect = nsect;
    81ae:	26 8b       	std	Z+22, r18	; 0x16
    81b0:	37 8b       	std	Z+23, r19	; 0x17
    81b2:	40 8f       	std	Z+24, r20	; 0x18
    81b4:	51 8f       	std	Z+25, r21	; 0x19
	}
#if !_FS_READONLY
	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
    81b6:	ed 81       	ldd	r30, Y+5	; 0x05
    81b8:	fe 81       	ldd	r31, Y+6	; 0x06
    81ba:	26 81       	ldd	r18, Z+6	; 0x06
    81bc:	37 81       	ldd	r19, Z+7	; 0x07
    81be:	40 85       	ldd	r20, Z+8	; 0x08
    81c0:	51 85       	ldd	r21, Z+9	; 0x09
    81c2:	82 85       	ldd	r24, Z+10	; 0x0a
    81c4:	93 85       	ldd	r25, Z+11	; 0x0b
    81c6:	a4 85       	ldd	r26, Z+12	; 0x0c
    81c8:	b5 85       	ldd	r27, Z+13	; 0x0d
    81ca:	82 17       	cp	r24, r18
    81cc:	93 07       	cpc	r25, r19
    81ce:	a4 07       	cpc	r26, r20
    81d0:	b5 07       	cpc	r27, r21
    81d2:	38 f4       	brcc	.+14     	; 0x81e2 <f_lseek+0x3be>
		fp->fsize = fp->fptr;
    81d4:	22 87       	std	Z+10, r18	; 0x0a
    81d6:	33 87       	std	Z+11, r19	; 0x0b
    81d8:	44 87       	std	Z+12, r20	; 0x0c
    81da:	55 87       	std	Z+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    81dc:	84 81       	ldd	r24, Z+4	; 0x04
    81de:	80 62       	ori	r24, 0x20	; 32
    81e0:	84 83       	std	Z+4, r24	; 0x04
	}
#endif

	LEAVE_FF(fp->fs, res);
}
    81e2:	8b 81       	ldd	r24, Y+3	; 0x03
    81e4:	9c 81       	ldd	r25, Y+4	; 0x04
    81e6:	26 96       	adiw	r28, 0x06	; 6
    81e8:	e2 e1       	ldi	r30, 0x12	; 18
    81ea:	0c 94 15 5b 	jmp	0xb62a	; 0xb62a <__epilogue_restores__>

000081ee <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    81ee:	a0 e0       	ldi	r26, 0x00	; 0
    81f0:	b0 e0       	ldi	r27, 0x00	; 0
    81f2:	ed ef       	ldi	r30, 0xFD	; 253
    81f4:	f0 e4       	ldi	r31, 0x40	; 64
    81f6:	0c 94 00 5b 	jmp	0xb600	; 0xb600 <__prologue_saves__+0xe>
    81fa:	ec 01       	movw	r28, r24
    81fc:	7a 01       	movw	r14, r20
    81fe:	8b 01       	movw	r16, r22
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
    8200:	42 30       	cpi	r20, 0x02	; 2
    8202:	51 05       	cpc	r21, r1
    8204:	61 05       	cpc	r22, r1
    8206:	71 05       	cpc	r23, r1
    8208:	08 f4       	brcc	.+2      	; 0x820c <remove_chain+0x1e>
    820a:	5a c0       	rjmp	.+180    	; 0x82c0 <remove_chain+0xd2>
    820c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    820e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    8210:	a8 a1       	ldd	r26, Y+32	; 0x20
    8212:	b9 a1       	ldd	r27, Y+33	; 0x21
    8214:	48 17       	cp	r20, r24
    8216:	59 07       	cpc	r21, r25
    8218:	6a 07       	cpc	r22, r26
    821a:	7b 07       	cpc	r23, r27
    821c:	08 f4       	brcc	.+2      	; 0x8220 <remove_chain+0x32>
    821e:	43 c0       	rjmp	.+134    	; 0x82a6 <remove_chain+0xb8>
    8220:	4f c0       	rjmp	.+158    	; 0x82c0 <remove_chain+0xd2>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    8222:	ce 01       	movw	r24, r28
    8224:	b8 01       	movw	r22, r16
    8226:	a7 01       	movw	r20, r14
    8228:	0e 94 cb 3b 	call	0x7796	; 0x7796 <get_fat>
    822c:	5b 01       	movw	r10, r22
    822e:	6c 01       	movw	r12, r24
			if (nxt == 0) break;				/* Empty cluster? */
    8230:	61 15       	cp	r22, r1
    8232:	71 05       	cpc	r23, r1
    8234:	81 05       	cpc	r24, r1
    8236:	91 05       	cpc	r25, r1
    8238:	09 f4       	brne	.+2      	; 0x823c <remove_chain+0x4e>
    823a:	45 c0       	rjmp	.+138    	; 0x82c6 <remove_chain+0xd8>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    823c:	81 e0       	ldi	r24, 0x01	; 1
    823e:	a8 16       	cp	r10, r24
    8240:	b1 04       	cpc	r11, r1
    8242:	c1 04       	cpc	r12, r1
    8244:	d1 04       	cpc	r13, r1
    8246:	e1 f1       	breq	.+120    	; 0x82c0 <remove_chain+0xd2>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    8248:	2f ef       	ldi	r18, 0xFF	; 255
    824a:	a2 16       	cp	r10, r18
    824c:	2f ef       	ldi	r18, 0xFF	; 255
    824e:	b2 06       	cpc	r11, r18
    8250:	2f ef       	ldi	r18, 0xFF	; 255
    8252:	c2 06       	cpc	r12, r18
    8254:	2f ef       	ldi	r18, 0xFF	; 255
    8256:	d2 06       	cpc	r13, r18
    8258:	19 f4       	brne	.+6      	; 0x8260 <remove_chain+0x72>
    825a:	21 e0       	ldi	r18, 0x01	; 1
    825c:	30 e0       	ldi	r19, 0x00	; 0
    825e:	35 c0       	rjmp	.+106    	; 0x82ca <remove_chain+0xdc>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    8260:	ce 01       	movw	r24, r28
    8262:	b8 01       	movw	r22, r16
    8264:	a7 01       	movw	r20, r14
    8266:	00 e0       	ldi	r16, 0x00	; 0
    8268:	10 e0       	ldi	r17, 0x00	; 0
    826a:	20 e0       	ldi	r18, 0x00	; 0
    826c:	30 e0       	ldi	r19, 0x00	; 0
    826e:	0e 94 77 3d 	call	0x7aee	; 0x7aee <put_fat>
    8272:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
    8274:	00 97       	sbiw	r24, 0x00	; 0
    8276:	49 f5       	brne	.+82     	; 0x82ca <remove_chain+0xdc>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    8278:	8e 85       	ldd	r24, Y+14	; 0x0e
    827a:	9f 85       	ldd	r25, Y+15	; 0x0f
    827c:	a8 89       	ldd	r26, Y+16	; 0x10
    827e:	b9 89       	ldd	r27, Y+17	; 0x11
    8280:	8f 3f       	cpi	r24, 0xFF	; 255
    8282:	2f ef       	ldi	r18, 0xFF	; 255
    8284:	92 07       	cpc	r25, r18
    8286:	2f ef       	ldi	r18, 0xFF	; 255
    8288:	a2 07       	cpc	r26, r18
    828a:	2f ef       	ldi	r18, 0xFF	; 255
    828c:	b2 07       	cpc	r27, r18
    828e:	41 f0       	breq	.+16     	; 0x82a0 <remove_chain+0xb2>
				fs->free_clust++;
    8290:	01 96       	adiw	r24, 0x01	; 1
    8292:	a1 1d       	adc	r26, r1
    8294:	b1 1d       	adc	r27, r1
    8296:	8e 87       	std	Y+14, r24	; 0x0e
    8298:	9f 87       	std	Y+15, r25	; 0x0f
    829a:	a8 8b       	std	Y+16, r26	; 0x10
    829c:	b9 8b       	std	Y+17, r27	; 0x11
				fs->fsi_flag = 1;
    829e:	99 86       	std	Y+9, r9	; 0x09
    82a0:	86 01       	movw	r16, r12
    82a2:	75 01       	movw	r14, r10
    82a4:	02 c0       	rjmp	.+4      	; 0x82aa <remove_chain+0xbc>
    82a6:	99 24       	eor	r9, r9
    82a8:	93 94       	inc	r9
	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
    82aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    82ac:	9f 8d       	ldd	r25, Y+31	; 0x1f
    82ae:	a8 a1       	ldd	r26, Y+32	; 0x20
    82b0:	b9 a1       	ldd	r27, Y+33	; 0x21
    82b2:	e8 16       	cp	r14, r24
    82b4:	f9 06       	cpc	r15, r25
    82b6:	0a 07       	cpc	r16, r26
    82b8:	1b 07       	cpc	r17, r27
    82ba:	08 f4       	brcc	.+2      	; 0x82be <remove_chain+0xd0>
    82bc:	b2 cf       	rjmp	.-156    	; 0x8222 <remove_chain+0x34>
    82be:	03 c0       	rjmp	.+6      	; 0x82c6 <remove_chain+0xd8>
    82c0:	22 e0       	ldi	r18, 0x02	; 2
    82c2:	30 e0       	ldi	r19, 0x00	; 0
    82c4:	02 c0       	rjmp	.+4      	; 0x82ca <remove_chain+0xdc>
    82c6:	20 e0       	ldi	r18, 0x00	; 0
    82c8:	30 e0       	ldi	r19, 0x00	; 0
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    82ca:	c9 01       	movw	r24, r18
    82cc:	cd b7       	in	r28, 0x3d	; 61
    82ce:	de b7       	in	r29, 0x3e	; 62
    82d0:	eb e0       	ldi	r30, 0x0B	; 11
    82d2:	0c 94 1c 5b 	jmp	0xb638	; 0xb638 <__epilogue_restores__+0xe>

000082d6 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL *fp		/* Pointer to the file object */
)
{
    82d6:	a0 e0       	ldi	r26, 0x00	; 0
    82d8:	b0 e0       	ldi	r27, 0x00	; 0
    82da:	e1 e7       	ldi	r30, 0x71	; 113
    82dc:	f1 e4       	ldi	r31, 0x41	; 65
    82de:	0c 94 03 5b 	jmp	0xb606	; 0xb606 <__prologue_saves__+0x14>
    82e2:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD ncl;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    82e4:	6a 81       	ldd	r22, Y+2	; 0x02
    82e6:	7b 81       	ldd	r23, Y+3	; 0x03
    82e8:	88 81       	ld	r24, Y
    82ea:	99 81       	ldd	r25, Y+1	; 0x01
    82ec:	0e 94 3a 39 	call	0x7274	; 0x7274 <validate>
    82f0:	8c 01       	movw	r16, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    82f2:	00 97       	sbiw	r24, 0x00	; 0
    82f4:	09 f0       	breq	.+2      	; 0x82f8 <f_truncate+0x22>
    82f6:	72 c0       	rjmp	.+228    	; 0x83dc <f_truncate+0x106>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    82f8:	6c 81       	ldd	r22, Y+4	; 0x04
    82fa:	67 ff       	sbrs	r22, 7
    82fc:	03 c0       	rjmp	.+6      	; 0x8304 <f_truncate+0x2e>
    82fe:	02 e0       	ldi	r16, 0x02	; 2
    8300:	10 e0       	ldi	r17, 0x00	; 0
    8302:	6c c0       	rjmp	.+216    	; 0x83dc <f_truncate+0x106>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))			/* Check access mode */
    8304:	61 fd       	sbrc	r22, 1
    8306:	03 c0       	rjmp	.+6      	; 0x830e <f_truncate+0x38>
    8308:	07 e0       	ldi	r16, 0x07	; 7
    830a:	10 e0       	ldi	r17, 0x00	; 0
    830c:	67 c0       	rjmp	.+206    	; 0x83dc <f_truncate+0x106>
		LEAVE_FF(fp->fs, FR_DENIED);

	if (fp->fsize > fp->fptr) {
    830e:	2e 81       	ldd	r18, Y+6	; 0x06
    8310:	3f 81       	ldd	r19, Y+7	; 0x07
    8312:	48 85       	ldd	r20, Y+8	; 0x08
    8314:	59 85       	ldd	r21, Y+9	; 0x09
    8316:	8a 85       	ldd	r24, Y+10	; 0x0a
    8318:	9b 85       	ldd	r25, Y+11	; 0x0b
    831a:	ac 85       	ldd	r26, Y+12	; 0x0c
    831c:	bd 85       	ldd	r27, Y+13	; 0x0d
    831e:	28 17       	cp	r18, r24
    8320:	39 07       	cpc	r19, r25
    8322:	4a 07       	cpc	r20, r26
    8324:	5b 07       	cpc	r21, r27
    8326:	08 f0       	brcs	.+2      	; 0x832a <f_truncate+0x54>
    8328:	59 c0       	rjmp	.+178    	; 0x83dc <f_truncate+0x106>
		fp->fsize = fp->fptr;	/* Set file size to current R/W point */
    832a:	2a 87       	std	Y+10, r18	; 0x0a
    832c:	3b 87       	std	Y+11, r19	; 0x0b
    832e:	4c 87       	std	Y+12, r20	; 0x0c
    8330:	5d 87       	std	Y+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    8332:	60 62       	ori	r22, 0x20	; 32
    8334:	6c 83       	std	Y+4, r22	; 0x04
    8336:	88 81       	ld	r24, Y
    8338:	99 81       	ldd	r25, Y+1	; 0x01
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    833a:	21 15       	cp	r18, r1
    833c:	31 05       	cpc	r19, r1
    833e:	41 05       	cpc	r20, r1
    8340:	51 05       	cpc	r21, r1
    8342:	61 f4       	brne	.+24     	; 0x835c <f_truncate+0x86>
			res = remove_chain(fp->fs, fp->org_clust);
    8344:	4e 85       	ldd	r20, Y+14	; 0x0e
    8346:	5f 85       	ldd	r21, Y+15	; 0x0f
    8348:	68 89       	ldd	r22, Y+16	; 0x10
    834a:	79 89       	ldd	r23, Y+17	; 0x11
    834c:	0e 94 f7 40 	call	0x81ee	; 0x81ee <remove_chain>
    8350:	8c 01       	movw	r16, r24
			fp->org_clust = 0;
    8352:	1e 86       	std	Y+14, r1	; 0x0e
    8354:	1f 86       	std	Y+15, r1	; 0x0f
    8356:	18 8a       	std	Y+16, r1	; 0x10
    8358:	19 8a       	std	Y+17, r1	; 0x11
    835a:	3a c0       	rjmp	.+116    	; 0x83d0 <f_truncate+0xfa>
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(fp->fs, fp->curr_clust);
    835c:	4a 89       	ldd	r20, Y+18	; 0x12
    835e:	5b 89       	ldd	r21, Y+19	; 0x13
    8360:	6c 89       	ldd	r22, Y+20	; 0x14
    8362:	7d 89       	ldd	r23, Y+21	; 0x15
    8364:	0e 94 cb 3b 	call	0x7796	; 0x7796 <get_fat>
    8368:	6b 01       	movw	r12, r22
    836a:	7c 01       	movw	r14, r24
			res = FR_OK;
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    836c:	8f ef       	ldi	r24, 0xFF	; 255
    836e:	c8 16       	cp	r12, r24
    8370:	8f ef       	ldi	r24, 0xFF	; 255
    8372:	d8 06       	cpc	r13, r24
    8374:	8f ef       	ldi	r24, 0xFF	; 255
    8376:	e8 06       	cpc	r14, r24
    8378:	8f ef       	ldi	r24, 0xFF	; 255
    837a:	f8 06       	cpc	r15, r24
    837c:	a9 f1       	breq	.+106    	; 0x83e8 <f_truncate+0x112>
			if (ncl == 1) res = FR_INT_ERR;
    837e:	81 e0       	ldi	r24, 0x01	; 1
    8380:	c8 16       	cp	r12, r24
    8382:	d1 04       	cpc	r13, r1
    8384:	e1 04       	cpc	r14, r1
    8386:	f1 04       	cpc	r15, r1
    8388:	19 f4       	brne	.+6      	; 0x8390 <f_truncate+0xba>
    838a:	02 e0       	ldi	r16, 0x02	; 2
    838c:	10 e0       	ldi	r17, 0x00	; 0
    838e:	23 c0       	rjmp	.+70     	; 0x83d6 <f_truncate+0x100>
			if (res == FR_OK && ncl < fp->fs->max_clust) {
    8390:	e8 81       	ld	r30, Y
    8392:	f9 81       	ldd	r31, Y+1	; 0x01
    8394:	86 8d       	ldd	r24, Z+30	; 0x1e
    8396:	97 8d       	ldd	r25, Z+31	; 0x1f
    8398:	a0 a1       	ldd	r26, Z+32	; 0x20
    839a:	b1 a1       	ldd	r27, Z+33	; 0x21
    839c:	c8 16       	cp	r12, r24
    839e:	d9 06       	cpc	r13, r25
    83a0:	ea 06       	cpc	r14, r26
    83a2:	fb 06       	cpc	r15, r27
    83a4:	d8 f4       	brcc	.+54     	; 0x83dc <f_truncate+0x106>
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
    83a6:	4a 89       	ldd	r20, Y+18	; 0x12
    83a8:	5b 89       	ldd	r21, Y+19	; 0x13
    83aa:	6c 89       	ldd	r22, Y+20	; 0x14
    83ac:	7d 89       	ldd	r23, Y+21	; 0x15
    83ae:	cf 01       	movw	r24, r30
    83b0:	0f ef       	ldi	r16, 0xFF	; 255
    83b2:	1f ef       	ldi	r17, 0xFF	; 255
    83b4:	2f ef       	ldi	r18, 0xFF	; 255
    83b6:	3f e0       	ldi	r19, 0x0F	; 15
    83b8:	0e 94 77 3d 	call	0x7aee	; 0x7aee <put_fat>
    83bc:	8c 01       	movw	r16, r24
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
    83be:	00 97       	sbiw	r24, 0x00	; 0
    83c0:	51 f4       	brne	.+20     	; 0x83d6 <f_truncate+0x100>
    83c2:	88 81       	ld	r24, Y
    83c4:	99 81       	ldd	r25, Y+1	; 0x01
    83c6:	b7 01       	movw	r22, r14
    83c8:	a6 01       	movw	r20, r12
    83ca:	0e 94 f7 40 	call	0x81ee	; 0x81ee <remove_chain>
    83ce:	8c 01       	movw	r16, r24
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
    83d0:	01 15       	cp	r16, r1
    83d2:	11 05       	cpc	r17, r1
    83d4:	19 f0       	breq	.+6      	; 0x83dc <f_truncate+0x106>
    83d6:	8c 81       	ldd	r24, Y+4	; 0x04
    83d8:	80 68       	ori	r24, 0x80	; 128
    83da:	8c 83       	std	Y+4, r24	; 0x04

	LEAVE_FF(fp->fs, res);
}
    83dc:	c8 01       	movw	r24, r16
    83de:	cd b7       	in	r28, 0x3d	; 61
    83e0:	de b7       	in	r29, 0x3e	; 62
    83e2:	e8 e0       	ldi	r30, 0x08	; 8
    83e4:	0c 94 1f 5b 	jmp	0xb63e	; 0xb63e <__epilogue_restores__+0x14>
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
    83e8:	01 e0       	ldi	r16, 0x01	; 1
    83ea:	10 e0       	ldi	r17, 0x00	; 0
    83ec:	f4 cf       	rjmp	.-24     	; 0x83d6 <f_truncate+0x100>

000083ee <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
    83ee:	a0 e0       	ldi	r26, 0x00	; 0
    83f0:	b0 e0       	ldi	r27, 0x00	; 0
    83f2:	ed ef       	ldi	r30, 0xFD	; 253
    83f4:	f1 e4       	ldi	r31, 0x41	; 65
    83f6:	0c 94 fb 5a 	jmp	0xb5f6	; 0xb5f6 <__prologue_saves__+0x4>
    83fa:	ec 01       	movw	r28, r24
    83fc:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD i;


	i = dj->index + 1;
    83fe:	6c 80       	ldd	r6, Y+4	; 0x04
    8400:	7d 80       	ldd	r7, Y+5	; 0x05
    8402:	08 94       	sec
    8404:	61 1c       	adc	r6, r1
    8406:	71 1c       	adc	r7, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    8408:	61 14       	cp	r6, r1
    840a:	71 04       	cpc	r7, r1
    840c:	09 f4       	brne	.+2      	; 0x8410 <dir_next+0x22>
    840e:	4d c1       	rjmp	.+666    	; 0x86aa <dir_next+0x2bc>
    8410:	8e 85       	ldd	r24, Y+14	; 0x0e
    8412:	9f 85       	ldd	r25, Y+15	; 0x0f
    8414:	a8 89       	ldd	r26, Y+16	; 0x10
    8416:	b9 89       	ldd	r27, Y+17	; 0x11
    8418:	00 97       	sbiw	r24, 0x00	; 0
    841a:	a1 05       	cpc	r26, r1
    841c:	b1 05       	cpc	r27, r1
    841e:	09 f4       	brne	.+2      	; 0x8422 <dir_next+0x34>
    8420:	44 c1       	rjmp	.+648    	; 0x86aa <dir_next+0x2bc>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
    8422:	2f e0       	ldi	r18, 0x0F	; 15
    8424:	42 2e       	mov	r4, r18
    8426:	51 2c       	mov	r5, r1
    8428:	46 20       	and	r4, r6
    842a:	57 20       	and	r5, r7
    842c:	41 14       	cp	r4, r1
    842e:	51 04       	cpc	r5, r1
    8430:	09 f0       	breq	.+2      	; 0x8434 <dir_next+0x46>
    8432:	27 c1       	rjmp	.+590    	; 0x8682 <dir_next+0x294>
		dj->sect++;					/* Next sector */
    8434:	01 96       	adiw	r24, 0x01	; 1
    8436:	a1 1d       	adc	r26, r1
    8438:	b1 1d       	adc	r27, r1
    843a:	8e 87       	std	Y+14, r24	; 0x0e
    843c:	9f 87       	std	Y+15, r25	; 0x0f
    843e:	a8 8b       	std	Y+16, r26	; 0x10
    8440:	b9 8b       	std	Y+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    8442:	4a 85       	ldd	r20, Y+10	; 0x0a
    8444:	5b 85       	ldd	r21, Y+11	; 0x0b
    8446:	6c 85       	ldd	r22, Y+12	; 0x0c
    8448:	7d 85       	ldd	r23, Y+13	; 0x0d
    844a:	e8 81       	ld	r30, Y
    844c:	f9 81       	ldd	r31, Y+1	; 0x01
    844e:	41 15       	cp	r20, r1
    8450:	51 05       	cpc	r21, r1
    8452:	61 05       	cpc	r22, r1
    8454:	71 05       	cpc	r23, r1
    8456:	39 f4       	brne	.+14     	; 0x8466 <dir_next+0x78>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    8458:	87 81       	ldd	r24, Z+7	; 0x07
    845a:	90 85       	ldd	r25, Z+8	; 0x08
    845c:	68 16       	cp	r6, r24
    845e:	79 06       	cpc	r7, r25
    8460:	08 f4       	brcc	.+2      	; 0x8464 <dir_next+0x76>
    8462:	0f c1       	rjmp	.+542    	; 0x8682 <dir_next+0x294>
    8464:	22 c1       	rjmp	.+580    	; 0x86aa <dir_next+0x2bc>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    8466:	82 81       	ldd	r24, Z+2	; 0x02
    8468:	90 e0       	ldi	r25, 0x00	; 0
    846a:	01 97       	sbiw	r24, 0x01	; 1
    846c:	93 01       	movw	r18, r6
    846e:	a4 e0       	ldi	r26, 0x04	; 4
    8470:	36 95       	lsr	r19
    8472:	27 95       	ror	r18
    8474:	aa 95       	dec	r26
    8476:	e1 f7       	brne	.-8      	; 0x8470 <dir_next+0x82>
    8478:	82 23       	and	r24, r18
    847a:	93 23       	and	r25, r19
    847c:	89 2b       	or	r24, r25
    847e:	09 f0       	breq	.+2      	; 0x8482 <dir_next+0x94>
    8480:	00 c1       	rjmp	.+512    	; 0x8682 <dir_next+0x294>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    8482:	cf 01       	movw	r24, r30
    8484:	0e 94 cb 3b 	call	0x7796	; 0x7796 <get_fat>
    8488:	7b 01       	movw	r14, r22
    848a:	8c 01       	movw	r16, r24
				if (clst <= 1) return FR_INT_ERR;
    848c:	82 e0       	ldi	r24, 0x02	; 2
    848e:	e8 16       	cp	r14, r24
    8490:	f1 04       	cpc	r15, r1
    8492:	01 05       	cpc	r16, r1
    8494:	11 05       	cpc	r17, r1
    8496:	08 f4       	brcc	.+2      	; 0x849a <dir_next+0xac>
    8498:	0b c1       	rjmp	.+534    	; 0x86b0 <dir_next+0x2c2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    849a:	9f ef       	ldi	r25, 0xFF	; 255
    849c:	e9 16       	cp	r14, r25
    849e:	9f ef       	ldi	r25, 0xFF	; 255
    84a0:	f9 06       	cpc	r15, r25
    84a2:	9f ef       	ldi	r25, 0xFF	; 255
    84a4:	09 07       	cpc	r16, r25
    84a6:	9f ef       	ldi	r25, 0xFF	; 255
    84a8:	19 07       	cpc	r17, r25
    84aa:	09 f4       	brne	.+2      	; 0x84ae <dir_next+0xc0>
    84ac:	04 c1       	rjmp	.+520    	; 0x86b6 <dir_next+0x2c8>
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
    84ae:	e8 81       	ld	r30, Y
    84b0:	f9 81       	ldd	r31, Y+1	; 0x01
    84b2:	86 8d       	ldd	r24, Z+30	; 0x1e
    84b4:	97 8d       	ldd	r25, Z+31	; 0x1f
    84b6:	a0 a1       	ldd	r26, Z+32	; 0x20
    84b8:	b1 a1       	ldd	r27, Z+33	; 0x21
    84ba:	e8 16       	cp	r14, r24
    84bc:	f9 06       	cpc	r15, r25
    84be:	0a 07       	cpc	r16, r26
    84c0:	1b 07       	cpc	r17, r27
    84c2:	08 f4       	brcc	.+2      	; 0x84c6 <dir_next+0xd8>
    84c4:	a5 c0       	rjmp	.+330    	; 0x8610 <dir_next+0x222>
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
    84c6:	c1 14       	cp	r12, r1
    84c8:	d1 04       	cpc	r13, r1
    84ca:	09 f4       	brne	.+2      	; 0x84ce <dir_next+0xe0>
    84cc:	ee c0       	rjmp	.+476    	; 0x86aa <dir_next+0x2bc>
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
    84ce:	4a 85       	ldd	r20, Y+10	; 0x0a
    84d0:	5b 85       	ldd	r21, Y+11	; 0x0b
    84d2:	6c 85       	ldd	r22, Y+12	; 0x0c
    84d4:	7d 85       	ldd	r23, Y+13	; 0x0d
    84d6:	cf 01       	movw	r24, r30
    84d8:	0e 94 41 3e 	call	0x7c82	; 0x7c82 <create_chain>
    84dc:	7b 01       	movw	r14, r22
    84de:	8c 01       	movw	r16, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    84e0:	61 15       	cp	r22, r1
    84e2:	71 05       	cpc	r23, r1
    84e4:	81 05       	cpc	r24, r1
    84e6:	91 05       	cpc	r25, r1
    84e8:	19 f4       	brne	.+6      	; 0x84f0 <dir_next+0x102>
    84ea:	27 e0       	ldi	r18, 0x07	; 7
    84ec:	30 e0       	ldi	r19, 0x00	; 0
    84ee:	e5 c0       	rjmp	.+458    	; 0x86ba <dir_next+0x2cc>
					if (clst == 1) return FR_INT_ERR;
    84f0:	61 30       	cpi	r22, 0x01	; 1
    84f2:	71 05       	cpc	r23, r1
    84f4:	81 05       	cpc	r24, r1
    84f6:	91 05       	cpc	r25, r1
    84f8:	09 f4       	brne	.+2      	; 0x84fc <dir_next+0x10e>
    84fa:	da c0       	rjmp	.+436    	; 0x86b0 <dir_next+0x2c2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    84fc:	6f 3f       	cpi	r22, 0xFF	; 255
    84fe:	bf ef       	ldi	r27, 0xFF	; 255
    8500:	7b 07       	cpc	r23, r27
    8502:	bf ef       	ldi	r27, 0xFF	; 255
    8504:	8b 07       	cpc	r24, r27
    8506:	bf ef       	ldi	r27, 0xFF	; 255
    8508:	9b 07       	cpc	r25, r27
    850a:	09 f4       	brne	.+2      	; 0x850e <dir_next+0x120>
    850c:	d4 c0       	rjmp	.+424    	; 0x86b6 <dir_next+0x2c8>
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    850e:	88 81       	ld	r24, Y
    8510:	99 81       	ldd	r25, Y+1	; 0x01
    8512:	40 e0       	ldi	r20, 0x00	; 0
    8514:	50 e0       	ldi	r21, 0x00	; 0
    8516:	60 e0       	ldi	r22, 0x00	; 0
    8518:	70 e0       	ldi	r23, 0x00	; 0
    851a:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <move_window>
    851e:	89 2b       	or	r24, r25
    8520:	09 f0       	breq	.+2      	; 0x8524 <dir_next+0x136>
    8522:	c9 c0       	rjmp	.+402    	; 0x86b6 <dir_next+0x2c8>
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    8524:	88 81       	ld	r24, Y
    8526:	99 81       	ldd	r25, Y+1	; 0x01
    8528:	fc 01       	movw	r30, r24
    852a:	f2 96       	adiw	r30, 0x32	; 50
	while (cnt--) *d++ = (char)val;
    852c:	8e 5c       	subi	r24, 0xCE	; 206
    852e:	9d 4f       	sbci	r25, 0xFD	; 253
    8530:	01 c0       	rjmp	.+2      	; 0x8534 <dir_next+0x146>
    8532:	11 92       	st	Z+, r1
    8534:	e8 17       	cp	r30, r24
    8536:	f9 07       	cpc	r31, r25
    8538:	e1 f7       	brne	.-8      	; 0x8532 <dir_next+0x144>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    853a:	88 80       	ld	r8, Y
    853c:	99 80       	ldd	r9, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    853e:	ee ef       	ldi	r30, 0xFE	; 254
    8540:	ae 2e       	mov	r10, r30
    8542:	ef ef       	ldi	r30, 0xFF	; 255
    8544:	be 2e       	mov	r11, r30
    8546:	ef ef       	ldi	r30, 0xFF	; 255
    8548:	ce 2e       	mov	r12, r30
    854a:	ef ef       	ldi	r30, 0xFF	; 255
    854c:	de 2e       	mov	r13, r30
    854e:	ae 0c       	add	r10, r14
    8550:	bf 1c       	adc	r11, r15
    8552:	c0 1e       	adc	r12, r16
    8554:	d1 1e       	adc	r13, r17
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    8556:	f4 01       	movw	r30, r8
    8558:	86 8d       	ldd	r24, Z+30	; 0x1e
    855a:	97 8d       	ldd	r25, Z+31	; 0x1f
    855c:	a0 a1       	ldd	r26, Z+32	; 0x20
    855e:	b1 a1       	ldd	r27, Z+33	; 0x21
    8560:	02 97       	sbiw	r24, 0x02	; 2
    8562:	a1 09       	sbc	r26, r1
    8564:	b1 09       	sbc	r27, r1
    8566:	a8 16       	cp	r10, r24
    8568:	b9 06       	cpc	r11, r25
    856a:	ca 06       	cpc	r12, r26
    856c:	db 06       	cpc	r13, r27
    856e:	28 f0       	brcs	.+10     	; 0x857a <dir_next+0x18c>
    8570:	20 e0       	ldi	r18, 0x00	; 0
    8572:	30 e0       	ldi	r19, 0x00	; 0
    8574:	40 e0       	ldi	r20, 0x00	; 0
    8576:	50 e0       	ldi	r21, 0x00	; 0
    8578:	15 c0       	rjmp	.+42     	; 0x85a4 <dir_next+0x1b6>
	return clst * fs->csize + fs->database;
    857a:	d4 01       	movw	r26, r8
    857c:	12 96       	adiw	r26, 0x02	; 2
    857e:	2c 91       	ld	r18, X
    8580:	30 e0       	ldi	r19, 0x00	; 0
    8582:	40 e0       	ldi	r20, 0x00	; 0
    8584:	50 e0       	ldi	r21, 0x00	; 0
    8586:	c6 01       	movw	r24, r12
    8588:	b5 01       	movw	r22, r10
    858a:	0e 94 76 5a 	call	0xb4ec	; 0xb4ec <__mulsi3>
    858e:	9b 01       	movw	r18, r22
    8590:	ac 01       	movw	r20, r24
    8592:	f4 01       	movw	r30, r8
    8594:	82 a5       	ldd	r24, Z+42	; 0x2a
    8596:	93 a5       	ldd	r25, Z+43	; 0x2b
    8598:	a4 a5       	ldd	r26, Z+44	; 0x2c
    859a:	b5 a5       	ldd	r27, Z+45	; 0x2d
    859c:	28 0f       	add	r18, r24
    859e:	39 1f       	adc	r19, r25
    85a0:	4a 1f       	adc	r20, r26
    85a2:	5b 1f       	adc	r21, r27
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    85a4:	d4 01       	movw	r26, r8
    85a6:	9e 96       	adiw	r26, 0x2e	; 46
    85a8:	2d 93       	st	X+, r18
    85aa:	3d 93       	st	X+, r19
    85ac:	4d 93       	st	X+, r20
    85ae:	5c 93       	st	X, r21
    85b0:	d1 97       	sbiw	r26, 0x31	; 49
    85b2:	dd 24       	eor	r13, r13
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
    85b4:	cc 24       	eor	r12, r12
    85b6:	c3 94       	inc	r12
    85b8:	1a c0       	rjmp	.+52     	; 0x85ee <dir_next+0x200>
    85ba:	c4 82       	std	Z+4, r12	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    85bc:	88 81       	ld	r24, Y
    85be:	99 81       	ldd	r25, Y+1	; 0x01
    85c0:	40 e0       	ldi	r20, 0x00	; 0
    85c2:	50 e0       	ldi	r21, 0x00	; 0
    85c4:	60 e0       	ldi	r22, 0x00	; 0
    85c6:	70 e0       	ldi	r23, 0x00	; 0
    85c8:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <move_window>
    85cc:	89 2b       	or	r24, r25
    85ce:	09 f0       	breq	.+2      	; 0x85d2 <dir_next+0x1e4>
    85d0:	72 c0       	rjmp	.+228    	; 0x86b6 <dir_next+0x2c8>
						dj->fs->winsect++;
    85d2:	e8 81       	ld	r30, Y
    85d4:	f9 81       	ldd	r31, Y+1	; 0x01
    85d6:	86 a5       	ldd	r24, Z+46	; 0x2e
    85d8:	97 a5       	ldd	r25, Z+47	; 0x2f
    85da:	a0 a9       	ldd	r26, Z+48	; 0x30
    85dc:	b1 a9       	ldd	r27, Z+49	; 0x31
    85de:	01 96       	adiw	r24, 0x01	; 1
    85e0:	a1 1d       	adc	r26, r1
    85e2:	b1 1d       	adc	r27, r1
    85e4:	86 a7       	std	Z+46, r24	; 0x2e
    85e6:	97 a7       	std	Z+47, r25	; 0x2f
    85e8:	a0 ab       	std	Z+48, r26	; 0x30
    85ea:	b1 ab       	std	Z+49, r27	; 0x31
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    85ec:	d3 94       	inc	r13
    85ee:	e8 81       	ld	r30, Y
    85f0:	f9 81       	ldd	r31, Y+1	; 0x01
    85f2:	82 81       	ldd	r24, Z+2	; 0x02
    85f4:	d8 16       	cp	r13, r24
    85f6:	08 f3       	brcs	.-62     	; 0x85ba <dir_next+0x1cc>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    85f8:	86 a5       	ldd	r24, Z+46	; 0x2e
    85fa:	97 a5       	ldd	r25, Z+47	; 0x2f
    85fc:	a0 a9       	ldd	r26, Z+48	; 0x30
    85fe:	b1 a9       	ldd	r27, Z+49	; 0x31
    8600:	8d 19       	sub	r24, r13
    8602:	91 09       	sbc	r25, r1
    8604:	a1 09       	sbc	r26, r1
    8606:	b1 09       	sbc	r27, r1
    8608:	86 a7       	std	Z+46, r24	; 0x2e
    860a:	97 a7       	std	Z+47, r25	; 0x2f
    860c:	a0 ab       	std	Z+48, r26	; 0x30
    860e:	b1 ab       	std	Z+49, r27	; 0x31
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    8610:	ea 86       	std	Y+10, r14	; 0x0a
    8612:	fb 86       	std	Y+11, r15	; 0x0b
    8614:	0c 87       	std	Y+12, r16	; 0x0c
    8616:	1d 87       	std	Y+13, r17	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    8618:	c8 80       	ld	r12, Y
    861a:	d9 80       	ldd	r13, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    861c:	8e ef       	ldi	r24, 0xFE	; 254
    861e:	9f ef       	ldi	r25, 0xFF	; 255
    8620:	af ef       	ldi	r26, 0xFF	; 255
    8622:	bf ef       	ldi	r27, 0xFF	; 255
    8624:	e8 0e       	add	r14, r24
    8626:	f9 1e       	adc	r15, r25
    8628:	0a 1f       	adc	r16, r26
    862a:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    862c:	f6 01       	movw	r30, r12
    862e:	86 8d       	ldd	r24, Z+30	; 0x1e
    8630:	97 8d       	ldd	r25, Z+31	; 0x1f
    8632:	a0 a1       	ldd	r26, Z+32	; 0x20
    8634:	b1 a1       	ldd	r27, Z+33	; 0x21
    8636:	02 97       	sbiw	r24, 0x02	; 2
    8638:	a1 09       	sbc	r26, r1
    863a:	b1 09       	sbc	r27, r1
    863c:	e8 16       	cp	r14, r24
    863e:	f9 06       	cpc	r15, r25
    8640:	0a 07       	cpc	r16, r26
    8642:	1b 07       	cpc	r17, r27
    8644:	28 f0       	brcs	.+10     	; 0x8650 <dir_next+0x262>
    8646:	20 e0       	ldi	r18, 0x00	; 0
    8648:	30 e0       	ldi	r19, 0x00	; 0
    864a:	40 e0       	ldi	r20, 0x00	; 0
    864c:	50 e0       	ldi	r21, 0x00	; 0
    864e:	15 c0       	rjmp	.+42     	; 0x867a <dir_next+0x28c>
	return clst * fs->csize + fs->database;
    8650:	d6 01       	movw	r26, r12
    8652:	12 96       	adiw	r26, 0x02	; 2
    8654:	2c 91       	ld	r18, X
    8656:	30 e0       	ldi	r19, 0x00	; 0
    8658:	40 e0       	ldi	r20, 0x00	; 0
    865a:	50 e0       	ldi	r21, 0x00	; 0
    865c:	c8 01       	movw	r24, r16
    865e:	b7 01       	movw	r22, r14
    8660:	0e 94 76 5a 	call	0xb4ec	; 0xb4ec <__mulsi3>
    8664:	9b 01       	movw	r18, r22
    8666:	ac 01       	movw	r20, r24
    8668:	f6 01       	movw	r30, r12
    866a:	82 a5       	ldd	r24, Z+42	; 0x2a
    866c:	93 a5       	ldd	r25, Z+43	; 0x2b
    866e:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8670:	b5 a5       	ldd	r27, Z+45	; 0x2d
    8672:	28 0f       	add	r18, r24
    8674:	39 1f       	adc	r19, r25
    8676:	4a 1f       	adc	r20, r26
    8678:	5b 1f       	adc	r21, r27
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(dj->fs, clst);
    867a:	2e 87       	std	Y+14, r18	; 0x0e
    867c:	3f 87       	std	Y+15, r19	; 0x0f
    867e:	48 8b       	std	Y+16, r20	; 0x10
    8680:	59 8b       	std	Y+17, r21	; 0x11
			}
		}
	}

	dj->index = i;
    8682:	6c 82       	std	Y+4, r6	; 0x04
    8684:	7d 82       	std	Y+5, r7	; 0x05
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
    8686:	75 e0       	ldi	r23, 0x05	; 5
    8688:	44 0c       	add	r4, r4
    868a:	55 1c       	adc	r5, r5
    868c:	7a 95       	dec	r23
    868e:	e1 f7       	brne	.-8      	; 0x8688 <dir_next+0x29a>
    8690:	82 e3       	ldi	r24, 0x32	; 50
    8692:	90 e0       	ldi	r25, 0x00	; 0
    8694:	48 0e       	add	r4, r24
    8696:	59 1e       	adc	r5, r25
    8698:	88 81       	ld	r24, Y
    869a:	99 81       	ldd	r25, Y+1	; 0x01
    869c:	84 0d       	add	r24, r4
    869e:	95 1d       	adc	r25, r5
    86a0:	8a 8b       	std	Y+18, r24	; 0x12
    86a2:	9b 8b       	std	Y+19, r25	; 0x13
    86a4:	20 e0       	ldi	r18, 0x00	; 0
    86a6:	30 e0       	ldi	r19, 0x00	; 0
    86a8:	08 c0       	rjmp	.+16     	; 0x86ba <dir_next+0x2cc>

	return FR_OK;
    86aa:	24 e0       	ldi	r18, 0x04	; 4
    86ac:	30 e0       	ldi	r19, 0x00	; 0
    86ae:	05 c0       	rjmp	.+10     	; 0x86ba <dir_next+0x2cc>
    86b0:	22 e0       	ldi	r18, 0x02	; 2
    86b2:	30 e0       	ldi	r19, 0x00	; 0
    86b4:	02 c0       	rjmp	.+4      	; 0x86ba <dir_next+0x2cc>
    86b6:	21 e0       	ldi	r18, 0x01	; 1
    86b8:	30 e0       	ldi	r19, 0x00	; 0
}
    86ba:	c9 01       	movw	r24, r18
    86bc:	cd b7       	in	r28, 0x3d	; 61
    86be:	de b7       	in	r29, 0x3e	; 62
    86c0:	e0 e1       	ldi	r30, 0x10	; 16
    86c2:	0c 94 17 5b 	jmp	0xb62e	; 0xb62e <__epilogue_restores__+0x4>

000086c6 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const XCHAR *path	/* Full-path string to find a file or directory */
)
{
    86c6:	a0 e0       	ldi	r26, 0x00	; 0
    86c8:	b0 e0       	ldi	r27, 0x00	; 0
    86ca:	e9 e6       	ldi	r30, 0x69	; 105
    86cc:	f3 e4       	ldi	r31, 0x43	; 67
    86ce:	0c 94 01 5b 	jmp	0xb602	; 0xb602 <__prologue_saves__+0x10>
    86d2:	ec 01       	movw	r28, r24
    86d4:	7b 01       	movw	r14, r22
	FRESULT res;
	BYTE *dir, last;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
    86d6:	fb 01       	movw	r30, r22
    86d8:	80 81       	ld	r24, Z
    86da:	8f 32       	cpi	r24, 0x2F	; 47
    86dc:	11 f0       	breq	.+4      	; 0x86e2 <follow_path+0x1c>
    86de:	8c 35       	cpi	r24, 0x5C	; 92
    86e0:	41 f4       	brne	.+16     	; 0x86f2 <follow_path+0x2c>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
    86e2:	08 94       	sec
    86e4:	e1 1c       	adc	r14, r1
    86e6:	f1 1c       	adc	r15, r1
    86e8:	1e 82       	std	Y+6, r1	; 0x06
    86ea:	1f 82       	std	Y+7, r1	; 0x07
    86ec:	18 86       	std	Y+8, r1	; 0x08
    86ee:	19 86       	std	Y+9, r1	; 0x09
    86f0:	0a c0       	rjmp	.+20     	; 0x8706 <follow_path+0x40>
	} else {							/* No heading saparator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
    86f2:	e8 81       	ld	r30, Y
    86f4:	f9 81       	ldd	r31, Y+1	; 0x01
    86f6:	86 89       	ldd	r24, Z+22	; 0x16
    86f8:	97 89       	ldd	r25, Z+23	; 0x17
    86fa:	a0 8d       	ldd	r26, Z+24	; 0x18
    86fc:	b1 8d       	ldd	r27, Z+25	; 0x19
    86fe:	8e 83       	std	Y+6, r24	; 0x06
    8700:	9f 83       	std	Y+7, r25	; 0x07
    8702:	a8 87       	std	Y+8, r26	; 0x08
    8704:	b9 87       	std	Y+9, r27	; 0x09
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
		path++;
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
    8706:	f7 01       	movw	r30, r14
    8708:	80 81       	ld	r24, Z
    870a:	80 32       	cpi	r24, 0x20	; 32
    870c:	48 f4       	brcc	.+18     	; 0x8720 <follow_path+0x5a>
		res = dir_seek(dj, 0);
    870e:	ce 01       	movw	r24, r28
    8710:	60 e0       	ldi	r22, 0x00	; 0
    8712:	70 e0       	ldi	r23, 0x00	; 0
    8714:	0e 94 81 3c 	call	0x7902	; 0x7902 <dir_seek>
    8718:	9c 01       	movw	r18, r24
		dj->dir = NULL;
    871a:	1a 8a       	std	Y+18, r1	; 0x12
    871c:	1b 8a       	std	Y+19, r1	; 0x13
    871e:	02 c1       	rjmp	.+516    	; 0x8924 <follow_path+0x25e>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    8720:	50 e2       	ldi	r21, 0x20	; 32
    8722:	b5 2e       	mov	r11, r21
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    8724:	45 e0       	ldi	r20, 0x05	; 5
    8726:	a4 2e       	mov	r10, r20
	BYTE b, c, d, *sfn;
	int ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    8728:	0c 89       	ldd	r16, Y+20	; 0x14
    872a:	1d 89       	ldd	r17, Y+21	; 0x15
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    872c:	f8 01       	movw	r30, r16
	while (cnt--) *d++ = (char)val;
    872e:	c8 01       	movw	r24, r16
    8730:	0b 96       	adiw	r24, 0x0b	; 11
    8732:	01 c0       	rjmp	.+2      	; 0x8736 <follow_path+0x70>
    8734:	b1 92       	st	Z+, r11
    8736:	e8 17       	cp	r30, r24
    8738:	f9 07       	cpc	r31, r25
    873a:	e1 f7       	brne	.-8      	; 0x8734 <follow_path+0x6e>
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
	p = *path;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
    873c:	f7 01       	movw	r30, r14
    873e:	80 81       	ld	r24, Z
    8740:	8e 32       	cpi	r24, 0x2E	; 46
    8742:	41 f0       	breq	.+16     	; 0x8754 <follow_path+0x8e>
    8744:	60 e0       	ldi	r22, 0x00	; 0
    8746:	70 e0       	ldi	r23, 0x00	; 0
    8748:	cc 24       	eor	r12, r12
    874a:	dd 24       	eor	r13, r13
    874c:	a8 e0       	ldi	r26, 0x08	; 8
    874e:	b0 e0       	ldi	r27, 0x00	; 0
    8750:	30 e0       	ldi	r19, 0x00	; 0
    8752:	21 c0       	rjmp	.+66     	; 0x8796 <follow_path+0xd0>
    8754:	d8 01       	movw	r26, r16
    8756:	80 e0       	ldi	r24, 0x00	; 0
    8758:	90 e0       	ldi	r25, 0x00	; 0
		for (;;) {
			c = p[si++];
    875a:	f7 01       	movw	r30, r14
    875c:	e8 0f       	add	r30, r24
    875e:	f9 1f       	adc	r31, r25
    8760:	e0 81       	ld	r30, Z
    8762:	01 96       	adiw	r24, 0x01	; 1
			if (c != '.' || si >= 3) break;
    8764:	ee 32       	cpi	r30, 0x2E	; 46
    8766:	31 f4       	brne	.+12     	; 0x8774 <follow_path+0xae>
    8768:	83 30       	cpi	r24, 0x03	; 3
    876a:	91 05       	cpc	r25, r1
    876c:	09 f4       	brne	.+2      	; 0x8770 <follow_path+0xaa>
    876e:	d3 c0       	rjmp	.+422    	; 0x8916 <follow_path+0x250>
			sfn[i++] = c;
    8770:	ed 93       	st	X+, r30
    8772:	f3 cf       	rjmp	.-26     	; 0x875a <follow_path+0x94>
		}
		if (c != '/' && c != '\\' && c >= ' ') return FR_INVALID_NAME;
    8774:	ef 32       	cpi	r30, 0x2F	; 47
    8776:	29 f0       	breq	.+10     	; 0x8782 <follow_path+0xbc>
    8778:	ec 35       	cpi	r30, 0x5C	; 92
    877a:	39 f0       	breq	.+14     	; 0x878a <follow_path+0xc4>
    877c:	e0 32       	cpi	r30, 0x20	; 32
    877e:	08 f0       	brcs	.+2      	; 0x8782 <follow_path+0xbc>
    8780:	ca c0       	rjmp	.+404    	; 0x8916 <follow_path+0x250>
		*path = &p[si];									/* Rerurn pointer to the next segment */
		sfn[11] = (c < ' ') ? NS_LAST|NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    8782:	e0 32       	cpi	r30, 0x20	; 32
    8784:	10 f4       	brcc	.+4      	; 0x878a <follow_path+0xc4>
    8786:	24 e2       	ldi	r18, 0x24	; 36
    8788:	01 c0       	rjmp	.+2      	; 0x878c <follow_path+0xc6>
    878a:	20 e2       	ldi	r18, 0x20	; 32
			c = p[si++];
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c >= ' ') return FR_INVALID_NAME;
		*path = &p[si];									/* Rerurn pointer to the next segment */
    878c:	e8 0e       	add	r14, r24
    878e:	f9 1e       	adc	r15, r25
		sfn[11] = (c < ' ') ? NS_LAST|NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    8790:	f8 01       	movw	r30, r16
    8792:	23 87       	std	Z+11, r18	; 0x0b
    8794:	cd c0       	rjmp	.+410    	; 0x8930 <follow_path+0x26a>
		return FR_OK;
	}
#endif
	for (;;) {
		c = p[si++];
    8796:	f7 01       	movw	r30, r14
    8798:	ec 0d       	add	r30, r12
    879a:	fd 1d       	adc	r31, r13
    879c:	20 81       	ld	r18, Z
    879e:	08 94       	sec
    87a0:	c1 1c       	adc	r12, r1
    87a2:	d1 1c       	adc	r13, r1
		if (c < ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    87a4:	20 32       	cpi	r18, 0x20	; 32
    87a6:	08 f4       	brcc	.+2      	; 0x87aa <follow_path+0xe4>
    87a8:	42 c0       	rjmp	.+132    	; 0x882e <follow_path+0x168>
    87aa:	2f 32       	cpi	r18, 0x2F	; 47
    87ac:	09 f4       	brne	.+2      	; 0x87b0 <follow_path+0xea>
    87ae:	ca c0       	rjmp	.+404    	; 0x8944 <follow_path+0x27e>
    87b0:	2c 35       	cpi	r18, 0x5C	; 92
    87b2:	09 f4       	brne	.+2      	; 0x87b6 <follow_path+0xf0>
    87b4:	c7 c0       	rjmp	.+398    	; 0x8944 <follow_path+0x27e>
		if (c == '.' || i >= ni) {
    87b6:	2e 32       	cpi	r18, 0x2E	; 46
    87b8:	19 f0       	breq	.+6      	; 0x87c0 <follow_path+0xfa>
    87ba:	6a 17       	cp	r22, r26
    87bc:	7b 07       	cpc	r23, r27
    87be:	6c f0       	brlt	.+26     	; 0x87da <follow_path+0x114>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    87c0:	18 97       	sbiw	r26, 0x08	; 8
    87c2:	09 f0       	breq	.+2      	; 0x87c6 <follow_path+0x100>
    87c4:	a8 c0       	rjmp	.+336    	; 0x8916 <follow_path+0x250>
    87c6:	2e 32       	cpi	r18, 0x2E	; 46
    87c8:	09 f0       	breq	.+2      	; 0x87cc <follow_path+0x106>
    87ca:	a5 c0       	rjmp	.+330    	; 0x8916 <follow_path+0x250>
			i = 8; ni = 11;
			b <<= 2; continue;
    87cc:	33 0f       	add	r19, r19
    87ce:	33 0f       	add	r19, r19
    87d0:	68 e0       	ldi	r22, 0x08	; 8
    87d2:	70 e0       	ldi	r23, 0x00	; 0
    87d4:	ab e0       	ldi	r26, 0x0B	; 11
    87d6:	b0 e0       	ldi	r27, 0x00	; 0
    87d8:	de cf       	rjmp	.-68     	; 0x8796 <follow_path+0xd0>
		}
		if (c >= 0x80) {				/* Extended char */
    87da:	27 ff       	sbrs	r18, 7
    87dc:	05 c0       	rjmp	.+10     	; 0x87e8 <follow_path+0x122>
#ifdef _EXCVT
			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
    87de:	e2 2f       	mov	r30, r18
    87e0:	f0 e0       	ldi	r31, 0x00	; 0
    87e2:	e0 52       	subi	r30, 0x20	; 32
    87e4:	fc 4d       	sbci	r31, 0xDC	; 220
    87e6:	20 81       	ld	r18, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject unallowable chrs for SFN */
    87e8:	42 2f       	mov	r20, r18
    87ea:	50 e0       	ldi	r21, 0x00	; 0
    87ec:	ef e0       	ldi	r30, 0x0F	; 15
    87ee:	f4 e2       	ldi	r31, 0x24	; 36
    87f0:	01 c0       	rjmp	.+2      	; 0x87f4 <follow_path+0x12e>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    87f2:	31 96       	adiw	r30, 0x01	; 1
    87f4:	80 81       	ld	r24, Z
    87f6:	88 23       	and	r24, r24
    87f8:	39 f0       	breq	.+14     	; 0x8808 <follow_path+0x142>
    87fa:	99 27       	eor	r25, r25
    87fc:	87 fd       	sbrc	r24, 7
    87fe:	90 95       	com	r25
    8800:	84 17       	cp	r24, r20
    8802:	95 07       	cpc	r25, r21
    8804:	b1 f7       	brne	.-20     	; 0x87f2 <follow_path+0x12c>
    8806:	87 c0       	rjmp	.+270    	; 0x8916 <follow_path+0x250>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject unallowable chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {
    8808:	82 2f       	mov	r24, r18
    880a:	81 54       	subi	r24, 0x41	; 65
    880c:	8a 31       	cpi	r24, 0x1A	; 26
    880e:	10 f4       	brcc	.+4      	; 0x8814 <follow_path+0x14e>
				b |= 2;
    8810:	32 60       	ori	r19, 0x02	; 2
    8812:	06 c0       	rjmp	.+12     	; 0x8820 <follow_path+0x15a>
			} else {
				if (IsLower(c)) {
    8814:	82 2f       	mov	r24, r18
    8816:	81 56       	subi	r24, 0x61	; 97
    8818:	8a 31       	cpi	r24, 0x1A	; 26
    881a:	10 f4       	brcc	.+4      	; 0x8820 <follow_path+0x15a>
					b |= 1; c -= 0x20;
    881c:	31 60       	ori	r19, 0x01	; 1
    881e:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    8820:	f8 01       	movw	r30, r16
    8822:	e6 0f       	add	r30, r22
    8824:	f7 1f       	adc	r31, r23
    8826:	20 83       	st	Z, r18
    8828:	6f 5f       	subi	r22, 0xFF	; 255
    882a:	7f 4f       	sbci	r23, 0xFF	; 255
    882c:	b4 cf       	rjmp	.-152    	; 0x8796 <follow_path+0xd0>
    882e:	44 e0       	ldi	r20, 0x04	; 4
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
    8830:	67 2b       	or	r22, r23
    8832:	09 f4       	brne	.+2      	; 0x8836 <follow_path+0x170>
    8834:	70 c0       	rjmp	.+224    	; 0x8916 <follow_path+0x250>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    8836:	f8 01       	movw	r30, r16
    8838:	80 81       	ld	r24, Z
    883a:	85 3e       	cpi	r24, 0xE5	; 229
    883c:	09 f4       	brne	.+2      	; 0x8840 <follow_path+0x17a>
    883e:	a0 82       	st	Z, r10

	if (ni == 8) b <<= 2;
    8840:	18 97       	sbiw	r26, 0x08	; 8
    8842:	11 f4       	brne	.+4      	; 0x8848 <follow_path+0x182>
    8844:	33 0f       	add	r19, r19
    8846:	33 0f       	add	r19, r19
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
    8848:	23 2f       	mov	r18, r19
    884a:	30 e0       	ldi	r19, 0x00	; 0
    884c:	c9 01       	movw	r24, r18
    884e:	83 70       	andi	r24, 0x03	; 3
    8850:	90 70       	andi	r25, 0x00	; 0
    8852:	01 97       	sbiw	r24, 0x01	; 1
    8854:	09 f4       	brne	.+2      	; 0x8858 <follow_path+0x192>
    8856:	40 61       	ori	r20, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
    8858:	2c 70       	andi	r18, 0x0C	; 12
    885a:	30 70       	andi	r19, 0x00	; 0
    885c:	24 30       	cpi	r18, 0x04	; 4
    885e:	31 05       	cpc	r19, r1
    8860:	09 f4       	brne	.+2      	; 0x8864 <follow_path+0x19e>
    8862:	48 60       	ori	r20, 0x08	; 8
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    8864:	ec 0c       	add	r14, r12
    8866:	fd 1c       	adc	r15, r13

	if (ni == 8) b <<= 2;
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */

	sfn[11] = c;		/* Store NT flag, File name is created */
    8868:	f8 01       	movw	r30, r16
    886a:	43 87       	std	Z+11, r20	; 0x0b
    886c:	61 c0       	rjmp	.+194    	; 0x8930 <follow_path+0x26a>

#if _USE_LFN
	ord = sum = 0xFF; lfen = *(dj->fn+11) & NS_LOSS;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    886e:	4e 85       	ldd	r20, Y+14	; 0x0e
    8870:	5f 85       	ldd	r21, Y+15	; 0x0f
    8872:	68 89       	ldd	r22, Y+16	; 0x10
    8874:	79 89       	ldd	r23, Y+17	; 0x11
    8876:	88 81       	ld	r24, Y
    8878:	99 81       	ldd	r25, Y+1	; 0x01
    887a:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <move_window>
    887e:	ac 01       	movw	r20, r24
		if (res != FR_OK) break;
    8880:	00 97       	sbiw	r24, 0x00	; 0
    8882:	01 f5       	brne	.+64     	; 0x88c4 <follow_path+0x1fe>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    8884:	ea 89       	ldd	r30, Y+18	; 0x12
    8886:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    8888:	80 81       	ld	r24, Z
    888a:	88 23       	and	r24, r24
    888c:	19 f4       	brne	.+6      	; 0x8894 <follow_path+0x1ce>
    888e:	44 e0       	ldi	r20, 0x04	; 4
    8890:	50 e0       	ldi	r21, 0x00	; 0
    8892:	18 c0       	rjmp	.+48     	; 0x88c4 <follow_path+0x1fe>
				}
				ord = 0xFF;
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    8894:	83 85       	ldd	r24, Z+11	; 0x0b
    8896:	83 fd       	sbrc	r24, 3
    8898:	0f c0       	rjmp	.+30     	; 0x88b8 <follow_path+0x1f2>
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
    889a:	ac 89       	ldd	r26, Y+20	; 0x14
    889c:	bd 89       	ldd	r27, Y+21	; 0x15
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    889e:	9f 01       	movw	r18, r30
    88a0:	25 5f       	subi	r18, 0xF5	; 245
    88a2:	3f 4f       	sbci	r19, 0xFF	; 255
    88a4:	e2 17       	cp	r30, r18
    88a6:	f3 07       	cpc	r31, r19
    88a8:	69 f0       	breq	.+26     	; 0x88c4 <follow_path+0x1fe>
    88aa:	90 81       	ld	r25, Z
    88ac:	8c 91       	ld	r24, X
    88ae:	98 17       	cp	r25, r24
    88b0:	19 f4       	brne	.+6      	; 0x88b8 <follow_path+0x1f2>
    88b2:	31 96       	adiw	r30, 0x01	; 1
    88b4:	11 96       	adiw	r26, 0x01	; 1
    88b6:	f6 cf       	rjmp	.-20     	; 0x88a4 <follow_path+0x1de>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
    88b8:	ce 01       	movw	r24, r28
    88ba:	60 e0       	ldi	r22, 0x00	; 0
    88bc:	70 e0       	ldi	r23, 0x00	; 0
    88be:	0e 94 f7 41 	call	0x83ee	; 0x83ee <dir_next>
    88c2:	3b c0       	rjmp	.+118    	; 0x893a <follow_path+0x274>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+11) & NS_LAST;
    88c4:	ec 89       	ldd	r30, Y+20	; 0x14
    88c6:	fd 89       	ldd	r31, Y+21	; 0x15
    88c8:	83 85       	ldd	r24, Z+11	; 0x0b
    88ca:	84 70       	andi	r24, 0x04	; 4
			if (res != FR_OK) {				/* Could not find the object */
    88cc:	41 15       	cp	r20, r1
    88ce:	51 05       	cpc	r21, r1
    88d0:	39 f0       	breq	.+14     	; 0x88e0 <follow_path+0x21a>
    88d2:	9a 01       	movw	r18, r20
				if (res == FR_NO_FILE && !last)
    88d4:	44 30       	cpi	r20, 0x04	; 4
    88d6:	51 05       	cpc	r21, r1
    88d8:	09 f5       	brne	.+66     	; 0x891c <follow_path+0x256>
    88da:	88 23       	and	r24, r24
    88dc:	09 f1       	breq	.+66     	; 0x8920 <follow_path+0x25a>
    88de:	22 c0       	rjmp	.+68     	; 0x8924 <follow_path+0x25e>
					res = FR_NO_PATH;
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
    88e0:	88 23       	and	r24, r24
    88e2:	e1 f4       	brne	.+56     	; 0x891c <follow_path+0x256>
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
    88e4:	ea 89       	ldd	r30, Y+18	; 0x12
    88e6:	fb 89       	ldd	r31, Y+19	; 0x13
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    88e8:	83 85       	ldd	r24, Z+11	; 0x0b
    88ea:	84 ff       	sbrs	r24, 4
    88ec:	19 c0       	rjmp	.+50     	; 0x8920 <follow_path+0x25a>
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    88ee:	84 89       	ldd	r24, Z+20	; 0x14
    88f0:	95 89       	ldd	r25, Z+21	; 0x15
    88f2:	a0 e0       	ldi	r26, 0x00	; 0
    88f4:	b0 e0       	ldi	r27, 0x00	; 0
    88f6:	dc 01       	movw	r26, r24
    88f8:	99 27       	eor	r25, r25
    88fa:	88 27       	eor	r24, r24
    88fc:	22 8d       	ldd	r18, Z+26	; 0x1a
    88fe:	33 8d       	ldd	r19, Z+27	; 0x1b
    8900:	40 e0       	ldi	r20, 0x00	; 0
    8902:	50 e0       	ldi	r21, 0x00	; 0
    8904:	82 2b       	or	r24, r18
    8906:	93 2b       	or	r25, r19
    8908:	a4 2b       	or	r26, r20
    890a:	b5 2b       	or	r27, r21
    890c:	8e 83       	std	Y+6, r24	; 0x06
    890e:	9f 83       	std	Y+7, r25	; 0x07
    8910:	a8 87       	std	Y+8, r26	; 0x08
    8912:	b9 87       	std	Y+9, r27	; 0x09
    8914:	09 cf       	rjmp	.-494    	; 0x8728 <follow_path+0x62>
		}
    8916:	26 e0       	ldi	r18, 0x06	; 6
    8918:	30 e0       	ldi	r19, 0x00	; 0
    891a:	04 c0       	rjmp	.+8      	; 0x8924 <follow_path+0x25e>
    891c:	9a 01       	movw	r18, r20
    891e:	02 c0       	rjmp	.+4      	; 0x8924 <follow_path+0x25e>
    8920:	25 e0       	ldi	r18, 0x05	; 5
    8922:	30 e0       	ldi	r19, 0x00	; 0
	}

	return res;
}
    8924:	c9 01       	movw	r24, r18
    8926:	cd b7       	in	r28, 0x3d	; 61
    8928:	de b7       	in	r29, 0x3e	; 62
    892a:	ea e0       	ldi	r30, 0x0A	; 10
    892c:	0c 94 1d 5b 	jmp	0xb63a	; 0xb63a <__epilogue_restores__+0x10>
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, lfen, ord, sum;
#endif

	res = dir_seek(dj, 0);			/* Rewind directory object */
    8930:	ce 01       	movw	r24, r28
    8932:	60 e0       	ldi	r22, 0x00	; 0
    8934:	70 e0       	ldi	r23, 0x00	; 0
    8936:	0e 94 81 3c 	call	0x7902	; 0x7902 <dir_seek>
    893a:	ac 01       	movw	r20, r24
	if (res != FR_OK) return res;
    893c:	00 97       	sbiw	r24, 0x00	; 0
    893e:	09 f4       	brne	.+2      	; 0x8942 <follow_path+0x27c>
    8940:	96 cf       	rjmp	.-212    	; 0x886e <follow_path+0x1a8>
    8942:	c0 cf       	rjmp	.-128    	; 0x88c4 <follow_path+0x1fe>
    8944:	40 e0       	ldi	r20, 0x00	; 0
    8946:	74 cf       	rjmp	.-280    	; 0x8830 <follow_path+0x16a>

00008948 <f_stat>:

FRESULT f_stat (
	const XCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    8948:	a4 e2       	ldi	r26, 0x24	; 36
    894a:	b0 e0       	ldi	r27, 0x00	; 0
    894c:	ea ea       	ldi	r30, 0xAA	; 170
    894e:	f4 e4       	ldi	r31, 0x44	; 68
    8950:	0c 94 03 5b 	jmp	0xb606	; 0xb606 <__prologue_saves__+0x14>
    8954:	8b a3       	std	Y+35, r24	; 0x23
    8956:	9c a3       	std	Y+36, r25	; 0x24
    8958:	6b 01       	movw	r12, r22
	FRESULT res;
	DIR dj;
	NAMEBUF(sfn, lfn);


	res = auto_mount(&path, &dj.fs, 0);
    895a:	6d e0       	ldi	r22, 0x0D	; 13
    895c:	e6 2e       	mov	r14, r22
    895e:	f1 2c       	mov	r15, r1
    8960:	ec 0e       	add	r14, r28
    8962:	fd 1e       	adc	r15, r29
    8964:	ce 01       	movw	r24, r28
    8966:	83 96       	adiw	r24, 0x23	; 35
    8968:	b7 01       	movw	r22, r14
    896a:	40 e0       	ldi	r20, 0x00	; 0
    896c:	0e 94 a1 39 	call	0x7342	; 0x7342 <auto_mount>
    8970:	8c 01       	movw	r16, r24
	if (res == FR_OK) {
    8972:	00 97       	sbiw	r24, 0x00	; 0
    8974:	b9 f4       	brne	.+46     	; 0x89a4 <f_stat+0x5c>
		INITBUF(dj, sfn, lfn);
    8976:	ce 01       	movw	r24, r28
    8978:	01 96       	adiw	r24, 0x01	; 1
    897a:	89 a3       	std	Y+33, r24	; 0x21
    897c:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);	/* Follow the file path */
    897e:	6b a1       	ldd	r22, Y+35	; 0x23
    8980:	7c a1       	ldd	r23, Y+36	; 0x24
    8982:	c7 01       	movw	r24, r14
    8984:	0e 94 63 43 	call	0x86c6	; 0x86c6 <follow_path>
    8988:	8c 01       	movw	r16, r24
		if (res == FR_OK) {				/* Follwo completed */
    898a:	00 97       	sbiw	r24, 0x00	; 0
    898c:	59 f4       	brne	.+22     	; 0x89a4 <f_stat+0x5c>
			if (dj.dir)	/* Found an object */
    898e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    8990:	98 a1       	ldd	r25, Y+32	; 0x20
    8992:	89 2b       	or	r24, r25
    8994:	19 f4       	brne	.+6      	; 0x899c <f_stat+0x54>
    8996:	06 e0       	ldi	r16, 0x06	; 6
    8998:	10 e0       	ldi	r17, 0x00	; 0
    899a:	04 c0       	rjmp	.+8      	; 0x89a4 <f_stat+0x5c>
				get_fileinfo(&dj, fno);
    899c:	c7 01       	movw	r24, r14
    899e:	b6 01       	movw	r22, r12
    89a0:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <get_fileinfo>
				res = FR_INVALID_NAME;
		}
	}

	LEAVE_FF(dj.fs, res);
}
    89a4:	c8 01       	movw	r24, r16
    89a6:	a4 96       	adiw	r28, 0x24	; 36
    89a8:	e8 e0       	ldi	r30, 0x08	; 8
    89aa:	0c 94 1f 5b 	jmp	0xb63e	; 0xb63e <__epilogue_restores__+0x14>

000089ae <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const XCHAR *path	/* Pointer to the directory path */
)
{
    89ae:	ae e0       	ldi	r26, 0x0E	; 14
    89b0:	b0 e0       	ldi	r27, 0x00	; 0
    89b2:	ed ed       	ldi	r30, 0xDD	; 221
    89b4:	f4 e4       	ldi	r31, 0x44	; 68
    89b6:	0c 94 07 5b 	jmp	0xb60e	; 0xb60e <__prologue_saves__+0x1c>
    89ba:	8c 01       	movw	r16, r24
    89bc:	6d 87       	std	Y+13, r22	; 0x0d
    89be:	7e 87       	std	Y+14, r23	; 0x0e
	FRESULT res;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = auto_mount(&path, &dj->fs, 0);
    89c0:	ce 01       	movw	r24, r28
    89c2:	0d 96       	adiw	r24, 0x0d	; 13
    89c4:	b8 01       	movw	r22, r16
    89c6:	40 e0       	ldi	r20, 0x00	; 0
    89c8:	0e 94 a1 39 	call	0x7342	; 0x7342 <auto_mount>
    89cc:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    89ce:	00 97       	sbiw	r24, 0x00	; 0
    89d0:	09 f0       	breq	.+2      	; 0x89d4 <f_opendir+0x26>
    89d2:	42 c0       	rjmp	.+132    	; 0x8a58 <f_opendir+0xaa>
		INITBUF((*dj), sfn, lfn);
    89d4:	ce 01       	movw	r24, r28
    89d6:	01 96       	adiw	r24, 0x01	; 1
    89d8:	d8 01       	movw	r26, r16
    89da:	54 96       	adiw	r26, 0x14	; 20
    89dc:	8d 93       	st	X+, r24
    89de:	9c 93       	st	X, r25
    89e0:	55 97       	sbiw	r26, 0x15	; 21
		res = follow_path(dj, path);			/* Follow the path to the directory */
    89e2:	6d 85       	ldd	r22, Y+13	; 0x0d
    89e4:	7e 85       	ldd	r23, Y+14	; 0x0e
    89e6:	c8 01       	movw	r24, r16
    89e8:	0e 94 63 43 	call	0x86c6	; 0x86c6 <follow_path>
    89ec:	9c 01       	movw	r18, r24
		if (res == FR_OK) {						/* Follow completed */
    89ee:	00 97       	sbiw	r24, 0x00	; 0
    89f0:	71 f5       	brne	.+92     	; 0x8a4e <f_opendir+0xa0>
			dir = dj->dir;
    89f2:	d8 01       	movw	r26, r16
    89f4:	52 96       	adiw	r26, 0x12	; 18
    89f6:	ed 91       	ld	r30, X+
    89f8:	fc 91       	ld	r31, X
    89fa:	53 97       	sbiw	r26, 0x13	; 19
			if (dir) {							/* It is not the root dir */
    89fc:	30 97       	sbiw	r30, 0x00	; 0
    89fe:	b9 f0       	breq	.+46     	; 0x8a2e <f_opendir+0x80>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    8a00:	83 85       	ldd	r24, Z+11	; 0x0b
    8a02:	84 ff       	sbrs	r24, 4
    8a04:	27 c0       	rjmp	.+78     	; 0x8a54 <f_opendir+0xa6>
					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    8a06:	84 89       	ldd	r24, Z+20	; 0x14
    8a08:	95 89       	ldd	r25, Z+21	; 0x15
    8a0a:	a0 e0       	ldi	r26, 0x00	; 0
    8a0c:	b0 e0       	ldi	r27, 0x00	; 0
    8a0e:	dc 01       	movw	r26, r24
    8a10:	99 27       	eor	r25, r25
    8a12:	88 27       	eor	r24, r24
    8a14:	22 8d       	ldd	r18, Z+26	; 0x1a
    8a16:	33 8d       	ldd	r19, Z+27	; 0x1b
    8a18:	40 e0       	ldi	r20, 0x00	; 0
    8a1a:	50 e0       	ldi	r21, 0x00	; 0
    8a1c:	82 2b       	or	r24, r18
    8a1e:	93 2b       	or	r25, r19
    8a20:	a4 2b       	or	r26, r20
    8a22:	b5 2b       	or	r27, r21
    8a24:	f8 01       	movw	r30, r16
    8a26:	86 83       	std	Z+6, r24	; 0x06
    8a28:	97 83       	std	Z+7, r25	; 0x07
    8a2a:	a0 87       	std	Z+8, r26	; 0x08
    8a2c:	b1 87       	std	Z+9, r27	; 0x09
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    8a2e:	d8 01       	movw	r26, r16
    8a30:	ed 91       	ld	r30, X+
    8a32:	fc 91       	ld	r31, X
    8a34:	11 97       	sbiw	r26, 0x01	; 1
    8a36:	85 81       	ldd	r24, Z+5	; 0x05
    8a38:	96 81       	ldd	r25, Z+6	; 0x06
    8a3a:	12 96       	adiw	r26, 0x02	; 2
    8a3c:	8d 93       	st	X+, r24
    8a3e:	9c 93       	st	X, r25
    8a40:	13 97       	sbiw	r26, 0x03	; 3
				res = dir_seek(dj, 0);			/* Rewind dir */
    8a42:	c8 01       	movw	r24, r16
    8a44:	60 e0       	ldi	r22, 0x00	; 0
    8a46:	70 e0       	ldi	r23, 0x00	; 0
    8a48:	0e 94 81 3c 	call	0x7902	; 0x7902 <dir_seek>
    8a4c:	9c 01       	movw	r18, r24
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    8a4e:	24 30       	cpi	r18, 0x04	; 4
    8a50:	31 05       	cpc	r19, r1
    8a52:	11 f4       	brne	.+4      	; 0x8a58 <f_opendir+0xaa>
    8a54:	25 e0       	ldi	r18, 0x05	; 5
    8a56:	30 e0       	ldi	r19, 0x00	; 0
	}

	LEAVE_FF(dj->fs, res);
}
    8a58:	c9 01       	movw	r24, r18
    8a5a:	2e 96       	adiw	r28, 0x0e	; 14
    8a5c:	e4 e0       	ldi	r30, 0x04	; 4
    8a5e:	0c 94 23 5b 	jmp	0xb646	; 0xb646 <__epilogue_restores__+0x1c>

00008a62 <f_chdir>:


FRESULT f_chdir (
	const XCHAR *path	/* Pointer to the directory path */
)
{
    8a62:	a4 e2       	ldi	r26, 0x24	; 36
    8a64:	b0 e0       	ldi	r27, 0x00	; 0
    8a66:	e7 e3       	ldi	r30, 0x37	; 55
    8a68:	f5 e4       	ldi	r31, 0x45	; 69
    8a6a:	0c 94 07 5b 	jmp	0xb60e	; 0xb60e <__prologue_saves__+0x1c>
    8a6e:	8b a3       	std	Y+35, r24	; 0x23
    8a70:	9c a3       	std	Y+36, r25	; 0x24
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = auto_mount(&path, &dj.fs, 0);
    8a72:	8e 01       	movw	r16, r28
    8a74:	03 5f       	subi	r16, 0xF3	; 243
    8a76:	1f 4f       	sbci	r17, 0xFF	; 255
    8a78:	ce 01       	movw	r24, r28
    8a7a:	83 96       	adiw	r24, 0x23	; 35
    8a7c:	b8 01       	movw	r22, r16
    8a7e:	40 e0       	ldi	r20, 0x00	; 0
    8a80:	0e 94 a1 39 	call	0x7342	; 0x7342 <auto_mount>
    8a84:	bc 01       	movw	r22, r24
	if (res == FR_OK) {
    8a86:	00 97       	sbiw	r24, 0x00	; 0
    8a88:	e9 f5       	brne	.+122    	; 0x8b04 <f_chdir+0xa2>
		INITBUF(dj, sfn, lfn);
    8a8a:	ce 01       	movw	r24, r28
    8a8c:	01 96       	adiw	r24, 0x01	; 1
    8a8e:	89 a3       	std	Y+33, r24	; 0x21
    8a90:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);		/* Follow the file path */
    8a92:	6b a1       	ldd	r22, Y+35	; 0x23
    8a94:	7c a1       	ldd	r23, Y+36	; 0x24
    8a96:	c8 01       	movw	r24, r16
    8a98:	0e 94 63 43 	call	0x86c6	; 0x86c6 <follow_path>
    8a9c:	bc 01       	movw	r22, r24
		if (res == FR_OK) {					/* Follow completed */
    8a9e:	00 97       	sbiw	r24, 0x00	; 0
    8aa0:	61 f5       	brne	.+88     	; 0x8afa <f_chdir+0x98>
			dir = dj.dir;					/* Pointer to the entry */
    8aa2:	2f 8d       	ldd	r18, Y+31	; 0x1f
    8aa4:	38 a1       	ldd	r19, Y+32	; 0x20
			if (!dir) {
    8aa6:	21 15       	cp	r18, r1
    8aa8:	31 05       	cpc	r19, r1
    8aaa:	39 f4       	brne	.+14     	; 0x8aba <f_chdir+0x58>
				dj.fs->cdir = 0;			/* No entry (root dir) */
    8aac:	ed 85       	ldd	r30, Y+13	; 0x0d
    8aae:	fe 85       	ldd	r31, Y+14	; 0x0e
    8ab0:	16 8a       	std	Z+22, r1	; 0x16
    8ab2:	17 8a       	std	Z+23, r1	; 0x17
    8ab4:	10 8e       	std	Z+24, r1	; 0x18
    8ab6:	11 8e       	std	Z+25, r1	; 0x19
    8ab8:	25 c0       	rjmp	.+74     	; 0x8b04 <f_chdir+0xa2>
			} else {
				if (dir[DIR_Attr] & AM_DIR)	/* Reached to the dir */
    8aba:	d9 01       	movw	r26, r18
    8abc:	1b 96       	adiw	r26, 0x0b	; 11
    8abe:	8c 91       	ld	r24, X
    8ac0:	1b 97       	sbiw	r26, 0x0b	; 11
    8ac2:	84 ff       	sbrs	r24, 4
    8ac4:	1d c0       	rjmp	.+58     	; 0x8b00 <f_chdir+0x9e>
					dj.fs->cdir = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    8ac6:	0d 85       	ldd	r16, Y+13	; 0x0d
    8ac8:	1e 85       	ldd	r17, Y+14	; 0x0e
    8aca:	54 96       	adiw	r26, 0x14	; 20
    8acc:	8d 91       	ld	r24, X+
    8ace:	9c 91       	ld	r25, X
    8ad0:	55 97       	sbiw	r26, 0x15	; 21
    8ad2:	a0 e0       	ldi	r26, 0x00	; 0
    8ad4:	b0 e0       	ldi	r27, 0x00	; 0
    8ad6:	dc 01       	movw	r26, r24
    8ad8:	99 27       	eor	r25, r25
    8ada:	88 27       	eor	r24, r24
    8adc:	f9 01       	movw	r30, r18
    8ade:	22 8d       	ldd	r18, Z+26	; 0x1a
    8ae0:	33 8d       	ldd	r19, Z+27	; 0x1b
    8ae2:	40 e0       	ldi	r20, 0x00	; 0
    8ae4:	50 e0       	ldi	r21, 0x00	; 0
    8ae6:	82 2b       	or	r24, r18
    8ae8:	93 2b       	or	r25, r19
    8aea:	a4 2b       	or	r26, r20
    8aec:	b5 2b       	or	r27, r21
    8aee:	f8 01       	movw	r30, r16
    8af0:	86 8b       	std	Z+22, r24	; 0x16
    8af2:	97 8b       	std	Z+23, r25	; 0x17
    8af4:	a0 8f       	std	Z+24, r26	; 0x18
    8af6:	b1 8f       	std	Z+25, r27	; 0x19
    8af8:	05 c0       	rjmp	.+10     	; 0x8b04 <f_chdir+0xa2>
				else
					res = FR_NO_PATH;		/* Could not reach the dir (it is a file) */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    8afa:	84 30       	cpi	r24, 0x04	; 4
    8afc:	91 05       	cpc	r25, r1
    8afe:	11 f4       	brne	.+4      	; 0x8b04 <f_chdir+0xa2>
    8b00:	65 e0       	ldi	r22, 0x05	; 5
    8b02:	70 e0       	ldi	r23, 0x00	; 0
	}

	LEAVE_FF(dj.fs, res);
}
    8b04:	cb 01       	movw	r24, r22
    8b06:	a4 96       	adiw	r28, 0x24	; 36
    8b08:	e4 e0       	ldi	r30, 0x04	; 4
    8b0a:	0c 94 23 5b 	jmp	0xb646	; 0xb646 <__epilogue_restores__+0x1c>

00008b0e <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    8b0e:	0f 93       	push	r16
    8b10:	1f 93       	push	r17
    8b12:	cf 93       	push	r28
    8b14:	df 93       	push	r29
    8b16:	ec 01       	movw	r28, r24
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
    8b18:	60 e0       	ldi	r22, 0x00	; 0
    8b1a:	70 e0       	ldi	r23, 0x00	; 0
    8b1c:	0e 94 81 3c 	call	0x7902	; 0x7902 <dir_seek>
    8b20:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    8b22:	00 97       	sbiw	r24, 0x00	; 0
    8b24:	e1 f5       	brne	.+120    	; 0x8b9e <dir_register+0x90>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    8b26:	4e 85       	ldd	r20, Y+14	; 0x0e
    8b28:	5f 85       	ldd	r21, Y+15	; 0x0f
    8b2a:	68 89       	ldd	r22, Y+16	; 0x10
    8b2c:	79 89       	ldd	r23, Y+17	; 0x11
    8b2e:	88 81       	ld	r24, Y
    8b30:	99 81       	ldd	r25, Y+1	; 0x01
    8b32:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <move_window>
    8b36:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
    8b38:	00 97       	sbiw	r24, 0x00	; 0
    8b3a:	89 f5       	brne	.+98     	; 0x8b9e <dir_register+0x90>
			c = *dj->dir;
    8b3c:	ea 89       	ldd	r30, Y+18	; 0x12
    8b3e:	fb 89       	ldd	r31, Y+19	; 0x13
    8b40:	e0 81       	ld	r30, Z
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
    8b42:	e5 3e       	cpi	r30, 0xE5	; 229
    8b44:	91 f1       	breq	.+100    	; 0x8baa <dir_register+0x9c>
    8b46:	ee 23       	and	r30, r30
    8b48:	81 f1       	breq	.+96     	; 0x8baa <dir_register+0x9c>
			res = dir_next(dj, TRUE);		/* Next entry with table streach */
    8b4a:	ce 01       	movw	r24, r28
    8b4c:	61 e0       	ldi	r22, 0x01	; 1
    8b4e:	70 e0       	ldi	r23, 0x00	; 0
    8b50:	0e 94 f7 41 	call	0x83ee	; 0x83ee <dir_next>
    8b54:	e5 cf       	rjmp	.-54     	; 0x8b20 <dir_register+0x12>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    8b56:	aa 89       	ldd	r26, Y+18	; 0x12
    8b58:	bb 89       	ldd	r27, Y+19	; 0x13
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    8b5a:	bd 01       	movw	r22, r26
    8b5c:	fd 01       	movw	r30, r26
	while (cnt--) *d++ = (char)val;
    8b5e:	cd 01       	movw	r24, r26
    8b60:	80 96       	adiw	r24, 0x20	; 32
    8b62:	01 c0       	rjmp	.+2      	; 0x8b66 <dir_register+0x58>
    8b64:	11 92       	st	Z+, r1
    8b66:	e8 17       	cp	r30, r24
    8b68:	f9 07       	cpc	r31, r25
    8b6a:	e1 f7       	brne	.-8      	; 0x8b64 <dir_register+0x56>

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    8b6c:	0c 89       	ldd	r16, Y+20	; 0x14
    8b6e:	1d 89       	ldd	r17, Y+21	; 0x15
	while (cnt--) *d++ = *s++;
    8b70:	a8 01       	movw	r20, r16
    8b72:	45 5f       	subi	r20, 0xF5	; 245
    8b74:	5f 4f       	sbci	r21, 0xFF	; 255
    8b76:	06 c0       	rjmp	.+12     	; 0x8b84 <dir_register+0x76>
    8b78:	f8 01       	movw	r30, r16
    8b7a:	81 91       	ld	r24, Z+
    8b7c:	8f 01       	movw	r16, r30
    8b7e:	fb 01       	movw	r30, r22
    8b80:	81 93       	st	Z+, r24
    8b82:	bf 01       	movw	r22, r30
    8b84:	04 17       	cp	r16, r20
    8b86:	15 07       	cpc	r17, r21
    8b88:	b9 f7       	brne	.-18     	; 0x8b78 <dir_register+0x6a>
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
			dir[DIR_NTres] = *(dj->fn+11) & 0x18;	/* Put NT flag */
    8b8a:	ec 89       	ldd	r30, Y+20	; 0x14
    8b8c:	fd 89       	ldd	r31, Y+21	; 0x15
    8b8e:	83 85       	ldd	r24, Z+11	; 0x0b
    8b90:	88 71       	andi	r24, 0x18	; 24
    8b92:	1c 96       	adiw	r26, 0x0c	; 12
    8b94:	8c 93       	st	X, r24
			dj->fs->wflag = 1;
    8b96:	e8 81       	ld	r30, Y
    8b98:	f9 81       	ldd	r31, Y+1	; 0x01
    8b9a:	81 e0       	ldi	r24, 0x01	; 1
    8b9c:	84 83       	std	Z+4, r24	; 0x04
		}
	}

	return res;
}
    8b9e:	c9 01       	movw	r24, r18
    8ba0:	df 91       	pop	r29
    8ba2:	cf 91       	pop	r28
    8ba4:	1f 91       	pop	r17
    8ba6:	0f 91       	pop	r16
    8ba8:	08 95       	ret
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    8baa:	4e 85       	ldd	r20, Y+14	; 0x0e
    8bac:	5f 85       	ldd	r21, Y+15	; 0x0f
    8bae:	68 89       	ldd	r22, Y+16	; 0x10
    8bb0:	79 89       	ldd	r23, Y+17	; 0x11
    8bb2:	88 81       	ld	r24, Y
    8bb4:	99 81       	ldd	r25, Y+1	; 0x01
    8bb6:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <move_window>
    8bba:	9c 01       	movw	r18, r24
		if (res == FR_OK) {
    8bbc:	00 97       	sbiw	r24, 0x00	; 0
    8bbe:	59 f2       	breq	.-106    	; 0x8b56 <dir_register+0x48>
    8bc0:	ee cf       	rjmp	.-36     	; 0x8b9e <dir_register+0x90>

00008bc2 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    8bc2:	cf 93       	push	r28
    8bc4:	df 93       	push	r29
    8bc6:	ec 01       	movw	r28, r24
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_seek(dj, dj->index);
    8bc8:	6c 81       	ldd	r22, Y+4	; 0x04
    8bca:	7d 81       	ldd	r23, Y+5	; 0x05
    8bcc:	0e 94 81 3c 	call	0x7902	; 0x7902 <dir_seek>
    8bd0:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    8bd2:	00 97       	sbiw	r24, 0x00	; 0
    8bd4:	99 f4       	brne	.+38     	; 0x8bfc <dir_remove+0x3a>
		res = move_window(dj->fs, dj->sect);
    8bd6:	4e 85       	ldd	r20, Y+14	; 0x0e
    8bd8:	5f 85       	ldd	r21, Y+15	; 0x0f
    8bda:	68 89       	ldd	r22, Y+16	; 0x10
    8bdc:	79 89       	ldd	r23, Y+17	; 0x11
    8bde:	88 81       	ld	r24, Y
    8be0:	99 81       	ldd	r25, Y+1	; 0x01
    8be2:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <move_window>
    8be6:	9c 01       	movw	r18, r24
		if (res == FR_OK) {
    8be8:	00 97       	sbiw	r24, 0x00	; 0
    8bea:	41 f4       	brne	.+16     	; 0x8bfc <dir_remove+0x3a>
			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
    8bec:	ea 89       	ldd	r30, Y+18	; 0x12
    8bee:	fb 89       	ldd	r31, Y+19	; 0x13
    8bf0:	85 ee       	ldi	r24, 0xE5	; 229
    8bf2:	80 83       	st	Z, r24
			dj->fs->wflag = 1;
    8bf4:	e8 81       	ld	r30, Y
    8bf6:	f9 81       	ldd	r31, Y+1	; 0x01
    8bf8:	81 e0       	ldi	r24, 0x01	; 1
    8bfa:	84 83       	std	Z+4, r24	; 0x04
		}
	}
#endif

	return res;
}
    8bfc:	c9 01       	movw	r24, r18
    8bfe:	df 91       	pop	r29
    8c00:	cf 91       	pop	r28
    8c02:	08 95       	ret

00008c04 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    8c04:	0f 93       	push	r16
    8c06:	cf 93       	push	r28
    8c08:	df 93       	push	r29
    8c0a:	ec 01       	movw	r28, r24
	FRESULT res;


	res = move_window(fs, 0);
    8c0c:	40 e0       	ldi	r20, 0x00	; 0
    8c0e:	50 e0       	ldi	r21, 0x00	; 0
    8c10:	60 e0       	ldi	r22, 0x00	; 0
    8c12:	70 e0       	ldi	r23, 0x00	; 0
    8c14:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <move_window>
    8c18:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    8c1a:	00 97       	sbiw	r24, 0x00	; 0
    8c1c:	09 f0       	breq	.+2      	; 0x8c20 <sync+0x1c>
    8c1e:	60 c0       	rjmp	.+192    	; 0x8ce0 <sync+0xdc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    8c20:	88 81       	ld	r24, Y
    8c22:	83 30       	cpi	r24, 0x03	; 3
    8c24:	09 f0       	breq	.+2      	; 0x8c28 <sync+0x24>
    8c26:	51 c0       	rjmp	.+162    	; 0x8cca <sync+0xc6>
    8c28:	89 85       	ldd	r24, Y+9	; 0x09
    8c2a:	88 23       	and	r24, r24
    8c2c:	09 f4       	brne	.+2      	; 0x8c30 <sync+0x2c>
    8c2e:	4d c0       	rjmp	.+154    	; 0x8cca <sync+0xc6>
			fs->winsect = 0;
    8c30:	1e a6       	std	Y+46, r1	; 0x2e
    8c32:	1f a6       	std	Y+47, r1	; 0x2f
    8c34:	18 aa       	std	Y+48, r1	; 0x30
    8c36:	19 aa       	std	Y+49, r1	; 0x31
			mem_set(fs->win, 0, 512);
    8c38:	be 01       	movw	r22, r28
    8c3a:	6e 5c       	subi	r22, 0xCE	; 206
    8c3c:	7f 4f       	sbci	r23, 0xFF	; 255
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    8c3e:	fb 01       	movw	r30, r22
	while (cnt--) *d++ = (char)val;
    8c40:	ce 01       	movw	r24, r28
    8c42:	8e 5c       	subi	r24, 0xCE	; 206
    8c44:	9d 4f       	sbci	r25, 0xFD	; 253
    8c46:	01 c0       	rjmp	.+2      	; 0x8c4a <sync+0x46>
    8c48:	11 92       	st	Z+, r1
    8c4a:	e8 17       	cp	r30, r24
    8c4c:	f9 07       	cpc	r31, r25
    8c4e:	e1 f7       	brne	.-8      	; 0x8c48 <sync+0x44>
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    8c50:	c0 5d       	subi	r28, 0xD0	; 208
    8c52:	dd 4f       	sbci	r29, 0xFD	; 253
    8c54:	85 e5       	ldi	r24, 0x55	; 85
    8c56:	9a ea       	ldi	r25, 0xAA	; 170
    8c58:	88 83       	st	Y, r24
    8c5a:	99 83       	std	Y+1, r25	; 0x01
    8c5c:	c0 53       	subi	r28, 0x30	; 48
    8c5e:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    8c60:	82 e5       	ldi	r24, 0x52	; 82
    8c62:	92 e5       	ldi	r25, 0x52	; 82
    8c64:	a1 e6       	ldi	r26, 0x61	; 97
    8c66:	b1 e4       	ldi	r27, 0x41	; 65
    8c68:	8a ab       	std	Y+50, r24	; 0x32
    8c6a:	9b ab       	std	Y+51, r25	; 0x33
    8c6c:	ac ab       	std	Y+52, r26	; 0x34
    8c6e:	bd ab       	std	Y+53, r27	; 0x35
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    8c70:	ca 5e       	subi	r28, 0xEA	; 234
    8c72:	dd 4f       	sbci	r29, 0xFD	; 253
    8c74:	82 e7       	ldi	r24, 0x72	; 114
    8c76:	92 e7       	ldi	r25, 0x72	; 114
    8c78:	a1 e4       	ldi	r26, 0x41	; 65
    8c7a:	b1 e6       	ldi	r27, 0x61	; 97
    8c7c:	88 83       	st	Y, r24
    8c7e:	99 83       	std	Y+1, r25	; 0x01
    8c80:	aa 83       	std	Y+2, r26	; 0x02
    8c82:	bb 83       	std	Y+3, r27	; 0x03
    8c84:	c6 51       	subi	r28, 0x16	; 22
    8c86:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    8c88:	8e 85       	ldd	r24, Y+14	; 0x0e
    8c8a:	9f 85       	ldd	r25, Y+15	; 0x0f
    8c8c:	a8 89       	ldd	r26, Y+16	; 0x10
    8c8e:	b9 89       	ldd	r27, Y+17	; 0x11
    8c90:	c6 5e       	subi	r28, 0xE6	; 230
    8c92:	dd 4f       	sbci	r29, 0xFD	; 253
    8c94:	88 83       	st	Y, r24
    8c96:	99 83       	std	Y+1, r25	; 0x01
    8c98:	aa 83       	std	Y+2, r26	; 0x02
    8c9a:	bb 83       	std	Y+3, r27	; 0x03
    8c9c:	ca 51       	subi	r28, 0x1A	; 26
    8c9e:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    8ca0:	8a 85       	ldd	r24, Y+10	; 0x0a
    8ca2:	9b 85       	ldd	r25, Y+11	; 0x0b
    8ca4:	ac 85       	ldd	r26, Y+12	; 0x0c
    8ca6:	bd 85       	ldd	r27, Y+13	; 0x0d
    8ca8:	c2 5e       	subi	r28, 0xE2	; 226
    8caa:	dd 4f       	sbci	r29, 0xFD	; 253
    8cac:	88 83       	st	Y, r24
    8cae:	99 83       	std	Y+1, r25	; 0x01
    8cb0:	aa 83       	std	Y+2, r26	; 0x02
    8cb2:	bb 83       	std	Y+3, r27	; 0x03
    8cb4:	ce 51       	subi	r28, 0x1E	; 30
    8cb6:	d2 40       	sbci	r29, 0x02	; 2
			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
    8cb8:	2a 89       	ldd	r18, Y+18	; 0x12
    8cba:	3b 89       	ldd	r19, Y+19	; 0x13
    8cbc:	4c 89       	ldd	r20, Y+20	; 0x14
    8cbe:	5d 89       	ldd	r21, Y+21	; 0x15
    8cc0:	89 81       	ldd	r24, Y+1	; 0x01
    8cc2:	01 e0       	ldi	r16, 0x01	; 1
    8cc4:	0e 94 48 54 	call	0xa890	; 0xa890 <disk_write>
			fs->fsi_flag = 0;
    8cc8:	19 86       	std	Y+9, r1	; 0x09
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
    8cca:	89 81       	ldd	r24, Y+1	; 0x01
    8ccc:	60 e0       	ldi	r22, 0x00	; 0
    8cce:	40 e0       	ldi	r20, 0x00	; 0
    8cd0:	50 e0       	ldi	r21, 0x00	; 0
    8cd2:	0e 94 c6 54 	call	0xa98c	; 0xa98c <disk_ioctl>
    8cd6:	00 97       	sbiw	r24, 0x00	; 0
    8cd8:	11 f0       	breq	.+4      	; 0x8cde <sync+0xda>
    8cda:	81 e0       	ldi	r24, 0x01	; 1
    8cdc:	90 e0       	ldi	r25, 0x00	; 0
    8cde:	9c 01       	movw	r18, r24
			res = FR_DISK_ERR;
	}

	return res;
}
    8ce0:	c9 01       	movw	r24, r18
    8ce2:	df 91       	pop	r29
    8ce4:	cf 91       	pop	r28
    8ce6:	0f 91       	pop	r16
    8ce8:	08 95       	ret

00008cea <f_utime>:

FRESULT f_utime (
	const XCHAR *path,	/* Pointer to the file/directory name */
	const FILINFO *fno	/* Pointer to the timestamp to be set */
)
{
    8cea:	a4 e2       	ldi	r26, 0x24	; 36
    8cec:	b0 e0       	ldi	r27, 0x00	; 0
    8cee:	eb e7       	ldi	r30, 0x7B	; 123
    8cf0:	f6 e4       	ldi	r31, 0x46	; 70
    8cf2:	0c 94 05 5b 	jmp	0xb60a	; 0xb60a <__prologue_saves__+0x18>
    8cf6:	8b a3       	std	Y+35, r24	; 0x23
    8cf8:	9c a3       	std	Y+36, r25	; 0x24
    8cfa:	7b 01       	movw	r14, r22
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = auto_mount(&path, &dj.fs, 1);
    8cfc:	8e 01       	movw	r16, r28
    8cfe:	03 5f       	subi	r16, 0xF3	; 243
    8d00:	1f 4f       	sbci	r17, 0xFF	; 255
    8d02:	ce 01       	movw	r24, r28
    8d04:	83 96       	adiw	r24, 0x23	; 35
    8d06:	b8 01       	movw	r22, r16
    8d08:	41 e0       	ldi	r20, 0x01	; 1
    8d0a:	0e 94 a1 39 	call	0x7342	; 0x7342 <auto_mount>
    8d0e:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    8d10:	00 97       	sbiw	r24, 0x00	; 0
    8d12:	69 f5       	brne	.+90     	; 0x8d6e <f_utime+0x84>
		INITBUF(dj, sfn, lfn);
    8d14:	ce 01       	movw	r24, r28
    8d16:	01 96       	adiw	r24, 0x01	; 1
    8d18:	89 a3       	std	Y+33, r24	; 0x21
    8d1a:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);	/* Follow the file path */
    8d1c:	6b a1       	ldd	r22, Y+35	; 0x23
    8d1e:	7c a1       	ldd	r23, Y+36	; 0x24
    8d20:	c8 01       	movw	r24, r16
    8d22:	0e 94 63 43 	call	0x86c6	; 0x86c6 <follow_path>
    8d26:	9c 01       	movw	r18, r24
		if (_FS_RPATH && res == FR_OK && (dj.fn[11] & NS_DOT))
    8d28:	00 97       	sbiw	r24, 0x00	; 0
    8d2a:	09 f5       	brne	.+66     	; 0x8d6e <f_utime+0x84>
    8d2c:	e9 a1       	ldd	r30, Y+33	; 0x21
    8d2e:	fa a1       	ldd	r31, Y+34	; 0x22
    8d30:	83 85       	ldd	r24, Z+11	; 0x0b
    8d32:	85 fd       	sbrc	r24, 5
    8d34:	1a c0       	rjmp	.+52     	; 0x8d6a <f_utime+0x80>
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
    8d36:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8d38:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {				/* Root directory */
    8d3a:	30 97       	sbiw	r30, 0x00	; 0
    8d3c:	b1 f0       	breq	.+44     	; 0x8d6a <f_utime+0x80>
				res = FR_INVALID_NAME;
			} else {				/* File or sub-directory */
				ST_WORD(dir+DIR_WrtTime, fno->ftime);
    8d3e:	d7 01       	movw	r26, r14
    8d40:	16 96       	adiw	r26, 0x06	; 6
    8d42:	8d 91       	ld	r24, X+
    8d44:	9c 91       	ld	r25, X
    8d46:	17 97       	sbiw	r26, 0x07	; 7
    8d48:	86 8b       	std	Z+22, r24	; 0x16
    8d4a:	97 8b       	std	Z+23, r25	; 0x17
				ST_WORD(dir+DIR_WrtDate, fno->fdate);
    8d4c:	14 96       	adiw	r26, 0x04	; 4
    8d4e:	8d 91       	ld	r24, X+
    8d50:	9c 91       	ld	r25, X
    8d52:	15 97       	sbiw	r26, 0x05	; 5
    8d54:	80 8f       	std	Z+24, r24	; 0x18
    8d56:	91 8f       	std	Z+25, r25	; 0x19
				dj.fs->wflag = 1;
    8d58:	ed 85       	ldd	r30, Y+13	; 0x0d
    8d5a:	fe 85       	ldd	r31, Y+14	; 0x0e
    8d5c:	81 e0       	ldi	r24, 0x01	; 1
    8d5e:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    8d60:	cf 01       	movw	r24, r30
    8d62:	0e 94 02 46 	call	0x8c04	; 0x8c04 <sync>
    8d66:	9c 01       	movw	r18, r24
    8d68:	02 c0       	rjmp	.+4      	; 0x8d6e <f_utime+0x84>
    8d6a:	26 e0       	ldi	r18, 0x06	; 6
    8d6c:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    8d6e:	c9 01       	movw	r24, r18
    8d70:	a4 96       	adiw	r28, 0x24	; 36
    8d72:	e6 e0       	ldi	r30, 0x06	; 6
    8d74:	0c 94 21 5b 	jmp	0xb642	; 0xb642 <__epilogue_restores__+0x18>

00008d78 <f_chmod>:
FRESULT f_chmod (
	const XCHAR *path,	/* Pointer to the file path */
	BYTE value,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    8d78:	a4 e2       	ldi	r26, 0x24	; 36
    8d7a:	b0 e0       	ldi	r27, 0x00	; 0
    8d7c:	e2 ec       	ldi	r30, 0xC2	; 194
    8d7e:	f6 e4       	ldi	r31, 0x46	; 70
    8d80:	0c 94 05 5b 	jmp	0xb60a	; 0xb60a <__prologue_saves__+0x18>
    8d84:	8b a3       	std	Y+35, r24	; 0x23
    8d86:	9c a3       	std	Y+36, r25	; 0x24
    8d88:	e6 2e       	mov	r14, r22
    8d8a:	f4 2e       	mov	r15, r20
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = auto_mount(&path, &dj.fs, 1);
    8d8c:	8e 01       	movw	r16, r28
    8d8e:	03 5f       	subi	r16, 0xF3	; 243
    8d90:	1f 4f       	sbci	r17, 0xFF	; 255
    8d92:	ce 01       	movw	r24, r28
    8d94:	83 96       	adiw	r24, 0x23	; 35
    8d96:	b8 01       	movw	r22, r16
    8d98:	41 e0       	ldi	r20, 0x01	; 1
    8d9a:	0e 94 a1 39 	call	0x7342	; 0x7342 <auto_mount>
    8d9e:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    8da0:	00 97       	sbiw	r24, 0x00	; 0
    8da2:	49 f5       	brne	.+82     	; 0x8df6 <f_chmod+0x7e>
		INITBUF(dj, sfn, lfn);
    8da4:	ce 01       	movw	r24, r28
    8da6:	01 96       	adiw	r24, 0x01	; 1
    8da8:	89 a3       	std	Y+33, r24	; 0x21
    8daa:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);		/* Follow the file path */
    8dac:	6b a1       	ldd	r22, Y+35	; 0x23
    8dae:	7c a1       	ldd	r23, Y+36	; 0x24
    8db0:	c8 01       	movw	r24, r16
    8db2:	0e 94 63 43 	call	0x86c6	; 0x86c6 <follow_path>
    8db6:	9c 01       	movw	r18, r24
		if (_FS_RPATH && res == FR_OK && (dj.fn[11] & NS_DOT))
    8db8:	00 97       	sbiw	r24, 0x00	; 0
    8dba:	e9 f4       	brne	.+58     	; 0x8df6 <f_chmod+0x7e>
    8dbc:	e9 a1       	ldd	r30, Y+33	; 0x21
    8dbe:	fa a1       	ldd	r31, Y+34	; 0x22
    8dc0:	83 85       	ldd	r24, Z+11	; 0x0b
    8dc2:	85 fd       	sbrc	r24, 5
    8dc4:	16 c0       	rjmp	.+44     	; 0x8df2 <f_chmod+0x7a>
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
    8dc6:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8dc8:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {						/* Is it a root directory? */
    8dca:	30 97       	sbiw	r30, 0x00	; 0
    8dcc:	91 f0       	breq	.+36     	; 0x8df2 <f_chmod+0x7a>
				res = FR_INVALID_NAME;
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
    8dce:	9f 2d       	mov	r25, r15
    8dd0:	97 72       	andi	r25, 0x27	; 39
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    8dd2:	89 2f       	mov	r24, r25
    8dd4:	80 95       	com	r24
    8dd6:	23 85       	ldd	r18, Z+11	; 0x0b
    8dd8:	82 23       	and	r24, r18
    8dda:	9e 21       	and	r25, r14
    8ddc:	89 2b       	or	r24, r25
    8dde:	83 87       	std	Z+11, r24	; 0x0b
				dj.fs->wflag = 1;
    8de0:	ed 85       	ldd	r30, Y+13	; 0x0d
    8de2:	fe 85       	ldd	r31, Y+14	; 0x0e
    8de4:	81 e0       	ldi	r24, 0x01	; 1
    8de6:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    8de8:	cf 01       	movw	r24, r30
    8dea:	0e 94 02 46 	call	0x8c04	; 0x8c04 <sync>
    8dee:	9c 01       	movw	r18, r24
    8df0:	02 c0       	rjmp	.+4      	; 0x8df6 <f_chmod+0x7e>
    8df2:	26 e0       	ldi	r18, 0x06	; 6
    8df4:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    8df6:	c9 01       	movw	r24, r18
    8df8:	a4 96       	adiw	r28, 0x24	; 36
    8dfa:	e6 e0       	ldi	r30, 0x06	; 6
    8dfc:	0c 94 21 5b 	jmp	0xb642	; 0xb642 <__epilogue_restores__+0x18>

00008e00 <f_rename>:

FRESULT f_rename (
	const XCHAR *path_old,	/* Pointer to the old name */
	const XCHAR *path_new	/* Pointer to the new name */
)
{
    8e00:	af e4       	ldi	r26, 0x4F	; 79
    8e02:	b0 e0       	ldi	r27, 0x00	; 0
    8e04:	e6 e0       	ldi	r30, 0x06	; 6
    8e06:	f7 e4       	ldi	r31, 0x47	; 71
    8e08:	0c 94 03 5b 	jmp	0xb606	; 0xb606 <__prologue_saves__+0x14>
    8e0c:	8e 01       	movw	r16, r28
    8e0e:	02 5b       	subi	r16, 0xB2	; 178
    8e10:	1f 4f       	sbci	r17, 0xFF	; 255
    8e12:	d8 01       	movw	r26, r16
    8e14:	8d 93       	st	X+, r24
    8e16:	9c 93       	st	X, r25
    8e18:	6b 01       	movw	r12, r22
	NAMEBUF(sfn, lfn);
	BYTE buf[21], *dir;
	DWORD dw;


	INITBUF(dj_old, sfn, lfn);
    8e1a:	ce 01       	movw	r24, r28
    8e1c:	01 96       	adiw	r24, 0x01	; 1
    8e1e:	8e ab       	std	Y+54, r24	; 0x36
    8e20:	9f ab       	std	Y+55, r25	; 0x37
	res = auto_mount(&path_old, &dj_old.fs, 1);
    8e22:	32 e2       	ldi	r19, 0x22	; 34
    8e24:	e3 2e       	mov	r14, r19
    8e26:	f1 2c       	mov	r15, r1
    8e28:	ec 0e       	add	r14, r28
    8e2a:	fd 1e       	adc	r15, r29
    8e2c:	c8 01       	movw	r24, r16
    8e2e:	b7 01       	movw	r22, r14
    8e30:	41 e0       	ldi	r20, 0x01	; 1
    8e32:	0e 94 a1 39 	call	0x7342	; 0x7342 <auto_mount>
    8e36:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    8e38:	00 97       	sbiw	r24, 0x00	; 0
    8e3a:	09 f0       	breq	.+2      	; 0x8e3e <f_rename+0x3e>
    8e3c:	f0 c0       	rjmp	.+480    	; 0x901e <f_rename+0x21e>
		dj_new.fs = dj_old.fs;
    8e3e:	8a a1       	ldd	r24, Y+34	; 0x22
    8e40:	9b a1       	ldd	r25, Y+35	; 0x23
    8e42:	88 af       	std	Y+56, r24	; 0x38
    8e44:	99 af       	std	Y+57, r25	; 0x39
		res = follow_path(&dj_old, path_old);	/* Check old object */
    8e46:	f8 01       	movw	r30, r16
    8e48:	60 81       	ld	r22, Z
    8e4a:	71 81       	ldd	r23, Z+1	; 0x01
    8e4c:	c7 01       	movw	r24, r14
    8e4e:	0e 94 63 43 	call	0x86c6	; 0x86c6 <follow_path>
    8e52:	9c 01       	movw	r18, r24
		if (_FS_RPATH && res == FR_OK && (dj_old.fn[11] & NS_DOT))
    8e54:	00 97       	sbiw	r24, 0x00	; 0
    8e56:	09 f0       	breq	.+2      	; 0x8e5a <f_rename+0x5a>
    8e58:	e2 c0       	rjmp	.+452    	; 0x901e <f_rename+0x21e>
    8e5a:	ee a9       	ldd	r30, Y+54	; 0x36
    8e5c:	ff a9       	ldd	r31, Y+55	; 0x37
    8e5e:	83 85       	ldd	r24, Z+11	; 0x0b
    8e60:	85 ff       	sbrs	r24, 5
    8e62:	03 c0       	rjmp	.+6      	; 0x8e6a <f_rename+0x6a>
    8e64:	26 e0       	ldi	r18, 0x06	; 6
    8e66:	30 e0       	ldi	r19, 0x00	; 0
    8e68:	da c0       	rjmp	.+436    	; 0x901e <f_rename+0x21e>
			res = FR_INVALID_NAME;
	}
	if (res != FR_OK) LEAVE_FF(dj_old.fs, res);	/* The old object is not found */

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
    8e6a:	8c a9       	ldd	r24, Y+52	; 0x34
    8e6c:	9d a9       	ldd	r25, Y+53	; 0x35
    8e6e:	00 97       	sbiw	r24, 0x00	; 0
    8e70:	19 f4       	brne	.+6      	; 0x8e78 <f_rename+0x78>
    8e72:	24 e0       	ldi	r18, 0x04	; 4
    8e74:	30 e0       	ldi	r19, 0x00	; 0
    8e76:	d3 c0       	rjmp	.+422    	; 0x901e <f_rename+0x21e>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    8e78:	de 01       	movw	r26, r28
    8e7a:	1d 96       	adiw	r26, 0x0d	; 13
    8e7c:	fc 01       	movw	r30, r24
    8e7e:	02 c0       	rjmp	.+4      	; 0x8e84 <f_rename+0x84>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    8e80:	82 85       	ldd	r24, Z+10	; 0x0a
    8e82:	8d 93       	st	X+, r24
    8e84:	31 96       	adiw	r30, 0x01	; 1
    8e86:	ae 15       	cp	r26, r14
    8e88:	bf 05       	cpc	r27, r15
    8e8a:	d1 f7       	brne	.-12     	; 0x8e80 <f_rename+0x80>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    8e8c:	de 01       	movw	r26, r28
    8e8e:	d8 96       	adiw	r26, 0x38	; 56
	const char *s = (const char *)src;
    8e90:	f7 01       	movw	r30, r14
	while (cnt--) *d++ = *s++;
    8e92:	9d 01       	movw	r18, r26
    8e94:	02 c0       	rjmp	.+4      	; 0x8e9a <f_rename+0x9a>
    8e96:	81 91       	ld	r24, Z+
    8e98:	8d 93       	st	X+, r24
    8e9a:	e2 17       	cp	r30, r18
    8e9c:	f3 07       	cpc	r31, r19
    8e9e:	d9 f7       	brne	.-10     	; 0x8e96 <f_rename+0x96>

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
	mem_cpy(buf, dj_old.dir+DIR_Attr, 21);		/* Save the object information */

	mem_cpy(&dj_new, &dj_old, sizeof(DIR));
	res = follow_path(&dj_new, path_new);		/* Check new object */
    8ea0:	8e 01       	movw	r16, r28
    8ea2:	08 5c       	subi	r16, 0xC8	; 200
    8ea4:	1f 4f       	sbci	r17, 0xFF	; 255
    8ea6:	c8 01       	movw	r24, r16
    8ea8:	b6 01       	movw	r22, r12
    8eaa:	0e 94 63 43 	call	0x86c6	; 0x86c6 <follow_path>
    8eae:	9c 01       	movw	r18, r24
	if (res == FR_OK) res = FR_EXIST;			/* The new object name is already existing */
    8eb0:	00 97       	sbiw	r24, 0x00	; 0
    8eb2:	19 f4       	brne	.+6      	; 0x8eba <f_rename+0xba>
    8eb4:	28 e0       	ldi	r18, 0x08	; 8
    8eb6:	30 e0       	ldi	r19, 0x00	; 0
    8eb8:	b2 c0       	rjmp	.+356    	; 0x901e <f_rename+0x21e>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
    8eba:	84 30       	cpi	r24, 0x04	; 4
    8ebc:	91 05       	cpc	r25, r1
    8ebe:	09 f0       	breq	.+2      	; 0x8ec2 <f_rename+0xc2>
    8ec0:	ae c0       	rjmp	.+348    	; 0x901e <f_rename+0x21e>
		res = dir_register(&dj_new);			/* Register the new object */
    8ec2:	c8 01       	movw	r24, r16
    8ec4:	0e 94 87 45 	call	0x8b0e	; 0x8b0e <dir_register>
    8ec8:	9c 01       	movw	r18, r24
		if (res == FR_OK) {
    8eca:	00 97       	sbiw	r24, 0x00	; 0
    8ecc:	09 f0       	breq	.+2      	; 0x8ed0 <f_rename+0xd0>
    8ece:	a7 c0       	rjmp	.+334    	; 0x901e <f_rename+0x21e>
			dir = dj_new.dir;					/* Copy object information into new entry */
    8ed0:	fe 01       	movw	r30, r28
    8ed2:	e6 5b       	subi	r30, 0xB6	; 182
    8ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    8ed6:	20 81       	ld	r18, Z
    8ed8:	31 81       	ldd	r19, Z+1	; 0x01

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    8eda:	de 01       	movw	r26, r28
    8edc:	1f 96       	adiw	r26, 0x0f	; 15
    8ede:	f9 01       	movw	r30, r18
    8ee0:	02 c0       	rjmp	.+4      	; 0x8ee6 <f_rename+0xe6>
	while (cnt--) *d++ = *s++;
    8ee2:	8d 91       	ld	r24, X+
    8ee4:	84 87       	std	Z+12, r24	; 0x0c
    8ee6:	31 96       	adiw	r30, 0x01	; 1
    8ee8:	ae 15       	cp	r26, r14
    8eea:	bf 05       	cpc	r27, r15
    8eec:	d1 f7       	brne	.-12     	; 0x8ee2 <f_rename+0xe2>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
		res = dir_register(&dj_new);			/* Register the new object */
		if (res == FR_OK) {
			dir = dj_new.dir;					/* Copy object information into new entry */
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
    8eee:	8d 85       	ldd	r24, Y+13	; 0x0d
    8ef0:	80 62       	ori	r24, 0x20	; 32
    8ef2:	d9 01       	movw	r26, r18
    8ef4:	1b 96       	adiw	r26, 0x0b	; 11
    8ef6:	8c 93       	st	X, r24
    8ef8:	1b 97       	sbiw	r26, 0x0b	; 11
			dj_old.fs->wflag = 1;
    8efa:	ea a1       	ldd	r30, Y+34	; 0x22
    8efc:	fb a1       	ldd	r31, Y+35	; 0x23
    8efe:	81 e0       	ldi	r24, 0x01	; 1
    8f00:	84 83       	std	Z+4, r24	; 0x04
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
    8f02:	1b 96       	adiw	r26, 0x0b	; 11
    8f04:	8c 91       	ld	r24, X
    8f06:	1b 97       	sbiw	r26, 0x0b	; 11
    8f08:	84 ff       	sbrs	r24, 4
    8f0a:	7a c0       	rjmp	.+244    	; 0x9000 <f_rename+0x200>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
    8f0c:	c8 ac       	ldd	r12, Y+56	; 0x38
    8f0e:	d9 ac       	ldd	r13, Y+57	; 0x39
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    8f10:	5a 96       	adiw	r26, 0x1a	; 26
    8f12:	8d 91       	ld	r24, X+
    8f14:	9c 91       	ld	r25, X
    8f16:	5b 97       	sbiw	r26, 0x1b	; 27
    8f18:	54 96       	adiw	r26, 0x14	; 20
    8f1a:	2d 91       	ld	r18, X+
    8f1c:	3c 91       	ld	r19, X
    8f1e:	55 97       	sbiw	r26, 0x15	; 21
    8f20:	82 2b       	or	r24, r18
    8f22:	93 2b       	or	r25, r19
    8f24:	7c 01       	movw	r14, r24
    8f26:	00 e0       	ldi	r16, 0x00	; 0
    8f28:	10 e0       	ldi	r17, 0x00	; 0
    8f2a:	8e ef       	ldi	r24, 0xFE	; 254
    8f2c:	9f ef       	ldi	r25, 0xFF	; 255
    8f2e:	af ef       	ldi	r26, 0xFF	; 255
    8f30:	bf ef       	ldi	r27, 0xFF	; 255
    8f32:	e8 0e       	add	r14, r24
    8f34:	f9 1e       	adc	r15, r25
    8f36:	0a 1f       	adc	r16, r26
    8f38:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    8f3a:	f6 01       	movw	r30, r12
    8f3c:	86 8d       	ldd	r24, Z+30	; 0x1e
    8f3e:	97 8d       	ldd	r25, Z+31	; 0x1f
    8f40:	a0 a1       	ldd	r26, Z+32	; 0x20
    8f42:	b1 a1       	ldd	r27, Z+33	; 0x21
    8f44:	02 97       	sbiw	r24, 0x02	; 2
    8f46:	a1 09       	sbc	r26, r1
    8f48:	b1 09       	sbc	r27, r1
    8f4a:	e8 16       	cp	r14, r24
    8f4c:	f9 06       	cpc	r15, r25
    8f4e:	0a 07       	cpc	r16, r26
    8f50:	1b 07       	cpc	r17, r27
    8f52:	08 f0       	brcs	.+2      	; 0x8f56 <f_rename+0x156>
    8f54:	62 c0       	rjmp	.+196    	; 0x901a <f_rename+0x21a>
	return clst * fs->csize + fs->database;
    8f56:	22 81       	ldd	r18, Z+2	; 0x02
    8f58:	30 e0       	ldi	r19, 0x00	; 0
    8f5a:	40 e0       	ldi	r20, 0x00	; 0
    8f5c:	50 e0       	ldi	r21, 0x00	; 0
    8f5e:	c8 01       	movw	r24, r16
    8f60:	b7 01       	movw	r22, r14
    8f62:	0e 94 76 5a 	call	0xb4ec	; 0xb4ec <__mulsi3>
    8f66:	ab 01       	movw	r20, r22
    8f68:	bc 01       	movw	r22, r24
    8f6a:	f6 01       	movw	r30, r12
    8f6c:	82 a5       	ldd	r24, Z+42	; 0x2a
    8f6e:	93 a5       	ldd	r25, Z+43	; 0x2b
    8f70:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8f72:	b5 a5       	ldd	r27, Z+45	; 0x2d
    8f74:	48 0f       	add	r20, r24
    8f76:	59 1f       	adc	r21, r25
    8f78:	6a 1f       	adc	r22, r26
    8f7a:	7b 1f       	adc	r23, r27
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
			dj_old.fs->wflag = 1;
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
    8f7c:	41 15       	cp	r20, r1
    8f7e:	51 05       	cpc	r21, r1
    8f80:	61 05       	cpc	r22, r1
    8f82:	71 05       	cpc	r23, r1
    8f84:	09 f4       	brne	.+2      	; 0x8f88 <f_rename+0x188>
    8f86:	49 c0       	rjmp	.+146    	; 0x901a <f_rename+0x21a>
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
    8f88:	c6 01       	movw	r24, r12
    8f8a:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <move_window>
    8f8e:	9c 01       	movw	r18, r24
					dir = dj_new.fs->win+32;
    8f90:	08 ad       	ldd	r16, Y+56	; 0x38
    8f92:	19 ad       	ldd	r17, Y+57	; 0x39
					if (res == FR_OK && dir[1] == '.') {
    8f94:	00 97       	sbiw	r24, 0x00	; 0
    8f96:	09 f0       	breq	.+2      	; 0x8f9a <f_rename+0x19a>
    8f98:	42 c0       	rjmp	.+132    	; 0x901e <f_rename+0x21e>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
					dir = dj_new.fs->win+32;
    8f9a:	b8 01       	movw	r22, r16
    8f9c:	6e 5a       	subi	r22, 0xAE	; 174
    8f9e:	7f 4f       	sbci	r23, 0xFF	; 255
					if (res == FR_OK && dir[1] == '.') {
    8fa0:	db 01       	movw	r26, r22
    8fa2:	11 96       	adiw	r26, 0x01	; 1
    8fa4:	8c 91       	ld	r24, X
    8fa6:	8e 32       	cpi	r24, 0x2E	; 46
    8fa8:	59 f5       	brne	.+86     	; 0x9000 <f_rename+0x200>
						dw = (dj_new.fs->fs_type == FS_FAT32 && dj_new.sclust == dj_new.fs->dirbase) ? 0 : dj_new.sclust;
    8faa:	f8 01       	movw	r30, r16
    8fac:	80 81       	ld	r24, Z
    8fae:	83 30       	cpi	r24, 0x03	; 3
    8fb0:	a9 f4       	brne	.+42     	; 0x8fdc <f_rename+0x1dc>
    8fb2:	fe 01       	movw	r30, r28
    8fb4:	fe 96       	adiw	r30, 0x3e	; 62
    8fb6:	20 81       	ld	r18, Z
    8fb8:	31 81       	ldd	r19, Z+1	; 0x01
    8fba:	42 81       	ldd	r20, Z+2	; 0x02
    8fbc:	53 81       	ldd	r21, Z+3	; 0x03
    8fbe:	f8 01       	movw	r30, r16
    8fc0:	86 a1       	ldd	r24, Z+38	; 0x26
    8fc2:	97 a1       	ldd	r25, Z+39	; 0x27
    8fc4:	a0 a5       	ldd	r26, Z+40	; 0x28
    8fc6:	b1 a5       	ldd	r27, Z+41	; 0x29
    8fc8:	28 17       	cp	r18, r24
    8fca:	39 07       	cpc	r19, r25
    8fcc:	4a 07       	cpc	r20, r26
    8fce:	5b 07       	cpc	r21, r27
    8fd0:	29 f4       	brne	.+10     	; 0x8fdc <f_rename+0x1dc>
    8fd2:	80 e0       	ldi	r24, 0x00	; 0
    8fd4:	90 e0       	ldi	r25, 0x00	; 0
    8fd6:	a0 e0       	ldi	r26, 0x00	; 0
    8fd8:	b0 e0       	ldi	r27, 0x00	; 0
    8fda:	06 c0       	rjmp	.+12     	; 0x8fe8 <f_rename+0x1e8>
    8fdc:	fe 01       	movw	r30, r28
    8fde:	fe 96       	adiw	r30, 0x3e	; 62
    8fe0:	80 81       	ld	r24, Z
    8fe2:	91 81       	ldd	r25, Z+1	; 0x01
    8fe4:	a2 81       	ldd	r26, Z+2	; 0x02
    8fe6:	b3 81       	ldd	r27, Z+3	; 0x03
						ST_WORD(dir+DIR_FstClusLO, dw);
    8fe8:	fb 01       	movw	r30, r22
    8fea:	82 8f       	std	Z+26, r24	; 0x1a
    8fec:	93 8f       	std	Z+27, r25	; 0x1b
						ST_WORD(dir+DIR_FstClusHI, dw >> 16);
    8fee:	cd 01       	movw	r24, r26
    8ff0:	aa 27       	eor	r26, r26
    8ff2:	bb 27       	eor	r27, r27
    8ff4:	84 8b       	std	Z+20, r24	; 0x14
    8ff6:	95 8b       	std	Z+21, r25	; 0x15
						dj_new.fs->wflag = 1;
    8ff8:	81 e0       	ldi	r24, 0x01	; 1
    8ffa:	d8 01       	movw	r26, r16
    8ffc:	14 96       	adiw	r26, 0x04	; 4
    8ffe:	8c 93       	st	X, r24
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj_old);			/* Remove old entry */
    9000:	ce 01       	movw	r24, r28
    9002:	82 96       	adiw	r24, 0x22	; 34
    9004:	0e 94 e1 45 	call	0x8bc2	; 0x8bc2 <dir_remove>
    9008:	9c 01       	movw	r18, r24
				if (res == FR_OK)
    900a:	00 97       	sbiw	r24, 0x00	; 0
    900c:	41 f4       	brne	.+16     	; 0x901e <f_rename+0x21e>
					res = sync(dj_old.fs);
    900e:	8a a1       	ldd	r24, Y+34	; 0x22
    9010:	9b a1       	ldd	r25, Y+35	; 0x23
    9012:	0e 94 02 46 	call	0x8c04	; 0x8c04 <sync>
    9016:	9c 01       	movw	r18, r24
    9018:	02 c0       	rjmp	.+4      	; 0x901e <f_rename+0x21e>
    901a:	22 e0       	ldi	r18, 0x02	; 2
    901c:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj_old.fs, res);
}
    901e:	c9 01       	movw	r24, r18
    9020:	c1 5b       	subi	r28, 0xB1	; 177
    9022:	df 4f       	sbci	r29, 0xFF	; 255
    9024:	e8 e0       	ldi	r30, 0x08	; 8
    9026:	0c 94 1f 5b 	jmp	0xb63e	; 0xb63e <__epilogue_restores__+0x14>

0000902a <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const XCHAR *path		/* Pointer to the directory path */
)
{
    902a:	ae e2       	ldi	r26, 0x2E	; 46
    902c:	b0 e0       	ldi	r27, 0x00	; 0
    902e:	eb e1       	ldi	r30, 0x1B	; 27
    9030:	f8 e4       	ldi	r31, 0x48	; 72
    9032:	0c 94 f9 5a 	jmp	0xb5f2	; 0xb5f2 <__prologue_saves__>
    9036:	8b a3       	std	Y+35, r24	; 0x23
    9038:	9c a3       	std	Y+36, r25	; 0x24
	NAMEBUF(sfn, lfn);
	BYTE *dir, n;
	DWORD dsect, dclst, pclst, tim;


	res = auto_mount(&path, &dj.fs, 1);
    903a:	ad e0       	ldi	r26, 0x0D	; 13
    903c:	ea 2e       	mov	r14, r26
    903e:	f1 2c       	mov	r15, r1
    9040:	ec 0e       	add	r14, r28
    9042:	fd 1e       	adc	r15, r29
    9044:	ce 01       	movw	r24, r28
    9046:	83 96       	adiw	r24, 0x23	; 35
    9048:	b7 01       	movw	r22, r14
    904a:	41 e0       	ldi	r20, 0x01	; 1
    904c:	0e 94 a1 39 	call	0x7342	; 0x7342 <auto_mount>
    9050:	8c 01       	movw	r16, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    9052:	00 97       	sbiw	r24, 0x00	; 0
    9054:	09 f0       	breq	.+2      	; 0x9058 <f_mkdir+0x2e>
    9056:	3a c1       	rjmp	.+628    	; 0x92cc <f_mkdir+0x2a2>

	INITBUF(dj, sfn, lfn);
    9058:	ce 01       	movw	r24, r28
    905a:	01 96       	adiw	r24, 0x01	; 1
    905c:	89 a3       	std	Y+33, r24	; 0x21
    905e:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);			/* Follow the file path */
    9060:	6b a1       	ldd	r22, Y+35	; 0x23
    9062:	7c a1       	ldd	r23, Y+36	; 0x24
    9064:	c7 01       	movw	r24, r14
    9066:	0e 94 63 43 	call	0x86c6	; 0x86c6 <follow_path>
    906a:	8c 01       	movw	r16, r24
	if (res == FR_OK) res = FR_EXIST;		/* Any file or directory is already existing */
    906c:	00 97       	sbiw	r24, 0x00	; 0
    906e:	61 f0       	breq	.+24     	; 0x9088 <f_mkdir+0x5e>
	if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[11] & NS_DOT))
    9070:	84 30       	cpi	r24, 0x04	; 4
    9072:	91 05       	cpc	r25, r1
    9074:	09 f0       	breq	.+2      	; 0x9078 <f_mkdir+0x4e>
    9076:	2a c1       	rjmp	.+596    	; 0x92cc <f_mkdir+0x2a2>
    9078:	e9 a1       	ldd	r30, Y+33	; 0x21
    907a:	fa a1       	ldd	r31, Y+34	; 0x22
    907c:	83 85       	ldd	r24, Z+11	; 0x0b
    907e:	85 ff       	sbrs	r24, 5
    9080:	06 c0       	rjmp	.+12     	; 0x908e <f_mkdir+0x64>
    9082:	06 e0       	ldi	r16, 0x06	; 6
    9084:	10 e0       	ldi	r17, 0x00	; 0
    9086:	22 c1       	rjmp	.+580    	; 0x92cc <f_mkdir+0x2a2>
    9088:	08 e0       	ldi	r16, 0x08	; 8
    908a:	10 e0       	ldi	r17, 0x00	; 0
    908c:	1f c1       	rjmp	.+574    	; 0x92cc <f_mkdir+0x2a2>
		res = FR_INVALID_NAME;
	if (res != FR_NO_FILE)					/* Any error occured */
		LEAVE_FF(dj.fs, res);

	dclst = create_chain(dj.fs, 0);			/* Allocate a new cluster for new directory table */
    908e:	8d 85       	ldd	r24, Y+13	; 0x0d
    9090:	9e 85       	ldd	r25, Y+14	; 0x0e
    9092:	40 e0       	ldi	r20, 0x00	; 0
    9094:	50 e0       	ldi	r21, 0x00	; 0
    9096:	60 e0       	ldi	r22, 0x00	; 0
    9098:	70 e0       	ldi	r23, 0x00	; 0
    909a:	0e 94 41 3e 	call	0x7c82	; 0x7c82 <create_chain>
    909e:	3b 01       	movw	r6, r22
    90a0:	4c 01       	movw	r8, r24
	res = FR_OK;
	if (dclst == 0) res = FR_DENIED;
    90a2:	61 15       	cp	r22, r1
    90a4:	71 05       	cpc	r23, r1
    90a6:	81 05       	cpc	r24, r1
    90a8:	91 05       	cpc	r25, r1
    90aa:	19 f4       	brne	.+6      	; 0x90b2 <f_mkdir+0x88>
    90ac:	07 e0       	ldi	r16, 0x07	; 7
    90ae:	10 e0       	ldi	r17, 0x00	; 0
    90b0:	0d c1       	rjmp	.+538    	; 0x92cc <f_mkdir+0x2a2>
	if (dclst == 1) res = FR_INT_ERR;
    90b2:	61 30       	cpi	r22, 0x01	; 1
    90b4:	71 05       	cpc	r23, r1
    90b6:	81 05       	cpc	r24, r1
    90b8:	91 05       	cpc	r25, r1
    90ba:	19 f4       	brne	.+6      	; 0x90c2 <f_mkdir+0x98>
    90bc:	02 e0       	ldi	r16, 0x02	; 2
    90be:	10 e0       	ldi	r17, 0x00	; 0
    90c0:	05 c1       	rjmp	.+522    	; 0x92cc <f_mkdir+0x2a2>
	if (dclst == 0xFFFFFFFF) res = FR_DISK_ERR;
    90c2:	6f 3f       	cpi	r22, 0xFF	; 255
    90c4:	3f ef       	ldi	r19, 0xFF	; 255
    90c6:	73 07       	cpc	r23, r19
    90c8:	3f ef       	ldi	r19, 0xFF	; 255
    90ca:	83 07       	cpc	r24, r19
    90cc:	3f ef       	ldi	r19, 0xFF	; 255
    90ce:	93 07       	cpc	r25, r19
    90d0:	09 f4       	brne	.+2      	; 0x90d4 <f_mkdir+0xaa>
    90d2:	01 c1       	rjmp	.+514    	; 0x92d6 <f_mkdir+0x2ac>
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
    90d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    90d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    90d8:	40 e0       	ldi	r20, 0x00	; 0
    90da:	50 e0       	ldi	r21, 0x00	; 0
    90dc:	60 e0       	ldi	r22, 0x00	; 0
    90de:	70 e0       	ldi	r23, 0x00	; 0
    90e0:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <move_window>
    90e4:	8c 01       	movw	r16, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    90e6:	00 97       	sbiw	r24, 0x00	; 0
    90e8:	09 f0       	breq	.+2      	; 0x90ec <f_mkdir+0xc2>
    90ea:	f0 c0       	rjmp	.+480    	; 0x92cc <f_mkdir+0x2a2>
	dsect = clust2sect(dj.fs, dclst);
    90ec:	cd 84       	ldd	r12, Y+13	; 0x0d
    90ee:	de 84       	ldd	r13, Y+14	; 0x0e
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    90f0:	fe ef       	ldi	r31, 0xFE	; 254
    90f2:	ef 2e       	mov	r14, r31
    90f4:	ff ef       	ldi	r31, 0xFF	; 255
    90f6:	ff 2e       	mov	r15, r31
    90f8:	ff ef       	ldi	r31, 0xFF	; 255
    90fa:	0f 2f       	mov	r16, r31
    90fc:	ff ef       	ldi	r31, 0xFF	; 255
    90fe:	1f 2f       	mov	r17, r31
    9100:	e6 0c       	add	r14, r6
    9102:	f7 1c       	adc	r15, r7
    9104:	08 1d       	adc	r16, r8
    9106:	19 1d       	adc	r17, r9
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    9108:	f6 01       	movw	r30, r12
    910a:	86 8d       	ldd	r24, Z+30	; 0x1e
    910c:	97 8d       	ldd	r25, Z+31	; 0x1f
    910e:	a0 a1       	ldd	r26, Z+32	; 0x20
    9110:	b1 a1       	ldd	r27, Z+33	; 0x21
    9112:	02 97       	sbiw	r24, 0x02	; 2
    9114:	a1 09       	sbc	r26, r1
    9116:	b1 09       	sbc	r27, r1
    9118:	e8 16       	cp	r14, r24
    911a:	f9 06       	cpc	r15, r25
    911c:	0a 07       	cpc	r16, r26
    911e:	1b 07       	cpc	r17, r27
    9120:	20 f0       	brcs	.+8      	; 0x912a <f_mkdir+0x100>
    9122:	22 24       	eor	r2, r2
    9124:	33 24       	eor	r3, r3
    9126:	21 01       	movw	r4, r2
    9128:	15 c0       	rjmp	.+42     	; 0x9154 <f_mkdir+0x12a>
	return clst * fs->csize + fs->database;
    912a:	d6 01       	movw	r26, r12
    912c:	12 96       	adiw	r26, 0x02	; 2
    912e:	2c 91       	ld	r18, X
    9130:	30 e0       	ldi	r19, 0x00	; 0
    9132:	40 e0       	ldi	r20, 0x00	; 0
    9134:	50 e0       	ldi	r21, 0x00	; 0
    9136:	c8 01       	movw	r24, r16
    9138:	b7 01       	movw	r22, r14
    913a:	0e 94 76 5a 	call	0xb4ec	; 0xb4ec <__mulsi3>
    913e:	1b 01       	movw	r2, r22
    9140:	2c 01       	movw	r4, r24
    9142:	f6 01       	movw	r30, r12
    9144:	82 a5       	ldd	r24, Z+42	; 0x2a
    9146:	93 a5       	ldd	r25, Z+43	; 0x2b
    9148:	a4 a5       	ldd	r26, Z+44	; 0x2c
    914a:	b5 a5       	ldd	r27, Z+45	; 0x2d
    914c:	28 0e       	add	r2, r24
    914e:	39 1e       	adc	r3, r25
    9150:	4a 1e       	adc	r4, r26
    9152:	5b 1e       	adc	r5, r27
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
    9154:	e2 e3       	ldi	r30, 0x32	; 50
    9156:	ae 2e       	mov	r10, r30
    9158:	b1 2c       	mov	r11, r1
    915a:	ac 0c       	add	r10, r12
    915c:	bd 1c       	adc	r11, r13
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    915e:	ad a2       	std	Y+37, r10	; 0x25
    9160:	be a2       	std	Y+38, r11	; 0x26
	while (cnt--) *d++ = (char)val;
    9162:	c6 01       	movw	r24, r12
    9164:	8e 5c       	subi	r24, 0xCE	; 206
    9166:	9d 4f       	sbci	r25, 0xFD	; 253
    9168:	05 c0       	rjmp	.+10     	; 0x9174 <f_mkdir+0x14a>
    916a:	ad a1       	ldd	r26, Y+37	; 0x25
    916c:	be a1       	ldd	r27, Y+38	; 0x26
    916e:	1d 92       	st	X+, r1
    9170:	ad a3       	std	Y+37, r26	; 0x25
    9172:	be a3       	std	Y+38, r27	; 0x26
    9174:	ed a1       	ldd	r30, Y+37	; 0x25
    9176:	fe a1       	ldd	r31, Y+38	; 0x26
    9178:	e8 17       	cp	r30, r24
    917a:	f9 07       	cpc	r31, r25
    917c:	b1 f7       	brne	.-20     	; 0x916a <f_mkdir+0x140>
    917e:	f5 01       	movw	r30, r10
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
	mem_set(dir, 0, SS(dj.fs));
	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
	dir[DIR_Name] = '.';
    9180:	c5 01       	movw	r24, r10
    9182:	0b 96       	adiw	r24, 0x0b	; 11
    9184:	20 e2       	ldi	r18, 0x20	; 32
    9186:	01 c0       	rjmp	.+2      	; 0x918a <f_mkdir+0x160>
    9188:	21 93       	st	Z+, r18
    918a:	e8 17       	cp	r30, r24
    918c:	f9 07       	cpc	r31, r25
    918e:	e1 f7       	brne	.-8      	; 0x9188 <f_mkdir+0x15e>
    9190:	8e e2       	ldi	r24, 0x2E	; 46
    9192:	d6 01       	movw	r26, r12
    9194:	d2 96       	adiw	r26, 0x32	; 50
    9196:	8c 93       	st	X, r24
    9198:	d2 97       	sbiw	r26, 0x32	; 50
	dir[DIR_Attr] = AM_DIR;
    919a:	80 e1       	ldi	r24, 0x10	; 16
    919c:	dd 96       	adiw	r26, 0x3d	; 61
    919e:	8c 93       	st	X, r24
	tim = get_fattime();
    91a0:	0e 94 d0 57 	call	0xafa0	; 0xafa0 <get_fattime>
    91a4:	6f a3       	std	Y+39, r22	; 0x27
    91a6:	78 a7       	std	Y+40, r23	; 0x28
    91a8:	89 a7       	std	Y+41, r24	; 0x29
    91aa:	9a a7       	std	Y+42, r25	; 0x2a
	ST_DWORD(dir+DIR_WrtTime, tim);
    91ac:	f5 01       	movw	r30, r10
    91ae:	66 8b       	std	Z+22, r22	; 0x16
    91b0:	77 8b       	std	Z+23, r23	; 0x17
    91b2:	80 8f       	std	Z+24, r24	; 0x18
    91b4:	91 8f       	std	Z+25, r25	; 0x19
	ST_WORD(dir+DIR_FstClusLO, dclst);
    91b6:	6d a6       	std	Y+45, r6	; 0x2d
    91b8:	7e a6       	std	Y+46, r7	; 0x2e
    91ba:	62 8e       	std	Z+26, r6	; 0x1a
    91bc:	73 8e       	std	Z+27, r7	; 0x1b
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
    91be:	c4 01       	movw	r24, r8
    91c0:	aa 27       	eor	r26, r26
    91c2:	bb 27       	eor	r27, r27
    91c4:	8b a7       	std	Y+43, r24	; 0x2b
    91c6:	9c a7       	std	Y+44, r25	; 0x2c
    91c8:	84 8b       	std	Z+20, r24	; 0x14
    91ca:	95 8b       	std	Z+21, r25	; 0x15
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    91cc:	95 01       	movw	r18, r10
    91ce:	20 5e       	subi	r18, 0xE0	; 224
    91d0:	3f 4f       	sbci	r19, 0xFF	; 255
    91d2:	03 c0       	rjmp	.+6      	; 0x91da <f_mkdir+0x1b0>
    91d4:	80 81       	ld	r24, Z
    91d6:	80 a3       	std	Z+32, r24	; 0x20
    91d8:	31 96       	adiw	r30, 0x01	; 1
    91da:	e2 17       	cp	r30, r18
    91dc:	f3 07       	cpc	r31, r19
    91de:	d1 f7       	brne	.-12     	; 0x91d4 <f_mkdir+0x1aa>
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
	ST_WORD(dir+DIR_FstClusLO, dclst);
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
	dir[33] = '.';
    91e0:	23 e5       	ldi	r18, 0x53	; 83
    91e2:	30 e0       	ldi	r19, 0x00	; 0
    91e4:	c2 0e       	add	r12, r18
    91e6:	d3 1e       	adc	r13, r19
    91e8:	8e e2       	ldi	r24, 0x2E	; 46
    91ea:	d6 01       	movw	r26, r12
    91ec:	8c 93       	st	X, r24
	pclst = dj.sclust;
    91ee:	2b 89       	ldd	r18, Y+19	; 0x13
    91f0:	3c 89       	ldd	r19, Y+20	; 0x14
    91f2:	4d 89       	ldd	r20, Y+21	; 0x15
    91f4:	5e 89       	ldd	r21, Y+22	; 0x16
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
    91f6:	ed 85       	ldd	r30, Y+13	; 0x0d
    91f8:	fe 85       	ldd	r31, Y+14	; 0x0e
    91fa:	80 81       	ld	r24, Z
    91fc:	83 30       	cpi	r24, 0x03	; 3
    91fe:	69 f4       	brne	.+26     	; 0x921a <f_mkdir+0x1f0>
    9200:	86 a1       	ldd	r24, Z+38	; 0x26
    9202:	97 a1       	ldd	r25, Z+39	; 0x27
    9204:	a0 a5       	ldd	r26, Z+40	; 0x28
    9206:	b1 a5       	ldd	r27, Z+41	; 0x29
    9208:	28 17       	cp	r18, r24
    920a:	39 07       	cpc	r19, r25
    920c:	4a 07       	cpc	r20, r26
    920e:	5b 07       	cpc	r21, r27
    9210:	21 f4       	brne	.+8      	; 0x921a <f_mkdir+0x1f0>
    9212:	20 e0       	ldi	r18, 0x00	; 0
    9214:	30 e0       	ldi	r19, 0x00	; 0
    9216:	40 e0       	ldi	r20, 0x00	; 0
    9218:	50 e0       	ldi	r21, 0x00	; 0
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
    921a:	f5 01       	movw	r30, r10
    921c:	22 af       	std	Z+58, r18	; 0x3a
    921e:	33 af       	std	Z+59, r19	; 0x3b
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
    9220:	ca 01       	movw	r24, r20
    9222:	aa 27       	eor	r26, r26
    9224:	bb 27       	eor	r27, r27
    9226:	84 ab       	std	Z+52, r24	; 0x34
    9228:	95 ab       	std	Z+53, r25	; 0x35
    922a:	72 01       	movw	r14, r4
    922c:	61 01       	movw	r12, r2
    922e:	1d c0       	rjmp	.+58     	; 0x926a <f_mkdir+0x240>
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
    9230:	c6 a6       	std	Z+46, r12	; 0x2e
    9232:	d7 a6       	std	Z+47, r13	; 0x2f
    9234:	e0 aa       	std	Z+48, r14	; 0x30
    9236:	f1 aa       	std	Z+49, r15	; 0x31
		dj.fs->wflag = 1;
    9238:	21 e0       	ldi	r18, 0x01	; 1
    923a:	24 83       	std	Z+4, r18	; 0x04
		res = move_window(dj.fs, 0);
    923c:	cf 01       	movw	r24, r30
    923e:	40 e0       	ldi	r20, 0x00	; 0
    9240:	50 e0       	ldi	r21, 0x00	; 0
    9242:	60 e0       	ldi	r22, 0x00	; 0
    9244:	70 e0       	ldi	r23, 0x00	; 0
    9246:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <move_window>
    924a:	8c 01       	movw	r16, r24
		if (res) LEAVE_FF(dj.fs, res);
    924c:	00 97       	sbiw	r24, 0x00	; 0
    924e:	f1 f5       	brne	.+124    	; 0x92cc <f_mkdir+0x2a2>
    9250:	f5 01       	movw	r30, r10
    9252:	01 c0       	rjmp	.+2      	; 0x9256 <f_mkdir+0x22c>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    9254:	11 92       	st	Z+, r1
    9256:	8d a1       	ldd	r24, Y+37	; 0x25
    9258:	9e a1       	ldd	r25, Y+38	; 0x26
    925a:	e8 17       	cp	r30, r24
    925c:	f9 07       	cpc	r31, r25
    925e:	d1 f7       	brne	.-12     	; 0x9254 <f_mkdir+0x22a>
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
    9260:	08 94       	sec
    9262:	c1 1c       	adc	r12, r1
    9264:	d1 1c       	adc	r13, r1
    9266:	e1 1c       	adc	r14, r1
    9268:	f1 1c       	adc	r15, r1
	pclst = dj.sclust;
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
    926a:	ed 85       	ldd	r30, Y+13	; 0x0d
    926c:	fe 85       	ldd	r31, Y+14	; 0x0e
    926e:	9c 2d       	mov	r25, r12
    9270:	92 19       	sub	r25, r2
    9272:	82 81       	ldd	r24, Z+2	; 0x02
    9274:	98 17       	cp	r25, r24
    9276:	e0 f2       	brcs	.-72     	; 0x9230 <f_mkdir+0x206>
		res = move_window(dj.fs, 0);
		if (res) LEAVE_FF(dj.fs, res);
		mem_set(dir, 0, SS(dj.fs));
	}

	res = dir_register(&dj);
    9278:	ce 01       	movw	r24, r28
    927a:	0d 96       	adiw	r24, 0x0d	; 13
    927c:	0e 94 87 45 	call	0x8b0e	; 0x8b0e <dir_register>
    9280:	8c 01       	movw	r16, r24
	if (res != FR_OK) {
    9282:	00 97       	sbiw	r24, 0x00	; 0
    9284:	39 f0       	breq	.+14     	; 0x9294 <f_mkdir+0x26a>
		remove_chain(dj.fs, dclst);
    9286:	8d 85       	ldd	r24, Y+13	; 0x0d
    9288:	9e 85       	ldd	r25, Y+14	; 0x0e
    928a:	b4 01       	movw	r22, r8
    928c:	a3 01       	movw	r20, r6
    928e:	0e 94 f7 40 	call	0x81ee	; 0x81ee <remove_chain>
    9292:	1c c0       	rjmp	.+56     	; 0x92cc <f_mkdir+0x2a2>
	} else {
		dir = dj.dir;
    9294:	ef 8d       	ldd	r30, Y+31	; 0x1f
    9296:	f8 a1       	ldd	r31, Y+32	; 0x20
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
    9298:	80 e1       	ldi	r24, 0x10	; 16
    929a:	83 87       	std	Z+11, r24	; 0x0b
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
    929c:	8f a1       	ldd	r24, Y+39	; 0x27
    929e:	98 a5       	ldd	r25, Y+40	; 0x28
    92a0:	a9 a5       	ldd	r26, Y+41	; 0x29
    92a2:	ba a5       	ldd	r27, Y+42	; 0x2a
    92a4:	86 8b       	std	Z+22, r24	; 0x16
    92a6:	97 8b       	std	Z+23, r25	; 0x17
    92a8:	a0 8f       	std	Z+24, r26	; 0x18
    92aa:	b1 8f       	std	Z+25, r27	; 0x19
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
    92ac:	ad a5       	ldd	r26, Y+45	; 0x2d
    92ae:	be a5       	ldd	r27, Y+46	; 0x2e
    92b0:	a2 8f       	std	Z+26, r26	; 0x1a
    92b2:	b3 8f       	std	Z+27, r27	; 0x1b
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
    92b4:	2b a5       	ldd	r18, Y+43	; 0x2b
    92b6:	3c a5       	ldd	r19, Y+44	; 0x2c
    92b8:	24 8b       	std	Z+20, r18	; 0x14
    92ba:	35 8b       	std	Z+21, r19	; 0x15
		dj.fs->wflag = 1;
    92bc:	ed 85       	ldd	r30, Y+13	; 0x0d
    92be:	fe 85       	ldd	r31, Y+14	; 0x0e
    92c0:	81 e0       	ldi	r24, 0x01	; 1
    92c2:	84 83       	std	Z+4, r24	; 0x04
		res = sync(dj.fs);
    92c4:	cf 01       	movw	r24, r30
    92c6:	0e 94 02 46 	call	0x8c04	; 0x8c04 <sync>
    92ca:	8c 01       	movw	r16, r24
	}

	LEAVE_FF(dj.fs, res);
}
    92cc:	c8 01       	movw	r24, r16
    92ce:	ae 96       	adiw	r28, 0x2e	; 46
    92d0:	e2 e1       	ldi	r30, 0x12	; 18
    92d2:	0c 94 15 5b 	jmp	0xb62a	; 0xb62a <__epilogue_restores__>
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
		dj.fs->wflag = 1;
		res = sync(dj.fs);
    92d6:	01 e0       	ldi	r16, 0x01	; 1
    92d8:	10 e0       	ldi	r17, 0x00	; 0
    92da:	f8 cf       	rjmp	.-16     	; 0x92cc <f_mkdir+0x2a2>

000092dc <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    92dc:	cf 93       	push	r28
    92de:	df 93       	push	r29
    92e0:	ec 01       	movw	r28, r24
    92e2:	24 e0       	ldi	r18, 0x04	; 4
    92e4:	30 e0       	ldi	r19, 0x00	; 0
    92e6:	19 c0       	rjmp	.+50     	; 0x931a <dir_read+0x3e>
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
    92e8:	88 81       	ld	r24, Y
    92ea:	99 81       	ldd	r25, Y+1	; 0x01
    92ec:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <move_window>
    92f0:	9c 01       	movw	r18, r24
		if (res != FR_OK) break;
    92f2:	00 97       	sbiw	r24, 0x00	; 0
    92f4:	f1 f4       	brne	.+60     	; 0x9332 <dir_read+0x56>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    92f6:	ea 89       	ldd	r30, Y+18	; 0x12
    92f8:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
    92fa:	80 81       	ld	r24, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    92fc:	88 23       	and	r24, r24
    92fe:	09 f1       	breq	.+66     	; 0x9342 <dir_read+0x66>
					dj->lfn_idx = 0xFFFF;		/* No LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    9300:	85 3e       	cpi	r24, 0xE5	; 229
    9302:	19 f0       	breq	.+6      	; 0x930a <dir_read+0x2e>
    9304:	83 85       	ldd	r24, Z+11	; 0x0b
    9306:	83 ff       	sbrs	r24, 3
    9308:	18 c0       	rjmp	.+48     	; 0x933a <dir_read+0x5e>
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
    930a:	ce 01       	movw	r24, r28
    930c:	60 e0       	ldi	r22, 0x00	; 0
    930e:	70 e0       	ldi	r23, 0x00	; 0
    9310:	0e 94 f7 41 	call	0x83ee	; 0x83ee <dir_next>
    9314:	9c 01       	movw	r18, r24
		if (res != FR_OK) break;
    9316:	00 97       	sbiw	r24, 0x00	; 0
    9318:	61 f4       	brne	.+24     	; 0x9332 <dir_read+0x56>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    931a:	4e 85       	ldd	r20, Y+14	; 0x0e
    931c:	5f 85       	ldd	r21, Y+15	; 0x0f
    931e:	68 89       	ldd	r22, Y+16	; 0x10
    9320:	79 89       	ldd	r23, Y+17	; 0x11
    9322:	41 15       	cp	r20, r1
    9324:	51 05       	cpc	r21, r1
    9326:	61 05       	cpc	r22, r1
    9328:	71 05       	cpc	r23, r1
    932a:	f1 f6       	brne	.-68     	; 0x92e8 <dir_read+0xc>
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    932c:	21 15       	cp	r18, r1
    932e:	31 05       	cpc	r19, r1
    9330:	21 f0       	breq	.+8      	; 0x933a <dir_read+0x5e>
    9332:	1e 86       	std	Y+14, r1	; 0x0e
    9334:	1f 86       	std	Y+15, r1	; 0x0f
    9336:	18 8a       	std	Y+16, r1	; 0x10
    9338:	19 8a       	std	Y+17, r1	; 0x11

	return res;
}
    933a:	c9 01       	movw	r24, r18
    933c:	df 91       	pop	r29
    933e:	cf 91       	pop	r28
    9340:	08 95       	ret
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    9342:	24 e0       	ldi	r18, 0x04	; 4
    9344:	30 e0       	ldi	r19, 0x00	; 0
    9346:	f5 cf       	rjmp	.-22     	; 0x9332 <dir_read+0x56>

00009348 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const XCHAR *path		/* Pointer to the file or directory path */
)
{
    9348:	aa e3       	ldi	r26, 0x3A	; 58
    934a:	b0 e0       	ldi	r27, 0x00	; 0
    934c:	ea ea       	ldi	r30, 0xAA	; 170
    934e:	f9 e4       	ldi	r31, 0x49	; 73
    9350:	0c 94 03 5b 	jmp	0xb606	; 0xb606 <__prologue_saves__+0x14>
    9354:	89 af       	std	Y+57, r24	; 0x39
    9356:	9a af       	std	Y+58, r25	; 0x3a
	NAMEBUF(sfn, lfn);
	BYTE *dir;
	DWORD dclst;


	res = auto_mount(&path, &dj.fs, 1);
    9358:	8d e0       	ldi	r24, 0x0D	; 13
    935a:	c8 2e       	mov	r12, r24
    935c:	d1 2c       	mov	r13, r1
    935e:	cc 0e       	add	r12, r28
    9360:	dd 1e       	adc	r13, r29
    9362:	ce 01       	movw	r24, r28
    9364:	c9 96       	adiw	r24, 0x39	; 57
    9366:	b6 01       	movw	r22, r12
    9368:	41 e0       	ldi	r20, 0x01	; 1
    936a:	0e 94 a1 39 	call	0x7342	; 0x7342 <auto_mount>
    936e:	9c 01       	movw	r18, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    9370:	00 97       	sbiw	r24, 0x00	; 0
    9372:	09 f0       	breq	.+2      	; 0x9376 <f_unlink+0x2e>
    9374:	79 c0       	rjmp	.+242    	; 0x9468 <f_unlink+0x120>

	INITBUF(dj, sfn, lfn);
    9376:	ce 01       	movw	r24, r28
    9378:	01 96       	adiw	r24, 0x01	; 1
    937a:	89 a3       	std	Y+33, r24	; 0x21
    937c:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);			/* Follow the file path */
    937e:	69 ad       	ldd	r22, Y+57	; 0x39
    9380:	7a ad       	ldd	r23, Y+58	; 0x3a
    9382:	c6 01       	movw	r24, r12
    9384:	0e 94 63 43 	call	0x86c6	; 0x86c6 <follow_path>
    9388:	9c 01       	movw	r18, r24
	if (_FS_RPATH && res == FR_OK && (dj.fn[11] & NS_DOT))
    938a:	00 97       	sbiw	r24, 0x00	; 0
    938c:	09 f0       	breq	.+2      	; 0x9390 <f_unlink+0x48>
    938e:	6c c0       	rjmp	.+216    	; 0x9468 <f_unlink+0x120>
    9390:	e9 a1       	ldd	r30, Y+33	; 0x21
    9392:	fa a1       	ldd	r31, Y+34	; 0x22
    9394:	83 85       	ldd	r24, Z+11	; 0x0b
    9396:	85 fd       	sbrc	r24, 5
    9398:	62 c0       	rjmp	.+196    	; 0x945e <f_unlink+0x116>
		res = FR_INVALID_NAME;
	if (res != FR_OK) LEAVE_FF(dj.fs, res); /* Follow failed */

	dir = dj.dir;
    939a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    939c:	f8 a1       	ldd	r31, Y+32	; 0x20
	if (!dir)								/* Is it the root directory? */
    939e:	30 97       	sbiw	r30, 0x00	; 0
    93a0:	09 f4       	brne	.+2      	; 0x93a4 <f_unlink+0x5c>
    93a2:	5d c0       	rjmp	.+186    	; 0x945e <f_unlink+0x116>
		LEAVE_FF(dj.fs, FR_INVALID_NAME);
	if (dir[DIR_Attr] & AM_RDO)				/* Is it a R/O object? */
    93a4:	83 85       	ldd	r24, Z+11	; 0x0b
    93a6:	28 2f       	mov	r18, r24
    93a8:	80 fd       	sbrc	r24, 0
    93aa:	5c c0       	rjmp	.+184    	; 0x9464 <f_unlink+0x11c>
		LEAVE_FF(dj.fs, FR_DENIED);
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    93ac:	84 89       	ldd	r24, Z+20	; 0x14
    93ae:	95 89       	ldd	r25, Z+21	; 0x15
    93b0:	a0 e0       	ldi	r26, 0x00	; 0
    93b2:	b0 e0       	ldi	r27, 0x00	; 0
    93b4:	8c 01       	movw	r16, r24
    93b6:	ff 24       	eor	r15, r15
    93b8:	ee 24       	eor	r14, r14
    93ba:	82 8d       	ldd	r24, Z+26	; 0x1a
    93bc:	93 8d       	ldd	r25, Z+27	; 0x1b
    93be:	a0 e0       	ldi	r26, 0x00	; 0
    93c0:	b0 e0       	ldi	r27, 0x00	; 0
    93c2:	e8 2a       	or	r14, r24
    93c4:	f9 2a       	or	r15, r25
    93c6:	0a 2b       	or	r16, r26
    93c8:	1b 2b       	or	r17, r27

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
    93ca:	24 ff       	sbrs	r18, 4
    93cc:	2d c0       	rjmp	.+90     	; 0x9428 <f_unlink+0xe0>
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
    93ce:	82 e0       	ldi	r24, 0x02	; 2
    93d0:	e8 16       	cp	r14, r24
    93d2:	f1 04       	cpc	r15, r1
    93d4:	01 05       	cpc	r16, r1
    93d6:	11 05       	cpc	r17, r1
    93d8:	18 f4       	brcc	.+6      	; 0x93e0 <f_unlink+0x98>
    93da:	22 e0       	ldi	r18, 0x02	; 2
    93dc:	30 e0       	ldi	r19, 0x00	; 0
    93de:	44 c0       	rjmp	.+136    	; 0x9468 <f_unlink+0x120>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    93e0:	de 01       	movw	r26, r28
    93e2:	93 96       	adiw	r26, 0x23	; 35
	const char *s = (const char *)src;
    93e4:	f6 01       	movw	r30, r12
	while (cnt--) *d++ = *s++;
    93e6:	9d 01       	movw	r18, r26
    93e8:	02 c0       	rjmp	.+4      	; 0x93ee <f_unlink+0xa6>
    93ea:	81 91       	ld	r24, Z+
    93ec:	8d 93       	st	X+, r24
    93ee:	e2 17       	cp	r30, r18
    93f0:	f3 07       	cpc	r31, r19
    93f2:	d9 f7       	brne	.-10     	; 0x93ea <f_unlink+0xa2>
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
		mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
		sdj.sclust = dclst;
    93f4:	e9 a6       	std	Y+41, r14	; 0x29
    93f6:	fa a6       	std	Y+42, r15	; 0x2a
    93f8:	0b a7       	std	Y+43, r16	; 0x2b
    93fa:	1c a7       	std	Y+44, r17	; 0x2c
		res = dir_seek(&sdj, 2);
    93fc:	b3 e2       	ldi	r27, 0x23	; 35
    93fe:	cb 2e       	mov	r12, r27
    9400:	d1 2c       	mov	r13, r1
    9402:	cc 0e       	add	r12, r28
    9404:	dd 1e       	adc	r13, r29
    9406:	c6 01       	movw	r24, r12
    9408:	62 e0       	ldi	r22, 0x02	; 2
    940a:	70 e0       	ldi	r23, 0x00	; 0
    940c:	0e 94 81 3c 	call	0x7902	; 0x7902 <dir_seek>
    9410:	9c 01       	movw	r18, r24
		if (res != FR_OK) LEAVE_FF(dj.fs, res);
    9412:	00 97       	sbiw	r24, 0x00	; 0
    9414:	49 f5       	brne	.+82     	; 0x9468 <f_unlink+0x120>
		res = dir_read(&sdj);
    9416:	c6 01       	movw	r24, r12
    9418:	0e 94 6e 49 	call	0x92dc	; 0x92dc <dir_read>
    941c:	9c 01       	movw	r18, r24
		if (res == FR_OK) res = FR_DENIED;	/* Not empty sub-dir */
    941e:	00 97       	sbiw	r24, 0x00	; 0
    9420:	09 f1       	breq	.+66     	; 0x9464 <f_unlink+0x11c>
		if (res != FR_NO_FILE) LEAVE_FF(dj.fs, res);
    9422:	84 30       	cpi	r24, 0x04	; 4
    9424:	91 05       	cpc	r25, r1
    9426:	01 f5       	brne	.+64     	; 0x9468 <f_unlink+0x120>
	}

	res = dir_remove(&dj);					/* Remove directory entry */
    9428:	ce 01       	movw	r24, r28
    942a:	0d 96       	adiw	r24, 0x0d	; 13
    942c:	0e 94 e1 45 	call	0x8bc2	; 0x8bc2 <dir_remove>
    9430:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    9432:	00 97       	sbiw	r24, 0x00	; 0
    9434:	c9 f4       	brne	.+50     	; 0x9468 <f_unlink+0x120>
		if (dclst)
    9436:	e1 14       	cp	r14, r1
    9438:	f1 04       	cpc	r15, r1
    943a:	01 05       	cpc	r16, r1
    943c:	11 05       	cpc	r17, r1
    943e:	49 f0       	breq	.+18     	; 0x9452 <f_unlink+0x10a>
			res = remove_chain(dj.fs, dclst);	/* Remove the cluster chain */
    9440:	8d 85       	ldd	r24, Y+13	; 0x0d
    9442:	9e 85       	ldd	r25, Y+14	; 0x0e
    9444:	b8 01       	movw	r22, r16
    9446:	a7 01       	movw	r20, r14
    9448:	0e 94 f7 40 	call	0x81ee	; 0x81ee <remove_chain>
    944c:	9c 01       	movw	r18, r24
		if (res == FR_OK) res = sync(dj.fs);
    944e:	00 97       	sbiw	r24, 0x00	; 0
    9450:	59 f4       	brne	.+22     	; 0x9468 <f_unlink+0x120>
    9452:	8d 85       	ldd	r24, Y+13	; 0x0d
    9454:	9e 85       	ldd	r25, Y+14	; 0x0e
    9456:	0e 94 02 46 	call	0x8c04	; 0x8c04 <sync>
    945a:	9c 01       	movw	r18, r24
    945c:	05 c0       	rjmp	.+10     	; 0x9468 <f_unlink+0x120>
    945e:	26 e0       	ldi	r18, 0x06	; 6
    9460:	30 e0       	ldi	r19, 0x00	; 0
    9462:	02 c0       	rjmp	.+4      	; 0x9468 <f_unlink+0x120>
    9464:	27 e0       	ldi	r18, 0x07	; 7
    9466:	30 e0       	ldi	r19, 0x00	; 0
	}

	LEAVE_FF(dj.fs, res);
}
    9468:	c9 01       	movw	r24, r18
    946a:	ea 96       	adiw	r28, 0x3a	; 58
    946c:	e8 e0       	ldi	r30, 0x08	; 8
    946e:	0c 94 1f 5b 	jmp	0xb63e	; 0xb63e <__epilogue_restores__+0x14>

00009472 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    9472:	ac e0       	ldi	r26, 0x0C	; 12
    9474:	b0 e0       	ldi	r27, 0x00	; 0
    9476:	ef e3       	ldi	r30, 0x3F	; 63
    9478:	fa e4       	ldi	r31, 0x4A	; 74
    947a:	0c 94 05 5b 	jmp	0xb60a	; 0xb60a <__prologue_saves__+0x18>
    947e:	8c 01       	movw	r16, r24
    9480:	7b 01       	movw	r14, r22
	FRESULT res;
	NAMEBUF(sfn, lfn);


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    9482:	fc 01       	movw	r30, r24
    9484:	62 81       	ldd	r22, Z+2	; 0x02
    9486:	73 81       	ldd	r23, Z+3	; 0x03
    9488:	80 81       	ld	r24, Z
    948a:	91 81       	ldd	r25, Z+1	; 0x01
    948c:	0e 94 3a 39 	call	0x7274	; 0x7274 <validate>
	if (res == FR_OK) {
    9490:	00 97       	sbiw	r24, 0x00	; 0
    9492:	69 f4       	brne	.+26     	; 0x94ae <f_readdir+0x3c>
		INITBUF((*dj), sfn, lfn);
    9494:	ce 01       	movw	r24, r28
    9496:	01 96       	adiw	r24, 0x01	; 1
    9498:	f8 01       	movw	r30, r16
    949a:	84 8b       	std	Z+20, r24	; 0x14
    949c:	95 8b       	std	Z+21, r25	; 0x15
		if (!fno) {
    949e:	e1 14       	cp	r14, r1
    94a0:	f1 04       	cpc	r15, r1
    94a2:	39 f4       	brne	.+14     	; 0x94b2 <f_readdir+0x40>
			res = dir_seek(dj, 0);
    94a4:	c8 01       	movw	r24, r16
    94a6:	60 e0       	ldi	r22, 0x00	; 0
    94a8:	70 e0       	ldi	r23, 0x00	; 0
    94aa:	0e 94 81 3c 	call	0x7902	; 0x7902 <dir_seek>
    94ae:	9c 01       	movw	r18, r24
    94b0:	23 c0       	rjmp	.+70     	; 0x94f8 <f_readdir+0x86>
		} else {
			res = dir_read(dj);
    94b2:	c8 01       	movw	r24, r16
    94b4:	0e 94 6e 49 	call	0x92dc	; 0x92dc <dir_read>
    94b8:	9c 01       	movw	r18, r24
			if (res == FR_NO_FILE) {
    94ba:	84 30       	cpi	r24, 0x04	; 4
    94bc:	91 05       	cpc	r25, r1
    94be:	31 f4       	brne	.+12     	; 0x94cc <f_readdir+0x5a>
				dj->sect = 0;
    94c0:	f8 01       	movw	r30, r16
    94c2:	16 86       	std	Z+14, r1	; 0x0e
    94c4:	17 86       	std	Z+15, r1	; 0x0f
    94c6:	10 8a       	std	Z+16, r1	; 0x10
    94c8:	11 8a       	std	Z+17, r1	; 0x11
    94ca:	02 c0       	rjmp	.+4      	; 0x94d0 <f_readdir+0x5e>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    94cc:	00 97       	sbiw	r24, 0x00	; 0
    94ce:	a1 f4       	brne	.+40     	; 0x94f8 <f_readdir+0x86>
				get_fileinfo(dj, fno);		/* Get the object information */
    94d0:	c8 01       	movw	r24, r16
    94d2:	b7 01       	movw	r22, r14
    94d4:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <get_fileinfo>
				res = dir_next(dj, FALSE);	/* Increment index for next */
    94d8:	c8 01       	movw	r24, r16
    94da:	60 e0       	ldi	r22, 0x00	; 0
    94dc:	70 e0       	ldi	r23, 0x00	; 0
    94de:	0e 94 f7 41 	call	0x83ee	; 0x83ee <dir_next>
    94e2:	9c 01       	movw	r18, r24
				if (res == FR_NO_FILE) {
    94e4:	84 30       	cpi	r24, 0x04	; 4
    94e6:	91 05       	cpc	r25, r1
    94e8:	39 f4       	brne	.+14     	; 0x94f8 <f_readdir+0x86>
					dj->sect = 0;
    94ea:	f8 01       	movw	r30, r16
    94ec:	16 86       	std	Z+14, r1	; 0x0e
    94ee:	17 86       	std	Z+15, r1	; 0x0f
    94f0:	10 8a       	std	Z+16, r1	; 0x10
    94f2:	11 8a       	std	Z+17, r1	; 0x11
    94f4:	20 e0       	ldi	r18, 0x00	; 0
    94f6:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj->fs, res);
}
    94f8:	c9 01       	movw	r24, r18
    94fa:	2c 96       	adiw	r28, 0x0c	; 12
    94fc:	e6 e0       	ldi	r30, 0x06	; 6
    94fe:	0c 94 21 5b 	jmp	0xb642	; 0xb642 <__epilogue_restores__+0x18>

00009502 <f_getfree>:
FRESULT f_getfree (
	const XCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
    9502:	a4 e0       	ldi	r26, 0x04	; 4
    9504:	b0 e0       	ldi	r27, 0x00	; 0
    9506:	e7 e8       	ldi	r30, 0x87	; 135
    9508:	fa e4       	ldi	r31, 0x4A	; 74
    950a:	0c 94 fa 5a 	jmp	0xb5f4	; 0xb5f4 <__prologue_saves__+0x2>
    950e:	89 83       	std	Y+1, r24	; 0x01
    9510:	9a 83       	std	Y+2, r25	; 0x02
    9512:	6b 83       	std	Y+3, r22	; 0x03
    9514:	7c 83       	std	Y+4, r23	; 0x04
    9516:	2a 01       	movw	r4, r20
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = auto_mount(&path, fatfs, 0);
    9518:	ce 01       	movw	r24, r28
    951a:	01 96       	adiw	r24, 0x01	; 1
    951c:	ba 01       	movw	r22, r20
    951e:	40 e0       	ldi	r20, 0x00	; 0
    9520:	0e 94 a1 39 	call	0x7342	; 0x7342 <auto_mount>
	if (res != FR_OK) LEAVE_FF(*fatfs, res);
    9524:	00 97       	sbiw	r24, 0x00	; 0
    9526:	11 f0       	breq	.+4      	; 0x952c <f_getfree+0x2a>
    9528:	9c 01       	movw	r18, r24
    952a:	c1 c0       	rjmp	.+386    	; 0x96ae <f_getfree+0x1ac>

	/* If number of free cluster is valid, return it without cluster scan. */
	if ((*fatfs)->free_clust <= (*fatfs)->max_clust - 2) {
    952c:	d2 01       	movw	r26, r4
    952e:	ed 91       	ld	r30, X+
    9530:	fc 91       	ld	r31, X
    9532:	26 85       	ldd	r18, Z+14	; 0x0e
    9534:	37 85       	ldd	r19, Z+15	; 0x0f
    9536:	40 89       	ldd	r20, Z+16	; 0x10
    9538:	51 89       	ldd	r21, Z+17	; 0x11
    953a:	e6 8c       	ldd	r14, Z+30	; 0x1e
    953c:	f7 8c       	ldd	r15, Z+31	; 0x1f
    953e:	00 a1       	ldd	r16, Z+32	; 0x20
    9540:	11 a1       	ldd	r17, Z+33	; 0x21
    9542:	d8 01       	movw	r26, r16
    9544:	c7 01       	movw	r24, r14
    9546:	02 97       	sbiw	r24, 0x02	; 2
    9548:	a1 09       	sbc	r26, r1
    954a:	b1 09       	sbc	r27, r1
    954c:	82 17       	cp	r24, r18
    954e:	93 07       	cpc	r25, r19
    9550:	a4 07       	cpc	r26, r20
    9552:	b5 07       	cpc	r27, r21
    9554:	38 f0       	brcs	.+14     	; 0x9564 <f_getfree+0x62>
		*nclst = (*fatfs)->free_clust;
    9556:	eb 81       	ldd	r30, Y+3	; 0x03
    9558:	fc 81       	ldd	r31, Y+4	; 0x04
    955a:	20 83       	st	Z, r18
    955c:	31 83       	std	Z+1, r19	; 0x01
    955e:	42 83       	std	Z+2, r20	; 0x02
    9560:	53 83       	std	Z+3, r21	; 0x03
    9562:	a3 c0       	rjmp	.+326    	; 0x96aa <f_getfree+0x1a8>
		LEAVE_FF(*fatfs, FR_OK);
	}

	/* Get number of free clusters */
	fat = (*fatfs)->fs_type;
    9564:	30 80       	ld	r3, Z
	n = 0;
	if (fat == FS_FAT12) {
    9566:	21 e0       	ldi	r18, 0x01	; 1
    9568:	32 16       	cp	r3, r18
    956a:	f1 f5       	brne	.+124    	; 0x95e8 <f_getfree+0xe6>
    956c:	aa 24       	eor	r10, r10
    956e:	bb 24       	eor	r11, r11
    9570:	65 01       	movw	r12, r10
    9572:	92 e0       	ldi	r25, 0x02	; 2
    9574:	e9 2e       	mov	r14, r25
    9576:	f1 2c       	mov	r15, r1
    9578:	01 2d       	mov	r16, r1
    957a:	11 2d       	mov	r17, r1
		clst = 2;
		do {
			stat = get_fat(*fatfs, clst);
    957c:	d2 01       	movw	r26, r4
    957e:	8d 91       	ld	r24, X+
    9580:	9c 91       	ld	r25, X
    9582:	b8 01       	movw	r22, r16
    9584:	a7 01       	movw	r20, r14
    9586:	0e 94 cb 3b 	call	0x7796	; 0x7796 <get_fat>
			if (stat == 0xFFFFFFFF) LEAVE_FF(*fatfs, FR_DISK_ERR);
    958a:	6f 3f       	cpi	r22, 0xFF	; 255
    958c:	bf ef       	ldi	r27, 0xFF	; 255
    958e:	7b 07       	cpc	r23, r27
    9590:	bf ef       	ldi	r27, 0xFF	; 255
    9592:	8b 07       	cpc	r24, r27
    9594:	bf ef       	ldi	r27, 0xFF	; 255
    9596:	9b 07       	cpc	r25, r27
    9598:	19 f4       	brne	.+6      	; 0x95a0 <f_getfree+0x9e>
    959a:	21 e0       	ldi	r18, 0x01	; 1
    959c:	30 e0       	ldi	r19, 0x00	; 0
    959e:	87 c0       	rjmp	.+270    	; 0x96ae <f_getfree+0x1ac>
			if (stat == 1) LEAVE_FF(*fatfs, FR_INT_ERR);
    95a0:	61 30       	cpi	r22, 0x01	; 1
    95a2:	71 05       	cpc	r23, r1
    95a4:	81 05       	cpc	r24, r1
    95a6:	91 05       	cpc	r25, r1
    95a8:	19 f4       	brne	.+6      	; 0x95b0 <f_getfree+0xae>
    95aa:	22 e0       	ldi	r18, 0x02	; 2
    95ac:	30 e0       	ldi	r19, 0x00	; 0
    95ae:	7f c0       	rjmp	.+254    	; 0x96ae <f_getfree+0x1ac>
			if (stat == 0) n++;
    95b0:	61 15       	cp	r22, r1
    95b2:	71 05       	cpc	r23, r1
    95b4:	81 05       	cpc	r24, r1
    95b6:	91 05       	cpc	r25, r1
    95b8:	29 f4       	brne	.+10     	; 0x95c4 <f_getfree+0xc2>
    95ba:	08 94       	sec
    95bc:	a1 1c       	adc	r10, r1
    95be:	b1 1c       	adc	r11, r1
    95c0:	c1 1c       	adc	r12, r1
    95c2:	d1 1c       	adc	r13, r1
		} while (++clst < (*fatfs)->max_clust);
    95c4:	08 94       	sec
    95c6:	e1 1c       	adc	r14, r1
    95c8:	f1 1c       	adc	r15, r1
    95ca:	01 1d       	adc	r16, r1
    95cc:	11 1d       	adc	r17, r1
    95ce:	d2 01       	movw	r26, r4
    95d0:	ed 91       	ld	r30, X+
    95d2:	fc 91       	ld	r31, X
    95d4:	86 8d       	ldd	r24, Z+30	; 0x1e
    95d6:	97 8d       	ldd	r25, Z+31	; 0x1f
    95d8:	a0 a1       	ldd	r26, Z+32	; 0x20
    95da:	b1 a1       	ldd	r27, Z+33	; 0x21
    95dc:	e8 16       	cp	r14, r24
    95de:	f9 06       	cpc	r15, r25
    95e0:	0a 07       	cpc	r16, r26
    95e2:	1b 07       	cpc	r17, r27
    95e4:	58 f2       	brcs	.-106    	; 0x957c <f_getfree+0x7a>
    95e6:	4f c0       	rjmp	.+158    	; 0x9686 <f_getfree+0x184>
	} else {
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
    95e8:	62 a0       	ldd	r6, Z+34	; 0x22
    95ea:	73 a0       	ldd	r7, Z+35	; 0x23
    95ec:	84 a0       	ldd	r8, Z+36	; 0x24
    95ee:	95 a0       	ldd	r9, Z+37	; 0x25
    95f0:	aa 24       	eor	r10, r10
    95f2:	bb 24       	eor	r11, r11
    95f4:	65 01       	movw	r12, r10
    95f6:	20 e0       	ldi	r18, 0x00	; 0
    95f8:	30 e0       	ldi	r19, 0x00	; 0
    95fa:	e0 e0       	ldi	r30, 0x00	; 0
    95fc:	f0 e0       	ldi	r31, 0x00	; 0
		i = 0; p = 0;
		do {
			if (!i) {
    95fe:	21 15       	cp	r18, r1
    9600:	31 05       	cpc	r19, r1
    9602:	b1 f4       	brne	.+44     	; 0x9630 <f_getfree+0x12e>
				res = move_window(*fatfs, sect++);
    9604:	f2 01       	movw	r30, r4
    9606:	80 81       	ld	r24, Z
    9608:	91 81       	ldd	r25, Z+1	; 0x01
    960a:	b4 01       	movw	r22, r8
    960c:	a3 01       	movw	r20, r6
    960e:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <move_window>
    9612:	9c 01       	movw	r18, r24
				if (res != FR_OK)
    9614:	00 97       	sbiw	r24, 0x00	; 0
    9616:	09 f0       	breq	.+2      	; 0x961a <f_getfree+0x118>
    9618:	4a c0       	rjmp	.+148    	; 0x96ae <f_getfree+0x1ac>
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
		i = 0; p = 0;
		do {
			if (!i) {
				res = move_window(*fatfs, sect++);
    961a:	08 94       	sec
    961c:	61 1c       	adc	r6, r1
    961e:	71 1c       	adc	r7, r1
    9620:	81 1c       	adc	r8, r1
    9622:	91 1c       	adc	r9, r1
				if (res != FR_OK)
					LEAVE_FF(*fatfs, res);
				p = (*fatfs)->win;
    9624:	d2 01       	movw	r26, r4
    9626:	ed 91       	ld	r30, X+
    9628:	fc 91       	ld	r31, X
    962a:	f2 96       	adiw	r30, 0x32	; 50
    962c:	20 e0       	ldi	r18, 0x00	; 0
    962e:	32 e0       	ldi	r19, 0x02	; 2
				i = SS(*fatfs);
			}
			if (fat == FS_FAT16) {
    9630:	b2 e0       	ldi	r27, 0x02	; 2
    9632:	3b 16       	cp	r3, r27
    9634:	69 f4       	brne	.+26     	; 0x9650 <f_getfree+0x14e>
				if (LD_WORD(p) == 0) n++;
    9636:	80 81       	ld	r24, Z
    9638:	91 81       	ldd	r25, Z+1	; 0x01
    963a:	89 2b       	or	r24, r25
    963c:	29 f4       	brne	.+10     	; 0x9648 <f_getfree+0x146>
    963e:	08 94       	sec
    9640:	a1 1c       	adc	r10, r1
    9642:	b1 1c       	adc	r11, r1
    9644:	c1 1c       	adc	r12, r1
    9646:	d1 1c       	adc	r13, r1
				p += 2; i -= 2;
    9648:	32 96       	adiw	r30, 0x02	; 2
    964a:	22 50       	subi	r18, 0x02	; 2
    964c:	30 40       	sbci	r19, 0x00	; 0
    964e:	10 c0       	rjmp	.+32     	; 0x9670 <f_getfree+0x16e>
			} else {
				if (LD_DWORD(p) == 0) n++;
    9650:	80 81       	ld	r24, Z
    9652:	91 81       	ldd	r25, Z+1	; 0x01
    9654:	a2 81       	ldd	r26, Z+2	; 0x02
    9656:	b3 81       	ldd	r27, Z+3	; 0x03
    9658:	00 97       	sbiw	r24, 0x00	; 0
    965a:	a1 05       	cpc	r26, r1
    965c:	b1 05       	cpc	r27, r1
    965e:	29 f4       	brne	.+10     	; 0x966a <f_getfree+0x168>
    9660:	08 94       	sec
    9662:	a1 1c       	adc	r10, r1
    9664:	b1 1c       	adc	r11, r1
    9666:	c1 1c       	adc	r12, r1
    9668:	d1 1c       	adc	r13, r1
				p += 4; i -= 4;
    966a:	34 96       	adiw	r30, 0x04	; 4
    966c:	24 50       	subi	r18, 0x04	; 4
    966e:	30 40       	sbci	r19, 0x00	; 0
			}
		} while (--clst);
    9670:	08 94       	sec
    9672:	e1 08       	sbc	r14, r1
    9674:	f1 08       	sbc	r15, r1
    9676:	01 09       	sbc	r16, r1
    9678:	11 09       	sbc	r17, r1
    967a:	e1 14       	cp	r14, r1
    967c:	f1 04       	cpc	r15, r1
    967e:	01 05       	cpc	r16, r1
    9680:	11 05       	cpc	r17, r1
    9682:	09 f0       	breq	.+2      	; 0x9686 <f_getfree+0x184>
    9684:	bc cf       	rjmp	.-136    	; 0x95fe <f_getfree+0xfc>
	}
	(*fatfs)->free_clust = n;
    9686:	d2 01       	movw	r26, r4
    9688:	ed 91       	ld	r30, X+
    968a:	fc 91       	ld	r31, X
    968c:	a6 86       	std	Z+14, r10	; 0x0e
    968e:	b7 86       	std	Z+15, r11	; 0x0f
    9690:	c0 8a       	std	Z+16, r12	; 0x10
    9692:	d1 8a       	std	Z+17, r13	; 0x11
	if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
    9694:	b3 e0       	ldi	r27, 0x03	; 3
    9696:	3b 16       	cp	r3, r27
    9698:	11 f4       	brne	.+4      	; 0x969e <f_getfree+0x19c>
    969a:	81 e0       	ldi	r24, 0x01	; 1
    969c:	81 87       	std	Z+9, r24	; 0x09
	*nclst = n;
    969e:	eb 81       	ldd	r30, Y+3	; 0x03
    96a0:	fc 81       	ldd	r31, Y+4	; 0x04
    96a2:	a0 82       	st	Z, r10
    96a4:	b1 82       	std	Z+1, r11	; 0x01
    96a6:	c2 82       	std	Z+2, r12	; 0x02
    96a8:	d3 82       	std	Z+3, r13	; 0x03
    96aa:	20 e0       	ldi	r18, 0x00	; 0
    96ac:	30 e0       	ldi	r19, 0x00	; 0

	LEAVE_FF(*fatfs, FR_OK);
}
    96ae:	c9 01       	movw	r24, r18
    96b0:	24 96       	adiw	r28, 0x04	; 4
    96b2:	e1 e1       	ldi	r30, 0x11	; 17
    96b4:	0c 94 16 5b 	jmp	0xb62c	; 0xb62c <__epilogue_restores__+0x2>

000096b8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    96b8:	0f 93       	push	r16
    96ba:	1f 93       	push	r17
    96bc:	cf 93       	push	r28
    96be:	df 93       	push	r29
    96c0:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    96c2:	6a 81       	ldd	r22, Y+2	; 0x02
    96c4:	7b 81       	ldd	r23, Y+3	; 0x03
    96c6:	88 81       	ld	r24, Y
    96c8:	99 81       	ldd	r25, Y+1	; 0x01
    96ca:	0e 94 3a 39 	call	0x7274	; 0x7274 <validate>
    96ce:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    96d0:	00 97       	sbiw	r24, 0x00	; 0
    96d2:	e1 f5       	brne	.+120    	; 0x974c <f_sync+0x94>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    96d4:	8c 81       	ldd	r24, Y+4	; 0x04
    96d6:	85 ff       	sbrs	r24, 5
    96d8:	39 c0       	rjmp	.+114    	; 0x974c <f_sync+0x94>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    96da:	4a 8d       	ldd	r20, Y+26	; 0x1a
    96dc:	5b 8d       	ldd	r21, Y+27	; 0x1b
    96de:	6c 8d       	ldd	r22, Y+28	; 0x1c
    96e0:	7d 8d       	ldd	r23, Y+29	; 0x1d
    96e2:	88 81       	ld	r24, Y
    96e4:	99 81       	ldd	r25, Y+1	; 0x01
    96e6:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <move_window>
    96ea:	9c 01       	movw	r18, r24
			if (res == FR_OK) {
    96ec:	00 97       	sbiw	r24, 0x00	; 0
    96ee:	71 f5       	brne	.+92     	; 0x974c <f_sync+0x94>
				dir = fp->dir_ptr;
    96f0:	0e 8d       	ldd	r16, Y+30	; 0x1e
    96f2:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    96f4:	f8 01       	movw	r30, r16
    96f6:	83 85       	ldd	r24, Z+11	; 0x0b
    96f8:	80 62       	ori	r24, 0x20	; 32
    96fa:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    96fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    96fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    9700:	ac 85       	ldd	r26, Y+12	; 0x0c
    9702:	bd 85       	ldd	r27, Y+13	; 0x0d
    9704:	84 8f       	std	Z+28, r24	; 0x1c
    9706:	95 8f       	std	Z+29, r25	; 0x1d
    9708:	a6 8f       	std	Z+30, r26	; 0x1e
    970a:	b7 8f       	std	Z+31, r27	; 0x1f
				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
    970c:	8e 85       	ldd	r24, Y+14	; 0x0e
    970e:	9f 85       	ldd	r25, Y+15	; 0x0f
    9710:	82 8f       	std	Z+26, r24	; 0x1a
    9712:	93 8f       	std	Z+27, r25	; 0x1b
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
    9714:	8e 85       	ldd	r24, Y+14	; 0x0e
    9716:	9f 85       	ldd	r25, Y+15	; 0x0f
    9718:	a8 89       	ldd	r26, Y+16	; 0x10
    971a:	b9 89       	ldd	r27, Y+17	; 0x11
    971c:	cd 01       	movw	r24, r26
    971e:	aa 27       	eor	r26, r26
    9720:	bb 27       	eor	r27, r27
    9722:	84 8b       	std	Z+20, r24	; 0x14
    9724:	95 8b       	std	Z+21, r25	; 0x15
				tim = get_fattime();			/* Updated time */
    9726:	0e 94 d0 57 	call	0xafa0	; 0xafa0 <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
    972a:	f8 01       	movw	r30, r16
    972c:	66 8b       	std	Z+22, r22	; 0x16
    972e:	77 8b       	std	Z+23, r23	; 0x17
    9730:	80 8f       	std	Z+24, r24	; 0x18
    9732:	91 8f       	std	Z+25, r25	; 0x19
				fp->flag &= ~FA__WRITTEN;
    9734:	8c 81       	ldd	r24, Y+4	; 0x04
    9736:	8f 7d       	andi	r24, 0xDF	; 223
    9738:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    973a:	e8 81       	ld	r30, Y
    973c:	f9 81       	ldd	r31, Y+1	; 0x01
    973e:	81 e0       	ldi	r24, 0x01	; 1
    9740:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    9742:	88 81       	ld	r24, Y
    9744:	99 81       	ldd	r25, Y+1	; 0x01
    9746:	0e 94 02 46 	call	0x8c04	; 0x8c04 <sync>
    974a:	9c 01       	movw	r18, r24
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    974c:	c9 01       	movw	r24, r18
    974e:	df 91       	pop	r29
    9750:	cf 91       	pop	r28
    9752:	1f 91       	pop	r17
    9754:	0f 91       	pop	r16
    9756:	08 95       	ret

00009758 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    9758:	cf 93       	push	r28
    975a:	df 93       	push	r29
    975c:	ec 01       	movw	r28, r24
#if _FS_READONLY
	res = validate(fp->fs, fp->id);
	if (res == FR_OK) fp->fs = NULL;
	LEAVE_FF(fp->fs, res);
#else
	res = f_sync(fp);
    975e:	0e 94 5c 4b 	call	0x96b8	; 0x96b8 <f_sync>
    9762:	9c 01       	movw	r18, r24
	if (res == FR_OK) fp->fs = NULL;
    9764:	00 97       	sbiw	r24, 0x00	; 0
    9766:	11 f4       	brne	.+4      	; 0x976c <f_close+0x14>
    9768:	18 82       	st	Y, r1
    976a:	19 82       	std	Y+1, r1	; 0x01
	return res;
#endif
}
    976c:	c9 01       	movw	r24, r18
    976e:	df 91       	pop	r29
    9770:	cf 91       	pop	r28
    9772:	08 95       	ret

00009774 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    9774:	a4 e0       	ldi	r26, 0x04	; 4
    9776:	b0 e0       	ldi	r27, 0x00	; 0
    9778:	e0 ec       	ldi	r30, 0xC0	; 192
    977a:	fb e4       	ldi	r31, 0x4B	; 75
    977c:	0c 94 f9 5a 	jmp	0xb5f2	; 0xb5f2 <__prologue_saves__>
    9780:	8b 83       	std	Y+3, r24	; 0x03
    9782:	9c 83       	std	Y+4, r25	; 0x04
    9784:	16 2f       	mov	r17, r22
    9786:	07 2f       	mov	r16, r23
    9788:	3a 01       	movw	r6, r20
    978a:	29 83       	std	Y+1, r18	; 0x01
    978c:	3a 83       	std	Y+2, r19	; 0x02
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;


	*bw = 0;
    978e:	d9 01       	movw	r26, r18
    9790:	1d 92       	st	X+, r1
    9792:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    9794:	fc 01       	movw	r30, r24
    9796:	62 81       	ldd	r22, Z+2	; 0x02
    9798:	73 81       	ldd	r23, Z+3	; 0x03
    979a:	80 81       	ld	r24, Z
    979c:	91 81       	ldd	r25, Z+1	; 0x01
    979e:	0e 94 3a 39 	call	0x7274	; 0x7274 <validate>
    97a2:	4c 01       	movw	r8, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    97a4:	00 97       	sbiw	r24, 0x00	; 0
    97a6:	09 f0       	breq	.+2      	; 0x97aa <f_write+0x36>
    97a8:	09 c2       	rjmp	.+1042   	; 0x9bbc <f_write+0x448>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    97aa:	ab 81       	ldd	r26, Y+3	; 0x03
    97ac:	bc 81       	ldd	r27, Y+4	; 0x04
    97ae:	14 96       	adiw	r26, 0x04	; 4
    97b0:	8c 91       	ld	r24, X
    97b2:	87 fd       	sbrc	r24, 7
    97b4:	78 c0       	rjmp	.+240    	; 0x98a6 <f_write+0x132>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
    97b6:	81 fd       	sbrc	r24, 1
    97b8:	04 c0       	rjmp	.+8      	; 0x97c2 <f_write+0x4e>
    97ba:	f7 e0       	ldi	r31, 0x07	; 7
    97bc:	8f 2e       	mov	r8, r31
    97be:	91 2c       	mov	r9, r1
    97c0:	fd c1       	rjmp	.+1018   	; 0x9bbc <f_write+0x448>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
    97c2:	eb 81       	ldd	r30, Y+3	; 0x03
    97c4:	fc 81       	ldd	r31, Y+4	; 0x04
    97c6:	22 85       	ldd	r18, Z+10	; 0x0a
    97c8:	33 85       	ldd	r19, Z+11	; 0x0b
    97ca:	44 85       	ldd	r20, Z+12	; 0x0c
    97cc:	55 85       	ldd	r21, Z+13	; 0x0d
    97ce:	c3 01       	movw	r24, r6
    97d0:	a0 e0       	ldi	r26, 0x00	; 0
    97d2:	b0 e0       	ldi	r27, 0x00	; 0
    97d4:	82 0f       	add	r24, r18
    97d6:	93 1f       	adc	r25, r19
    97d8:	a4 1f       	adc	r26, r20
    97da:	b5 1f       	adc	r27, r21
    97dc:	82 17       	cp	r24, r18
    97de:	93 07       	cpc	r25, r19
    97e0:	a4 07       	cpc	r26, r20
    97e2:	b5 07       	cpc	r27, r21
    97e4:	10 f4       	brcc	.+4      	; 0x97ea <f_write+0x76>
    97e6:	66 24       	eor	r6, r6
    97e8:	77 24       	eor	r7, r7
)
{
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    97ea:	81 2f       	mov	r24, r17
    97ec:	90 2f       	mov	r25, r16
    97ee:	9c 01       	movw	r18, r24
    97f0:	29 01       	movw	r4, r18
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
    97f2:	22 24       	eor	r2, r2
    97f4:	23 94       	inc	r2
    97f6:	bd c1       	rjmp	.+890    	; 0x9b72 <f_write+0x3fe>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    97f8:	ab 81       	ldd	r26, Y+3	; 0x03
    97fa:	bc 81       	ldd	r27, Y+4	; 0x04
    97fc:	16 96       	adiw	r26, 0x06	; 6
    97fe:	2d 91       	ld	r18, X+
    9800:	3d 91       	ld	r19, X+
    9802:	4d 91       	ld	r20, X+
    9804:	5c 91       	ld	r21, X
    9806:	19 97       	sbiw	r26, 0x09	; 9
    9808:	da 01       	movw	r26, r20
    980a:	c9 01       	movw	r24, r18
    980c:	91 70       	andi	r25, 0x01	; 1
    980e:	a0 70       	andi	r26, 0x00	; 0
    9810:	b0 70       	andi	r27, 0x00	; 0
    9812:	00 97       	sbiw	r24, 0x00	; 0
    9814:	a1 05       	cpc	r26, r1
    9816:	b1 05       	cpc	r27, r1
    9818:	09 f0       	breq	.+2      	; 0x981c <f_write+0xa8>
    981a:	4a c1       	rjmp	.+660    	; 0x9ab0 <f_write+0x33c>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    981c:	ab 81       	ldd	r26, Y+3	; 0x03
    981e:	bc 81       	ldd	r27, Y+4	; 0x04
    9820:	ed 91       	ld	r30, X+
    9822:	fc 91       	ld	r31, X
    9824:	11 97       	sbiw	r26, 0x01	; 1
    9826:	15 96       	adiw	r26, 0x05	; 5
    9828:	9c 91       	ld	r25, X
    982a:	15 97       	sbiw	r26, 0x05	; 5
    982c:	82 81       	ldd	r24, Z+2	; 0x02
    982e:	98 17       	cp	r25, r24
    9830:	08 f4       	brcc	.+2      	; 0x9834 <f_write+0xc0>
    9832:	55 c0       	rjmp	.+170    	; 0x98de <f_write+0x16a>
				if (fp->fptr == 0) {				/* On the top of the file? */
    9834:	21 15       	cp	r18, r1
    9836:	31 05       	cpc	r19, r1
    9838:	41 05       	cpc	r20, r1
    983a:	51 05       	cpc	r21, r1
    983c:	c9 f4       	brne	.+50     	; 0x9870 <f_write+0xfc>
					clst = fp->org_clust;			/* Follow from the origin */
    983e:	1e 96       	adiw	r26, 0x0e	; 14
    9840:	6d 91       	ld	r22, X+
    9842:	7d 91       	ld	r23, X+
    9844:	8d 91       	ld	r24, X+
    9846:	9c 91       	ld	r25, X
    9848:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 0)					/* When there is no cluster chain, */
    984a:	61 15       	cp	r22, r1
    984c:	71 05       	cpc	r23, r1
    984e:	81 05       	cpc	r24, r1
    9850:	91 05       	cpc	r25, r1
    9852:	f9 f4       	brne	.+62     	; 0x9892 <f_write+0x11e>
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    9854:	cf 01       	movw	r24, r30
    9856:	40 e0       	ldi	r20, 0x00	; 0
    9858:	50 e0       	ldi	r21, 0x00	; 0
    985a:	60 e0       	ldi	r22, 0x00	; 0
    985c:	70 e0       	ldi	r23, 0x00	; 0
    985e:	0e 94 41 3e 	call	0x7c82	; 0x7c82 <create_chain>
    9862:	eb 81       	ldd	r30, Y+3	; 0x03
    9864:	fc 81       	ldd	r31, Y+4	; 0x04
    9866:	66 87       	std	Z+14, r22	; 0x0e
    9868:	77 87       	std	Z+15, r23	; 0x0f
    986a:	80 8b       	std	Z+16, r24	; 0x10
    986c:	91 8b       	std	Z+17, r25	; 0x11
    986e:	0b c0       	rjmp	.+22     	; 0x9886 <f_write+0x112>
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
    9870:	ab 81       	ldd	r26, Y+3	; 0x03
    9872:	bc 81       	ldd	r27, Y+4	; 0x04
    9874:	52 96       	adiw	r26, 0x12	; 18
    9876:	4d 91       	ld	r20, X+
    9878:	5d 91       	ld	r21, X+
    987a:	6d 91       	ld	r22, X+
    987c:	7c 91       	ld	r23, X
    987e:	55 97       	sbiw	r26, 0x15	; 21
    9880:	cf 01       	movw	r24, r30
    9882:	0e 94 41 3e 	call	0x7c82	; 0x7c82 <create_chain>
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
    9886:	61 15       	cp	r22, r1
    9888:	71 05       	cpc	r23, r1
    988a:	81 05       	cpc	r24, r1
    988c:	91 05       	cpc	r25, r1
    988e:	09 f4       	brne	.+2      	; 0x9892 <f_write+0x11e>
    9890:	74 c1       	rjmp	.+744    	; 0x9b7a <f_write+0x406>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    9892:	61 30       	cpi	r22, 0x01	; 1
    9894:	71 05       	cpc	r23, r1
    9896:	81 05       	cpc	r24, r1
    9898:	91 05       	cpc	r25, r1
    989a:	49 f4       	brne	.+18     	; 0x98ae <f_write+0x13a>
    989c:	eb 81       	ldd	r30, Y+3	; 0x03
    989e:	fc 81       	ldd	r31, Y+4	; 0x04
    98a0:	84 81       	ldd	r24, Z+4	; 0x04
    98a2:	80 68       	ori	r24, 0x80	; 128
    98a4:	84 83       	std	Z+4, r24	; 0x04
    98a6:	e2 e0       	ldi	r30, 0x02	; 2
    98a8:	8e 2e       	mov	r8, r30
    98aa:	91 2c       	mov	r9, r1
    98ac:	87 c1       	rjmp	.+782    	; 0x9bbc <f_write+0x448>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    98ae:	6f 3f       	cpi	r22, 0xFF	; 255
    98b0:	ff ef       	ldi	r31, 0xFF	; 255
    98b2:	7f 07       	cpc	r23, r31
    98b4:	ff ef       	ldi	r31, 0xFF	; 255
    98b6:	8f 07       	cpc	r24, r31
    98b8:	ff ef       	ldi	r31, 0xFF	; 255
    98ba:	9f 07       	cpc	r25, r31
    98bc:	49 f4       	brne	.+18     	; 0x98d0 <f_write+0x15c>
    98be:	ab 81       	ldd	r26, Y+3	; 0x03
    98c0:	bc 81       	ldd	r27, Y+4	; 0x04
    98c2:	14 96       	adiw	r26, 0x04	; 4
    98c4:	8c 91       	ld	r24, X
    98c6:	14 97       	sbiw	r26, 0x04	; 4
    98c8:	80 68       	ori	r24, 0x80	; 128
    98ca:	14 96       	adiw	r26, 0x04	; 4
    98cc:	8c 93       	st	X, r24
    98ce:	09 c1       	rjmp	.+530    	; 0x9ae2 <f_write+0x36e>
				fp->curr_clust = clst;				/* Update current cluster */
    98d0:	eb 81       	ldd	r30, Y+3	; 0x03
    98d2:	fc 81       	ldd	r31, Y+4	; 0x04
    98d4:	62 8b       	std	Z+18, r22	; 0x12
    98d6:	73 8b       	std	Z+19, r23	; 0x13
    98d8:	84 8b       	std	Z+20, r24	; 0x14
    98da:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector address in the cluster */
    98dc:	15 82       	std	Z+5, r1	; 0x05
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
    98de:	ab 81       	ldd	r26, Y+3	; 0x03
    98e0:	bc 81       	ldd	r27, Y+4	; 0x04
    98e2:	ed 91       	ld	r30, X+
    98e4:	fc 91       	ld	r31, X
    98e6:	11 97       	sbiw	r26, 0x01	; 1
    98e8:	26 a5       	ldd	r18, Z+46	; 0x2e
    98ea:	37 a5       	ldd	r19, Z+47	; 0x2f
    98ec:	40 a9       	ldd	r20, Z+48	; 0x30
    98ee:	51 a9       	ldd	r21, Z+49	; 0x31
    98f0:	56 96       	adiw	r26, 0x16	; 22
    98f2:	ed 90       	ld	r14, X+
    98f4:	fd 90       	ld	r15, X+
    98f6:	0d 91       	ld	r16, X+
    98f8:	1c 91       	ld	r17, X
    98fa:	59 97       	sbiw	r26, 0x19	; 25
    98fc:	2e 15       	cp	r18, r14
    98fe:	3f 05       	cpc	r19, r15
    9900:	40 07       	cpc	r20, r16
    9902:	51 07       	cpc	r21, r17
    9904:	51 f4       	brne	.+20     	; 0x991a <f_write+0x1a6>
    9906:	cf 01       	movw	r24, r30
    9908:	40 e0       	ldi	r20, 0x00	; 0
    990a:	50 e0       	ldi	r21, 0x00	; 0
    990c:	60 e0       	ldi	r22, 0x00	; 0
    990e:	70 e0       	ldi	r23, 0x00	; 0
    9910:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <move_window>
    9914:	89 2b       	or	r24, r25
    9916:	09 f0       	breq	.+2      	; 0x991a <f_write+0x1a6>
    9918:	df c0       	rjmp	.+446    	; 0x9ad8 <f_write+0x364>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    991a:	ab 81       	ldd	r26, Y+3	; 0x03
    991c:	bc 81       	ldd	r27, Y+4	; 0x04
    991e:	0d 91       	ld	r16, X+
    9920:	1c 91       	ld	r17, X
    9922:	11 97       	sbiw	r26, 0x01	; 1
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    9924:	52 96       	adiw	r26, 0x12	; 18
    9926:	2d 91       	ld	r18, X+
    9928:	3d 91       	ld	r19, X+
    992a:	4d 91       	ld	r20, X+
    992c:	5c 91       	ld	r21, X
    992e:	55 97       	sbiw	r26, 0x15	; 21
    9930:	22 50       	subi	r18, 0x02	; 2
    9932:	30 40       	sbci	r19, 0x00	; 0
    9934:	40 40       	sbci	r20, 0x00	; 0
    9936:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    9938:	f8 01       	movw	r30, r16
    993a:	86 8d       	ldd	r24, Z+30	; 0x1e
    993c:	97 8d       	ldd	r25, Z+31	; 0x1f
    993e:	a0 a1       	ldd	r26, Z+32	; 0x20
    9940:	b1 a1       	ldd	r27, Z+33	; 0x21
    9942:	02 97       	sbiw	r24, 0x02	; 2
    9944:	a1 09       	sbc	r26, r1
    9946:	b1 09       	sbc	r27, r1
    9948:	28 17       	cp	r18, r24
    994a:	39 07       	cpc	r19, r25
    994c:	4a 07       	cpc	r20, r26
    994e:	5b 07       	cpc	r21, r27
    9950:	b8 f4       	brcc	.+46     	; 0x9980 <f_write+0x20c>
	return clst * fs->csize + fs->database;
    9952:	32 80       	ldd	r3, Z+2	; 0x02
    9954:	63 2d       	mov	r22, r3
    9956:	70 e0       	ldi	r23, 0x00	; 0
    9958:	80 e0       	ldi	r24, 0x00	; 0
    995a:	90 e0       	ldi	r25, 0x00	; 0
    995c:	0e 94 76 5a 	call	0xb4ec	; 0xb4ec <__mulsi3>
    9960:	9b 01       	movw	r18, r22
    9962:	ac 01       	movw	r20, r24
    9964:	f8 01       	movw	r30, r16
    9966:	82 a5       	ldd	r24, Z+42	; 0x2a
    9968:	93 a5       	ldd	r25, Z+43	; 0x2b
    996a:	a4 a5       	ldd	r26, Z+44	; 0x2c
    996c:	b5 a5       	ldd	r27, Z+45	; 0x2d
    996e:	28 0f       	add	r18, r24
    9970:	39 1f       	adc	r19, r25
    9972:	4a 1f       	adc	r20, r26
    9974:	5b 1f       	adc	r21, r27
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    9976:	21 15       	cp	r18, r1
    9978:	31 05       	cpc	r19, r1
    997a:	41 05       	cpc	r20, r1
    997c:	51 05       	cpc	r21, r1
    997e:	49 f4       	brne	.+18     	; 0x9992 <f_write+0x21e>
    9980:	ab 81       	ldd	r26, Y+3	; 0x03
    9982:	bc 81       	ldd	r27, Y+4	; 0x04
    9984:	14 96       	adiw	r26, 0x04	; 4
    9986:	8c 91       	ld	r24, X
    9988:	14 97       	sbiw	r26, 0x04	; 4
    998a:	80 68       	ori	r24, 0x80	; 128
    998c:	14 96       	adiw	r26, 0x04	; 4
    998e:	8c 93       	st	X, r24
    9990:	8a cf       	rjmp	.-236    	; 0x98a6 <f_write+0x132>
			sect += fp->csect;
    9992:	eb 81       	ldd	r30, Y+3	; 0x03
    9994:	fc 81       	ldd	r31, Y+4	; 0x04
    9996:	85 81       	ldd	r24, Z+5	; 0x05
    9998:	59 01       	movw	r10, r18
    999a:	6a 01       	movw	r12, r20
    999c:	a8 0e       	add	r10, r24
    999e:	b1 1c       	adc	r11, r1
    99a0:	c1 1c       	adc	r12, r1
    99a2:	d1 1c       	adc	r13, r1
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
    99a4:	73 01       	movw	r14, r6
    99a6:	ef 2c       	mov	r14, r15
    99a8:	ff 24       	eor	r15, r15
    99aa:	e6 94       	lsr	r14
			if (cc) {								/* Write maximum contiguous sectors directly */
    99ac:	e1 14       	cp	r14, r1
    99ae:	f1 04       	cpc	r15, r1
    99b0:	09 f4       	brne	.+2      	; 0x99b4 <f_write+0x240>
    99b2:	51 c0       	rjmp	.+162    	; 0x9a56 <f_write+0x2e2>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    99b4:	28 2f       	mov	r18, r24
    99b6:	30 e0       	ldi	r19, 0x00	; 0
    99b8:	c7 01       	movw	r24, r14
    99ba:	82 0f       	add	r24, r18
    99bc:	93 1f       	adc	r25, r19
    99be:	63 2d       	mov	r22, r3
    99c0:	70 e0       	ldi	r23, 0x00	; 0
    99c2:	68 17       	cp	r22, r24
    99c4:	79 07       	cpc	r23, r25
    99c6:	18 f4       	brcc	.+6      	; 0x99ce <f_write+0x25a>
					cc = fp->fs->csize - fp->csect;
    99c8:	7b 01       	movw	r14, r22
    99ca:	e2 1a       	sub	r14, r18
    99cc:	f3 0a       	sbc	r15, r19
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
    99ce:	d8 01       	movw	r26, r16
    99d0:	11 96       	adiw	r26, 0x01	; 1
    99d2:	8c 91       	ld	r24, X
    99d4:	b2 01       	movw	r22, r4
    99d6:	a6 01       	movw	r20, r12
    99d8:	95 01       	movw	r18, r10
    99da:	0e 2d       	mov	r16, r14
    99dc:	0e 94 48 54 	call	0xa890	; 0xa890 <disk_write>
    99e0:	89 2b       	or	r24, r25
    99e2:	09 f0       	breq	.+2      	; 0x99e6 <f_write+0x272>
    99e4:	79 c0       	rjmp	.+242    	; 0x9ad8 <f_write+0x364>
					ABORT(fp->fs, FR_DISK_ERR);
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
    99e6:	ab 81       	ldd	r26, Y+3	; 0x03
    99e8:	bc 81       	ldd	r27, Y+4	; 0x04
    99ea:	ed 91       	ld	r30, X+
    99ec:	fc 91       	ld	r31, X
    99ee:	26 a5       	ldd	r18, Z+46	; 0x2e
    99f0:	37 a5       	ldd	r19, Z+47	; 0x2f
    99f2:	40 a9       	ldd	r20, Z+48	; 0x30
    99f4:	51 a9       	ldd	r21, Z+49	; 0x31
    99f6:	2a 19       	sub	r18, r10
    99f8:	3b 09       	sbc	r19, r11
    99fa:	4c 09       	sbc	r20, r12
    99fc:	5d 09       	sbc	r21, r13
    99fe:	c7 01       	movw	r24, r14
    9a00:	a0 e0       	ldi	r26, 0x00	; 0
    9a02:	b0 e0       	ldi	r27, 0x00	; 0
    9a04:	28 17       	cp	r18, r24
    9a06:	39 07       	cpc	r19, r25
    9a08:	4a 07       	cpc	r20, r26
    9a0a:	5b 07       	cpc	r21, r27
    9a0c:	d0 f4       	brcc	.+52     	; 0x9a42 <f_write+0x2ce>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    9a0e:	df 01       	movw	r26, r30
    9a10:	d2 96       	adiw	r26, 0x32	; 50
	const char *s = (const char *)src;
    9a12:	69 e0       	ldi	r22, 0x09	; 9
    9a14:	22 0f       	add	r18, r18
    9a16:	33 1f       	adc	r19, r19
    9a18:	44 1f       	adc	r20, r20
    9a1a:	55 1f       	adc	r21, r21
    9a1c:	6a 95       	dec	r22
    9a1e:	d1 f7       	brne	.-12     	; 0x9a14 <f_write+0x2a0>
    9a20:	f2 01       	movw	r30, r4
    9a22:	e2 0f       	add	r30, r18
    9a24:	f3 1f       	adc	r31, r19
	while (cnt--) *d++ = *s++;
    9a26:	9f 01       	movw	r18, r30
    9a28:	20 50       	subi	r18, 0x00	; 0
    9a2a:	3e 4f       	sbci	r19, 0xFE	; 254
    9a2c:	02 c0       	rjmp	.+4      	; 0x9a32 <f_write+0x2be>
    9a2e:	81 91       	ld	r24, Z+
    9a30:	8d 93       	st	X+, r24
    9a32:	e2 17       	cp	r30, r18
    9a34:	f3 07       	cpc	r31, r19
    9a36:	d9 f7       	brne	.-10     	; 0x9a2e <f_write+0x2ba>
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
    9a38:	ab 81       	ldd	r26, Y+3	; 0x03
    9a3a:	bc 81       	ldd	r27, Y+4	; 0x04
    9a3c:	ed 91       	ld	r30, X+
    9a3e:	fc 91       	ld	r31, X
    9a40:	14 82       	std	Z+4, r1	; 0x04
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    9a42:	eb 81       	ldd	r30, Y+3	; 0x03
    9a44:	fc 81       	ldd	r31, Y+4	; 0x04
    9a46:	85 81       	ldd	r24, Z+5	; 0x05
    9a48:	8e 0d       	add	r24, r14
    9a4a:	85 83       	std	Z+5, r24	; 0x05
				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    9a4c:	b7 01       	movw	r22, r14
    9a4e:	76 2f       	mov	r23, r22
    9a50:	66 27       	eor	r22, r22
    9a52:	77 0f       	add	r23, r23
    9a54:	71 c0       	rjmp	.+226    	; 0x9b38 <f_write+0x3c4>
				continue;
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
    9a56:	ab 81       	ldd	r26, Y+3	; 0x03
    9a58:	bc 81       	ldd	r27, Y+4	; 0x04
    9a5a:	16 96       	adiw	r26, 0x06	; 6
    9a5c:	2d 91       	ld	r18, X+
    9a5e:	3d 91       	ld	r19, X+
    9a60:	4d 91       	ld	r20, X+
    9a62:	5c 91       	ld	r21, X
    9a64:	19 97       	sbiw	r26, 0x09	; 9
    9a66:	1a 96       	adiw	r26, 0x0a	; 10
    9a68:	8d 91       	ld	r24, X+
    9a6a:	9d 91       	ld	r25, X+
    9a6c:	0d 90       	ld	r0, X+
    9a6e:	bc 91       	ld	r27, X
    9a70:	a0 2d       	mov	r26, r0
    9a72:	28 17       	cp	r18, r24
    9a74:	39 07       	cpc	r19, r25
    9a76:	4a 07       	cpc	r20, r26
    9a78:	5b 07       	cpc	r21, r27
    9a7a:	88 f0       	brcs	.+34     	; 0x9a9e <f_write+0x32a>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    9a7c:	c8 01       	movw	r24, r16
    9a7e:	40 e0       	ldi	r20, 0x00	; 0
    9a80:	50 e0       	ldi	r21, 0x00	; 0
    9a82:	60 e0       	ldi	r22, 0x00	; 0
    9a84:	70 e0       	ldi	r23, 0x00	; 0
    9a86:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <move_window>
    9a8a:	89 2b       	or	r24, r25
    9a8c:	29 f5       	brne	.+74     	; 0x9ad8 <f_write+0x364>
				fp->fs->winsect = sect;
    9a8e:	ab 81       	ldd	r26, Y+3	; 0x03
    9a90:	bc 81       	ldd	r27, Y+4	; 0x04
    9a92:	ed 91       	ld	r30, X+
    9a94:	fc 91       	ld	r31, X
    9a96:	a6 a6       	std	Z+46, r10	; 0x2e
    9a98:	b7 a6       	std	Z+47, r11	; 0x2f
    9a9a:	c0 aa       	std	Z+48, r12	; 0x30
    9a9c:	d1 aa       	std	Z+49, r13	; 0x31
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    9a9e:	eb 81       	ldd	r30, Y+3	; 0x03
    9aa0:	fc 81       	ldd	r31, Y+4	; 0x04
    9aa2:	a6 8a       	std	Z+22, r10	; 0x16
    9aa4:	b7 8a       	std	Z+23, r11	; 0x17
    9aa6:	c0 8e       	std	Z+24, r12	; 0x18
    9aa8:	d1 8e       	std	Z+25, r13	; 0x19
			fp->csect++;							/* Next sector address in the cluster */
    9aaa:	85 81       	ldd	r24, Z+5	; 0x05
    9aac:	8f 5f       	subi	r24, 0xFF	; 255
    9aae:	85 83       	std	Z+5, r24	; 0x05
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    9ab0:	ab 81       	ldd	r26, Y+3	; 0x03
    9ab2:	bc 81       	ldd	r27, Y+4	; 0x04
    9ab4:	16 96       	adiw	r26, 0x06	; 6
    9ab6:	cd 90       	ld	r12, X+
    9ab8:	dd 90       	ld	r13, X+
    9aba:	ed 90       	ld	r14, X+
    9abc:	fc 90       	ld	r15, X
    9abe:	19 97       	sbiw	r26, 0x09	; 9
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
    9ac0:	56 96       	adiw	r26, 0x16	; 22
    9ac2:	4d 91       	ld	r20, X+
    9ac4:	5d 91       	ld	r21, X+
    9ac6:	6d 91       	ld	r22, X+
    9ac8:	7c 91       	ld	r23, X
    9aca:	59 97       	sbiw	r26, 0x19	; 25
    9acc:	8d 91       	ld	r24, X+
    9ace:	9c 91       	ld	r25, X
    9ad0:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <move_window>
    9ad4:	89 2b       	or	r24, r25
    9ad6:	49 f0       	breq	.+18     	; 0x9aea <f_write+0x376>
			ABORT(fp->fs, FR_DISK_ERR);
    9ad8:	eb 81       	ldd	r30, Y+3	; 0x03
    9ada:	fc 81       	ldd	r31, Y+4	; 0x04
    9adc:	84 81       	ldd	r24, Z+4	; 0x04
    9ade:	80 68       	ori	r24, 0x80	; 128
    9ae0:	84 83       	std	Z+4, r24	; 0x04
    9ae2:	31 e0       	ldi	r19, 0x01	; 1
    9ae4:	83 2e       	mov	r8, r19
    9ae6:	91 2c       	mov	r9, r1
    9ae8:	69 c0       	rjmp	.+210    	; 0x9bbc <f_write+0x448>
			}
#endif
			fp->dsect = sect;
			fp->csect++;							/* Next sector address in the cluster */
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    9aea:	c6 01       	movw	r24, r12
    9aec:	91 70       	andi	r25, 0x01	; 1
    9aee:	20 e0       	ldi	r18, 0x00	; 0
    9af0:	32 e0       	ldi	r19, 0x02	; 2
    9af2:	28 1b       	sub	r18, r24
    9af4:	39 0b       	sbc	r19, r25
    9af6:	b3 01       	movw	r22, r6
    9af8:	26 15       	cp	r18, r6
    9afa:	37 05       	cpc	r19, r7
    9afc:	08 f4       	brcc	.+2      	; 0x9b00 <f_write+0x38c>
    9afe:	b9 01       	movw	r22, r18
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    9b00:	ab 81       	ldd	r26, Y+3	; 0x03
    9b02:	bc 81       	ldd	r27, Y+4	; 0x04
    9b04:	16 96       	adiw	r26, 0x06	; 6
    9b06:	8d 91       	ld	r24, X+
    9b08:	9c 91       	ld	r25, X
    9b0a:	17 97       	sbiw	r26, 0x07	; 7
    9b0c:	91 70       	andi	r25, 0x01	; 1
    9b0e:	c2 96       	adiw	r24, 0x32	; 50
    9b10:	0d 90       	ld	r0, X+
    9b12:	bc 91       	ld	r27, X
    9b14:	a0 2d       	mov	r26, r0
    9b16:	a8 0f       	add	r26, r24
    9b18:	b9 1f       	adc	r27, r25
	const char *s = (const char *)src;
    9b1a:	f2 01       	movw	r30, r4
	while (cnt--) *d++ = *s++;
    9b1c:	92 01       	movw	r18, r4
    9b1e:	26 0f       	add	r18, r22
    9b20:	37 1f       	adc	r19, r23
    9b22:	02 c0       	rjmp	.+4      	; 0x9b28 <f_write+0x3b4>
    9b24:	81 91       	ld	r24, Z+
    9b26:	8d 93       	st	X+, r24
    9b28:	e2 17       	cp	r30, r18
    9b2a:	f3 07       	cpc	r31, r19
    9b2c:	d9 f7       	brne	.-10     	; 0x9b24 <f_write+0x3b0>
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
    9b2e:	ab 81       	ldd	r26, Y+3	; 0x03
    9b30:	bc 81       	ldd	r27, Y+4	; 0x04
    9b32:	ed 91       	ld	r30, X+
    9b34:	fc 91       	ld	r31, X
    9b36:	24 82       	std	Z+4, r2	; 0x04
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    9b38:	46 0e       	add	r4, r22
    9b3a:	57 1e       	adc	r5, r23
    9b3c:	cb 01       	movw	r24, r22
    9b3e:	a0 e0       	ldi	r26, 0x00	; 0
    9b40:	b0 e0       	ldi	r27, 0x00	; 0
    9b42:	eb 81       	ldd	r30, Y+3	; 0x03
    9b44:	fc 81       	ldd	r31, Y+4	; 0x04
    9b46:	26 81       	ldd	r18, Z+6	; 0x06
    9b48:	37 81       	ldd	r19, Z+7	; 0x07
    9b4a:	40 85       	ldd	r20, Z+8	; 0x08
    9b4c:	51 85       	ldd	r21, Z+9	; 0x09
    9b4e:	28 0f       	add	r18, r24
    9b50:	39 1f       	adc	r19, r25
    9b52:	4a 1f       	adc	r20, r26
    9b54:	5b 1f       	adc	r21, r27
    9b56:	26 83       	std	Z+6, r18	; 0x06
    9b58:	37 83       	std	Z+7, r19	; 0x07
    9b5a:	40 87       	std	Z+8, r20	; 0x08
    9b5c:	51 87       	std	Z+9, r21	; 0x09
    9b5e:	e9 81       	ldd	r30, Y+1	; 0x01
    9b60:	fa 81       	ldd	r31, Y+2	; 0x02
    9b62:	80 81       	ld	r24, Z
    9b64:	91 81       	ldd	r25, Z+1	; 0x01
    9b66:	86 0f       	add	r24, r22
    9b68:	97 1f       	adc	r25, r23
    9b6a:	80 83       	st	Z, r24
    9b6c:	91 83       	std	Z+1, r25	; 0x01
    9b6e:	66 1a       	sub	r6, r22
    9b70:	77 0a       	sbc	r7, r23
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
    9b72:	61 14       	cp	r6, r1
    9b74:	71 04       	cpc	r7, r1
    9b76:	09 f0       	breq	.+2      	; 0x9b7a <f_write+0x406>
    9b78:	3f ce       	rjmp	.-898    	; 0x97f8 <f_write+0x84>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    9b7a:	ab 81       	ldd	r26, Y+3	; 0x03
    9b7c:	bc 81       	ldd	r27, Y+4	; 0x04
    9b7e:	16 96       	adiw	r26, 0x06	; 6
    9b80:	2d 91       	ld	r18, X+
    9b82:	3d 91       	ld	r19, X+
    9b84:	4d 91       	ld	r20, X+
    9b86:	5c 91       	ld	r21, X
    9b88:	19 97       	sbiw	r26, 0x09	; 9
    9b8a:	1a 96       	adiw	r26, 0x0a	; 10
    9b8c:	8d 91       	ld	r24, X+
    9b8e:	9d 91       	ld	r25, X+
    9b90:	0d 90       	ld	r0, X+
    9b92:	bc 91       	ld	r27, X
    9b94:	a0 2d       	mov	r26, r0
    9b96:	82 17       	cp	r24, r18
    9b98:	93 07       	cpc	r25, r19
    9b9a:	a4 07       	cpc	r26, r20
    9b9c:	b5 07       	cpc	r27, r21
    9b9e:	30 f4       	brcc	.+12     	; 0x9bac <f_write+0x438>
    9ba0:	eb 81       	ldd	r30, Y+3	; 0x03
    9ba2:	fc 81       	ldd	r31, Y+4	; 0x04
    9ba4:	22 87       	std	Z+10, r18	; 0x0a
    9ba6:	33 87       	std	Z+11, r19	; 0x0b
    9ba8:	44 87       	std	Z+12, r20	; 0x0c
    9baa:	55 87       	std	Z+13, r21	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
    9bac:	ab 81       	ldd	r26, Y+3	; 0x03
    9bae:	bc 81       	ldd	r27, Y+4	; 0x04
    9bb0:	14 96       	adiw	r26, 0x04	; 4
    9bb2:	8c 91       	ld	r24, X
    9bb4:	14 97       	sbiw	r26, 0x04	; 4
    9bb6:	80 62       	ori	r24, 0x20	; 32
    9bb8:	14 96       	adiw	r26, 0x04	; 4
    9bba:	8c 93       	st	X, r24

	LEAVE_FF(fp->fs, FR_OK);
}
    9bbc:	c4 01       	movw	r24, r8
    9bbe:	24 96       	adiw	r28, 0x04	; 4
    9bc0:	e2 e1       	ldi	r30, 0x12	; 18
    9bc2:	0c 94 15 5b 	jmp	0xb62a	; 0xb62a <__epilogue_restores__>

00009bc6 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	int chr,	/* A character to be output */
	FIL* fil	/* Ponter to the file object */
)
{
    9bc6:	a3 e0       	ldi	r26, 0x03	; 3
    9bc8:	b0 e0       	ldi	r27, 0x00	; 0
    9bca:	e9 ee       	ldi	r30, 0xE9	; 233
    9bcc:	fd e4       	ldi	r31, 0x4D	; 77
    9bce:	0c 94 05 5b 	jmp	0xb60a	; 0xb60a <__prologue_saves__+0x18>
    9bd2:	7c 01       	movw	r14, r24
    9bd4:	8b 01       	movw	r16, r22
	UINT bw;
	char c;


#if _USE_STRFUNC >= 2
	if (chr == '\n') f_putc ('\r', fil);	/* LF -> CRLF conversion */
    9bd6:	8a e0       	ldi	r24, 0x0A	; 10
    9bd8:	e8 16       	cp	r14, r24
    9bda:	f1 04       	cpc	r15, r1
    9bdc:	21 f4       	brne	.+8      	; 0x9be6 <f_putc+0x20>
    9bde:	8d e0       	ldi	r24, 0x0D	; 13
    9be0:	90 e0       	ldi	r25, 0x00	; 0
    9be2:	0e 94 e3 4d 	call	0x9bc6	; 0x9bc6 <f_putc>
#endif
	if (!fil) {	/* Special value may be used to switch the destination to any other device */
    9be6:	01 15       	cp	r16, r1
    9be8:	11 05       	cpc	r17, r1
    9bea:	99 f0       	breq	.+38     	; 0x9c12 <f_putc+0x4c>
	/*	put_console(chr);	*/
		return chr;
	}
	c = (char)chr;
    9bec:	e9 82       	std	Y+1, r14	; 0x01
	f_write(fil, &c, 1, &bw);	/* Write a byte to the file */
    9bee:	c8 01       	movw	r24, r16
    9bf0:	be 01       	movw	r22, r28
    9bf2:	6f 5f       	subi	r22, 0xFF	; 255
    9bf4:	7f 4f       	sbci	r23, 0xFF	; 255
    9bf6:	41 e0       	ldi	r20, 0x01	; 1
    9bf8:	50 e0       	ldi	r21, 0x00	; 0
    9bfa:	9e 01       	movw	r18, r28
    9bfc:	2e 5f       	subi	r18, 0xFE	; 254
    9bfe:	3f 4f       	sbci	r19, 0xFF	; 255
    9c00:	0e 94 ba 4b 	call	0x9774	; 0x9774 <f_write>
	return bw ? chr : EOF;		/* Return the result */
    9c04:	8a 81       	ldd	r24, Y+2	; 0x02
    9c06:	9b 81       	ldd	r25, Y+3	; 0x03
    9c08:	89 2b       	or	r24, r25
    9c0a:	19 f4       	brne	.+6      	; 0x9c12 <f_putc+0x4c>
    9c0c:	ee 24       	eor	r14, r14
    9c0e:	ea 94       	dec	r14
    9c10:	fe 2c       	mov	r15, r14
}
    9c12:	c7 01       	movw	r24, r14
    9c14:	23 96       	adiw	r28, 0x03	; 3
    9c16:	e6 e0       	ldi	r30, 0x06	; 6
    9c18:	0c 94 21 5b 	jmp	0xb642	; 0xb642 <__epilogue_restores__+0x18>

00009c1c <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const char* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    9c1c:	ef 92       	push	r14
    9c1e:	ff 92       	push	r15
    9c20:	0f 93       	push	r16
    9c22:	1f 93       	push	r17
    9c24:	cf 93       	push	r28
    9c26:	df 93       	push	r29
    9c28:	8c 01       	movw	r16, r24
    9c2a:	7b 01       	movw	r14, r22
    9c2c:	c0 e0       	ldi	r28, 0x00	; 0
    9c2e:	d0 e0       	ldi	r29, 0x00	; 0
    9c30:	0f c0       	rjmp	.+30     	; 0x9c50 <f_puts+0x34>
	int n;


	for (n = 0; *str; str++, n++) {
		if (f_putc(*str, fil) == EOF) return EOF;
    9c32:	99 27       	eor	r25, r25
    9c34:	87 fd       	sbrc	r24, 7
    9c36:	90 95       	com	r25
    9c38:	b7 01       	movw	r22, r14
    9c3a:	0e 94 e3 4d 	call	0x9bc6	; 0x9bc6 <f_putc>
    9c3e:	8f 5f       	subi	r24, 0xFF	; 255
    9c40:	9f 4f       	sbci	r25, 0xFF	; 255
    9c42:	19 f4       	brne	.+6      	; 0x9c4a <f_puts+0x2e>
    9c44:	cf ef       	ldi	r28, 0xFF	; 255
    9c46:	df ef       	ldi	r29, 0xFF	; 255
    9c48:	07 c0       	rjmp	.+14     	; 0x9c58 <f_puts+0x3c>
)
{
	int n;


	for (n = 0; *str; str++, n++) {
    9c4a:	0f 5f       	subi	r16, 0xFF	; 255
    9c4c:	1f 4f       	sbci	r17, 0xFF	; 255
    9c4e:	21 96       	adiw	r28, 0x01	; 1
    9c50:	f8 01       	movw	r30, r16
    9c52:	80 81       	ld	r24, Z
    9c54:	88 23       	and	r24, r24
    9c56:	69 f7       	brne	.-38     	; 0x9c32 <f_puts+0x16>
		if (f_putc(*str, fil) == EOF) return EOF;
	}
	return n;
}
    9c58:	ce 01       	movw	r24, r28
    9c5a:	cd b7       	in	r28, 0x3d	; 61
    9c5c:	de b7       	in	r29, 0x3e	; 62
    9c5e:	e6 e0       	ldi	r30, 0x06	; 6
    9c60:	0c 94 21 5b 	jmp	0xb642	; 0xb642 <__epilogue_restores__+0x18>

00009c64 <f_printf>:
int f_printf (
	FIL* fil,			/* Pointer to the file object */
	const char* str,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
    9c64:	a3 e1       	ldi	r26, 0x13	; 19
    9c66:	b0 e0       	ldi	r27, 0x00	; 0
    9c68:	e8 e3       	ldi	r30, 0x38	; 56
    9c6a:	fe e4       	ldi	r31, 0x4E	; 78
    9c6c:	0c 94 f9 5a 	jmp	0xb5f2	; 0xb5f2 <__prologue_saves__>
    9c70:	6b a4       	ldd	r6, Y+43	; 0x2b
    9c72:	7c a4       	ldd	r7, Y+44	; 0x2c
    9c74:	8e 01       	movw	r16, r28
    9c76:	03 5d       	subi	r16, 0xD3	; 211
    9c78:	1f 4f       	sbci	r17, 0xFF	; 255
    9c7a:	19 8a       	std	Y+17, r1	; 0x11
    9c7c:	1a 8a       	std	Y+18, r1	; 0x12
    9c7e:	20 e0       	ldi	r18, 0x00	; 0
    9c80:	30 e0       	ldi	r19, 0x00	; 0


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    9c82:	d3 01       	movw	r26, r6
    9c84:	8c 91       	ld	r24, X
		if (c == 0) break;			/* End of string */
    9c86:	88 23       	and	r24, r24
    9c88:	09 f4       	brne	.+2      	; 0x9c8c <f_printf+0x28>
    9c8a:	17 c1       	rjmp	.+558    	; 0x9eba <f_printf+0x256>


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    9c8c:	08 94       	sec
    9c8e:	61 1c       	adc	r6, r1
    9c90:	71 1c       	adc	r7, r1
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape cahracter */
    9c92:	85 32       	cpi	r24, 0x25	; 37
    9c94:	71 f0       	breq	.+28     	; 0x9cb2 <f_printf+0x4e>
			cc = f_putc(c, fil);
    9c96:	90 e0       	ldi	r25, 0x00	; 0
    9c98:	69 a5       	ldd	r22, Y+41	; 0x29
    9c9a:	7a a5       	ldd	r23, Y+42	; 0x2a
    9c9c:	0e 94 e3 4d 	call	0x9bc6	; 0x9bc6 <f_putc>
    9ca0:	9c 01       	movw	r18, r24
			if (cc != EOF) cc = 1;
    9ca2:	bf ef       	ldi	r27, 0xFF	; 255
    9ca4:	8f 3f       	cpi	r24, 0xFF	; 255
    9ca6:	9b 07       	cpc	r25, r27
    9ca8:	11 f4       	brne	.+4      	; 0x9cae <f_printf+0x4a>
    9caa:	48 01       	movw	r8, r16
    9cac:	fa c0       	rjmp	.+500    	; 0x9ea2 <f_printf+0x23e>
    9cae:	48 01       	movw	r8, r16
    9cb0:	4c c0       	rjmp	.+152    	; 0x9d4a <f_printf+0xe6>
			continue;
		}
		w = f = 0;
		c = *str++;
    9cb2:	d3 01       	movw	r26, r6
    9cb4:	ed 91       	ld	r30, X+
    9cb6:	3d 01       	movw	r6, r26
		if (c == '0') {				/* Flag: '0' padding */
    9cb8:	e0 33       	cpi	r30, 0x30	; 48
    9cba:	11 f0       	breq	.+4      	; 0x9cc0 <f_printf+0x5c>
    9cbc:	1b 8a       	std	Y+19, r1	; 0x13
    9cbe:	04 c0       	rjmp	.+8      	; 0x9cc8 <f_printf+0x64>
			f = 1; c = *str++;
    9cc0:	ed 91       	ld	r30, X+
    9cc2:	3d 01       	movw	r6, r26
    9cc4:	b1 e0       	ldi	r27, 0x01	; 1
    9cc6:	bb 8b       	std	Y+19, r27	; 0x13
    9cc8:	aa 24       	eor	r10, r10
    9cca:	bb 24       	eor	r11, r11
    9ccc:	13 c0       	rjmp	.+38     	; 0x9cf4 <f_printf+0x90>
		}
		while (c >= '0' && c <= '9') {	/* Precision */
			w = w * 10 + (c - '0');
    9cce:	c5 01       	movw	r24, r10
    9cd0:	53 e0       	ldi	r21, 0x03	; 3
    9cd2:	88 0f       	add	r24, r24
    9cd4:	99 1f       	adc	r25, r25
    9cd6:	5a 95       	dec	r21
    9cd8:	e1 f7       	brne	.-8      	; 0x9cd2 <f_printf+0x6e>
    9cda:	aa 0c       	add	r10, r10
    9cdc:	bb 1c       	adc	r11, r11
    9cde:	a8 0e       	add	r10, r24
    9ce0:	b9 1e       	adc	r11, r25
    9ce2:	ae 0e       	add	r10, r30
    9ce4:	b1 1c       	adc	r11, r1
    9ce6:	e0 ed       	ldi	r30, 0xD0	; 208
    9ce8:	ff ef       	ldi	r31, 0xFF	; 255
    9cea:	ae 0e       	add	r10, r30
    9cec:	bf 1e       	adc	r11, r31
			c = *str++;
    9cee:	d3 01       	movw	r26, r6
    9cf0:	ed 91       	ld	r30, X+
    9cf2:	3d 01       	movw	r6, r26
		w = f = 0;
		c = *str++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *str++;
		}
		while (c >= '0' && c <= '9') {	/* Precision */
    9cf4:	8e 2f       	mov	r24, r30
    9cf6:	80 53       	subi	r24, 0x30	; 48
    9cf8:	8a 30       	cpi	r24, 0x0A	; 10
    9cfa:	48 f3       	brcs	.-46     	; 0x9cce <f_printf+0x6a>
			w = w * 10 + (c - '0');
			c = *str++;
		}
		if (c == 'l') {				/* Prefix: Size is long int */
    9cfc:	ec 36       	cpi	r30, 0x6C	; 108
    9cfe:	31 f4       	brne	.+12     	; 0x9d0c <f_printf+0xa8>
			f |= 2; c = *str++;
    9d00:	bb 89       	ldd	r27, Y+19	; 0x13
    9d02:	b2 60       	ori	r27, 0x02	; 2
    9d04:	bb 8b       	std	Y+19, r27	; 0x13
    9d06:	d3 01       	movw	r26, r6
    9d08:	ed 91       	ld	r30, X+
    9d0a:	3d 01       	movw	r6, r26
		}
		if (c == 's') {				/* Type is string */
    9d0c:	e3 37       	cpi	r30, 0x73	; 115
    9d0e:	49 f4       	brne	.+18     	; 0x9d22 <f_printf+0xbe>
			cc = f_puts(va_arg(arp, char*), fil);
    9d10:	92 e0       	ldi	r25, 0x02	; 2
    9d12:	89 2e       	mov	r8, r25
    9d14:	91 2c       	mov	r9, r1
    9d16:	80 0e       	add	r8, r16
    9d18:	91 1e       	adc	r9, r17
    9d1a:	f8 01       	movw	r30, r16
    9d1c:	80 81       	ld	r24, Z
    9d1e:	91 81       	ldd	r25, Z+1	; 0x01
    9d20:	bb c0       	rjmp	.+374    	; 0x9e98 <f_printf+0x234>
			continue;
		}
		if (c == 'c') {				/* Type is character */
    9d22:	e3 36       	cpi	r30, 0x63	; 99
    9d24:	a9 f4       	brne	.+42     	; 0x9d50 <f_printf+0xec>
			cc = f_putc(va_arg(arp, int), fil);
    9d26:	82 e0       	ldi	r24, 0x02	; 2
    9d28:	88 2e       	mov	r8, r24
    9d2a:	91 2c       	mov	r9, r1
    9d2c:	80 0e       	add	r8, r16
    9d2e:	91 1e       	adc	r9, r17
    9d30:	d8 01       	movw	r26, r16
    9d32:	8d 91       	ld	r24, X+
    9d34:	9c 91       	ld	r25, X
    9d36:	69 a5       	ldd	r22, Y+41	; 0x29
    9d38:	7a a5       	ldd	r23, Y+42	; 0x2a
    9d3a:	0e 94 e3 4d 	call	0x9bc6	; 0x9bc6 <f_putc>
    9d3e:	9c 01       	movw	r18, r24
			if (cc != EOF) cc = 1;
    9d40:	bf ef       	ldi	r27, 0xFF	; 255
    9d42:	8f 3f       	cpi	r24, 0xFF	; 255
    9d44:	9b 07       	cpc	r25, r27
    9d46:	09 f4       	brne	.+2      	; 0x9d4a <f_printf+0xe6>
    9d48:	ac c0       	rjmp	.+344    	; 0x9ea2 <f_printf+0x23e>
    9d4a:	21 e0       	ldi	r18, 0x01	; 1
    9d4c:	30 e0       	ldi	r19, 0x00	; 0
    9d4e:	a9 c0       	rjmp	.+338    	; 0x9ea2 <f_printf+0x23e>
			continue;
		}
		r = 0;
		if (c == 'd') r = 10;		/* Type is signed decimal */
    9d50:	e4 36       	cpi	r30, 0x64	; 100
    9d52:	39 f0       	breq	.+14     	; 0x9d62 <f_printf+0xfe>
		if (c == 'u') r = 10;		/* Type is unsigned decimal */
    9d54:	e5 37       	cpi	r30, 0x75	; 117
    9d56:	29 f0       	breq	.+10     	; 0x9d62 <f_printf+0xfe>
		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
    9d58:	e8 35       	cpi	r30, 0x58	; 88
    9d5a:	09 f0       	breq	.+2      	; 0x9d5e <f_printf+0xfa>
    9d5c:	ae c0       	rjmp	.+348    	; 0x9eba <f_printf+0x256>
    9d5e:	20 e1       	ldi	r18, 0x10	; 16
    9d60:	01 c0       	rjmp	.+2      	; 0x9d64 <f_printf+0x100>
    9d62:	2a e0       	ldi	r18, 0x0A	; 10
		if (r == 0) break;			/* Unknown type */
		if (f & 2) {				/* Get the value */
    9d64:	fb 89       	ldd	r31, Y+19	; 0x13
    9d66:	f1 ff       	sbrs	r31, 1
    9d68:	0d c0       	rjmp	.+26     	; 0x9d84 <f_printf+0x120>
			val = (ULONG)va_arg(arp, long);
    9d6a:	b4 e0       	ldi	r27, 0x04	; 4
    9d6c:	8b 2e       	mov	r8, r27
    9d6e:	91 2c       	mov	r9, r1
    9d70:	80 0e       	add	r8, r16
    9d72:	91 1e       	adc	r9, r17
    9d74:	d8 01       	movw	r26, r16
    9d76:	ed 90       	ld	r14, X+
    9d78:	fd 90       	ld	r15, X+
    9d7a:	0d 91       	ld	r16, X+
    9d7c:	1c 91       	ld	r17, X
		} else {
			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
		}
		/* Put numeral string */
		if (c == 'd') {
    9d7e:	e4 36       	cpi	r30, 0x64	; 100
    9d80:	09 f5       	brne	.+66     	; 0x9dc4 <f_printf+0x160>
    9d82:	13 c0       	rjmp	.+38     	; 0x9daa <f_printf+0x146>
    9d84:	c8 01       	movw	r24, r16
    9d86:	02 96       	adiw	r24, 0x02	; 2
    9d88:	d8 01       	movw	r26, r16
    9d8a:	6d 91       	ld	r22, X+
    9d8c:	7c 91       	ld	r23, X
		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
		if (r == 0) break;			/* Unknown type */
		if (f & 2) {				/* Get the value */
			val = (ULONG)va_arg(arp, long);
		} else {
			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
    9d8e:	e4 36       	cpi	r30, 0x64	; 100
    9d90:	39 f4       	brne	.+14     	; 0x9da0 <f_printf+0x13c>
    9d92:	4c 01       	movw	r8, r24
    9d94:	7b 01       	movw	r14, r22
    9d96:	00 27       	eor	r16, r16
    9d98:	f7 fc       	sbrc	r15, 7
    9d9a:	00 95       	com	r16
    9d9c:	10 2f       	mov	r17, r16
    9d9e:	05 c0       	rjmp	.+10     	; 0x9daa <f_printf+0x146>
    9da0:	4c 01       	movw	r8, r24
    9da2:	7b 01       	movw	r14, r22
    9da4:	00 e0       	ldi	r16, 0x00	; 0
    9da6:	10 e0       	ldi	r17, 0x00	; 0
    9da8:	0d c0       	rjmp	.+26     	; 0x9dc4 <f_printf+0x160>
		}
		/* Put numeral string */
		if (c == 'd') {
			if (val & 0x80000000) {
    9daa:	17 ff       	sbrs	r17, 7
    9dac:	0b c0       	rjmp	.+22     	; 0x9dc4 <f_printf+0x160>
				val = 0 - val;
    9dae:	10 95       	com	r17
    9db0:	00 95       	com	r16
    9db2:	f0 94       	com	r15
    9db4:	e0 94       	com	r14
    9db6:	e1 1c       	adc	r14, r1
    9db8:	f1 1c       	adc	r15, r1
    9dba:	01 1d       	adc	r16, r1
    9dbc:	11 1d       	adc	r17, r1
				f |= 4;
    9dbe:	bb 89       	ldd	r27, Y+19	; 0x13
    9dc0:	b4 60       	ori	r27, 0x04	; 4
    9dc2:	bb 8b       	std	Y+19, r27	; 0x13
			}
		}
		i = sizeof(s) - 1; s[i] = 0;
    9dc4:	18 8a       	std	Y+16, r1	; 0x10
    9dc6:	af e0       	ldi	r26, 0x0F	; 15
    9dc8:	ca 2e       	mov	r12, r26
    9dca:	d1 2c       	mov	r13, r1
		do {
			c = (UCHAR)(val % r + '0');
    9dcc:	22 2e       	mov	r2, r18
    9dce:	33 24       	eor	r3, r3
    9dd0:	44 24       	eor	r4, r4
    9dd2:	55 24       	eor	r5, r5
    9dd4:	c8 01       	movw	r24, r16
    9dd6:	b7 01       	movw	r22, r14
    9dd8:	a2 01       	movw	r20, r4
    9dda:	91 01       	movw	r18, r2
    9ddc:	0e 94 bc 5a 	call	0xb578	; 0xb578 <__udivmodsi4>
    9de0:	86 2f       	mov	r24, r22
    9de2:	80 5d       	subi	r24, 0xD0	; 208
			if (c > '9') c += 7;
    9de4:	8a 33       	cpi	r24, 0x3A	; 58
    9de6:	08 f0       	brcs	.+2      	; 0x9dea <f_printf+0x186>
    9de8:	89 5f       	subi	r24, 0xF9	; 249
			s[--i] = c;
    9dea:	08 94       	sec
    9dec:	c1 08       	sbc	r12, r1
    9dee:	d1 08       	sbc	r13, r1
    9df0:	e1 e0       	ldi	r30, 0x01	; 1
    9df2:	f0 e0       	ldi	r31, 0x00	; 0
    9df4:	ec 0f       	add	r30, r28
    9df6:	fd 1f       	adc	r31, r29
    9df8:	ec 0d       	add	r30, r12
    9dfa:	fd 1d       	adc	r31, r13
    9dfc:	80 83       	st	Z, r24
			val /= r;
		} while (i && val);
    9dfe:	c1 14       	cp	r12, r1
    9e00:	d1 04       	cpc	r13, r1
    9e02:	e9 f0       	breq	.+58     	; 0x9e3e <f_printf+0x1da>
		i = sizeof(s) - 1; s[i] = 0;
		do {
			c = (UCHAR)(val % r + '0');
			if (c > '9') c += 7;
			s[--i] = c;
			val /= r;
    9e04:	c8 01       	movw	r24, r16
    9e06:	b7 01       	movw	r22, r14
    9e08:	a2 01       	movw	r20, r4
    9e0a:	91 01       	movw	r18, r2
    9e0c:	0e 94 bc 5a 	call	0xb578	; 0xb578 <__udivmodsi4>
    9e10:	c9 01       	movw	r24, r18
    9e12:	da 01       	movw	r26, r20
    9e14:	7c 01       	movw	r14, r24
    9e16:	8d 01       	movw	r16, r26
		} while (i && val);
    9e18:	e1 14       	cp	r14, r1
    9e1a:	f1 04       	cpc	r15, r1
    9e1c:	01 05       	cpc	r16, r1
    9e1e:	11 05       	cpc	r17, r1
    9e20:	c9 f6       	brne	.-78     	; 0x9dd4 <f_printf+0x170>
		if (i && (f & 4)) s[--i] = '-';
    9e22:	eb 89       	ldd	r30, Y+19	; 0x13
    9e24:	e2 ff       	sbrs	r30, 2
    9e26:	0b c0       	rjmp	.+22     	; 0x9e3e <f_printf+0x1da>
    9e28:	08 94       	sec
    9e2a:	c1 08       	sbc	r12, r1
    9e2c:	d1 08       	sbc	r13, r1
    9e2e:	e1 e0       	ldi	r30, 0x01	; 1
    9e30:	f0 e0       	ldi	r31, 0x00	; 0
    9e32:	ec 0f       	add	r30, r28
    9e34:	fd 1f       	adc	r31, r29
    9e36:	ec 0d       	add	r30, r12
    9e38:	fd 1d       	adc	r31, r13
    9e3a:	4d e2       	ldi	r20, 0x2D	; 45
    9e3c:	40 83       	st	Z, r20
		w = sizeof(s) - 1 - w;
    9e3e:	8f e0       	ldi	r24, 0x0F	; 15
    9e40:	90 e0       	ldi	r25, 0x00	; 0
    9e42:	8a 19       	sub	r24, r10
    9e44:	9b 09       	sbc	r25, r11
    9e46:	08 94       	sec
    9e48:	c1 08       	sbc	r12, r1
    9e4a:	d1 08       	sbc	r13, r1
    9e4c:	e1 e0       	ldi	r30, 0x01	; 1
    9e4e:	f0 e0       	ldi	r31, 0x00	; 0
    9e50:	ec 0f       	add	r30, r28
    9e52:	fd 1f       	adc	r31, r29
    9e54:	ec 0d       	add	r30, r12
    9e56:	fd 1d       	adc	r31, r13
    9e58:	08 94       	sec
    9e5a:	c1 1c       	adc	r12, r1
    9e5c:	d1 1c       	adc	r13, r1
		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
    9e5e:	ab 89       	ldd	r26, Y+19	; 0x13
    9e60:	2a 2f       	mov	r18, r26
    9e62:	30 e0       	ldi	r19, 0x00	; 0
    9e64:	21 70       	andi	r18, 0x01	; 1
    9e66:	30 70       	andi	r19, 0x00	; 0
    9e68:	0b c0       	rjmp	.+22     	; 0x9e80 <f_printf+0x21c>
    9e6a:	08 94       	sec
    9e6c:	c1 08       	sbc	r12, r1
    9e6e:	d1 08       	sbc	r13, r1
    9e70:	21 15       	cp	r18, r1
    9e72:	31 05       	cpc	r19, r1
    9e74:	11 f4       	brne	.+4      	; 0x9e7a <f_printf+0x216>
    9e76:	40 e2       	ldi	r20, 0x20	; 32
    9e78:	01 c0       	rjmp	.+2      	; 0x9e7c <f_printf+0x218>
    9e7a:	40 e3       	ldi	r20, 0x30	; 48
    9e7c:	40 83       	st	Z, r20
    9e7e:	31 97       	sbiw	r30, 0x01	; 1
    9e80:	c1 14       	cp	r12, r1
    9e82:	d1 04       	cpc	r13, r1
    9e84:	19 f0       	breq	.+6      	; 0x9e8c <f_printf+0x228>
    9e86:	8c 15       	cp	r24, r12
    9e88:	9d 05       	cpc	r25, r13
    9e8a:	7c f3       	brlt	.-34     	; 0x9e6a <f_printf+0x206>
		cc = f_puts(&s[i], fil);
    9e8c:	81 e0       	ldi	r24, 0x01	; 1
    9e8e:	90 e0       	ldi	r25, 0x00	; 0
    9e90:	8c 0f       	add	r24, r28
    9e92:	9d 1f       	adc	r25, r29
    9e94:	8c 0d       	add	r24, r12
    9e96:	9d 1d       	adc	r25, r13
    9e98:	69 a5       	ldd	r22, Y+41	; 0x29
    9e9a:	7a a5       	ldd	r23, Y+42	; 0x2a
    9e9c:	0e 94 0e 4e 	call	0x9c1c	; 0x9c1c <f_puts>
    9ea0:	9c 01       	movw	r18, r24
	int i, w, res, cc;


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
    9ea2:	e9 89       	ldd	r30, Y+17	; 0x11
    9ea4:	fa 89       	ldd	r31, Y+18	; 0x12
    9ea6:	e2 0f       	add	r30, r18
    9ea8:	f3 1f       	adc	r31, r19
    9eaa:	e9 8b       	std	Y+17, r30	; 0x11
    9eac:	fa 8b       	std	Y+18, r31	; 0x12
    9eae:	ff ef       	ldi	r31, 0xFF	; 255
    9eb0:	2f 3f       	cpi	r18, 0xFF	; 255
    9eb2:	3f 07       	cpc	r19, r31
    9eb4:	41 f0       	breq	.+16     	; 0x9ec6 <f_printf+0x262>
    9eb6:	84 01       	movw	r16, r8
    9eb8:	e4 ce       	rjmp	.-568    	; 0x9c82 <f_printf+0x1e>
		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
		cc = f_puts(&s[i], fil);
	}

	va_end(arp);
	return (cc == EOF) ? cc : res;
    9eba:	4f ef       	ldi	r20, 0xFF	; 255
    9ebc:	2f 3f       	cpi	r18, 0xFF	; 255
    9ebe:	34 07       	cpc	r19, r20
    9ec0:	11 f0       	breq	.+4      	; 0x9ec6 <f_printf+0x262>
    9ec2:	29 89       	ldd	r18, Y+17	; 0x11
    9ec4:	3a 89       	ldd	r19, Y+18	; 0x12
}
    9ec6:	c9 01       	movw	r24, r18
    9ec8:	63 96       	adiw	r28, 0x13	; 19
    9eca:	e2 e1       	ldi	r30, 0x12	; 18
    9ecc:	0c 94 15 5b 	jmp	0xb62a	; 0xb62a <__epilogue_restores__>

00009ed0 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const XCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    9ed0:	a4 e2       	ldi	r26, 0x24	; 36
    9ed2:	b0 e0       	ldi	r27, 0x00	; 0
    9ed4:	ee e6       	ldi	r30, 0x6E	; 110
    9ed6:	ff e4       	ldi	r31, 0x4F	; 79
    9ed8:	0c 94 fc 5a 	jmp	0xb5f8	; 0xb5f8 <__prologue_saves__+0x6>
    9edc:	5c 01       	movw	r10, r24
    9ede:	6b a3       	std	Y+35, r22	; 0x23
    9ee0:	7c a3       	std	Y+36, r23	; 0x24
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
    9ee2:	dc 01       	movw	r26, r24
    9ee4:	1d 92       	st	X+, r1
    9ee6:	1c 92       	st	X, r1
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
    9ee8:	0f e1       	ldi	r16, 0x1F	; 31
    9eea:	50 2e       	mov	r5, r16
    9eec:	54 22       	and	r5, r20
	res = auto_mount(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
    9eee:	8e 01       	movw	r16, r28
    9ef0:	03 5f       	subi	r16, 0xF3	; 243
    9ef2:	1f 4f       	sbci	r17, 0xFF	; 255
    9ef4:	4e 71       	andi	r20, 0x1E	; 30
    9ef6:	ce 01       	movw	r24, r28
    9ef8:	83 96       	adiw	r24, 0x23	; 35
    9efa:	b8 01       	movw	r22, r16
    9efc:	0e 94 a1 39 	call	0x7342	; 0x7342 <auto_mount>
#else
	mode &= FA_READ;
	res = auto_mount(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    9f00:	00 97       	sbiw	r24, 0x00	; 0
    9f02:	11 f0       	breq	.+4      	; 0x9f08 <f_open+0x38>
    9f04:	9c 01       	movw	r18, r24
    9f06:	f6 c0       	rjmp	.+492    	; 0xa0f4 <f_open+0x224>
	INITBUF(dj, sfn, lfn);
    9f08:	ce 01       	movw	r24, r28
    9f0a:	01 96       	adiw	r24, 0x01	; 1
    9f0c:	89 a3       	std	Y+33, r24	; 0x21
    9f0e:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);	/* Follow the file path */
    9f10:	6b a1       	ldd	r22, Y+35	; 0x23
    9f12:	7c a1       	ldd	r23, Y+36	; 0x24
    9f14:	c8 01       	movw	r24, r16
    9f16:	0e 94 63 43 	call	0x86c6	; 0x86c6 <follow_path>
    9f1a:	9c 01       	movw	r18, r24

#if !_FS_READONLY
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    9f1c:	45 2d       	mov	r20, r5
    9f1e:	50 e0       	ldi	r21, 0x00	; 0
    9f20:	ca 01       	movw	r24, r20
    9f22:	8c 71       	andi	r24, 0x1C	; 28
    9f24:	90 70       	andi	r25, 0x00	; 0
    9f26:	89 2b       	or	r24, r25
    9f28:	09 f4       	brne	.+2      	; 0x9f2c <f_open+0x5c>
    9f2a:	7e c0       	rjmp	.+252    	; 0xa028 <f_open+0x158>
		DWORD ps, cl;

		if (res != FR_OK) {			/* No file, create new */
    9f2c:	21 15       	cp	r18, r1
    9f2e:	31 05       	cpc	r19, r1
    9f30:	81 f0       	breq	.+32     	; 0x9f52 <f_open+0x82>
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
    9f32:	24 30       	cpi	r18, 0x04	; 4
    9f34:	31 05       	cpc	r19, r1
    9f36:	09 f0       	breq	.+2      	; 0x9f3a <f_open+0x6a>
    9f38:	dd c0       	rjmp	.+442    	; 0xa0f4 <f_open+0x224>
				res = dir_register(&dj);
    9f3a:	c8 01       	movw	r24, r16
    9f3c:	0e 94 87 45 	call	0x8b0e	; 0x8b0e <dir_register>
    9f40:	9c 01       	movw	r18, r24
			if (res != FR_OK) LEAVE_FF(dj.fs, res);
    9f42:	00 97       	sbiw	r24, 0x00	; 0
    9f44:	09 f0       	breq	.+2      	; 0x9f48 <f_open+0x78>
    9f46:	d6 c0       	rjmp	.+428    	; 0xa0f4 <f_open+0x224>
			mode |= FA_CREATE_ALWAYS;
    9f48:	b8 e0       	ldi	r27, 0x08	; 8
    9f4a:	5b 2a       	or	r5, r27
			dir = dj.dir;			/* Created entry (SFN entry) */
    9f4c:	cf 8c       	ldd	r12, Y+31	; 0x1f
    9f4e:	d8 a0       	ldd	r13, Y+32	; 0x20
    9f50:	57 c0       	rjmp	.+174    	; 0xa000 <f_open+0x130>
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
    9f52:	52 fe       	sbrs	r5, 2
    9f54:	03 c0       	rjmp	.+6      	; 0x9f5c <f_open+0x8c>
    9f56:	28 e0       	ldi	r18, 0x08	; 8
    9f58:	30 e0       	ldi	r19, 0x00	; 0
    9f5a:	cc c0       	rjmp	.+408    	; 0xa0f4 <f_open+0x224>
				LEAVE_FF(dj.fs, FR_EXIST);
			dir = dj.dir;
    9f5c:	cf 8c       	ldd	r12, Y+31	; 0x1f
    9f5e:	d8 a0       	ldd	r13, Y+32	; 0x20
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
    9f60:	c1 14       	cp	r12, r1
    9f62:	d1 04       	cpc	r13, r1
    9f64:	09 f4       	brne	.+2      	; 0x9f68 <f_open+0x98>
    9f66:	c1 c0       	rjmp	.+386    	; 0xa0ea <f_open+0x21a>
    9f68:	f6 01       	movw	r30, r12
    9f6a:	83 85       	ldd	r24, Z+11	; 0x0b
    9f6c:	81 71       	andi	r24, 0x11	; 17
    9f6e:	09 f0       	breq	.+2      	; 0x9f72 <f_open+0xa2>
    9f70:	bc c0       	rjmp	.+376    	; 0xa0ea <f_open+0x21a>
				LEAVE_FF(dj.fs, FR_DENIED);
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
    9f72:	53 fe       	sbrs	r5, 3
    9f74:	45 c0       	rjmp	.+138    	; 0xa000 <f_open+0x130>
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
    9f76:	84 89       	ldd	r24, Z+20	; 0x14
    9f78:	95 89       	ldd	r25, Z+21	; 0x15
    9f7a:	a0 e0       	ldi	r26, 0x00	; 0
    9f7c:	b0 e0       	ldi	r27, 0x00	; 0
    9f7e:	8c 01       	movw	r16, r24
    9f80:	ff 24       	eor	r15, r15
    9f82:	ee 24       	eor	r14, r14
    9f84:	82 8d       	ldd	r24, Z+26	; 0x1a
    9f86:	93 8d       	ldd	r25, Z+27	; 0x1b
    9f88:	a0 e0       	ldi	r26, 0x00	; 0
    9f8a:	b0 e0       	ldi	r27, 0x00	; 0
    9f8c:	e8 2a       	or	r14, r24
    9f8e:	f9 2a       	or	r15, r25
    9f90:	0a 2b       	or	r16, r26
    9f92:	1b 2b       	or	r17, r27
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
    9f94:	14 8a       	std	Z+20, r1	; 0x14
    9f96:	15 8a       	std	Z+21, r1	; 0x15
				ST_WORD(dir+DIR_FstClusLO, 0);
    9f98:	12 8e       	std	Z+26, r1	; 0x1a
    9f9a:	13 8e       	std	Z+27, r1	; 0x1b
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
    9f9c:	d6 01       	movw	r26, r12
    9f9e:	5c 96       	adiw	r26, 0x1c	; 28
    9fa0:	1d 92       	st	X+, r1
    9fa2:	1d 92       	st	X+, r1
    9fa4:	1d 92       	st	X+, r1
    9fa6:	1c 92       	st	X, r1
    9fa8:	5f 97       	sbiw	r26, 0x1f	; 31
				dj.fs->wflag = 1;
    9faa:	ed 85       	ldd	r30, Y+13	; 0x0d
    9fac:	fe 85       	ldd	r31, Y+14	; 0x0e
    9fae:	81 e0       	ldi	r24, 0x01	; 1
    9fb0:	84 83       	std	Z+4, r24	; 0x04
				ps = dj.fs->winsect;			/* Remove the cluster chain */
    9fb2:	66 a4       	ldd	r6, Z+46	; 0x2e
    9fb4:	77 a4       	ldd	r7, Z+47	; 0x2f
    9fb6:	80 a8       	ldd	r8, Z+48	; 0x30
    9fb8:	91 a8       	ldd	r9, Z+49	; 0x31
				if (cl) {
    9fba:	e1 14       	cp	r14, r1
    9fbc:	f1 04       	cpc	r15, r1
    9fbe:	01 05       	cpc	r16, r1
    9fc0:	11 05       	cpc	r17, r1
    9fc2:	a1 f0       	breq	.+40     	; 0x9fec <f_open+0x11c>
					res = remove_chain(dj.fs, cl);
    9fc4:	cf 01       	movw	r24, r30
    9fc6:	b8 01       	movw	r22, r16
    9fc8:	a7 01       	movw	r20, r14
    9fca:	0e 94 f7 40 	call	0x81ee	; 0x81ee <remove_chain>
    9fce:	9c 01       	movw	r18, r24
					if (res) LEAVE_FF(dj.fs, res);
    9fd0:	00 97       	sbiw	r24, 0x00	; 0
    9fd2:	09 f0       	breq	.+2      	; 0x9fd6 <f_open+0x106>
    9fd4:	8f c0       	rjmp	.+286    	; 0xa0f4 <f_open+0x224>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    9fd6:	ed 85       	ldd	r30, Y+13	; 0x0d
    9fd8:	fe 85       	ldd	r31, Y+14	; 0x0e
    9fda:	08 94       	sec
    9fdc:	e1 08       	sbc	r14, r1
    9fde:	f1 08       	sbc	r15, r1
    9fe0:	01 09       	sbc	r16, r1
    9fe2:	11 09       	sbc	r17, r1
    9fe4:	e2 86       	std	Z+10, r14	; 0x0a
    9fe6:	f3 86       	std	Z+11, r15	; 0x0b
    9fe8:	04 87       	std	Z+12, r16	; 0x0c
    9fea:	15 87       	std	Z+13, r17	; 0x0d
				}
				res = move_window(dj.fs, ps);
    9fec:	8d 85       	ldd	r24, Y+13	; 0x0d
    9fee:	9e 85       	ldd	r25, Y+14	; 0x0e
    9ff0:	b4 01       	movw	r22, r8
    9ff2:	a3 01       	movw	r20, r6
    9ff4:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <move_window>
    9ff8:	9c 01       	movw	r18, r24
				if (res != FR_OK) LEAVE_FF(dj.fs, res);
    9ffa:	00 97       	sbiw	r24, 0x00	; 0
    9ffc:	09 f0       	breq	.+2      	; 0xa000 <f_open+0x130>
    9ffe:	7a c0       	rjmp	.+244    	; 0xa0f4 <f_open+0x224>
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
    a000:	53 fe       	sbrs	r5, 3
    a002:	24 c0       	rjmp	.+72     	; 0xa04c <f_open+0x17c>
			dir[DIR_Attr] = 0;					/* Reset attribute */
    a004:	f6 01       	movw	r30, r12
    a006:	13 86       	std	Z+11, r1	; 0x0b
			ps = get_fattime();
    a008:	0e 94 d0 57 	call	0xafa0	; 0xafa0 <get_fattime>
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
    a00c:	d6 01       	movw	r26, r12
    a00e:	1e 96       	adiw	r26, 0x0e	; 14
    a010:	6d 93       	st	X+, r22
    a012:	7d 93       	st	X+, r23
    a014:	8d 93       	st	X+, r24
    a016:	9c 93       	st	X, r25
    a018:	51 97       	sbiw	r26, 0x11	; 17
			dj.fs->wflag = 1;
    a01a:	ed 85       	ldd	r30, Y+13	; 0x0d
    a01c:	fe 85       	ldd	r31, Y+14	; 0x0e
    a01e:	81 e0       	ldi	r24, 0x01	; 1
    a020:	84 83       	std	Z+4, r24	; 0x04
			mode |= FA__WRITTEN;				/* Set file changed flag */
    a022:	b0 e2       	ldi	r27, 0x20	; 32
    a024:	5b 2a       	or	r5, r27
    a026:	12 c0       	rjmp	.+36     	; 0xa04c <f_open+0x17c>
		}
	}
	/* Open an existing file */
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
    a028:	21 15       	cp	r18, r1
    a02a:	31 05       	cpc	r19, r1
    a02c:	09 f0       	breq	.+2      	; 0xa030 <f_open+0x160>
    a02e:	62 c0       	rjmp	.+196    	; 0xa0f4 <f_open+0x224>
		dir = dj.dir;
    a030:	cf 8c       	ldd	r12, Y+31	; 0x1f
    a032:	d8 a0       	ldd	r13, Y+32	; 0x20
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    a034:	c1 14       	cp	r12, r1
    a036:	d1 04       	cpc	r13, r1
    a038:	09 f4       	brne	.+2      	; 0xa03c <f_open+0x16c>
    a03a:	5a c0       	rjmp	.+180    	; 0xa0f0 <f_open+0x220>
    a03c:	f6 01       	movw	r30, r12
    a03e:	83 85       	ldd	r24, Z+11	; 0x0b
    a040:	84 fd       	sbrc	r24, 4
    a042:	56 c0       	rjmp	.+172    	; 0xa0f0 <f_open+0x220>
			LEAVE_FF(dj.fs, FR_NO_FILE);
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    a044:	51 fe       	sbrs	r5, 1
    a046:	02 c0       	rjmp	.+4      	; 0xa04c <f_open+0x17c>
    a048:	80 fd       	sbrc	r24, 0
    a04a:	4f c0       	rjmp	.+158    	; 0xa0ea <f_open+0x21a>
			LEAVE_FF(dj.fs, FR_DENIED);
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    a04c:	6d 85       	ldd	r22, Y+13	; 0x0d
    a04e:	7e 85       	ldd	r23, Y+14	; 0x0e
    a050:	db 01       	movw	r26, r22
    a052:	9e 96       	adiw	r26, 0x2e	; 46
    a054:	2d 91       	ld	r18, X+
    a056:	3d 91       	ld	r19, X+
    a058:	4d 91       	ld	r20, X+
    a05a:	5c 91       	ld	r21, X
    a05c:	d1 97       	sbiw	r26, 0x31	; 49
    a05e:	f5 01       	movw	r30, r10
    a060:	22 8f       	std	Z+26, r18	; 0x1a
    a062:	33 8f       	std	Z+27, r19	; 0x1b
    a064:	44 8f       	std	Z+28, r20	; 0x1c
    a066:	55 8f       	std	Z+29, r21	; 0x1d
	fp->dir_ptr = dj.dir;
    a068:	8f 8d       	ldd	r24, Y+31	; 0x1f
    a06a:	98 a1       	ldd	r25, Y+32	; 0x20
    a06c:	86 8f       	std	Z+30, r24	; 0x1e
    a06e:	97 8f       	std	Z+31, r25	; 0x1f
#endif
	fp->flag = mode;					/* File access mode */
    a070:	54 82       	std	Z+4, r5	; 0x04
	fp->org_clust =						/* File start cluster */
    a072:	d6 01       	movw	r26, r12
    a074:	54 96       	adiw	r26, 0x14	; 20
    a076:	8d 91       	ld	r24, X+
    a078:	9c 91       	ld	r25, X
    a07a:	55 97       	sbiw	r26, 0x15	; 21
    a07c:	a0 e0       	ldi	r26, 0x00	; 0
    a07e:	b0 e0       	ldi	r27, 0x00	; 0
    a080:	dc 01       	movw	r26, r24
    a082:	99 27       	eor	r25, r25
    a084:	88 27       	eor	r24, r24
    a086:	f6 01       	movw	r30, r12
    a088:	22 8d       	ldd	r18, Z+26	; 0x1a
    a08a:	33 8d       	ldd	r19, Z+27	; 0x1b
    a08c:	40 e0       	ldi	r20, 0x00	; 0
    a08e:	50 e0       	ldi	r21, 0x00	; 0
    a090:	82 2b       	or	r24, r18
    a092:	93 2b       	or	r25, r19
    a094:	a4 2b       	or	r26, r20
    a096:	b5 2b       	or	r27, r21
    a098:	f5 01       	movw	r30, r10
    a09a:	86 87       	std	Z+14, r24	; 0x0e
    a09c:	97 87       	std	Z+15, r25	; 0x0f
    a09e:	a0 8b       	std	Z+16, r26	; 0x10
    a0a0:	b1 8b       	std	Z+17, r27	; 0x11
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    a0a2:	f6 01       	movw	r30, r12
    a0a4:	84 8d       	ldd	r24, Z+28	; 0x1c
    a0a6:	95 8d       	ldd	r25, Z+29	; 0x1d
    a0a8:	a6 8d       	ldd	r26, Z+30	; 0x1e
    a0aa:	b7 8d       	ldd	r27, Z+31	; 0x1f
    a0ac:	f5 01       	movw	r30, r10
    a0ae:	82 87       	std	Z+10, r24	; 0x0a
    a0b0:	93 87       	std	Z+11, r25	; 0x0b
    a0b2:	a4 87       	std	Z+12, r26	; 0x0c
    a0b4:	b5 87       	std	Z+13, r27	; 0x0d
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
    a0b6:	d5 01       	movw	r26, r10
    a0b8:	16 96       	adiw	r26, 0x06	; 6
    a0ba:	1d 92       	st	X+, r1
    a0bc:	1d 92       	st	X+, r1
    a0be:	1d 92       	st	X+, r1
    a0c0:	1c 92       	st	X, r1
    a0c2:	19 97       	sbiw	r26, 0x09	; 9
    a0c4:	8f ef       	ldi	r24, 0xFF	; 255
    a0c6:	15 96       	adiw	r26, 0x05	; 5
    a0c8:	8c 93       	st	X, r24
	fp->dsect = 0;
    a0ca:	16 8a       	std	Z+22, r1	; 0x16
    a0cc:	17 8a       	std	Z+23, r1	; 0x17
    a0ce:	10 8e       	std	Z+24, r1	; 0x18
    a0d0:	11 8e       	std	Z+25, r1	; 0x19
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
    a0d2:	60 83       	st	Z, r22
    a0d4:	71 83       	std	Z+1, r23	; 0x01
    a0d6:	db 01       	movw	r26, r22
    a0d8:	15 96       	adiw	r26, 0x05	; 5
    a0da:	8d 91       	ld	r24, X+
    a0dc:	9c 91       	ld	r25, X
    a0de:	16 97       	sbiw	r26, 0x06	; 6
    a0e0:	82 83       	std	Z+2, r24	; 0x02
    a0e2:	93 83       	std	Z+3, r25	; 0x03
    a0e4:	20 e0       	ldi	r18, 0x00	; 0
    a0e6:	30 e0       	ldi	r19, 0x00	; 0
    a0e8:	05 c0       	rjmp	.+10     	; 0xa0f4 <f_open+0x224>

	LEAVE_FF(dj.fs, FR_OK);
    a0ea:	27 e0       	ldi	r18, 0x07	; 7
    a0ec:	30 e0       	ldi	r19, 0x00	; 0
    a0ee:	02 c0       	rjmp	.+4      	; 0xa0f4 <f_open+0x224>
    a0f0:	24 e0       	ldi	r18, 0x04	; 4
    a0f2:	30 e0       	ldi	r19, 0x00	; 0
}
    a0f4:	c9 01       	movw	r24, r18
    a0f6:	a4 96       	adiw	r28, 0x24	; 36
    a0f8:	ef e0       	ldi	r30, 0x0F	; 15
    a0fa:	0c 94 18 5b 	jmp	0xb630	; 0xb630 <__epilogue_restores__+0x6>

0000a0fe <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    a0fe:	a4 e0       	ldi	r26, 0x04	; 4
    a100:	b0 e0       	ldi	r27, 0x00	; 0
    a102:	e5 e8       	ldi	r30, 0x85	; 133
    a104:	f0 e5       	ldi	r31, 0x50	; 80
    a106:	0c 94 fa 5a 	jmp	0xb5f4	; 0xb5f4 <__prologue_saves__+0x2>
    a10a:	8b 83       	std	Y+3, r24	; 0x03
    a10c:	9c 83       	std	Y+4, r25	; 0x04
    a10e:	16 2f       	mov	r17, r22
    a110:	07 2f       	mov	r16, r23
    a112:	3a 01       	movw	r6, r20
    a114:	29 83       	std	Y+1, r18	; 0x01
    a116:	3a 83       	std	Y+2, r19	; 0x02
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;


	*br = 0;
    a118:	d9 01       	movw	r26, r18
    a11a:	1d 92       	st	X+, r1
    a11c:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    a11e:	fc 01       	movw	r30, r24
    a120:	62 81       	ldd	r22, Z+2	; 0x02
    a122:	73 81       	ldd	r23, Z+3	; 0x03
    a124:	80 81       	ld	r24, Z
    a126:	91 81       	ldd	r25, Z+1	; 0x01
    a128:	0e 94 3a 39 	call	0x7274	; 0x7274 <validate>
    a12c:	4c 01       	movw	r8, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    a12e:	00 97       	sbiw	r24, 0x00	; 0
    a130:	09 f0       	breq	.+2      	; 0xa134 <f_read+0x36>
    a132:	8a c1       	rjmp	.+788    	; 0xa448 <f_read+0x34a>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    a134:	ab 81       	ldd	r26, Y+3	; 0x03
    a136:	bc 81       	ldd	r27, Y+4	; 0x04
    a138:	14 96       	adiw	r26, 0x04	; 4
    a13a:	8c 91       	ld	r24, X
    a13c:	87 fd       	sbrc	r24, 7
    a13e:	60 c0       	rjmp	.+192    	; 0xa200 <f_read+0x102>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
    a140:	80 fd       	sbrc	r24, 0
    a142:	04 c0       	rjmp	.+8      	; 0xa14c <f_read+0x4e>
    a144:	97 e0       	ldi	r25, 0x07	; 7
    a146:	89 2e       	mov	r8, r25
    a148:	91 2c       	mov	r9, r1
    a14a:	7e c1       	rjmp	.+764    	; 0xa448 <f_read+0x34a>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    a14c:	eb 81       	ldd	r30, Y+3	; 0x03
    a14e:	fc 81       	ldd	r31, Y+4	; 0x04
    a150:	22 85       	ldd	r18, Z+10	; 0x0a
    a152:	33 85       	ldd	r19, Z+11	; 0x0b
    a154:	44 85       	ldd	r20, Z+12	; 0x0c
    a156:	55 85       	ldd	r21, Z+13	; 0x0d
    a158:	86 81       	ldd	r24, Z+6	; 0x06
    a15a:	97 81       	ldd	r25, Z+7	; 0x07
    a15c:	a0 85       	ldd	r26, Z+8	; 0x08
    a15e:	b1 85       	ldd	r27, Z+9	; 0x09
    a160:	28 1b       	sub	r18, r24
    a162:	39 0b       	sbc	r19, r25
    a164:	4a 0b       	sbc	r20, r26
    a166:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
    a168:	c3 01       	movw	r24, r6
    a16a:	a0 e0       	ldi	r26, 0x00	; 0
    a16c:	b0 e0       	ldi	r27, 0x00	; 0
    a16e:	28 17       	cp	r18, r24
    a170:	39 07       	cpc	r19, r25
    a172:	4a 07       	cpc	r20, r26
    a174:	5b 07       	cpc	r21, r27
    a176:	08 f4       	brcc	.+2      	; 0xa17a <f_read+0x7c>
    a178:	39 01       	movw	r6, r18
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;
    a17a:	81 2f       	mov	r24, r17
    a17c:	90 2f       	mov	r25, r16
    a17e:	9c 01       	movw	r18, r24
    a180:	29 01       	movw	r4, r18
    a182:	5e c1       	rjmp	.+700    	; 0xa440 <f_read+0x342>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    a184:	ab 81       	ldd	r26, Y+3	; 0x03
    a186:	bc 81       	ldd	r27, Y+4	; 0x04
    a188:	16 96       	adiw	r26, 0x06	; 6
    a18a:	2d 91       	ld	r18, X+
    a18c:	3d 91       	ld	r19, X+
    a18e:	4d 91       	ld	r20, X+
    a190:	5c 91       	ld	r21, X
    a192:	19 97       	sbiw	r26, 0x09	; 9
    a194:	da 01       	movw	r26, r20
    a196:	c9 01       	movw	r24, r18
    a198:	91 70       	andi	r25, 0x01	; 1
    a19a:	a0 70       	andi	r26, 0x00	; 0
    a19c:	b0 70       	andi	r27, 0x00	; 0
    a19e:	00 97       	sbiw	r24, 0x00	; 0
    a1a0:	a1 05       	cpc	r26, r1
    a1a2:	b1 05       	cpc	r27, r1
    a1a4:	09 f0       	breq	.+2      	; 0xa1a8 <f_read+0xaa>
    a1a6:	ef c0       	rjmp	.+478    	; 0xa386 <f_read+0x288>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    a1a8:	ab 81       	ldd	r26, Y+3	; 0x03
    a1aa:	bc 81       	ldd	r27, Y+4	; 0x04
    a1ac:	ed 91       	ld	r30, X+
    a1ae:	fc 91       	ld	r31, X
    a1b0:	11 97       	sbiw	r26, 0x01	; 1
    a1b2:	15 96       	adiw	r26, 0x05	; 5
    a1b4:	9c 91       	ld	r25, X
    a1b6:	15 97       	sbiw	r26, 0x05	; 5
    a1b8:	82 81       	ldd	r24, Z+2	; 0x02
    a1ba:	98 17       	cp	r25, r24
    a1bc:	e8 f1       	brcs	.+122    	; 0xa238 <f_read+0x13a>
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
    a1be:	21 15       	cp	r18, r1
    a1c0:	31 05       	cpc	r19, r1
    a1c2:	41 05       	cpc	r20, r1
    a1c4:	51 05       	cpc	r21, r1
    a1c6:	39 f4       	brne	.+14     	; 0xa1d6 <f_read+0xd8>
    a1c8:	1e 96       	adiw	r26, 0x0e	; 14
    a1ca:	6d 91       	ld	r22, X+
    a1cc:	7d 91       	ld	r23, X+
    a1ce:	8d 91       	ld	r24, X+
    a1d0:	9c 91       	ld	r25, X
    a1d2:	51 97       	sbiw	r26, 0x11	; 17
    a1d4:	0b c0       	rjmp	.+22     	; 0xa1ec <f_read+0xee>
    a1d6:	ab 81       	ldd	r26, Y+3	; 0x03
    a1d8:	bc 81       	ldd	r27, Y+4	; 0x04
    a1da:	52 96       	adiw	r26, 0x12	; 18
    a1dc:	4d 91       	ld	r20, X+
    a1de:	5d 91       	ld	r21, X+
    a1e0:	6d 91       	ld	r22, X+
    a1e2:	7c 91       	ld	r23, X
    a1e4:	55 97       	sbiw	r26, 0x15	; 21
    a1e6:	cf 01       	movw	r24, r30
    a1e8:	0e 94 cb 3b 	call	0x7796	; 0x7796 <get_fat>
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
    a1ec:	62 30       	cpi	r22, 0x02	; 2
    a1ee:	71 05       	cpc	r23, r1
    a1f0:	81 05       	cpc	r24, r1
    a1f2:	91 05       	cpc	r25, r1
    a1f4:	48 f4       	brcc	.+18     	; 0xa208 <f_read+0x10a>
    a1f6:	eb 81       	ldd	r30, Y+3	; 0x03
    a1f8:	fc 81       	ldd	r31, Y+4	; 0x04
    a1fa:	84 81       	ldd	r24, Z+4	; 0x04
    a1fc:	80 68       	ori	r24, 0x80	; 128
    a1fe:	84 83       	std	Z+4, r24	; 0x04
    a200:	82 e0       	ldi	r24, 0x02	; 2
    a202:	88 2e       	mov	r8, r24
    a204:	91 2c       	mov	r9, r1
    a206:	20 c1       	rjmp	.+576    	; 0xa448 <f_read+0x34a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    a208:	6f 3f       	cpi	r22, 0xFF	; 255
    a20a:	ff ef       	ldi	r31, 0xFF	; 255
    a20c:	7f 07       	cpc	r23, r31
    a20e:	ff ef       	ldi	r31, 0xFF	; 255
    a210:	8f 07       	cpc	r24, r31
    a212:	ff ef       	ldi	r31, 0xFF	; 255
    a214:	9f 07       	cpc	r25, r31
    a216:	49 f4       	brne	.+18     	; 0xa22a <f_read+0x12c>
    a218:	ab 81       	ldd	r26, Y+3	; 0x03
    a21a:	bc 81       	ldd	r27, Y+4	; 0x04
    a21c:	14 96       	adiw	r26, 0x04	; 4
    a21e:	8c 91       	ld	r24, X
    a220:	14 97       	sbiw	r26, 0x04	; 4
    a222:	80 68       	ori	r24, 0x80	; 128
    a224:	14 96       	adiw	r26, 0x04	; 4
    a226:	8c 93       	st	X, r24
    a228:	c7 c0       	rjmp	.+398    	; 0xa3b8 <f_read+0x2ba>
				fp->curr_clust = clst;				/* Update current cluster */
    a22a:	eb 81       	ldd	r30, Y+3	; 0x03
    a22c:	fc 81       	ldd	r31, Y+4	; 0x04
    a22e:	62 8b       	std	Z+18, r22	; 0x12
    a230:	73 8b       	std	Z+19, r23	; 0x13
    a232:	84 8b       	std	Z+20, r24	; 0x14
    a234:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector offset in the cluster */
    a236:	15 82       	std	Z+5, r1	; 0x05
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    a238:	ab 81       	ldd	r26, Y+3	; 0x03
    a23a:	bc 81       	ldd	r27, Y+4	; 0x04
    a23c:	0d 91       	ld	r16, X+
    a23e:	1c 91       	ld	r17, X
    a240:	11 97       	sbiw	r26, 0x01	; 1
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    a242:	52 96       	adiw	r26, 0x12	; 18
    a244:	2d 91       	ld	r18, X+
    a246:	3d 91       	ld	r19, X+
    a248:	4d 91       	ld	r20, X+
    a24a:	5c 91       	ld	r21, X
    a24c:	55 97       	sbiw	r26, 0x15	; 21
    a24e:	22 50       	subi	r18, 0x02	; 2
    a250:	30 40       	sbci	r19, 0x00	; 0
    a252:	40 40       	sbci	r20, 0x00	; 0
    a254:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    a256:	f8 01       	movw	r30, r16
    a258:	86 8d       	ldd	r24, Z+30	; 0x1e
    a25a:	97 8d       	ldd	r25, Z+31	; 0x1f
    a25c:	a0 a1       	ldd	r26, Z+32	; 0x20
    a25e:	b1 a1       	ldd	r27, Z+33	; 0x21
    a260:	02 97       	sbiw	r24, 0x02	; 2
    a262:	a1 09       	sbc	r26, r1
    a264:	b1 09       	sbc	r27, r1
    a266:	28 17       	cp	r18, r24
    a268:	39 07       	cpc	r19, r25
    a26a:	4a 07       	cpc	r20, r26
    a26c:	5b 07       	cpc	r21, r27
    a26e:	b8 f4       	brcc	.+46     	; 0xa29e <f_read+0x1a0>
	return clst * fs->csize + fs->database;
    a270:	32 80       	ldd	r3, Z+2	; 0x02
    a272:	63 2d       	mov	r22, r3
    a274:	70 e0       	ldi	r23, 0x00	; 0
    a276:	80 e0       	ldi	r24, 0x00	; 0
    a278:	90 e0       	ldi	r25, 0x00	; 0
    a27a:	0e 94 76 5a 	call	0xb4ec	; 0xb4ec <__mulsi3>
    a27e:	9b 01       	movw	r18, r22
    a280:	ac 01       	movw	r20, r24
    a282:	f8 01       	movw	r30, r16
    a284:	82 a5       	ldd	r24, Z+42	; 0x2a
    a286:	93 a5       	ldd	r25, Z+43	; 0x2b
    a288:	a4 a5       	ldd	r26, Z+44	; 0x2c
    a28a:	b5 a5       	ldd	r27, Z+45	; 0x2d
    a28c:	28 0f       	add	r18, r24
    a28e:	39 1f       	adc	r19, r25
    a290:	4a 1f       	adc	r20, r26
    a292:	5b 1f       	adc	r21, r27
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->curr_clust = clst;				/* Update current cluster */
				fp->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    a294:	21 15       	cp	r18, r1
    a296:	31 05       	cpc	r19, r1
    a298:	41 05       	cpc	r20, r1
    a29a:	51 05       	cpc	r21, r1
    a29c:	49 f4       	brne	.+18     	; 0xa2b0 <f_read+0x1b2>
    a29e:	ab 81       	ldd	r26, Y+3	; 0x03
    a2a0:	bc 81       	ldd	r27, Y+4	; 0x04
    a2a2:	14 96       	adiw	r26, 0x04	; 4
    a2a4:	8c 91       	ld	r24, X
    a2a6:	14 97       	sbiw	r26, 0x04	; 4
    a2a8:	80 68       	ori	r24, 0x80	; 128
    a2aa:	14 96       	adiw	r26, 0x04	; 4
    a2ac:	8c 93       	st	X, r24
    a2ae:	a8 cf       	rjmp	.-176    	; 0xa200 <f_read+0x102>
			sect += fp->csect;
    a2b0:	eb 81       	ldd	r30, Y+3	; 0x03
    a2b2:	fc 81       	ldd	r31, Y+4	; 0x04
    a2b4:	85 81       	ldd	r24, Z+5	; 0x05
    a2b6:	69 01       	movw	r12, r18
    a2b8:	7a 01       	movw	r14, r20
    a2ba:	c8 0e       	add	r12, r24
    a2bc:	d1 1c       	adc	r13, r1
    a2be:	e1 1c       	adc	r14, r1
    a2c0:	f1 1c       	adc	r15, r1
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
    a2c2:	53 01       	movw	r10, r6
    a2c4:	ab 2c       	mov	r10, r11
    a2c6:	bb 24       	eor	r11, r11
    a2c8:	a6 94       	lsr	r10
			if (cc) {								/* Read maximum contiguous sectors directly */
    a2ca:	a1 14       	cp	r10, r1
    a2cc:	b1 04       	cpc	r11, r1
    a2ce:	09 f4       	brne	.+2      	; 0xa2d2 <f_read+0x1d4>
    a2d0:	52 c0       	rjmp	.+164    	; 0xa376 <f_read+0x278>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    a2d2:	28 2f       	mov	r18, r24
    a2d4:	30 e0       	ldi	r19, 0x00	; 0
    a2d6:	c5 01       	movw	r24, r10
    a2d8:	82 0f       	add	r24, r18
    a2da:	93 1f       	adc	r25, r19
    a2dc:	63 2d       	mov	r22, r3
    a2de:	70 e0       	ldi	r23, 0x00	; 0
    a2e0:	68 17       	cp	r22, r24
    a2e2:	79 07       	cpc	r23, r25
    a2e4:	18 f4       	brcc	.+6      	; 0xa2ec <f_read+0x1ee>
					cc = fp->fs->csize - fp->csect;
    a2e6:	5b 01       	movw	r10, r22
    a2e8:	a2 1a       	sub	r10, r18
    a2ea:	b3 0a       	sbc	r11, r19
				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
    a2ec:	d8 01       	movw	r26, r16
    a2ee:	11 96       	adiw	r26, 0x01	; 1
    a2f0:	8c 91       	ld	r24, X
    a2f2:	b2 01       	movw	r22, r4
    a2f4:	a7 01       	movw	r20, r14
    a2f6:	96 01       	movw	r18, r12
    a2f8:	0a 2d       	mov	r16, r10
    a2fa:	0e 94 e3 53 	call	0xa7c6	; 0xa7c6 <disk_read>
    a2fe:	89 2b       	or	r24, r25
    a300:	09 f0       	breq	.+2      	; 0xa304 <f_read+0x206>
    a302:	55 c0       	rjmp	.+170    	; 0xa3ae <f_read+0x2b0>
					ABORT(fp->fs, FR_DISK_ERR);
#if !_FS_READONLY && _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)		/* Replace one of the read sectors with cached data if it contains a dirty sector */
    a304:	ab 81       	ldd	r26, Y+3	; 0x03
    a306:	bc 81       	ldd	r27, Y+4	; 0x04
    a308:	6d 91       	ld	r22, X+
    a30a:	7c 91       	ld	r23, X
    a30c:	fb 01       	movw	r30, r22
    a30e:	84 81       	ldd	r24, Z+4	; 0x04
    a310:	88 23       	and	r24, r24
    a312:	21 f1       	breq	.+72     	; 0xa35c <f_read+0x25e>
    a314:	26 a5       	ldd	r18, Z+46	; 0x2e
    a316:	37 a5       	ldd	r19, Z+47	; 0x2f
    a318:	40 a9       	ldd	r20, Z+48	; 0x30
    a31a:	51 a9       	ldd	r21, Z+49	; 0x31
    a31c:	2c 19       	sub	r18, r12
    a31e:	3d 09       	sbc	r19, r13
    a320:	4e 09       	sbc	r20, r14
    a322:	5f 09       	sbc	r21, r15
    a324:	c5 01       	movw	r24, r10
    a326:	a0 e0       	ldi	r26, 0x00	; 0
    a328:	b0 e0       	ldi	r27, 0x00	; 0
    a32a:	28 17       	cp	r18, r24
    a32c:	39 07       	cpc	r19, r25
    a32e:	4a 07       	cpc	r20, r26
    a330:	5b 07       	cpc	r21, r27
    a332:	a0 f4       	brcc	.+40     	; 0xa35c <f_read+0x25e>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    a334:	a9 e0       	ldi	r26, 0x09	; 9
    a336:	22 0f       	add	r18, r18
    a338:	33 1f       	adc	r19, r19
    a33a:	44 1f       	adc	r20, r20
    a33c:	55 1f       	adc	r21, r21
    a33e:	aa 95       	dec	r26
    a340:	d1 f7       	brne	.-12     	; 0xa336 <f_read+0x238>
    a342:	d2 01       	movw	r26, r4
    a344:	a2 0f       	add	r26, r18
    a346:	b3 1f       	adc	r27, r19
	const char *s = (const char *)src;
    a348:	f2 96       	adiw	r30, 0x32	; 50
	while (cnt--) *d++ = *s++;
    a34a:	9b 01       	movw	r18, r22
    a34c:	2e 5c       	subi	r18, 0xCE	; 206
    a34e:	3d 4f       	sbci	r19, 0xFD	; 253
    a350:	02 c0       	rjmp	.+4      	; 0xa356 <f_read+0x258>
    a352:	81 91       	ld	r24, Z+
    a354:	8d 93       	st	X+, r24
    a356:	e2 17       	cp	r30, r18
    a358:	f3 07       	cpc	r31, r19
    a35a:	d9 f7       	brne	.-10     	; 0xa352 <f_read+0x254>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    a35c:	ab 81       	ldd	r26, Y+3	; 0x03
    a35e:	bc 81       	ldd	r27, Y+4	; 0x04
    a360:	15 96       	adiw	r26, 0x05	; 5
    a362:	8c 91       	ld	r24, X
    a364:	15 97       	sbiw	r26, 0x05	; 5
    a366:	8a 0d       	add	r24, r10
    a368:	15 96       	adiw	r26, 0x05	; 5
    a36a:	8c 93       	st	X, r24
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    a36c:	b5 01       	movw	r22, r10
    a36e:	76 2f       	mov	r23, r22
    a370:	66 27       	eor	r22, r22
    a372:	77 0f       	add	r23, r23
    a374:	48 c0       	rjmp	.+144    	; 0xa406 <f_read+0x308>
			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    a376:	eb 81       	ldd	r30, Y+3	; 0x03
    a378:	fc 81       	ldd	r31, Y+4	; 0x04
    a37a:	c6 8a       	std	Z+22, r12	; 0x16
    a37c:	d7 8a       	std	Z+23, r13	; 0x17
    a37e:	e0 8e       	std	Z+24, r14	; 0x18
    a380:	f1 8e       	std	Z+25, r15	; 0x19
			fp->csect++;							/* Next sector address in the cluster */
    a382:	8f 5f       	subi	r24, 0xFF	; 255
    a384:	85 83       	std	Z+5, r24	; 0x05
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    a386:	ab 81       	ldd	r26, Y+3	; 0x03
    a388:	bc 81       	ldd	r27, Y+4	; 0x04
    a38a:	16 96       	adiw	r26, 0x06	; 6
    a38c:	cd 90       	ld	r12, X+
    a38e:	dd 90       	ld	r13, X+
    a390:	ed 90       	ld	r14, X+
    a392:	fc 90       	ld	r15, X
    a394:	19 97       	sbiw	r26, 0x09	; 9
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
    a396:	56 96       	adiw	r26, 0x16	; 22
    a398:	4d 91       	ld	r20, X+
    a39a:	5d 91       	ld	r21, X+
    a39c:	6d 91       	ld	r22, X+
    a39e:	7c 91       	ld	r23, X
    a3a0:	59 97       	sbiw	r26, 0x19	; 25
    a3a2:	8d 91       	ld	r24, X+
    a3a4:	9c 91       	ld	r25, X
    a3a6:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <move_window>
    a3aa:	89 2b       	or	r24, r25
    a3ac:	49 f0       	breq	.+18     	; 0xa3c0 <f_read+0x2c2>
			ABORT(fp->fs, FR_DISK_ERR);
    a3ae:	eb 81       	ldd	r30, Y+3	; 0x03
    a3b0:	fc 81       	ldd	r31, Y+4	; 0x04
    a3b2:	84 81       	ldd	r24, Z+4	; 0x04
    a3b4:	80 68       	ori	r24, 0x80	; 128
    a3b6:	84 83       	std	Z+4, r24	; 0x04
    a3b8:	81 e0       	ldi	r24, 0x01	; 1
    a3ba:	88 2e       	mov	r8, r24
    a3bc:	91 2c       	mov	r9, r1
    a3be:	44 c0       	rjmp	.+136    	; 0xa448 <f_read+0x34a>
			}
#endif
			fp->dsect = sect;
			fp->csect++;							/* Next sector address in the cluster */
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    a3c0:	c6 01       	movw	r24, r12
    a3c2:	91 70       	andi	r25, 0x01	; 1
    a3c4:	20 e0       	ldi	r18, 0x00	; 0
    a3c6:	32 e0       	ldi	r19, 0x02	; 2
    a3c8:	28 1b       	sub	r18, r24
    a3ca:	39 0b       	sbc	r19, r25
    a3cc:	b3 01       	movw	r22, r6
    a3ce:	26 15       	cp	r18, r6
    a3d0:	37 05       	cpc	r19, r7
    a3d2:	08 f4       	brcc	.+2      	; 0xa3d6 <f_read+0x2d8>
    a3d4:	b9 01       	movw	r22, r18
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    a3d6:	a2 01       	movw	r20, r4
	const char *s = (const char *)src;
    a3d8:	ab 81       	ldd	r26, Y+3	; 0x03
    a3da:	bc 81       	ldd	r27, Y+4	; 0x04
    a3dc:	16 96       	adiw	r26, 0x06	; 6
    a3de:	8d 91       	ld	r24, X+
    a3e0:	9c 91       	ld	r25, X
    a3e2:	17 97       	sbiw	r26, 0x07	; 7
    a3e4:	91 70       	andi	r25, 0x01	; 1
    a3e6:	c2 96       	adiw	r24, 0x32	; 50
    a3e8:	ed 91       	ld	r30, X+
    a3ea:	fc 91       	ld	r31, X
    a3ec:	e8 0f       	add	r30, r24
    a3ee:	f9 1f       	adc	r31, r25
	while (cnt--) *d++ = *s++;
    a3f0:	9f 01       	movw	r18, r30
    a3f2:	26 0f       	add	r18, r22
    a3f4:	37 1f       	adc	r19, r23
    a3f6:	04 c0       	rjmp	.+8      	; 0xa400 <f_read+0x302>
    a3f8:	81 91       	ld	r24, Z+
    a3fa:	da 01       	movw	r26, r20
    a3fc:	8d 93       	st	X+, r24
    a3fe:	ad 01       	movw	r20, r26
    a400:	e2 17       	cp	r30, r18
    a402:	f3 07       	cpc	r31, r19
    a404:	c9 f7       	brne	.-14     	; 0xa3f8 <f_read+0x2fa>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    a406:	46 0e       	add	r4, r22
    a408:	57 1e       	adc	r5, r23
    a40a:	cb 01       	movw	r24, r22
    a40c:	a0 e0       	ldi	r26, 0x00	; 0
    a40e:	b0 e0       	ldi	r27, 0x00	; 0
    a410:	eb 81       	ldd	r30, Y+3	; 0x03
    a412:	fc 81       	ldd	r31, Y+4	; 0x04
    a414:	26 81       	ldd	r18, Z+6	; 0x06
    a416:	37 81       	ldd	r19, Z+7	; 0x07
    a418:	40 85       	ldd	r20, Z+8	; 0x08
    a41a:	51 85       	ldd	r21, Z+9	; 0x09
    a41c:	28 0f       	add	r18, r24
    a41e:	39 1f       	adc	r19, r25
    a420:	4a 1f       	adc	r20, r26
    a422:	5b 1f       	adc	r21, r27
    a424:	26 83       	std	Z+6, r18	; 0x06
    a426:	37 83       	std	Z+7, r19	; 0x07
    a428:	40 87       	std	Z+8, r20	; 0x08
    a42a:	51 87       	std	Z+9, r21	; 0x09
    a42c:	e9 81       	ldd	r30, Y+1	; 0x01
    a42e:	fa 81       	ldd	r31, Y+2	; 0x02
    a430:	80 81       	ld	r24, Z
    a432:	91 81       	ldd	r25, Z+1	; 0x01
    a434:	86 0f       	add	r24, r22
    a436:	97 1f       	adc	r25, r23
    a438:	80 83       	st	Z, r24
    a43a:	91 83       	std	Z+1, r25	; 0x01
    a43c:	66 1a       	sub	r6, r22
    a43e:	77 0a       	sbc	r7, r23
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
    a440:	61 14       	cp	r6, r1
    a442:	71 04       	cpc	r7, r1
    a444:	09 f0       	breq	.+2      	; 0xa448 <f_read+0x34a>
    a446:	9e ce       	rjmp	.-708    	; 0xa184 <f_read+0x86>
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    a448:	c4 01       	movw	r24, r8
    a44a:	24 96       	adiw	r28, 0x04	; 4
    a44c:	e1 e1       	ldi	r30, 0x11	; 17
    a44e:	0c 94 16 5b 	jmp	0xb62c	; 0xb62c <__epilogue_restores__+0x2>

0000a452 <f_gets>:
char* f_gets (
	char* buff,	/* Pointer to the string buffer to read */
	int len,	/* Size of string buffer */
	FIL* fil	/* Pointer to the file object */
)
{
    a452:	a2 e0       	ldi	r26, 0x02	; 2
    a454:	b0 e0       	ldi	r27, 0x00	; 0
    a456:	ef e2       	ldi	r30, 0x2F	; 47
    a458:	f2 e5       	ldi	r31, 0x52	; 82
    a45a:	0c 94 fd 5a 	jmp	0xb5fa	; 0xb5fa <__prologue_saves__+0x8>
    a45e:	6c 01       	movw	r12, r24
    a460:	5b 01       	movw	r10, r22
    a462:	4a 01       	movw	r8, r20
    a464:	8c 01       	movw	r16, r24
    a466:	ee 24       	eor	r14, r14
    a468:	ff 24       	eor	r15, r15
	int i = 0;
	char *p = buff;
	UINT rc;


	while (i < len - 1) {			/* Read bytes until buffer gets filled */
    a46a:	08 94       	sec
    a46c:	a1 08       	sbc	r10, r1
    a46e:	b1 08       	sbc	r11, r1
		f_read(fil, p, 1, &rc);
    a470:	3e 01       	movw	r6, r28
    a472:	08 94       	sec
    a474:	61 1c       	adc	r6, r1
    a476:	71 1c       	adc	r7, r1
    a478:	16 c0       	rjmp	.+44     	; 0xa4a6 <f_gets+0x54>
    a47a:	c4 01       	movw	r24, r8
    a47c:	b8 01       	movw	r22, r16
    a47e:	41 e0       	ldi	r20, 0x01	; 1
    a480:	50 e0       	ldi	r21, 0x00	; 0
    a482:	93 01       	movw	r18, r6
    a484:	0e 94 7f 50 	call	0xa0fe	; 0xa0fe <f_read>
		if (rc != 1) break;			/* Break when no data to read */
    a488:	89 81       	ldd	r24, Y+1	; 0x01
    a48a:	9a 81       	ldd	r25, Y+2	; 0x02
    a48c:	01 97       	sbiw	r24, 0x01	; 1
    a48e:	71 f4       	brne	.+28     	; 0xa4ac <f_gets+0x5a>
#if _USE_STRFUNC >= 2
		if (*p == '\r') continue;	/* Strip '\r' */
    a490:	f8 01       	movw	r30, r16
    a492:	80 81       	ld	r24, Z
    a494:	8d 30       	cpi	r24, 0x0D	; 13
    a496:	39 f0       	breq	.+14     	; 0xa4a6 <f_gets+0x54>
#endif
		i++;
    a498:	08 94       	sec
    a49a:	e1 1c       	adc	r14, r1
    a49c:	f1 1c       	adc	r15, r1
		if (*p++ == '\n') break;	/* Break when reached end of line */
    a49e:	0f 5f       	subi	r16, 0xFF	; 255
    a4a0:	1f 4f       	sbci	r17, 0xFF	; 255
    a4a2:	8a 30       	cpi	r24, 0x0A	; 10
    a4a4:	19 f0       	breq	.+6      	; 0xa4ac <f_gets+0x5a>
	int i = 0;
	char *p = buff;
	UINT rc;


	while (i < len - 1) {			/* Read bytes until buffer gets filled */
    a4a6:	ea 14       	cp	r14, r10
    a4a8:	fb 04       	cpc	r15, r11
    a4aa:	3c f3       	brlt	.-50     	; 0xa47a <f_gets+0x28>
		if (*p == '\r') continue;	/* Strip '\r' */
#endif
		i++;
		if (*p++ == '\n') break;	/* Break when reached end of line */
	}
	*p = 0;
    a4ac:	f8 01       	movw	r30, r16
    a4ae:	10 82       	st	Z, r1
	return i ? buff : NULL;			/* When no data read (eof or error), return with error. */
    a4b0:	e1 14       	cp	r14, r1
    a4b2:	f1 04       	cpc	r15, r1
    a4b4:	11 f4       	brne	.+4      	; 0xa4ba <f_gets+0x68>
    a4b6:	cc 24       	eor	r12, r12
    a4b8:	dd 24       	eor	r13, r13
}
    a4ba:	c6 01       	movw	r24, r12
    a4bc:	22 96       	adiw	r28, 0x02	; 2
    a4be:	ee e0       	ldi	r30, 0x0E	; 14
    a4c0:	0c 94 19 5b 	jmp	0xb632	; 0xb632 <__epilogue_restores__+0x8>

0000a4c4 <wait_ready>:
BYTE wait_ready (void)
{
  BYTE res;


  Timer2 = 50;  /* Wait for ready in timeout of 500ms */
    a4c4:	82 e3       	ldi	r24, 0x32	; 50
    a4c6:	80 93 73 25 	sts	0x2573, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a4ca:	8f ef       	ldi	r24, 0xFF	; 255
    a4cc:	e0 ec       	ldi	r30, 0xC0	; 192
    a4ce:	fa e0       	ldi	r31, 0x0A	; 10
    a4d0:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a4d2:	80 91 c2 0a 	lds	r24, 0x0AC2
    a4d6:	87 ff       	sbrs	r24, 7
    a4d8:	fc cf       	rjmp	.-8      	; 0xa4d2 <wait_ready+0xe>
  return SPIE.DATA;
    a4da:	80 91 c3 0a 	lds	r24, 0x0AC3
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a4de:	e0 ec       	ldi	r30, 0xC0	; 192
    a4e0:	fa e0       	ldi	r31, 0x0A	; 10
    a4e2:	2f ef       	ldi	r18, 0xFF	; 255
    a4e4:	23 83       	std	Z+3, r18	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a4e6:	80 91 c2 0a 	lds	r24, 0x0AC2
    a4ea:	87 ff       	sbrs	r24, 7
    a4ec:	fc cf       	rjmp	.-8      	; 0xa4e6 <wait_ready+0x22>
  return SPIE.DATA;
    a4ee:	90 91 c3 0a 	lds	r25, 0x0AC3

  Timer2 = 50;  /* Wait for ready in timeout of 500ms */
  rcvr_spi();
  do
    res = rcvr_spi();
  while ((res != 0xFF) && Timer2);
    a4f2:	9f 3f       	cpi	r25, 0xFF	; 255
    a4f4:	21 f0       	breq	.+8      	; 0xa4fe <wait_ready+0x3a>
    a4f6:	80 91 73 25 	lds	r24, 0x2573
    a4fa:	88 23       	and	r24, r24
    a4fc:	99 f7       	brne	.-26     	; 0xa4e4 <wait_ready+0x20>

  return res;
}
    a4fe:	89 2f       	mov	r24, r25
    a500:	08 95       	ret

0000a502 <power_off>:
  SPIE.CTRL = 0x53;      /* Enable Master Mode, clkper/128 */
}

static
void power_off (void)
{
    a502:	ff 92       	push	r15
    a504:	0f 93       	push	r16
    a506:	1f 93       	push	r17
  SELECT();        /* Wait for card ready */
    a508:	00 e8       	ldi	r16, 0x80	; 128
    a50a:	16 e0       	ldi	r17, 0x06	; 6
    a50c:	80 e1       	ldi	r24, 0x10	; 16
    a50e:	f8 2e       	mov	r15, r24
    a510:	f8 01       	movw	r30, r16
    a512:	f6 82       	std	Z+6, r15	; 0x06
  wait_ready();
    a514:	0e 94 62 52 	call	0xa4c4	; 0xa4c4 <wait_ready>
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
  DESELECT();
    a518:	f8 01       	movw	r30, r16
    a51a:	f5 82       	std	Z+5, r15	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a51c:	8f ef       	ldi	r24, 0xFF	; 255
    a51e:	e0 ec       	ldi	r30, 0xC0	; 192
    a520:	fa e0       	ldi	r31, 0x0A	; 10
    a522:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a524:	80 91 c2 0a 	lds	r24, 0x0AC2
    a528:	87 ff       	sbrs	r24, 7
    a52a:	fc cf       	rjmp	.-8      	; 0xa524 <power_off+0x22>
  return SPIE.DATA;
    a52c:	80 91 c3 0a 	lds	r24, 0x0AC3
void power_off (void)
{
  SELECT();        /* Wait for card ready */
  wait_ready();
  release_spi();
  Stat |= STA_NOINIT;    /* Set STA_NOINIT */
    a530:	80 91 e0 24 	lds	r24, 0x24E0
    a534:	81 60       	ori	r24, 0x01	; 1
    a536:	80 93 e0 24 	sts	0x24E0, r24
}
    a53a:	1f 91       	pop	r17
    a53c:	0f 91       	pop	r16
    a53e:	ff 90       	pop	r15
    a540:	08 95       	ret

0000a542 <rcvr_datablock>:
static
BOOL rcvr_datablock (
  BYTE *buff,      /* Data buffer to store received data */
  UINT btr      /* Byte count (must be multiple of 4) */
)
{
    a542:	fc 01       	movw	r30, r24
  BYTE token;


  Timer1 = 20;
    a544:	84 e1       	ldi	r24, 0x14	; 20
    a546:	80 93 72 25 	sts	0x2572, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a54a:	a0 ec       	ldi	r26, 0xC0	; 192
    a54c:	ba e0       	ldi	r27, 0x0A	; 10
    a54e:	9f ef       	ldi	r25, 0xFF	; 255
    a550:	13 96       	adiw	r26, 0x03	; 3
    a552:	9c 93       	st	X, r25
    a554:	13 97       	sbiw	r26, 0x03	; 3
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a556:	80 91 c2 0a 	lds	r24, 0x0AC2
    a55a:	87 ff       	sbrs	r24, 7
    a55c:	fc cf       	rjmp	.-8      	; 0xa556 <rcvr_datablock+0x14>
  return SPIE.DATA;
    a55e:	80 91 c3 0a 	lds	r24, 0x0AC3


  Timer1 = 20;
  do {              /* Wait for data packet in timeout of 200ms */
    token = rcvr_spi();
  } while ((token == 0xFF) && Timer1);
    a562:	8f 3f       	cpi	r24, 0xFF	; 255
    a564:	29 f4       	brne	.+10     	; 0xa570 <rcvr_datablock+0x2e>
    a566:	80 91 72 25 	lds	r24, 0x2572
    a56a:	88 23       	and	r24, r24
    a56c:	89 f7       	brne	.-30     	; 0xa550 <rcvr_datablock+0xe>
    a56e:	4a c0       	rjmp	.+148    	; 0xa604 <rcvr_datablock+0xc2>
  if(token != 0xFE) return FALSE;  /* If not valid data token, retutn with error */
    a570:	8e 3f       	cpi	r24, 0xFE	; 254
    a572:	09 f0       	breq	.+2      	; 0xa576 <rcvr_datablock+0x34>
    a574:	47 c0       	rjmp	.+142    	; 0xa604 <rcvr_datablock+0xc2>

  do {              /* Receive the data block into buffer */
    rcvr_spi_m(buff++);
    a576:	a0 ec       	ldi	r26, 0xC0	; 192
    a578:	ba e0       	ldi	r27, 0x0A	; 10
    a57a:	9f ef       	ldi	r25, 0xFF	; 255
    a57c:	13 96       	adiw	r26, 0x03	; 3
    a57e:	9c 93       	st	X, r25
    a580:	13 97       	sbiw	r26, 0x03	; 3
    a582:	80 91 c2 0a 	lds	r24, 0x0AC2
    a586:	87 ff       	sbrs	r24, 7
    a588:	fc cf       	rjmp	.-8      	; 0xa582 <rcvr_datablock+0x40>
    a58a:	80 91 c3 0a 	lds	r24, 0x0AC3
    a58e:	80 83       	st	Z, r24
    rcvr_spi_m(buff++);
    a590:	13 96       	adiw	r26, 0x03	; 3
    a592:	9c 93       	st	X, r25
    a594:	13 97       	sbiw	r26, 0x03	; 3
    a596:	80 91 c2 0a 	lds	r24, 0x0AC2
    a59a:	87 ff       	sbrs	r24, 7
    a59c:	fc cf       	rjmp	.-8      	; 0xa596 <rcvr_datablock+0x54>
    a59e:	80 91 c3 0a 	lds	r24, 0x0AC3
    a5a2:	81 83       	std	Z+1, r24	; 0x01
    rcvr_spi_m(buff++);
    a5a4:	13 96       	adiw	r26, 0x03	; 3
    a5a6:	9c 93       	st	X, r25
    a5a8:	13 97       	sbiw	r26, 0x03	; 3
    a5aa:	80 91 c2 0a 	lds	r24, 0x0AC2
    a5ae:	87 ff       	sbrs	r24, 7
    a5b0:	fc cf       	rjmp	.-8      	; 0xa5aa <rcvr_datablock+0x68>
    a5b2:	80 91 c3 0a 	lds	r24, 0x0AC3
    a5b6:	82 83       	std	Z+2, r24	; 0x02
    rcvr_spi_m(buff++);
    a5b8:	13 96       	adiw	r26, 0x03	; 3
    a5ba:	9c 93       	st	X, r25
    a5bc:	13 97       	sbiw	r26, 0x03	; 3
    a5be:	80 91 c2 0a 	lds	r24, 0x0AC2
    a5c2:	87 ff       	sbrs	r24, 7
    a5c4:	fc cf       	rjmp	.-8      	; 0xa5be <rcvr_datablock+0x7c>
    a5c6:	80 91 c3 0a 	lds	r24, 0x0AC3
    a5ca:	83 83       	std	Z+3, r24	; 0x03
  } while (btr -= 4);
    a5cc:	64 50       	subi	r22, 0x04	; 4
    a5ce:	70 40       	sbci	r23, 0x00	; 0
    a5d0:	11 f0       	breq	.+4      	; 0xa5d6 <rcvr_datablock+0x94>
static
BOOL rcvr_datablock (
  BYTE *buff,      /* Data buffer to store received data */
  UINT btr      /* Byte count (must be multiple of 4) */
)
{
    a5d2:	34 96       	adiw	r30, 0x04	; 4
    a5d4:	d3 cf       	rjmp	.-90     	; 0xa57c <rcvr_datablock+0x3a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a5d6:	8f ef       	ldi	r24, 0xFF	; 255
    a5d8:	e0 ec       	ldi	r30, 0xC0	; 192
    a5da:	fa e0       	ldi	r31, 0x0A	; 10
    a5dc:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a5de:	80 91 c2 0a 	lds	r24, 0x0AC2
    a5e2:	87 ff       	sbrs	r24, 7
    a5e4:	fc cf       	rjmp	.-8      	; 0xa5de <rcvr_datablock+0x9c>
  return SPIE.DATA;
    a5e6:	80 91 c3 0a 	lds	r24, 0x0AC3
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a5ea:	8f ef       	ldi	r24, 0xFF	; 255
    a5ec:	e0 ec       	ldi	r30, 0xC0	; 192
    a5ee:	fa e0       	ldi	r31, 0x0A	; 10
    a5f0:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a5f2:	80 91 c2 0a 	lds	r24, 0x0AC2
    a5f6:	87 ff       	sbrs	r24, 7
    a5f8:	fc cf       	rjmp	.-8      	; 0xa5f2 <rcvr_datablock+0xb0>
  return SPIE.DATA;
    a5fa:	80 91 c3 0a 	lds	r24, 0x0AC3
    a5fe:	21 e0       	ldi	r18, 0x01	; 1
    a600:	30 e0       	ldi	r19, 0x00	; 0
    a602:	02 c0       	rjmp	.+4      	; 0xa608 <rcvr_datablock+0xc6>
    rcvr_spi_m(buff++);
  } while (btr -= 4);
  rcvr_spi();            /* Discard CRC */
  rcvr_spi();

  return TRUE;          /* Return with success */
    a604:	20 e0       	ldi	r18, 0x00	; 0
    a606:	30 e0       	ldi	r19, 0x00	; 0
}
    a608:	c9 01       	movw	r24, r18
    a60a:	08 95       	ret

0000a60c <xmit_datablock>:
static
BOOL xmit_datablock (
  const BYTE *buff,  /* 512 byte data block to be transmitted */
  BYTE token      /* Data/Stop token */
)
{
    a60c:	1f 93       	push	r17
    a60e:	cf 93       	push	r28
    a610:	df 93       	push	r29
    a612:	ec 01       	movw	r28, r24
    a614:	16 2f       	mov	r17, r22
  BYTE resp, wc;


  if (wait_ready() != 0xFF) return FALSE;
    a616:	0e 94 62 52 	call	0xa4c4	; 0xa4c4 <wait_ready>
    a61a:	8f 3f       	cpi	r24, 0xFF	; 255
    a61c:	19 f0       	breq	.+6      	; 0xa624 <xmit_datablock+0x18>
    a61e:	20 e0       	ldi	r18, 0x00	; 0
    a620:	30 e0       	ldi	r19, 0x00	; 0
    a622:	42 c0       	rjmp	.+132    	; 0xa6a8 <xmit_datablock+0x9c>

  xmit_spi(token);          /* Xmit data token */
    a624:	e0 ec       	ldi	r30, 0xC0	; 192
    a626:	fa e0       	ldi	r31, 0x0A	; 10
    a628:	13 83       	std	Z+3, r17	; 0x03
    a62a:	80 91 c2 0a 	lds	r24, 0x0AC2
    a62e:	87 ff       	sbrs	r24, 7
    a630:	fc cf       	rjmp	.-8      	; 0xa62a <xmit_datablock+0x1e>
  if (token != 0xFD) {  /* Is data token */
    a632:	1d 3f       	cpi	r17, 0xFD	; 253
    a634:	19 f4       	brne	.+6      	; 0xa63c <xmit_datablock+0x30>
    a636:	21 e0       	ldi	r18, 0x01	; 1
    a638:	30 e0       	ldi	r19, 0x00	; 0
    a63a:	36 c0       	rjmp	.+108    	; 0xa6a8 <xmit_datablock+0x9c>
    a63c:	90 e0       	ldi	r25, 0x00	; 0
    wc = 0;
    do {              /* Xmit the 512 byte data block to MMC */
      xmit_spi(*buff++);
    a63e:	e0 ec       	ldi	r30, 0xC0	; 192
    a640:	fa e0       	ldi	r31, 0x0A	; 10
    a642:	88 81       	ld	r24, Y
    a644:	83 83       	std	Z+3, r24	; 0x03
    a646:	80 91 c2 0a 	lds	r24, 0x0AC2
    a64a:	87 ff       	sbrs	r24, 7
    a64c:	fc cf       	rjmp	.-8      	; 0xa646 <xmit_datablock+0x3a>
      xmit_spi(*buff++);
    a64e:	89 81       	ldd	r24, Y+1	; 0x01
    a650:	83 83       	std	Z+3, r24	; 0x03
    a652:	80 91 c2 0a 	lds	r24, 0x0AC2
    a656:	87 ff       	sbrs	r24, 7
    a658:	fc cf       	rjmp	.-8      	; 0xa652 <xmit_datablock+0x46>
    } while (--wc);
    a65a:	91 50       	subi	r25, 0x01	; 1
    a65c:	11 f0       	breq	.+4      	; 0xa662 <xmit_datablock+0x56>
static
BOOL xmit_datablock (
  const BYTE *buff,  /* 512 byte data block to be transmitted */
  BYTE token      /* Data/Stop token */
)
{
    a65e:	22 96       	adiw	r28, 0x02	; 2
    a660:	f0 cf       	rjmp	.-32     	; 0xa642 <xmit_datablock+0x36>
    wc = 0;
    do {              /* Xmit the 512 byte data block to MMC */
      xmit_spi(*buff++);
      xmit_spi(*buff++);
    } while (--wc);
    xmit_spi(0xFF);          /* CRC (Dummy) */
    a662:	8f ef       	ldi	r24, 0xFF	; 255
    a664:	e0 ec       	ldi	r30, 0xC0	; 192
    a666:	fa e0       	ldi	r31, 0x0A	; 10
    a668:	83 83       	std	Z+3, r24	; 0x03
    a66a:	80 91 c2 0a 	lds	r24, 0x0AC2
    a66e:	87 ff       	sbrs	r24, 7
    a670:	fc cf       	rjmp	.-8      	; 0xa66a <xmit_datablock+0x5e>
    xmit_spi(0xFF);
    a672:	8f ef       	ldi	r24, 0xFF	; 255
    a674:	e0 ec       	ldi	r30, 0xC0	; 192
    a676:	fa e0       	ldi	r31, 0x0A	; 10
    a678:	83 83       	std	Z+3, r24	; 0x03
    a67a:	80 91 c2 0a 	lds	r24, 0x0AC2
    a67e:	87 ff       	sbrs	r24, 7
    a680:	fc cf       	rjmp	.-8      	; 0xa67a <xmit_datablock+0x6e>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a682:	8f ef       	ldi	r24, 0xFF	; 255
    a684:	e0 ec       	ldi	r30, 0xC0	; 192
    a686:	fa e0       	ldi	r31, 0x0A	; 10
    a688:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a68a:	80 91 c2 0a 	lds	r24, 0x0AC2
    a68e:	87 ff       	sbrs	r24, 7
    a690:	fc cf       	rjmp	.-8      	; 0xa68a <xmit_datablock+0x7e>
  return SPIE.DATA;
    a692:	80 91 c3 0a 	lds	r24, 0x0AC3
    a696:	90 e0       	ldi	r25, 0x00	; 0
    a698:	8f 71       	andi	r24, 0x1F	; 31
    a69a:	85 30       	cpi	r24, 0x05	; 5
    a69c:	09 f0       	breq	.+2      	; 0xa6a0 <xmit_datablock+0x94>
    a69e:	91 e0       	ldi	r25, 0x01	; 1
    a6a0:	81 e0       	ldi	r24, 0x01	; 1
    a6a2:	98 27       	eor	r25, r24
    a6a4:	29 2f       	mov	r18, r25
    a6a6:	30 e0       	ldi	r19, 0x00	; 0
    if ((resp & 0x1F) != 0x05)    /* If not accepted, return with error */
      return FALSE;
  }

  return TRUE;
}
    a6a8:	c9 01       	movw	r24, r18
    a6aa:	df 91       	pop	r29
    a6ac:	cf 91       	pop	r28
    a6ae:	1f 91       	pop	r17
    a6b0:	08 95       	ret

0000a6b2 <send_cmd>:
static
BYTE send_cmd (
  BYTE cmd,    /* Command byte */
  DWORD arg    /* Argument */
)
{
    a6b2:	df 92       	push	r13
    a6b4:	ef 92       	push	r14
    a6b6:	ff 92       	push	r15
    a6b8:	0f 93       	push	r16
    a6ba:	1f 93       	push	r17
    a6bc:	d8 2e       	mov	r13, r24
    a6be:	7a 01       	movw	r14, r20
    a6c0:	8b 01       	movw	r16, r22
  BYTE n, res;


  if (cmd & 0x80) {  /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    a6c2:	87 ff       	sbrs	r24, 7
    a6c4:	0c c0       	rjmp	.+24     	; 0xa6de <send_cmd+0x2c>
    cmd &= 0x7F;
    res = send_cmd(CMD55, 0);
    a6c6:	87 e7       	ldi	r24, 0x77	; 119
    a6c8:	40 e0       	ldi	r20, 0x00	; 0
    a6ca:	50 e0       	ldi	r21, 0x00	; 0
    a6cc:	60 e0       	ldi	r22, 0x00	; 0
    a6ce:	70 e0       	ldi	r23, 0x00	; 0
    a6d0:	0e 94 59 53 	call	0xa6b2	; 0xa6b2 <send_cmd>
    if (res > 1) return res;
    a6d4:	82 30       	cpi	r24, 0x02	; 2
    a6d6:	08 f0       	brcs	.+2      	; 0xa6da <send_cmd+0x28>
    a6d8:	69 c0       	rjmp	.+210    	; 0xa7ac <send_cmd+0xfa>
{
  BYTE n, res;


  if (cmd & 0x80) {  /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    cmd &= 0x7F;
    a6da:	8f e7       	ldi	r24, 0x7F	; 127
    a6dc:	d8 22       	and	r13, r24
    res = send_cmd(CMD55, 0);
    if (res > 1) return res;
  }

  /* Select the card and wait for ready */
  DESELECT();
    a6de:	e0 e8       	ldi	r30, 0x80	; 128
    a6e0:	f6 e0       	ldi	r31, 0x06	; 6
    a6e2:	80 e1       	ldi	r24, 0x10	; 16
    a6e4:	85 83       	std	Z+5, r24	; 0x05
  SELECT();
    a6e6:	86 83       	std	Z+6, r24	; 0x06
  if (wait_ready() != 0xFF) return 0xFF;
    a6e8:	0e 94 62 52 	call	0xa4c4	; 0xa4c4 <wait_ready>
    a6ec:	8f 3f       	cpi	r24, 0xFF	; 255
    a6ee:	11 f0       	breq	.+4      	; 0xa6f4 <send_cmd+0x42>
    a6f0:	8f ef       	ldi	r24, 0xFF	; 255
    a6f2:	5c c0       	rjmp	.+184    	; 0xa7ac <send_cmd+0xfa>

  /* Send command packet */
  xmit_spi(cmd);            /* Start + Command index */
    a6f4:	e0 ec       	ldi	r30, 0xC0	; 192
    a6f6:	fa e0       	ldi	r31, 0x0A	; 10
    a6f8:	d3 82       	std	Z+3, r13	; 0x03
    a6fa:	80 91 c2 0a 	lds	r24, 0x0AC2
    a6fe:	87 ff       	sbrs	r24, 7
    a700:	fc cf       	rjmp	.-8      	; 0xa6fa <send_cmd+0x48>
  xmit_spi((BYTE)(arg >> 24));    /* Argument[31..24] */
    a702:	81 2f       	mov	r24, r17
    a704:	99 27       	eor	r25, r25
    a706:	aa 27       	eor	r26, r26
    a708:	bb 27       	eor	r27, r27
    a70a:	e0 ec       	ldi	r30, 0xC0	; 192
    a70c:	fa e0       	ldi	r31, 0x0A	; 10
    a70e:	83 83       	std	Z+3, r24	; 0x03
    a710:	80 91 c2 0a 	lds	r24, 0x0AC2
    a714:	87 ff       	sbrs	r24, 7
    a716:	fc cf       	rjmp	.-8      	; 0xa710 <send_cmd+0x5e>
  xmit_spi((BYTE)(arg >> 16));    /* Argument[23..16] */
    a718:	c8 01       	movw	r24, r16
    a71a:	aa 27       	eor	r26, r26
    a71c:	bb 27       	eor	r27, r27
    a71e:	e0 ec       	ldi	r30, 0xC0	; 192
    a720:	fa e0       	ldi	r31, 0x0A	; 10
    a722:	83 83       	std	Z+3, r24	; 0x03
    a724:	80 91 c2 0a 	lds	r24, 0x0AC2
    a728:	87 ff       	sbrs	r24, 7
    a72a:	fc cf       	rjmp	.-8      	; 0xa724 <send_cmd+0x72>
  xmit_spi((BYTE)(arg >> 8));      /* Argument[15..8] */
    a72c:	bb 27       	eor	r27, r27
    a72e:	a1 2f       	mov	r26, r17
    a730:	90 2f       	mov	r25, r16
    a732:	8f 2d       	mov	r24, r15
    a734:	e0 ec       	ldi	r30, 0xC0	; 192
    a736:	fa e0       	ldi	r31, 0x0A	; 10
    a738:	83 83       	std	Z+3, r24	; 0x03
    a73a:	80 91 c2 0a 	lds	r24, 0x0AC2
    a73e:	87 ff       	sbrs	r24, 7
    a740:	fc cf       	rjmp	.-8      	; 0xa73a <send_cmd+0x88>
  xmit_spi((BYTE)arg);        /* Argument[7..0] */
    a742:	e0 ec       	ldi	r30, 0xC0	; 192
    a744:	fa e0       	ldi	r31, 0x0A	; 10
    a746:	e3 82       	std	Z+3, r14	; 0x03
    a748:	80 91 c2 0a 	lds	r24, 0x0AC2
    a74c:	87 ff       	sbrs	r24, 7
    a74e:	fc cf       	rjmp	.-8      	; 0xa748 <send_cmd+0x96>
  n = 0x01;              /* Dummy CRC + Stop */
  if (cmd == CMD0) n = 0x95;      /* Valid CRC for CMD0(0) */
    a750:	80 e4       	ldi	r24, 0x40	; 64
    a752:	d8 16       	cp	r13, r24
    a754:	11 f4       	brne	.+4      	; 0xa75a <send_cmd+0xa8>
    a756:	85 e9       	ldi	r24, 0x95	; 149
    a758:	06 c0       	rjmp	.+12     	; 0xa766 <send_cmd+0xb4>
  if (cmd == CMD8) n = 0x87;      /* Valid CRC for CMD8(0x1AA) */
    a75a:	88 e4       	ldi	r24, 0x48	; 72
    a75c:	d8 16       	cp	r13, r24
    a75e:	11 f4       	brne	.+4      	; 0xa764 <send_cmd+0xb2>
    a760:	87 e8       	ldi	r24, 0x87	; 135
    a762:	01 c0       	rjmp	.+2      	; 0xa766 <send_cmd+0xb4>
    a764:	81 e0       	ldi	r24, 0x01	; 1
  xmit_spi(n);
    a766:	e0 ec       	ldi	r30, 0xC0	; 192
    a768:	fa e0       	ldi	r31, 0x0A	; 10
    a76a:	83 83       	std	Z+3, r24	; 0x03
    a76c:	80 91 c2 0a 	lds	r24, 0x0AC2
    a770:	87 ff       	sbrs	r24, 7
    a772:	fc cf       	rjmp	.-8      	; 0xa76c <send_cmd+0xba>

  /* Receive command response */
  if (cmd == CMD12) rcvr_spi();    /* Skip a stuff byte when stop reading */
    a774:	8c e4       	ldi	r24, 0x4C	; 76
    a776:	d8 16       	cp	r13, r24
    a778:	51 f4       	brne	.+20     	; 0xa78e <send_cmd+0xdc>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a77a:	8f ef       	ldi	r24, 0xFF	; 255
    a77c:	e0 ec       	ldi	r30, 0xC0	; 192
    a77e:	fa e0       	ldi	r31, 0x0A	; 10
    a780:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a782:	80 91 c2 0a 	lds	r24, 0x0AC2
    a786:	87 ff       	sbrs	r24, 7
    a788:	fc cf       	rjmp	.-8      	; 0xa782 <send_cmd+0xd0>
  return SPIE.DATA;
    a78a:	80 91 c3 0a 	lds	r24, 0x0AC3
    a78e:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a790:	e0 ec       	ldi	r30, 0xC0	; 192
    a792:	fa e0       	ldi	r31, 0x0A	; 10
    a794:	2f ef       	ldi	r18, 0xFF	; 255
    a796:	23 83       	std	Z+3, r18	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a798:	80 91 c2 0a 	lds	r24, 0x0AC2
    a79c:	87 ff       	sbrs	r24, 7
    a79e:	fc cf       	rjmp	.-8      	; 0xa798 <send_cmd+0xe6>
  return SPIE.DATA;
    a7a0:	80 91 c3 0a 	lds	r24, 0x0AC3
  /* Receive command response */
  if (cmd == CMD12) rcvr_spi();    /* Skip a stuff byte when stop reading */
  n = 10;                /* Wait for a valid response in timeout of 10 attempts */
  do
    res = rcvr_spi();
  while ((res & 0x80) && --n);
    a7a4:	87 ff       	sbrs	r24, 7
    a7a6:	02 c0       	rjmp	.+4      	; 0xa7ac <send_cmd+0xfa>
    a7a8:	91 50       	subi	r25, 0x01	; 1
    a7aa:	a9 f7       	brne	.-22     	; 0xa796 <send_cmd+0xe4>

  return res;      /* Return with the response value */
}
    a7ac:	1f 91       	pop	r17
    a7ae:	0f 91       	pop	r16
    a7b0:	ff 90       	pop	r15
    a7b2:	ef 90       	pop	r14
    a7b4:	df 90       	pop	r13
    a7b6:	08 95       	ret

0000a7b8 <disk_status>:

DSTATUS disk_status (
  BYTE drv    /* Physical drive nmuber (0) */
)
{
  if (drv) return STA_NOINIT;    /* Supports only single drive */
    a7b8:	88 23       	and	r24, r24
    a7ba:	11 f0       	breq	.+4      	; 0xa7c0 <disk_status+0x8>
    a7bc:	81 e0       	ldi	r24, 0x01	; 1
    a7be:	08 95       	ret
  return Stat;
    a7c0:	80 91 e0 24 	lds	r24, 0x24E0
}
    a7c4:	08 95       	ret

0000a7c6 <disk_read>:
  BYTE drv,      /* Physical drive nmuber (0) */
  BYTE *buff,      /* Pointer to the data buffer to store read data */
  DWORD sector,    /* Start sector number (LBA) */
  BYTE count      /* Sector count (1..255) */
)
{
    a7c6:	0f 93       	push	r16
    a7c8:	cf 93       	push	r28
    a7ca:	df 93       	push	r29
    a7cc:	eb 01       	movw	r28, r22
  if (drv || !count) return RES_PARERR;
    a7ce:	88 23       	and	r24, r24
    a7d0:	09 f0       	breq	.+2      	; 0xa7d4 <disk_read+0xe>
    a7d2:	57 c0       	rjmp	.+174    	; 0xa882 <disk_read+0xbc>
    a7d4:	00 23       	and	r16, r16
    a7d6:	09 f4       	brne	.+2      	; 0xa7da <disk_read+0x14>
    a7d8:	54 c0       	rjmp	.+168    	; 0xa882 <disk_read+0xbc>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
    a7da:	80 91 e0 24 	lds	r24, 0x24E0
    a7de:	80 ff       	sbrs	r24, 0
    a7e0:	03 c0       	rjmp	.+6      	; 0xa7e8 <disk_read+0x22>
    a7e2:	23 e0       	ldi	r18, 0x03	; 3
    a7e4:	30 e0       	ldi	r19, 0x00	; 0
    a7e6:	4f c0       	rjmp	.+158    	; 0xa886 <disk_read+0xc0>

  if (!(CardType & CT_BLOCK)) sector *= 512;  /* Convert to byte address if needed */
    a7e8:	80 91 74 25 	lds	r24, 0x2574
    a7ec:	83 fd       	sbrc	r24, 3
    a7ee:	07 c0       	rjmp	.+14     	; 0xa7fe <disk_read+0x38>
    a7f0:	69 e0       	ldi	r22, 0x09	; 9
    a7f2:	22 0f       	add	r18, r18
    a7f4:	33 1f       	adc	r19, r19
    a7f6:	44 1f       	adc	r20, r20
    a7f8:	55 1f       	adc	r21, r21
    a7fa:	6a 95       	dec	r22
    a7fc:	d1 f7       	brne	.-12     	; 0xa7f2 <disk_read+0x2c>

  if (count == 1) {  /* Single block read */
    a7fe:	01 30       	cpi	r16, 0x01	; 1
    a800:	89 f4       	brne	.+34     	; 0xa824 <disk_read+0x5e>
    if ((send_cmd(CMD17, sector) == 0)  /* READ_SINGLE_BLOCK */
    a802:	81 e5       	ldi	r24, 0x51	; 81
    a804:	ba 01       	movw	r22, r20
    a806:	a9 01       	movw	r20, r18
    a808:	0e 94 59 53 	call	0xa6b2	; 0xa6b2 <send_cmd>
    a80c:	88 23       	and	r24, r24
    a80e:	21 f5       	brne	.+72     	; 0xa858 <disk_read+0x92>
    a810:	ce 01       	movw	r24, r28
    a812:	60 e0       	ldi	r22, 0x00	; 0
    a814:	72 e0       	ldi	r23, 0x02	; 2
    a816:	0e 94 a1 52 	call	0xa542	; 0xa542 <rcvr_datablock>
    a81a:	00 e0       	ldi	r16, 0x00	; 0
    a81c:	89 2b       	or	r24, r25
    a81e:	e1 f4       	brne	.+56     	; 0xa858 <disk_read+0x92>
    a820:	01 e0       	ldi	r16, 0x01	; 1
    a822:	1a c0       	rjmp	.+52     	; 0xa858 <disk_read+0x92>
      && rcvr_datablock(buff, 512))
      count = 0;
  }
  else {        /* Multiple block read */
    if (send_cmd(CMD18, sector) == 0) {  /* READ_MULTIPLE_BLOCK */
    a824:	82 e5       	ldi	r24, 0x52	; 82
    a826:	ba 01       	movw	r22, r20
    a828:	a9 01       	movw	r20, r18
    a82a:	0e 94 59 53 	call	0xa6b2	; 0xa6b2 <send_cmd>
    a82e:	88 23       	and	r24, r24
    a830:	99 f4       	brne	.+38     	; 0xa858 <disk_read+0x92>
      do {
        if (!rcvr_datablock(buff, 512)) break;
    a832:	ce 01       	movw	r24, r28
    a834:	60 e0       	ldi	r22, 0x00	; 0
    a836:	72 e0       	ldi	r23, 0x02	; 2
    a838:	0e 94 a1 52 	call	0xa542	; 0xa542 <rcvr_datablock>
    a83c:	89 2b       	or	r24, r25
    a83e:	29 f0       	breq	.+10     	; 0xa84a <disk_read+0x84>
        buff += 512;
      } while (--count);
    a840:	01 50       	subi	r16, 0x01	; 1
    a842:	19 f0       	breq	.+6      	; 0xa84a <disk_read+0x84>
  }
  else {        /* Multiple block read */
    if (send_cmd(CMD18, sector) == 0) {  /* READ_MULTIPLE_BLOCK */
      do {
        if (!rcvr_datablock(buff, 512)) break;
        buff += 512;
    a844:	c0 50       	subi	r28, 0x00	; 0
    a846:	de 4f       	sbci	r29, 0xFE	; 254
    a848:	f4 cf       	rjmp	.-24     	; 0xa832 <disk_read+0x6c>
      } while (--count);
      send_cmd(CMD12, 0);        /* STOP_TRANSMISSION */
    a84a:	8c e4       	ldi	r24, 0x4C	; 76
    a84c:	40 e0       	ldi	r20, 0x00	; 0
    a84e:	50 e0       	ldi	r21, 0x00	; 0
    a850:	60 e0       	ldi	r22, 0x00	; 0
    a852:	70 e0       	ldi	r23, 0x00	; 0
    a854:	0e 94 59 53 	call	0xa6b2	; 0xa6b2 <send_cmd>
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
  DESELECT();
    a858:	80 e1       	ldi	r24, 0x10	; 16
    a85a:	e0 e8       	ldi	r30, 0x80	; 128
    a85c:	f6 e0       	ldi	r31, 0x06	; 6
    a85e:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a860:	8f ef       	ldi	r24, 0xFF	; 255
    a862:	e0 ec       	ldi	r30, 0xC0	; 192
    a864:	fa e0       	ldi	r31, 0x0A	; 10
    a866:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a868:	80 91 c2 0a 	lds	r24, 0x0AC2
    a86c:	87 ff       	sbrs	r24, 7
    a86e:	fc cf       	rjmp	.-8      	; 0xa868 <disk_read+0xa2>
  return SPIE.DATA;
    a870:	80 91 c3 0a 	lds	r24, 0x0AC3
      send_cmd(CMD12, 0);        /* STOP_TRANSMISSION */
    }
  }
  release_spi();

  return count ? RES_ERROR : RES_OK;
    a874:	20 e0       	ldi	r18, 0x00	; 0
    a876:	30 e0       	ldi	r19, 0x00	; 0
    a878:	00 23       	and	r16, r16
    a87a:	29 f0       	breq	.+10     	; 0xa886 <disk_read+0xc0>
    a87c:	21 e0       	ldi	r18, 0x01	; 1
    a87e:	30 e0       	ldi	r19, 0x00	; 0
    a880:	02 c0       	rjmp	.+4      	; 0xa886 <disk_read+0xc0>
    a882:	24 e0       	ldi	r18, 0x04	; 4
    a884:	30 e0       	ldi	r19, 0x00	; 0
}
    a886:	c9 01       	movw	r24, r18
    a888:	df 91       	pop	r29
    a88a:	cf 91       	pop	r28
    a88c:	0f 91       	pop	r16
    a88e:	08 95       	ret

0000a890 <disk_write>:
  BYTE drv,      /* Physical drive nmuber (0) */
  const BYTE *buff,  /* Pointer to the data to be written */
  DWORD sector,    /* Start sector number (LBA) */
  BYTE count      /* Sector count (1..255) */
)
{
    a890:	cf 92       	push	r12
    a892:	df 92       	push	r13
    a894:	ef 92       	push	r14
    a896:	ff 92       	push	r15
    a898:	0f 93       	push	r16
    a89a:	cf 93       	push	r28
    a89c:	df 93       	push	r29
    a89e:	eb 01       	movw	r28, r22
    a8a0:	69 01       	movw	r12, r18
    a8a2:	7a 01       	movw	r14, r20
  if (drv || !count) return RES_PARERR;
    a8a4:	88 23       	and	r24, r24
    a8a6:	09 f0       	breq	.+2      	; 0xa8aa <disk_write+0x1a>
    a8a8:	66 c0       	rjmp	.+204    	; 0xa976 <disk_write+0xe6>
    a8aa:	00 23       	and	r16, r16
    a8ac:	09 f4       	brne	.+2      	; 0xa8b0 <disk_write+0x20>
    a8ae:	63 c0       	rjmp	.+198    	; 0xa976 <disk_write+0xe6>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
    a8b0:	80 91 e0 24 	lds	r24, 0x24E0
    a8b4:	80 ff       	sbrs	r24, 0
    a8b6:	03 c0       	rjmp	.+6      	; 0xa8be <disk_write+0x2e>
    a8b8:	23 e0       	ldi	r18, 0x03	; 3
    a8ba:	30 e0       	ldi	r19, 0x00	; 0
    a8bc:	5e c0       	rjmp	.+188    	; 0xa97a <disk_write+0xea>
  if (Stat & STA_PROTECT) return RES_WRPRT;
    a8be:	80 91 e0 24 	lds	r24, 0x24E0
    a8c2:	82 ff       	sbrs	r24, 2
    a8c4:	03 c0       	rjmp	.+6      	; 0xa8cc <disk_write+0x3c>
    a8c6:	22 e0       	ldi	r18, 0x02	; 2
    a8c8:	30 e0       	ldi	r19, 0x00	; 0
    a8ca:	57 c0       	rjmp	.+174    	; 0xa97a <disk_write+0xea>

  if (!(CardType & CT_BLOCK)) sector *= 512;  /* Convert to byte address if needed */
    a8cc:	80 91 74 25 	lds	r24, 0x2574
    a8d0:	90 e0       	ldi	r25, 0x00	; 0
    a8d2:	83 fd       	sbrc	r24, 3
    a8d4:	07 c0       	rjmp	.+14     	; 0xa8e4 <disk_write+0x54>
    a8d6:	79 e0       	ldi	r23, 0x09	; 9
    a8d8:	cc 0c       	add	r12, r12
    a8da:	dd 1c       	adc	r13, r13
    a8dc:	ee 1c       	adc	r14, r14
    a8de:	ff 1c       	adc	r15, r15
    a8e0:	7a 95       	dec	r23
    a8e2:	d1 f7       	brne	.-12     	; 0xa8d8 <disk_write+0x48>

  if (count == 1) {  /* Single block write */
    a8e4:	01 30       	cpi	r16, 0x01	; 1
    a8e6:	69 f4       	brne	.+26     	; 0xa902 <disk_write+0x72>
    if ((send_cmd(CMD24, sector) == 0)  /* WRITE_BLOCK */
    a8e8:	88 e5       	ldi	r24, 0x58	; 88
    a8ea:	b7 01       	movw	r22, r14
    a8ec:	a6 01       	movw	r20, r12
    a8ee:	0e 94 59 53 	call	0xa6b2	; 0xa6b2 <send_cmd>
    a8f2:	88 23       	and	r24, r24
    a8f4:	59 f5       	brne	.+86     	; 0xa94c <disk_write+0xbc>
    a8f6:	ce 01       	movw	r24, r28
    a8f8:	6e ef       	ldi	r22, 0xFE	; 254
    a8fa:	0e 94 06 53 	call	0xa60c	; 0xa60c <xmit_datablock>
    a8fe:	00 e0       	ldi	r16, 0x00	; 0
    a900:	22 c0       	rjmp	.+68     	; 0xa946 <disk_write+0xb6>
      && xmit_datablock(buff, 0xFE))
      count = 0;
  }
  else {        /* Multiple block write */
    if (CardType & CT_SDC) send_cmd(ACMD23, count);
    a902:	86 70       	andi	r24, 0x06	; 6
    a904:	90 70       	andi	r25, 0x00	; 0
    a906:	89 2b       	or	r24, r25
    a908:	39 f0       	breq	.+14     	; 0xa918 <disk_write+0x88>
    a90a:	40 2f       	mov	r20, r16
    a90c:	50 e0       	ldi	r21, 0x00	; 0
    a90e:	60 e0       	ldi	r22, 0x00	; 0
    a910:	70 e0       	ldi	r23, 0x00	; 0
    a912:	87 ed       	ldi	r24, 0xD7	; 215
    a914:	0e 94 59 53 	call	0xa6b2	; 0xa6b2 <send_cmd>
    if (send_cmd(CMD25, sector) == 0) {  /* WRITE_MULTIPLE_BLOCK */
    a918:	89 e5       	ldi	r24, 0x59	; 89
    a91a:	b7 01       	movw	r22, r14
    a91c:	a6 01       	movw	r20, r12
    a91e:	0e 94 59 53 	call	0xa6b2	; 0xa6b2 <send_cmd>
    a922:	88 23       	and	r24, r24
    a924:	99 f4       	brne	.+38     	; 0xa94c <disk_write+0xbc>
      do {
        if (!xmit_datablock(buff, 0xFC)) break;
    a926:	ce 01       	movw	r24, r28
    a928:	6c ef       	ldi	r22, 0xFC	; 252
    a92a:	0e 94 06 53 	call	0xa60c	; 0xa60c <xmit_datablock>
    a92e:	89 2b       	or	r24, r25
    a930:	29 f0       	breq	.+10     	; 0xa93c <disk_write+0xac>
        buff += 512;
      } while (--count);
    a932:	01 50       	subi	r16, 0x01	; 1
    a934:	19 f0       	breq	.+6      	; 0xa93c <disk_write+0xac>
  else {        /* Multiple block write */
    if (CardType & CT_SDC) send_cmd(ACMD23, count);
    if (send_cmd(CMD25, sector) == 0) {  /* WRITE_MULTIPLE_BLOCK */
      do {
        if (!xmit_datablock(buff, 0xFC)) break;
        buff += 512;
    a936:	c0 50       	subi	r28, 0x00	; 0
    a938:	de 4f       	sbci	r29, 0xFE	; 254
    a93a:	f5 cf       	rjmp	.-22     	; 0xa926 <disk_write+0x96>
      } while (--count);
      if (!xmit_datablock(0, 0xFD))  /* STOP_TRAN token */
    a93c:	80 e0       	ldi	r24, 0x00	; 0
    a93e:	90 e0       	ldi	r25, 0x00	; 0
    a940:	6d ef       	ldi	r22, 0xFD	; 253
    a942:	0e 94 06 53 	call	0xa60c	; 0xa60c <xmit_datablock>
    a946:	89 2b       	or	r24, r25
    a948:	09 f4       	brne	.+2      	; 0xa94c <disk_write+0xbc>
    a94a:	01 e0       	ldi	r16, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
  DESELECT();
    a94c:	80 e1       	ldi	r24, 0x10	; 16
    a94e:	e0 e8       	ldi	r30, 0x80	; 128
    a950:	f6 e0       	ldi	r31, 0x06	; 6
    a952:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    a954:	8f ef       	ldi	r24, 0xFF	; 255
    a956:	e0 ec       	ldi	r30, 0xC0	; 192
    a958:	fa e0       	ldi	r31, 0x0A	; 10
    a95a:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    a95c:	80 91 c2 0a 	lds	r24, 0x0AC2
    a960:	87 ff       	sbrs	r24, 7
    a962:	fc cf       	rjmp	.-8      	; 0xa95c <disk_write+0xcc>
  return SPIE.DATA;
    a964:	80 91 c3 0a 	lds	r24, 0x0AC3
        count = 1;
    }
  }
  release_spi();

  return count ? RES_ERROR : RES_OK;
    a968:	20 e0       	ldi	r18, 0x00	; 0
    a96a:	30 e0       	ldi	r19, 0x00	; 0
    a96c:	00 23       	and	r16, r16
    a96e:	29 f0       	breq	.+10     	; 0xa97a <disk_write+0xea>
    a970:	21 e0       	ldi	r18, 0x01	; 1
    a972:	30 e0       	ldi	r19, 0x00	; 0
    a974:	02 c0       	rjmp	.+4      	; 0xa97a <disk_write+0xea>
    a976:	24 e0       	ldi	r18, 0x04	; 4
    a978:	30 e0       	ldi	r19, 0x00	; 0
}
    a97a:	c9 01       	movw	r24, r18
    a97c:	df 91       	pop	r29
    a97e:	cf 91       	pop	r28
    a980:	0f 91       	pop	r16
    a982:	ff 90       	pop	r15
    a984:	ef 90       	pop	r14
    a986:	df 90       	pop	r13
    a988:	cf 90       	pop	r12
    a98a:	08 95       	ret

0000a98c <disk_ioctl>:
DRESULT disk_ioctl (
  BYTE drv,    /* Physical drive nmuber (0) */
  BYTE ctrl,    /* Control code */
  void *buff    /* Buffer to send/receive control data */
)
{
    a98c:	a0 e1       	ldi	r26, 0x10	; 16
    a98e:	b0 e0       	ldi	r27, 0x00	; 0
    a990:	ec ec       	ldi	r30, 0xCC	; 204
    a992:	f4 e5       	ldi	r31, 0x54	; 84
    a994:	0c 94 06 5b 	jmp	0xb60c	; 0xb60c <__prologue_saves__+0x1a>
    a998:	8a 01       	movw	r16, r20
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
  WORD csize;


  if (drv) return RES_PARERR;
    a99a:	88 23       	and	r24, r24
    a99c:	09 f0       	breq	.+2      	; 0xa9a0 <disk_ioctl+0x14>
    a99e:	a2 c1       	rjmp	.+836    	; 0xace4 <disk_ioctl+0x358>

  res = RES_ERROR;

  if (ctrl == CTRL_POWER) {
    a9a0:	64 30       	cpi	r22, 0x04	; 4
    a9a2:	f1 f4       	brne	.+60     	; 0xa9e0 <disk_ioctl+0x54>
    switch (*ptr) {
    a9a4:	fa 01       	movw	r30, r20
    a9a6:	80 81       	ld	r24, Z
    a9a8:	81 30       	cpi	r24, 0x01	; 1
    a9aa:	49 f0       	breq	.+18     	; 0xa9be <disk_ioctl+0x32>
    a9ac:	81 30       	cpi	r24, 0x01	; 1
    a9ae:	20 f0       	brcs	.+8      	; 0xa9b8 <disk_ioctl+0x2c>
    a9b0:	82 30       	cpi	r24, 0x02	; 2
    a9b2:	09 f0       	breq	.+2      	; 0xa9b6 <disk_ioctl+0x2a>
    a9b4:	97 c1       	rjmp	.+814    	; 0xace4 <disk_ioctl+0x358>
    a9b6:	0e c0       	rjmp	.+28     	; 0xa9d4 <disk_ioctl+0x48>
    case 0:    /* Sub control code == 0 (POWER_OFF) */
      if (chk_power())
        power_off();    /* Power off */
    a9b8:	0e 94 81 52 	call	0xa502	; 0xa502 <power_off>
    a9bc:	0e c0       	rjmp	.+28     	; 0xa9da <disk_ioctl+0x4e>
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on (void)
{
  for (Timer1 = 3; Timer1; );  /* Wait for 30ms */
    a9be:	83 e0       	ldi	r24, 0x03	; 3
    a9c0:	80 93 72 25 	sts	0x2572, r24
    a9c4:	80 91 72 25 	lds	r24, 0x2572
    a9c8:	88 23       	and	r24, r24
    a9ca:	e1 f7       	brne	.-8      	; 0xa9c4 <disk_ioctl+0x38>
  SPIE.CTRL = 0x53;      /* Enable Master Mode, clkper/128 */
    a9cc:	83 e5       	ldi	r24, 0x53	; 83
    a9ce:	80 93 c0 0a 	sts	0x0AC0, r24
    a9d2:	03 c0       	rjmp	.+6      	; 0xa9da <disk_ioctl+0x4e>
    case 1:    /* Sub control code == 1 (POWER_ON) */
      power_on();        /* Power on */
      res = RES_OK;
      break;
    case 2:    /* Sub control code == 2 (POWER_GET) */
      *(ptr+1) = (BYTE)chk_power();
    a9d4:	81 e0       	ldi	r24, 0x01	; 1
    a9d6:	fa 01       	movw	r30, r20
    a9d8:	81 83       	std	Z+1, r24	; 0x01
    a9da:	20 e0       	ldi	r18, 0x00	; 0
    a9dc:	30 e0       	ldi	r19, 0x00	; 0
    a9de:	84 c1       	rjmp	.+776    	; 0xace8 <disk_ioctl+0x35c>
    default :
      res = RES_PARERR;
    }
  }
  else {
    if (Stat & STA_NOINIT) return RES_NOTRDY;
    a9e0:	80 91 e0 24 	lds	r24, 0x24E0
    a9e4:	80 ff       	sbrs	r24, 0
    a9e6:	03 c0       	rjmp	.+6      	; 0xa9ee <disk_ioctl+0x62>
    a9e8:	23 e0       	ldi	r18, 0x03	; 3
    a9ea:	30 e0       	ldi	r19, 0x00	; 0
    a9ec:	7d c1       	rjmp	.+762    	; 0xace8 <disk_ioctl+0x35c>

    switch (ctrl) {
    a9ee:	e6 2f       	mov	r30, r22
    a9f0:	f0 e0       	ldi	r31, 0x00	; 0
    a9f2:	ef 30       	cpi	r30, 0x0F	; 15
    a9f4:	f1 05       	cpc	r31, r1
    a9f6:	20 f4       	brcc	.+8      	; 0xaa00 <disk_ioctl+0x74>
    a9f8:	e6 5f       	subi	r30, 0xF6	; 246
    a9fa:	fe 4f       	sbci	r31, 0xFE	; 254
    a9fc:	0c 94 30 5b 	jmp	0xb660	; 0xb660 <__tablejump2__>
    aa00:	24 e0       	ldi	r18, 0x04	; 4
    aa02:	30 e0       	ldi	r19, 0x00	; 0
    aa04:	60 c1       	rjmp	.+704    	; 0xacc6 <disk_ioctl+0x33a>
    case CTRL_SYNC :    /* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
      SELECT();
    aa06:	80 e1       	ldi	r24, 0x10	; 16
    aa08:	e0 e8       	ldi	r30, 0x80	; 128
    aa0a:	f6 e0       	ldi	r31, 0x06	; 6
    aa0c:	86 83       	std	Z+6, r24	; 0x06
      if (wait_ready() == 0xFF)
    aa0e:	0e 94 62 52 	call	0xa4c4	; 0xa4c4 <wait_ready>
    aa12:	20 e0       	ldi	r18, 0x00	; 0
    aa14:	30 e0       	ldi	r19, 0x00	; 0
    aa16:	8f 3f       	cpi	r24, 0xFF	; 255
    aa18:	09 f0       	breq	.+2      	; 0xaa1c <disk_ioctl+0x90>
    aa1a:	53 c1       	rjmp	.+678    	; 0xacc2 <disk_ioctl+0x336>
    aa1c:	54 c1       	rjmp	.+680    	; 0xacc6 <disk_ioctl+0x33a>
        res = RES_OK;
      break;

    case GET_SECTOR_COUNT :  /* Get number of sectors on the disk (DWORD) */
      if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    aa1e:	89 e4       	ldi	r24, 0x49	; 73
    aa20:	40 e0       	ldi	r20, 0x00	; 0
    aa22:	50 e0       	ldi	r21, 0x00	; 0
    aa24:	60 e0       	ldi	r22, 0x00	; 0
    aa26:	70 e0       	ldi	r23, 0x00	; 0
    aa28:	0e 94 59 53 	call	0xa6b2	; 0xa6b2 <send_cmd>
    aa2c:	88 23       	and	r24, r24
    aa2e:	09 f0       	breq	.+2      	; 0xaa32 <disk_ioctl+0xa6>
    aa30:	48 c1       	rjmp	.+656    	; 0xacc2 <disk_ioctl+0x336>
    aa32:	ce 01       	movw	r24, r28
    aa34:	01 96       	adiw	r24, 0x01	; 1
    aa36:	60 e1       	ldi	r22, 0x10	; 16
    aa38:	70 e0       	ldi	r23, 0x00	; 0
    aa3a:	0e 94 a1 52 	call	0xa542	; 0xa542 <rcvr_datablock>
    aa3e:	89 2b       	or	r24, r25
    aa40:	09 f4       	brne	.+2      	; 0xaa44 <disk_ioctl+0xb8>
    aa42:	3f c1       	rjmp	.+638    	; 0xacc2 <disk_ioctl+0x336>
        if ((csd[0] >> 6) == 1) {  /* SDC ver 2.00 */
    aa44:	89 81       	ldd	r24, Y+1	; 0x01
    aa46:	82 95       	swap	r24
    aa48:	86 95       	lsr	r24
    aa4a:	86 95       	lsr	r24
    aa4c:	83 70       	andi	r24, 0x03	; 3
    aa4e:	7a 85       	ldd	r23, Y+10	; 0x0a
    aa50:	49 85       	ldd	r20, Y+9	; 0x09
    aa52:	81 30       	cpi	r24, 0x01	; 1
    aa54:	89 f4       	brne	.+34     	; 0xaa78 <disk_ioctl+0xec>
          csize = csd[9] + ((WORD)csd[8] << 8) + 1;
          *(DWORD*)buff = (DWORD)csize << 10;
    aa56:	87 2f       	mov	r24, r23
    aa58:	90 e0       	ldi	r25, 0x00	; 0
    aa5a:	01 96       	adiw	r24, 0x01	; 1
    aa5c:	34 2f       	mov	r19, r20
    aa5e:	20 e0       	ldi	r18, 0x00	; 0
    aa60:	82 0f       	add	r24, r18
    aa62:	93 1f       	adc	r25, r19
    aa64:	a0 e0       	ldi	r26, 0x00	; 0
    aa66:	b0 e0       	ldi	r27, 0x00	; 0
    aa68:	2a e0       	ldi	r18, 0x0A	; 10
    aa6a:	88 0f       	add	r24, r24
    aa6c:	99 1f       	adc	r25, r25
    aa6e:	aa 1f       	adc	r26, r26
    aa70:	bb 1f       	adc	r27, r27
    aa72:	2a 95       	dec	r18
    aa74:	d1 f7       	brne	.-12     	; 0xaa6a <disk_ioctl+0xde>
    aa76:	cd c0       	rjmp	.+410    	; 0xac12 <disk_ioctl+0x286>
        } else {          /* SDC ver 1.XX or MMC*/
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
          csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
          *(DWORD*)buff = (DWORD)csize << (n - 9);
    aa78:	42 95       	swap	r20
    aa7a:	46 95       	lsr	r20
    aa7c:	46 95       	lsr	r20
    aa7e:	43 70       	andi	r20, 0x03	; 3
    aa80:	28 85       	ldd	r18, Y+8	; 0x08
    aa82:	30 e0       	ldi	r19, 0x00	; 0
    aa84:	22 0f       	add	r18, r18
    aa86:	33 1f       	adc	r19, r19
    aa88:	22 0f       	add	r18, r18
    aa8a:	33 1f       	adc	r19, r19
    aa8c:	24 0f       	add	r18, r20
    aa8e:	31 1d       	adc	r19, r1
    aa90:	2f 5f       	subi	r18, 0xFF	; 255
    aa92:	3f 4f       	sbci	r19, 0xFF	; 255
    aa94:	8f 81       	ldd	r24, Y+7	; 0x07
    aa96:	90 e0       	ldi	r25, 0x00	; 0
    aa98:	83 70       	andi	r24, 0x03	; 3
    aa9a:	90 70       	andi	r25, 0x00	; 0
    aa9c:	98 2f       	mov	r25, r24
    aa9e:	88 27       	eor	r24, r24
    aaa0:	99 0f       	add	r25, r25
    aaa2:	99 0f       	add	r25, r25
    aaa4:	28 0f       	add	r18, r24
    aaa6:	39 1f       	adc	r19, r25
    aaa8:	40 e0       	ldi	r20, 0x00	; 0
    aaaa:	50 e0       	ldi	r21, 0x00	; 0
    aaac:	8e 81       	ldd	r24, Y+6	; 0x06
    aaae:	8f 70       	andi	r24, 0x0F	; 15
    aab0:	6b 85       	ldd	r22, Y+11	; 0x0b
    aab2:	66 1f       	adc	r22, r22
    aab4:	66 27       	eor	r22, r22
    aab6:	66 1f       	adc	r22, r22
    aab8:	86 0f       	add	r24, r22
    aaba:	8e 5f       	subi	r24, 0xFE	; 254
    aabc:	73 70       	andi	r23, 0x03	; 3
    aabe:	77 0f       	add	r23, r23
    aac0:	87 0f       	add	r24, r23
    aac2:	90 e0       	ldi	r25, 0x00	; 0
    aac4:	09 97       	sbiw	r24, 0x09	; 9
    aac6:	04 c0       	rjmp	.+8      	; 0xaad0 <disk_ioctl+0x144>
    aac8:	22 0f       	add	r18, r18
    aaca:	33 1f       	adc	r19, r19
    aacc:	44 1f       	adc	r20, r20
    aace:	55 1f       	adc	r21, r21
    aad0:	8a 95       	dec	r24
    aad2:	d2 f7       	brpl	.-12     	; 0xaac8 <disk_ioctl+0x13c>
    aad4:	f8 01       	movw	r30, r16
    aad6:	20 83       	st	Z, r18
    aad8:	31 83       	std	Z+1, r19	; 0x01
    aada:	42 83       	std	Z+2, r20	; 0x02
    aadc:	53 83       	std	Z+3, r21	; 0x03
    aade:	9e c0       	rjmp	.+316    	; 0xac1c <disk_ioctl+0x290>
        res = RES_OK;
      }
      break;

    case GET_SECTOR_SIZE :  /* Get R/W sector size (WORD) */
      *(WORD*)buff = 512;
    aae0:	80 e0       	ldi	r24, 0x00	; 0
    aae2:	92 e0       	ldi	r25, 0x02	; 2
    aae4:	fa 01       	movw	r30, r20
    aae6:	80 83       	st	Z, r24
    aae8:	91 83       	std	Z+1, r25	; 0x01
    aaea:	98 c0       	rjmp	.+304    	; 0xac1c <disk_ioctl+0x290>
      res = RES_OK;
      break;

    case GET_BLOCK_SIZE :  /* Get erase block size in unit of sector (DWORD) */
      if (CardType & CT_SD2) {  /* SDC ver 2.00 */
    aaec:	80 91 74 25 	lds	r24, 0x2574
    aaf0:	f8 2e       	mov	r15, r24
    aaf2:	82 ff       	sbrs	r24, 2
    aaf4:	39 c0       	rjmp	.+114    	; 0xab68 <disk_ioctl+0x1dc>
        if (send_cmd(ACMD13, 0) == 0) {  /* Read SD status */
    aaf6:	8d ec       	ldi	r24, 0xCD	; 205
    aaf8:	40 e0       	ldi	r20, 0x00	; 0
    aafa:	50 e0       	ldi	r21, 0x00	; 0
    aafc:	60 e0       	ldi	r22, 0x00	; 0
    aafe:	70 e0       	ldi	r23, 0x00	; 0
    ab00:	0e 94 59 53 	call	0xa6b2	; 0xa6b2 <send_cmd>
    ab04:	88 23       	and	r24, r24
    ab06:	09 f0       	breq	.+2      	; 0xab0a <disk_ioctl+0x17e>
    ab08:	dc c0       	rjmp	.+440    	; 0xacc2 <disk_ioctl+0x336>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    ab0a:	8f ef       	ldi	r24, 0xFF	; 255
    ab0c:	e0 ec       	ldi	r30, 0xC0	; 192
    ab0e:	fa e0       	ldi	r31, 0x0A	; 10
    ab10:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    ab12:	80 91 c2 0a 	lds	r24, 0x0AC2
    ab16:	87 ff       	sbrs	r24, 7
    ab18:	fc cf       	rjmp	.-8      	; 0xab12 <disk_ioctl+0x186>
  return SPIE.DATA;
    ab1a:	80 91 c3 0a 	lds	r24, 0x0AC3

    case GET_BLOCK_SIZE :  /* Get erase block size in unit of sector (DWORD) */
      if (CardType & CT_SD2) {  /* SDC ver 2.00 */
        if (send_cmd(ACMD13, 0) == 0) {  /* Read SD status */
          rcvr_spi();
          if (rcvr_datablock(csd, 16)) {        /* Read partial block */
    ab1e:	ce 01       	movw	r24, r28
    ab20:	01 96       	adiw	r24, 0x01	; 1
    ab22:	60 e1       	ldi	r22, 0x10	; 16
    ab24:	70 e0       	ldi	r23, 0x00	; 0
    ab26:	0e 94 a1 52 	call	0xa542	; 0xa542 <rcvr_datablock>
    ab2a:	89 2b       	or	r24, r25
    ab2c:	09 f4       	brne	.+2      	; 0xab30 <disk_ioctl+0x1a4>
    ab2e:	c9 c0       	rjmp	.+402    	; 0xacc2 <disk_ioctl+0x336>
    ab30:	90 e3       	ldi	r25, 0x30	; 48
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    ab32:	e0 ec       	ldi	r30, 0xC0	; 192
    ab34:	fa e0       	ldi	r31, 0x0A	; 10
    ab36:	2f ef       	ldi	r18, 0xFF	; 255
    ab38:	23 83       	std	Z+3, r18	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    ab3a:	80 91 c2 0a 	lds	r24, 0x0AC2
    ab3e:	87 ff       	sbrs	r24, 7
    ab40:	fc cf       	rjmp	.-8      	; 0xab3a <disk_ioctl+0x1ae>
  return SPIE.DATA;
    ab42:	80 91 c3 0a 	lds	r24, 0x0AC3
    case GET_BLOCK_SIZE :  /* Get erase block size in unit of sector (DWORD) */
      if (CardType & CT_SD2) {  /* SDC ver 2.00 */
        if (send_cmd(ACMD13, 0) == 0) {  /* Read SD status */
          rcvr_spi();
          if (rcvr_datablock(csd, 16)) {        /* Read partial block */
            for (n = 64 - 16; n; n--) rcvr_spi();  /* Purge trailing data */
    ab46:	91 50       	subi	r25, 0x01	; 1
    ab48:	b9 f7       	brne	.-18     	; 0xab38 <disk_ioctl+0x1ac>
            *(DWORD*)buff = 16UL << (csd[10] >> 4);
    ab4a:	2b 85       	ldd	r18, Y+11	; 0x0b
    ab4c:	22 95       	swap	r18
    ab4e:	2f 70       	andi	r18, 0x0F	; 15
    ab50:	80 e1       	ldi	r24, 0x10	; 16
    ab52:	90 e0       	ldi	r25, 0x00	; 0
    ab54:	a0 e0       	ldi	r26, 0x00	; 0
    ab56:	b0 e0       	ldi	r27, 0x00	; 0
    ab58:	04 c0       	rjmp	.+8      	; 0xab62 <disk_ioctl+0x1d6>
    ab5a:	88 0f       	add	r24, r24
    ab5c:	99 1f       	adc	r25, r25
    ab5e:	aa 1f       	adc	r26, r26
    ab60:	bb 1f       	adc	r27, r27
    ab62:	2a 95       	dec	r18
    ab64:	d2 f7       	brpl	.-12     	; 0xab5a <disk_ioctl+0x1ce>
    ab66:	55 c0       	rjmp	.+170    	; 0xac12 <disk_ioctl+0x286>
            res = RES_OK;
          }
        }
      } else {          /* SDC ver 1.XX or MMC */
        if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {  /* Read CSD */
    ab68:	89 e4       	ldi	r24, 0x49	; 73
    ab6a:	40 e0       	ldi	r20, 0x00	; 0
    ab6c:	50 e0       	ldi	r21, 0x00	; 0
    ab6e:	60 e0       	ldi	r22, 0x00	; 0
    ab70:	70 e0       	ldi	r23, 0x00	; 0
    ab72:	0e 94 59 53 	call	0xa6b2	; 0xa6b2 <send_cmd>
    ab76:	88 23       	and	r24, r24
    ab78:	09 f0       	breq	.+2      	; 0xab7c <disk_ioctl+0x1f0>
    ab7a:	a3 c0       	rjmp	.+326    	; 0xacc2 <disk_ioctl+0x336>
    ab7c:	ce 01       	movw	r24, r28
    ab7e:	01 96       	adiw	r24, 0x01	; 1
    ab80:	60 e1       	ldi	r22, 0x10	; 16
    ab82:	70 e0       	ldi	r23, 0x00	; 0
    ab84:	0e 94 a1 52 	call	0xa542	; 0xa542 <rcvr_datablock>
    ab88:	89 2b       	or	r24, r25
    ab8a:	09 f4       	brne	.+2      	; 0xab8e <disk_ioctl+0x202>
    ab8c:	9a c0       	rjmp	.+308    	; 0xacc2 <disk_ioctl+0x336>
    ab8e:	4b 85       	ldd	r20, Y+11	; 0x0b
    ab90:	8c 85       	ldd	r24, Y+12	; 0x0c
          if (CardType & CT_SD1) {  /* SDC ver 1.XX */
    ab92:	f1 fe       	sbrs	r15, 1
    ab94:	1b c0       	rjmp	.+54     	; 0xabcc <disk_ioctl+0x240>
            *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    ab96:	88 1f       	adc	r24, r24
    ab98:	88 27       	eor	r24, r24
    ab9a:	88 1f       	adc	r24, r24
    ab9c:	90 e0       	ldi	r25, 0x00	; 0
    ab9e:	01 96       	adiw	r24, 0x01	; 1
    aba0:	24 2f       	mov	r18, r20
    aba2:	30 e0       	ldi	r19, 0x00	; 0
    aba4:	2f 73       	andi	r18, 0x3F	; 63
    aba6:	30 70       	andi	r19, 0x00	; 0
    aba8:	22 0f       	add	r18, r18
    abaa:	33 1f       	adc	r19, r19
    abac:	82 0f       	add	r24, r18
    abae:	93 1f       	adc	r25, r19
    abb0:	2e 85       	ldd	r18, Y+14	; 0x0e
    abb2:	22 95       	swap	r18
    abb4:	26 95       	lsr	r18
    abb6:	26 95       	lsr	r18
    abb8:	23 70       	andi	r18, 0x03	; 3
    abba:	30 e0       	ldi	r19, 0x00	; 0
    abbc:	21 50       	subi	r18, 0x01	; 1
    abbe:	30 40       	sbci	r19, 0x00	; 0
    abc0:	02 c0       	rjmp	.+4      	; 0xabc6 <disk_ioctl+0x23a>
    abc2:	88 0f       	add	r24, r24
    abc4:	99 1f       	adc	r25, r25
    abc6:	2a 95       	dec	r18
    abc8:	e2 f7       	brpl	.-8      	; 0xabc2 <disk_ioctl+0x236>
    abca:	21 c0       	rjmp	.+66     	; 0xac0e <disk_ioctl+0x282>
          } else {          /* MMC */
            *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    abcc:	28 2f       	mov	r18, r24
    abce:	30 e0       	ldi	r19, 0x00	; 0
    abd0:	23 70       	andi	r18, 0x03	; 3
    abd2:	30 70       	andi	r19, 0x00	; 0
    abd4:	f3 e0       	ldi	r31, 0x03	; 3
    abd6:	22 0f       	add	r18, r18
    abd8:	33 1f       	adc	r19, r19
    abda:	fa 95       	dec	r31
    abdc:	e1 f7       	brne	.-8      	; 0xabd6 <disk_ioctl+0x24a>
    abde:	82 95       	swap	r24
    abe0:	86 95       	lsr	r24
    abe2:	87 70       	andi	r24, 0x07	; 7
    abe4:	28 0f       	add	r18, r24
    abe6:	31 1d       	adc	r19, r1
    abe8:	2f 5f       	subi	r18, 0xFF	; 255
    abea:	3f 4f       	sbci	r19, 0xFF	; 255
    abec:	84 2f       	mov	r24, r20
    abee:	90 e0       	ldi	r25, 0x00	; 0
    abf0:	8c 77       	andi	r24, 0x7C	; 124
    abf2:	90 70       	andi	r25, 0x00	; 0
    abf4:	95 95       	asr	r25
    abf6:	87 95       	ror	r24
    abf8:	95 95       	asr	r25
    abfa:	87 95       	ror	r24
    abfc:	01 96       	adiw	r24, 0x01	; 1
    abfe:	ac 01       	movw	r20, r24
    ac00:	24 9f       	mul	r18, r20
    ac02:	c0 01       	movw	r24, r0
    ac04:	25 9f       	mul	r18, r21
    ac06:	90 0d       	add	r25, r0
    ac08:	34 9f       	mul	r19, r20
    ac0a:	90 0d       	add	r25, r0
    ac0c:	11 24       	eor	r1, r1
    ac0e:	a0 e0       	ldi	r26, 0x00	; 0
    ac10:	b0 e0       	ldi	r27, 0x00	; 0
    ac12:	f8 01       	movw	r30, r16
    ac14:	80 83       	st	Z, r24
    ac16:	91 83       	std	Z+1, r25	; 0x01
    ac18:	a2 83       	std	Z+2, r26	; 0x02
    ac1a:	b3 83       	std	Z+3, r27	; 0x03
    ac1c:	20 e0       	ldi	r18, 0x00	; 0
    ac1e:	30 e0       	ldi	r19, 0x00	; 0
    ac20:	52 c0       	rjmp	.+164    	; 0xacc6 <disk_ioctl+0x33a>
        }
      }
      break;

    case MMC_GET_TYPE :    /* Get card type flags (1 byte) */
      *ptr = CardType;
    ac22:	80 91 74 25 	lds	r24, 0x2574
    ac26:	fa 01       	movw	r30, r20
    ac28:	80 83       	st	Z, r24
    ac2a:	f8 cf       	rjmp	.-16     	; 0xac1c <disk_ioctl+0x290>
      res = RES_OK;
      break;

    case MMC_GET_CSD :    /* Receive CSD as a data block (16 bytes) */
      if (send_cmd(CMD9, 0) == 0    /* READ_CSD */
    ac2c:	89 e4       	ldi	r24, 0x49	; 73
    ac2e:	01 c0       	rjmp	.+2      	; 0xac32 <disk_ioctl+0x2a6>
        && rcvr_datablock(ptr, 16))
        res = RES_OK;
      break;

    case MMC_GET_CID :    /* Receive CID as a data block (16 bytes) */
      if (send_cmd(CMD10, 0) == 0    /* READ_CID */
    ac30:	8a e4       	ldi	r24, 0x4A	; 74
    ac32:	40 e0       	ldi	r20, 0x00	; 0
    ac34:	50 e0       	ldi	r21, 0x00	; 0
    ac36:	60 e0       	ldi	r22, 0x00	; 0
    ac38:	70 e0       	ldi	r23, 0x00	; 0
    ac3a:	0e 94 59 53 	call	0xa6b2	; 0xa6b2 <send_cmd>
    ac3e:	88 23       	and	r24, r24
    ac40:	09 f0       	breq	.+2      	; 0xac44 <disk_ioctl+0x2b8>
    ac42:	3f c0       	rjmp	.+126    	; 0xacc2 <disk_ioctl+0x336>
    ac44:	c8 01       	movw	r24, r16
    ac46:	60 e1       	ldi	r22, 0x10	; 16
    ac48:	70 e0       	ldi	r23, 0x00	; 0
    ac4a:	35 c0       	rjmp	.+106    	; 0xacb6 <disk_ioctl+0x32a>
        && rcvr_datablock(ptr, 16))
        res = RES_OK;
      break;

    case MMC_GET_OCR :    /* Receive OCR as an R3 resp (4 bytes) */
      if (send_cmd(CMD58, 0) == 0) {  /* READ_OCR */
    ac4c:	8a e7       	ldi	r24, 0x7A	; 122
    ac4e:	40 e0       	ldi	r20, 0x00	; 0
    ac50:	50 e0       	ldi	r21, 0x00	; 0
    ac52:	60 e0       	ldi	r22, 0x00	; 0
    ac54:	70 e0       	ldi	r23, 0x00	; 0
    ac56:	0e 94 59 53 	call	0xa6b2	; 0xa6b2 <send_cmd>
    ac5a:	88 23       	and	r24, r24
    ac5c:	91 f5       	brne	.+100    	; 0xacc2 <disk_ioctl+0x336>
    ac5e:	f8 01       	movw	r30, r16
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    ac60:	a0 ec       	ldi	r26, 0xC0	; 192
    ac62:	ba e0       	ldi	r27, 0x0A	; 10
    ac64:	9f ef       	ldi	r25, 0xFF	; 255
        res = RES_OK;
      break;

    case MMC_GET_OCR :    /* Receive OCR as an R3 resp (4 bytes) */
      if (send_cmd(CMD58, 0) == 0) {  /* READ_OCR */
        for (n = 4; n; n--) *ptr++ = rcvr_spi();
    ac66:	98 01       	movw	r18, r16
    ac68:	2d 5f       	subi	r18, 0xFD	; 253
    ac6a:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    ac6c:	13 96       	adiw	r26, 0x03	; 3
    ac6e:	9c 93       	st	X, r25
    ac70:	13 97       	sbiw	r26, 0x03	; 3
  loop_until_bit_is_set(SPIE.STATUS, 7);
    ac72:	80 91 c2 0a 	lds	r24, 0x0AC2
    ac76:	87 ff       	sbrs	r24, 7
    ac78:	fc cf       	rjmp	.-8      	; 0xac72 <disk_ioctl+0x2e6>
  return SPIE.DATA;
    ac7a:	80 91 c3 0a 	lds	r24, 0x0AC3
        res = RES_OK;
      break;

    case MMC_GET_OCR :    /* Receive OCR as an R3 resp (4 bytes) */
      if (send_cmd(CMD58, 0) == 0) {  /* READ_OCR */
        for (n = 4; n; n--) *ptr++ = rcvr_spi();
    ac7e:	80 83       	st	Z, r24
    ac80:	e2 17       	cp	r30, r18
    ac82:	f3 07       	cpc	r31, r19
    ac84:	59 f2       	breq	.-106    	; 0xac1c <disk_ioctl+0x290>
    ac86:	31 96       	adiw	r30, 0x01	; 1
    ac88:	f1 cf       	rjmp	.-30     	; 0xac6c <disk_ioctl+0x2e0>
        res = RES_OK;
      }
      break;

    case MMC_GET_SDSTAT :  /* Receive SD statsu as a data block (64 bytes) */
      if (send_cmd(ACMD13, 0) == 0) {  /* SD_STATUS */
    ac8a:	8d ec       	ldi	r24, 0xCD	; 205
    ac8c:	40 e0       	ldi	r20, 0x00	; 0
    ac8e:	50 e0       	ldi	r21, 0x00	; 0
    ac90:	60 e0       	ldi	r22, 0x00	; 0
    ac92:	70 e0       	ldi	r23, 0x00	; 0
    ac94:	0e 94 59 53 	call	0xa6b2	; 0xa6b2 <send_cmd>
    ac98:	88 23       	and	r24, r24
    ac9a:	99 f4       	brne	.+38     	; 0xacc2 <disk_ioctl+0x336>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    ac9c:	8f ef       	ldi	r24, 0xFF	; 255
    ac9e:	e0 ec       	ldi	r30, 0xC0	; 192
    aca0:	fa e0       	ldi	r31, 0x0A	; 10
    aca2:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    aca4:	80 91 c2 0a 	lds	r24, 0x0AC2
    aca8:	87 ff       	sbrs	r24, 7
    acaa:	fc cf       	rjmp	.-8      	; 0xaca4 <disk_ioctl+0x318>
  return SPIE.DATA;
    acac:	80 91 c3 0a 	lds	r24, 0x0AC3
      break;

    case MMC_GET_SDSTAT :  /* Receive SD statsu as a data block (64 bytes) */
      if (send_cmd(ACMD13, 0) == 0) {  /* SD_STATUS */
        rcvr_spi();
        if (rcvr_datablock(ptr, 64))
    acb0:	c8 01       	movw	r24, r16
    acb2:	60 e4       	ldi	r22, 0x40	; 64
    acb4:	70 e0       	ldi	r23, 0x00	; 0
    acb6:	0e 94 a1 52 	call	0xa542	; 0xa542 <rcvr_datablock>
    acba:	20 e0       	ldi	r18, 0x00	; 0
    acbc:	30 e0       	ldi	r19, 0x00	; 0
    acbe:	89 2b       	or	r24, r25
    acc0:	11 f4       	brne	.+4      	; 0xacc6 <disk_ioctl+0x33a>
    acc2:	21 e0       	ldi	r18, 0x01	; 1
    acc4:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
  DESELECT();
    acc6:	80 e1       	ldi	r24, 0x10	; 16
    acc8:	e0 e8       	ldi	r30, 0x80	; 128
    acca:	f6 e0       	ldi	r31, 0x06	; 6
    accc:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    acce:	8f ef       	ldi	r24, 0xFF	; 255
    acd0:	e0 ec       	ldi	r30, 0xC0	; 192
    acd2:	fa e0       	ldi	r31, 0x0A	; 10
    acd4:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    acd6:	80 91 c2 0a 	lds	r24, 0x0AC2
    acda:	87 ff       	sbrs	r24, 7
    acdc:	fc cf       	rjmp	.-8      	; 0xacd6 <disk_ioctl+0x34a>
  return SPIE.DATA;
    acde:	80 91 c3 0a 	lds	r24, 0x0AC3
    ace2:	02 c0       	rjmp	.+4      	; 0xace8 <disk_ioctl+0x35c>
    ace4:	24 e0       	ldi	r18, 0x04	; 4
    ace6:	30 e0       	ldi	r19, 0x00	; 0

    release_spi();
  }

  return res;
}
    ace8:	c9 01       	movw	r24, r18
    acea:	60 96       	adiw	r28, 0x10	; 16
    acec:	e5 e0       	ldi	r30, 0x05	; 5
    acee:	0c 94 22 5b 	jmp	0xb644	; 0xb644 <__epilogue_restores__+0x1a>

0000acf2 <disk_timerproc>:
{
  static BYTE pv;
  BYTE n, s;


  n = Timer1;            /* 100Hz decrement timer */
    acf2:	80 91 72 25 	lds	r24, 0x2572
  if (n) Timer1 = --n;
    acf6:	88 23       	and	r24, r24
    acf8:	19 f0       	breq	.+6      	; 0xad00 <disk_timerproc+0xe>
    acfa:	81 50       	subi	r24, 0x01	; 1
    acfc:	80 93 72 25 	sts	0x2572, r24
  n = Timer2;
    ad00:	80 91 73 25 	lds	r24, 0x2573
  if (n) Timer2 = --n;
    ad04:	88 23       	and	r24, r24
    ad06:	19 f0       	breq	.+6      	; 0xad0e <disk_timerproc+0x1c>
    ad08:	81 50       	subi	r24, 0x01	; 1
    ad0a:	80 93 73 25 	sts	0x2573, r24

  n = pv;
    ad0e:	90 91 71 25 	lds	r25, 0x2571
  pv = SOCKPORT & (SOCKWP | SOCKINS);  /* Sample socket switch */
    ad12:	80 91 e8 06 	lds	r24, 0x06E8
    ad16:	83 70       	andi	r24, 0x03	; 3
    ad18:	80 93 71 25 	sts	0x2571, r24

  if (n == pv) {          /* Have contacts stabled? */
    ad1c:	98 17       	cp	r25, r24
    ad1e:	71 f4       	brne	.+28     	; 0xad3c <disk_timerproc+0x4a>
    s = Stat;
    ad20:	80 91 e0 24 	lds	r24, 0x24E0

    if (pv & SOCKWP)      /* WP is H (write protected) */
    ad24:	90 ff       	sbrs	r25, 0
    ad26:	02 c0       	rjmp	.+4      	; 0xad2c <disk_timerproc+0x3a>
      s |= STA_PROTECT;
    ad28:	84 60       	ori	r24, 0x04	; 4
    ad2a:	01 c0       	rjmp	.+2      	; 0xad2e <disk_timerproc+0x3c>
    else            /* WP is L (write enabled) */
      s &= ~STA_PROTECT;
    ad2c:	8b 7f       	andi	r24, 0xFB	; 251

    if (pv & SOCKINS)      /* INS = H (Socket empty) */
    ad2e:	91 ff       	sbrs	r25, 1
    ad30:	02 c0       	rjmp	.+4      	; 0xad36 <disk_timerproc+0x44>
      s |= (STA_NODISK | STA_NOINIT);
    ad32:	83 60       	ori	r24, 0x03	; 3
    ad34:	01 c0       	rjmp	.+2      	; 0xad38 <disk_timerproc+0x46>
    else            /* INS = L (Card inserted) */
      s &= ~STA_NODISK;
    ad36:	8d 7f       	andi	r24, 0xFD	; 253

    Stat = s;
    ad38:	80 93 e0 24 	sts	0x24E0, r24
    ad3c:	08 95       	ret

0000ad3e <__vector_53>:
/*---------------------------------------------------------*/
/* 100Hz timer interrupt generated by TCE1                 */
/*---------------------------------------------------------*/

ISR(TCE1_OVF_vect)
{
    ad3e:	1f 92       	push	r1
    ad40:	0f 92       	push	r0
    ad42:	0f b6       	in	r0, 0x3f	; 63
    ad44:	0f 92       	push	r0
    ad46:	08 b6       	in	r0, 0x38	; 56
    ad48:	0f 92       	push	r0
    ad4a:	09 b6       	in	r0, 0x39	; 57
    ad4c:	0f 92       	push	r0
    ad4e:	0b b6       	in	r0, 0x3b	; 59
    ad50:	0f 92       	push	r0
    ad52:	11 24       	eor	r1, r1
    ad54:	18 be       	out	0x38, r1	; 56
    ad56:	19 be       	out	0x39, r1	; 57
    ad58:	1b be       	out	0x3b, r1	; 59
    ad5a:	2f 93       	push	r18
    ad5c:	3f 93       	push	r19
    ad5e:	4f 93       	push	r20
    ad60:	5f 93       	push	r21
    ad62:	6f 93       	push	r22
    ad64:	7f 93       	push	r23
    ad66:	8f 93       	push	r24
    ad68:	9f 93       	push	r25
    ad6a:	af 93       	push	r26
    ad6c:	bf 93       	push	r27
    ad6e:	ef 93       	push	r30
    ad70:	ff 93       	push	r31
  disk_timerproc();  /* Drive timer procedure of low level disk I/O module */
    ad72:	0e 94 79 56 	call	0xacf2	; 0xacf2 <disk_timerproc>
}
    ad76:	ff 91       	pop	r31
    ad78:	ef 91       	pop	r30
    ad7a:	bf 91       	pop	r27
    ad7c:	af 91       	pop	r26
    ad7e:	9f 91       	pop	r25
    ad80:	8f 91       	pop	r24
    ad82:	7f 91       	pop	r23
    ad84:	6f 91       	pop	r22
    ad86:	5f 91       	pop	r21
    ad88:	4f 91       	pop	r20
    ad8a:	3f 91       	pop	r19
    ad8c:	2f 91       	pop	r18
    ad8e:	0f 90       	pop	r0
    ad90:	0b be       	out	0x3b, r0	; 59
    ad92:	0f 90       	pop	r0
    ad94:	09 be       	out	0x39, r0	; 57
    ad96:	0f 90       	pop	r0
    ad98:	08 be       	out	0x38, r0	; 56
    ad9a:	0f 90       	pop	r0
    ad9c:	0f be       	out	0x3f, r0	; 63
    ad9e:	0f 90       	pop	r0
    ada0:	1f 90       	pop	r1
    ada2:	18 95       	reti

0000ada4 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
  BYTE drv    /* Physical drive nmuber (0) */
)
{
    ada4:	a4 e0       	ldi	r26, 0x04	; 4
    ada6:	b0 e0       	ldi	r27, 0x00	; 0
    ada8:	e8 ed       	ldi	r30, 0xD8	; 216
    adaa:	f6 e5       	ldi	r31, 0x56	; 86
    adac:	0c 94 05 5b 	jmp	0xb60a	; 0xb60a <__prologue_saves__+0x18>
  BYTE n, cmd, ty, ocr[4];


  if (drv) return STA_NOINIT;      /* Supports only single drive */
    adb0:	88 23       	and	r24, r24
    adb2:	11 f0       	breq	.+4      	; 0xadb8 <disk_initialize+0x14>
    adb4:	81 e0       	ldi	r24, 0x01	; 1
    adb6:	d8 c0       	rjmp	.+432    	; 0xaf68 <disk_initialize+0x1c4>
  if (Stat & STA_NODISK) return Stat;  /* No card in the socket */
    adb8:	80 91 e0 24 	lds	r24, 0x24E0
    adbc:	81 fd       	sbrc	r24, 1
    adbe:	d2 c0       	rjmp	.+420    	; 0xaf64 <disk_initialize+0x1c0>
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on (void)
{
  for (Timer1 = 3; Timer1; );  /* Wait for 30ms */
    adc0:	83 e0       	ldi	r24, 0x03	; 3
    adc2:	80 93 72 25 	sts	0x2572, r24
    adc6:	80 91 72 25 	lds	r24, 0x2572
    adca:	88 23       	and	r24, r24
    adcc:	e1 f7       	brne	.-8      	; 0xadc6 <disk_initialize+0x22>
  SPIE.CTRL = 0x53;      /* Enable Master Mode, clkper/128 */
    adce:	13 e5       	ldi	r17, 0x53	; 83
    add0:	10 93 c0 0a 	sts	0x0AC0, r17

  if (drv) return STA_NOINIT;      /* Supports only single drive */
  if (Stat & STA_NODISK) return Stat;  /* No card in the socket */

  power_on();              /* Force socket power on */
  CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc));  /* 16MHz */
    add4:	81 e4       	ldi	r24, 0x41	; 65
    add6:	90 e0       	ldi	r25, 0x00	; 0
    add8:	64 e0       	ldi	r22, 0x04	; 4
    adda:	0e 94 95 23 	call	0x472a	; 0x472a <CCPWrite>
  FCLK_SLOW();
    adde:	10 93 c0 0a 	sts	0x0AC0, r17
    ade2:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    ade4:	e0 ec       	ldi	r30, 0xC0	; 192
    ade6:	fa e0       	ldi	r31, 0x0A	; 10
    ade8:	2f ef       	ldi	r18, 0xFF	; 255
    adea:	23 83       	std	Z+3, r18	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    adec:	80 91 c2 0a 	lds	r24, 0x0AC2
    adf0:	87 ff       	sbrs	r24, 7
    adf2:	fc cf       	rjmp	.-8      	; 0xadec <disk_initialize+0x48>
  return SPIE.DATA;
    adf4:	80 91 c3 0a 	lds	r24, 0x0AC3
  if (Stat & STA_NODISK) return Stat;  /* No card in the socket */

  power_on();              /* Force socket power on */
  CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc));  /* 16MHz */
  FCLK_SLOW();
  for (n = 10; n; n--) rcvr_spi();  /* 80 dummy clocks */
    adf8:	91 50       	subi	r25, 0x01	; 1
    adfa:	b9 f7       	brne	.-18     	; 0xadea <disk_initialize+0x46>

  ty = 0;
  if (send_cmd(CMD0, 0) == 1) {      /* Enter Idle state */
    adfc:	80 e4       	ldi	r24, 0x40	; 64
    adfe:	40 e0       	ldi	r20, 0x00	; 0
    ae00:	50 e0       	ldi	r21, 0x00	; 0
    ae02:	60 e0       	ldi	r22, 0x00	; 0
    ae04:	70 e0       	ldi	r23, 0x00	; 0
    ae06:	0e 94 59 53 	call	0xa6b2	; 0xa6b2 <send_cmd>
    ae0a:	81 30       	cpi	r24, 0x01	; 1
    ae0c:	09 f0       	breq	.+2      	; 0xae10 <disk_initialize+0x6c>
    ae0e:	87 c0       	rjmp	.+270    	; 0xaf1e <disk_initialize+0x17a>
    Timer1 = 100;            /* Initialization timeout of 1000 msec */
    ae10:	84 e6       	ldi	r24, 0x64	; 100
    ae12:	80 93 72 25 	sts	0x2572, r24
    if (send_cmd(CMD8, 0x1AA) == 1) {  /* SDHC */
    ae16:	88 e4       	ldi	r24, 0x48	; 72
    ae18:	4a ea       	ldi	r20, 0xAA	; 170
    ae1a:	51 e0       	ldi	r21, 0x01	; 1
    ae1c:	60 e0       	ldi	r22, 0x00	; 0
    ae1e:	70 e0       	ldi	r23, 0x00	; 0
    ae20:	0e 94 59 53 	call	0xa6b2	; 0xa6b2 <send_cmd>
    ae24:	81 30       	cpi	r24, 0x01	; 1
    ae26:	09 f0       	breq	.+2      	; 0xae2a <disk_initialize+0x86>
    ae28:	53 c0       	rjmp	.+166    	; 0xaed0 <disk_initialize+0x12c>
    ae2a:	7e 01       	movw	r14, r28
    ae2c:	08 94       	sec
    ae2e:	e1 1c       	adc	r14, r1
    ae30:	f1 1c       	adc	r15, r1
    ae32:	87 01       	movw	r16, r14
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    ae34:	e0 ec       	ldi	r30, 0xC0	; 192
    ae36:	fa e0       	ldi	r31, 0x0A	; 10
    ae38:	9f ef       	ldi	r25, 0xFF	; 255

  ty = 0;
  if (send_cmd(CMD0, 0) == 1) {      /* Enter Idle state */
    Timer1 = 100;            /* Initialization timeout of 1000 msec */
    if (send_cmd(CMD8, 0x1AA) == 1) {  /* SDHC */
      for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();    /* Get trailing return value of R7 resp */
    ae3a:	9e 01       	movw	r18, r28
    ae3c:	2b 5f       	subi	r18, 0xFB	; 251
    ae3e:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    ae40:	93 83       	std	Z+3, r25	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    ae42:	80 91 c2 0a 	lds	r24, 0x0AC2
    ae46:	87 ff       	sbrs	r24, 7
    ae48:	fc cf       	rjmp	.-8      	; 0xae42 <disk_initialize+0x9e>
  return SPIE.DATA;
    ae4a:	80 91 c3 0a 	lds	r24, 0x0AC3

  ty = 0;
  if (send_cmd(CMD0, 0) == 1) {      /* Enter Idle state */
    Timer1 = 100;            /* Initialization timeout of 1000 msec */
    if (send_cmd(CMD8, 0x1AA) == 1) {  /* SDHC */
      for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();    /* Get trailing return value of R7 resp */
    ae4e:	d8 01       	movw	r26, r16
    ae50:	8d 93       	st	X+, r24
    ae52:	8d 01       	movw	r16, r26
    ae54:	a2 17       	cp	r26, r18
    ae56:	b3 07       	cpc	r27, r19
    ae58:	99 f7       	brne	.-26     	; 0xae40 <disk_initialize+0x9c>
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) {        /* The card can work at vdd range of 2.7-3.6V */
    ae5a:	8b 81       	ldd	r24, Y+3	; 0x03
    ae5c:	81 30       	cpi	r24, 0x01	; 1
    ae5e:	09 f0       	breq	.+2      	; 0xae62 <disk_initialize+0xbe>
    ae60:	5e c0       	rjmp	.+188    	; 0xaf1e <disk_initialize+0x17a>
    ae62:	8c 81       	ldd	r24, Y+4	; 0x04
    ae64:	8a 3a       	cpi	r24, 0xAA	; 170
    ae66:	09 f0       	breq	.+2      	; 0xae6a <disk_initialize+0xc6>
    ae68:	5a c0       	rjmp	.+180    	; 0xaf1e <disk_initialize+0x17a>
        while (Timer1 && send_cmd(ACMD41, 1UL << 30));  /* Wait for leaving idle state (ACMD41 with HCS bit) */
    ae6a:	80 91 72 25 	lds	r24, 0x2572
    ae6e:	88 23       	and	r24, r24
    ae70:	49 f0       	breq	.+18     	; 0xae84 <disk_initialize+0xe0>
    ae72:	89 ee       	ldi	r24, 0xE9	; 233
    ae74:	40 e0       	ldi	r20, 0x00	; 0
    ae76:	50 e0       	ldi	r21, 0x00	; 0
    ae78:	60 e0       	ldi	r22, 0x00	; 0
    ae7a:	70 e4       	ldi	r23, 0x40	; 64
    ae7c:	0e 94 59 53 	call	0xa6b2	; 0xa6b2 <send_cmd>
    ae80:	88 23       	and	r24, r24
    ae82:	99 f7       	brne	.-26     	; 0xae6a <disk_initialize+0xc6>
        if (Timer1 && send_cmd(CMD58, 0) == 0) {    /* Check CCS bit in the OCR */
    ae84:	80 91 72 25 	lds	r24, 0x2572
    ae88:	88 23       	and	r24, r24
    ae8a:	09 f4       	brne	.+2      	; 0xae8e <disk_initialize+0xea>
    ae8c:	48 c0       	rjmp	.+144    	; 0xaf1e <disk_initialize+0x17a>
    ae8e:	8a e7       	ldi	r24, 0x7A	; 122
    ae90:	40 e0       	ldi	r20, 0x00	; 0
    ae92:	50 e0       	ldi	r21, 0x00	; 0
    ae94:	60 e0       	ldi	r22, 0x00	; 0
    ae96:	70 e0       	ldi	r23, 0x00	; 0
    ae98:	0e 94 59 53 	call	0xa6b2	; 0xa6b2 <send_cmd>
    ae9c:	88 23       	and	r24, r24
    ae9e:	09 f0       	breq	.+2      	; 0xaea2 <disk_initialize+0xfe>
    aea0:	3e c0       	rjmp	.+124    	; 0xaf1e <disk_initialize+0x17a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    aea2:	e0 ec       	ldi	r30, 0xC0	; 192
    aea4:	fa e0       	ldi	r31, 0x0A	; 10
    aea6:	9f ef       	ldi	r25, 0xFF	; 255
    aea8:	93 83       	std	Z+3, r25	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    aeaa:	80 91 c2 0a 	lds	r24, 0x0AC2
    aeae:	87 ff       	sbrs	r24, 7
    aeb0:	fc cf       	rjmp	.-8      	; 0xaeaa <disk_initialize+0x106>
  return SPIE.DATA;
    aeb2:	80 91 c3 0a 	lds	r24, 0x0AC3
    if (send_cmd(CMD8, 0x1AA) == 1) {  /* SDHC */
      for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();    /* Get trailing return value of R7 resp */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) {        /* The card can work at vdd range of 2.7-3.6V */
        while (Timer1 && send_cmd(ACMD41, 1UL << 30));  /* Wait for leaving idle state (ACMD41 with HCS bit) */
        if (Timer1 && send_cmd(CMD58, 0) == 0) {    /* Check CCS bit in the OCR */
          for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
    aeb6:	d7 01       	movw	r26, r14
    aeb8:	8d 93       	st	X+, r24
    aeba:	7d 01       	movw	r14, r26
    aebc:	a0 17       	cp	r26, r16
    aebe:	b1 07       	cpc	r27, r17
    aec0:	99 f7       	brne	.-26     	; 0xaea8 <disk_initialize+0x104>
          ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;  /* SDv2 */
    aec2:	89 81       	ldd	r24, Y+1	; 0x01
    aec4:	86 fd       	sbrc	r24, 6
    aec6:	02 c0       	rjmp	.+4      	; 0xaecc <disk_initialize+0x128>
    aec8:	14 e0       	ldi	r17, 0x04	; 4
    aeca:	2a c0       	rjmp	.+84     	; 0xaf20 <disk_initialize+0x17c>
    aecc:	1c e0       	ldi	r17, 0x0C	; 12
    aece:	28 c0       	rjmp	.+80     	; 0xaf20 <disk_initialize+0x17c>
        }
      }
    } else {              /* SDSC or MMC */
      if (send_cmd(ACMD41, 0) <= 1)   {
    aed0:	89 ee       	ldi	r24, 0xE9	; 233
    aed2:	40 e0       	ldi	r20, 0x00	; 0
    aed4:	50 e0       	ldi	r21, 0x00	; 0
    aed6:	60 e0       	ldi	r22, 0x00	; 0
    aed8:	70 e0       	ldi	r23, 0x00	; 0
    aeda:	0e 94 59 53 	call	0xa6b2	; 0xa6b2 <send_cmd>
    aede:	82 30       	cpi	r24, 0x02	; 2
    aee0:	18 f0       	brcs	.+6      	; 0xaee8 <disk_initialize+0x144>
    aee2:	01 e4       	ldi	r16, 0x41	; 65
    aee4:	11 e0       	ldi	r17, 0x01	; 1
    aee6:	02 c0       	rjmp	.+4      	; 0xaeec <disk_initialize+0x148>
    aee8:	09 ee       	ldi	r16, 0xE9	; 233
    aeea:	12 e0       	ldi	r17, 0x02	; 2
        ty = CT_SD1; cmd = ACMD41;  /* SDv1 */
      } else {
        ty = CT_MMC; cmd = CMD1;  /* MMCv3 */
      }
      while (Timer1 && send_cmd(cmd, 0));      /* Wait for leaving idle state */
    aeec:	80 91 72 25 	lds	r24, 0x2572
    aef0:	88 23       	and	r24, r24
    aef2:	49 f0       	breq	.+18     	; 0xaf06 <disk_initialize+0x162>
    aef4:	80 2f       	mov	r24, r16
    aef6:	40 e0       	ldi	r20, 0x00	; 0
    aef8:	50 e0       	ldi	r21, 0x00	; 0
    aefa:	60 e0       	ldi	r22, 0x00	; 0
    aefc:	70 e0       	ldi	r23, 0x00	; 0
    aefe:	0e 94 59 53 	call	0xa6b2	; 0xa6b2 <send_cmd>
    af02:	88 23       	and	r24, r24
    af04:	99 f7       	brne	.-26     	; 0xaeec <disk_initialize+0x148>
      if (!Timer1 || send_cmd(CMD16, 512) != 0)  /* Set R/W block length to 512 */
    af06:	80 91 72 25 	lds	r24, 0x2572
    af0a:	88 23       	and	r24, r24
    af0c:	41 f0       	breq	.+16     	; 0xaf1e <disk_initialize+0x17a>
    af0e:	80 e5       	ldi	r24, 0x50	; 80
    af10:	40 e0       	ldi	r20, 0x00	; 0
    af12:	52 e0       	ldi	r21, 0x02	; 2
    af14:	60 e0       	ldi	r22, 0x00	; 0
    af16:	70 e0       	ldi	r23, 0x00	; 0
    af18:	0e 94 59 53 	call	0xa6b2	; 0xa6b2 <send_cmd>
    af1c:	81 11       	cpse	r24, r1
    af1e:	10 e0       	ldi	r17, 0x00	; 0
        ty = 0;
    }
  }
  CardType = ty;
    af20:	10 93 74 25 	sts	0x2574, r17
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
  DESELECT();
    af24:	80 e1       	ldi	r24, 0x10	; 16
    af26:	e0 e8       	ldi	r30, 0x80	; 128
    af28:	f6 e0       	ldi	r31, 0x06	; 6
    af2a:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
  SPIE.DATA = 0xFF;
    af2c:	8f ef       	ldi	r24, 0xFF	; 255
    af2e:	e0 ec       	ldi	r30, 0xC0	; 192
    af30:	fa e0       	ldi	r31, 0x0A	; 10
    af32:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIE.STATUS, 7);
    af34:	80 91 c2 0a 	lds	r24, 0x0AC2
    af38:	87 ff       	sbrs	r24, 7
    af3a:	fc cf       	rjmp	.-8      	; 0xaf34 <disk_initialize+0x190>
  return SPIE.DATA;
    af3c:	80 91 c3 0a 	lds	r24, 0x0AC3
    }
  }
  CardType = ty;
  release_spi();

  if (ty) {      /* Initialization succeded */
    af40:	11 23       	and	r17, r17
    af42:	49 f0       	breq	.+18     	; 0xaf56 <disk_initialize+0x1b2>
    Stat &= ~STA_NOINIT;    /* Clear STA_NOINIT */
    af44:	80 91 e0 24 	lds	r24, 0x24E0
    af48:	8e 7f       	andi	r24, 0xFE	; 254
    af4a:	80 93 e0 24 	sts	0x24E0, r24
    FCLK_FAST();
    af4e:	80 ed       	ldi	r24, 0xD0	; 208
    af50:	80 93 c0 0a 	sts	0x0AC0, r24
    af54:	02 c0       	rjmp	.+4      	; 0xaf5a <disk_initialize+0x1b6>
  } else {      /* Initialization failed */
    power_off();
    af56:	0e 94 81 52 	call	0xa502	; 0xa502 <power_off>
  }

  CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc));  /* 32MHz */
    af5a:	81 e4       	ldi	r24, 0x41	; 65
    af5c:	90 e0       	ldi	r25, 0x00	; 0
    af5e:	60 e0       	ldi	r22, 0x00	; 0
    af60:	0e 94 95 23 	call	0x472a	; 0x472a <CCPWrite>
  return Stat;
    af64:	80 91 e0 24 	lds	r24, 0x24E0
}
    af68:	24 96       	adiw	r28, 0x04	; 4
    af6a:	e6 e0       	ldi	r30, 0x06	; 6
    af6c:	0c 94 21 5b 	jmp	0xb642	; 0xb642 <__epilogue_restores__+0x18>

0000af70 <rtc_gettime>:
#include <string.h>
#include "rtc.h"


BOOL rtc_gettime (RTCLK *rtc)
{
    af70:	fc 01       	movw	r30, r24
	rtc->sec = 30;
    af72:	8e e1       	ldi	r24, 0x1E	; 30
    af74:	87 83       	std	Z+7, r24	; 0x07
	rtc->min = 59;
    af76:	8b e3       	ldi	r24, 0x3B	; 59
    af78:	86 83       	std	Z+6, r24	; 0x06
	rtc->hour = 11;
    af7a:	8b e0       	ldi	r24, 0x0B	; 11
    af7c:	85 83       	std	Z+5, r24	; 0x05
	rtc->mday = 3;
    af7e:	83 e0       	ldi	r24, 0x03	; 3
    af80:	83 83       	std	Z+3, r24	; 0x03
	rtc->month = 9;
    af82:	89 e0       	ldi	r24, 0x09	; 9
    af84:	82 83       	std	Z+2, r24	; 0x02
	rtc->year = 2009;
    af86:	89 ed       	ldi	r24, 0xD9	; 217
    af88:	97 e0       	ldi	r25, 0x07	; 7
    af8a:	80 83       	st	Z, r24
    af8c:	91 83       	std	Z+1, r25	; 0x01

	return TRUE;
}
    af8e:	81 e0       	ldi	r24, 0x01	; 1
    af90:	90 e0       	ldi	r25, 0x00	; 0
    af92:	08 95       	ret

0000af94 <rtc_settime>:
	buf[4] = rtc->mday / 10 * 16 + rtc->mday % 10;
	buf[5] = rtc->month / 10 * 16 + rtc->month % 10;
	buf[6] = (rtc->year - 2000) / 10 * 16 + (rtc->year - 2000) % 10;

	return TRUE;
}
    af94:	81 e0       	ldi	r24, 0x01	; 1
    af96:	90 e0       	ldi	r25, 0x00	; 0
    af98:	08 95       	ret

0000af9a <rtc_init>:

BOOL rtc_init (void)
{
	return TRUE;
}
    af9a:	81 e0       	ldi	r24, 0x01	; 1
    af9c:	90 e0       	ldi	r25, 0x00	; 0
    af9e:	08 95       	ret

0000afa0 <get_fattime>:
			| ((DWORD)rtc.month << 21)
			| ((DWORD)rtc.mday << 16)
			| ((DWORD)rtc.hour << 11)
			| ((DWORD)rtc.min << 5)
			| ((DWORD)rtc.sec >> 1);
    afa0:	6f e6       	ldi	r22, 0x6F	; 111
    afa2:	7f e5       	ldi	r23, 0x5F	; 95
    afa4:	83 e2       	ldi	r24, 0x23	; 35
    afa6:	9b e3       	ldi	r25, 0x3B	; 59
    afa8:	08 95       	ret

0000afaa <__vector_108>:

volatile uint32_t ticks=0;


ISR(TCF0_OVF_vect)			/*signal Handler for timer ovf 0 */
{
    afaa:	1f 92       	push	r1
    afac:	0f 92       	push	r0
    afae:	0f b6       	in	r0, 0x3f	; 63
    afb0:	0f 92       	push	r0
    afb2:	08 b6       	in	r0, 0x38	; 56
    afb4:	0f 92       	push	r0
    afb6:	09 b6       	in	r0, 0x39	; 57
    afb8:	0f 92       	push	r0
    afba:	11 24       	eor	r1, r1
    afbc:	18 be       	out	0x38, r1	; 56
    afbe:	19 be       	out	0x39, r1	; 57
    afc0:	8f 93       	push	r24
    afc2:	9f 93       	push	r25
    afc4:	af 93       	push	r26
    afc6:	bf 93       	push	r27
	ticks++;
    afc8:	80 91 75 25 	lds	r24, 0x2575
    afcc:	90 91 76 25 	lds	r25, 0x2576
    afd0:	a0 91 77 25 	lds	r26, 0x2577
    afd4:	b0 91 78 25 	lds	r27, 0x2578
    afd8:	01 96       	adiw	r24, 0x01	; 1
    afda:	a1 1d       	adc	r26, r1
    afdc:	b1 1d       	adc	r27, r1
    afde:	80 93 75 25 	sts	0x2575, r24
    afe2:	90 93 76 25 	sts	0x2576, r25
    afe6:	a0 93 77 25 	sts	0x2577, r26
    afea:	b0 93 78 25 	sts	0x2578, r27
}
    afee:	bf 91       	pop	r27
    aff0:	af 91       	pop	r26
    aff2:	9f 91       	pop	r25
    aff4:	8f 91       	pop	r24
    aff6:	0f 90       	pop	r0
    aff8:	09 be       	out	0x39, r0	; 57
    affa:	0f 90       	pop	r0
    affc:	08 be       	out	0x38, r0	; 56
    affe:	0f 90       	pop	r0
    b000:	0f be       	out	0x3f, r0	; 63
    b002:	0f 90       	pop	r0
    b004:	1f 90       	pop	r1
    b006:	18 95       	reti

0000b008 <timer_init>:


void timer_init(void)
{	
	ticks=0;
    b008:	10 92 75 25 	sts	0x2575, r1
    b00c:	10 92 76 25 	sts	0x2576, r1
    b010:	10 92 77 25 	sts	0x2577, r1
    b014:	10 92 78 25 	sts	0x2578, r1
  TCF0.CTRLA = 0x04;      // Prescaler: clk/8
    b018:	e0 e0       	ldi	r30, 0x00	; 0
    b01a:	fb e0       	ldi	r31, 0x0B	; 11
    b01c:	84 e0       	ldi	r24, 0x04	; 4
    b01e:	80 83       	st	Z, r24
  TCF0.PER   = 3999;     // 1000Hz
    b020:	8f e9       	ldi	r24, 0x9F	; 159
    b022:	9f e0       	ldi	r25, 0x0F	; 15
    b024:	86 a3       	std	Z+38, r24	; 0x26
    b026:	97 a3       	std	Z+39, r25	; 0x27
  TCF0.INTCTRLA = 0x02;   // Timer overflow is a medium level interrupt
    b028:	82 e0       	ldi	r24, 0x02	; 2
    b02a:	86 83       	std	Z+6, r24	; 0x06
}
    b02c:	08 95       	ret

0000b02e <Wait>:

void Wait(uint16_t delay)
{
    b02e:	ef 92       	push	r14
    b030:	ff 92       	push	r15
    b032:	0f 93       	push	r16
    b034:	1f 93       	push	r17
	uint32_t temp=ticks;
    b036:	e0 90 75 25 	lds	r14, 0x2575
    b03a:	f0 90 76 25 	lds	r15, 0x2576
    b03e:	00 91 77 25 	lds	r16, 0x2577
    b042:	10 91 78 25 	lds	r17, 0x2578

	while(ticks - temp < delay);
    b046:	9c 01       	movw	r18, r24
    b048:	40 e0       	ldi	r20, 0x00	; 0
    b04a:	50 e0       	ldi	r21, 0x00	; 0
    b04c:	80 91 75 25 	lds	r24, 0x2575
    b050:	90 91 76 25 	lds	r25, 0x2576
    b054:	a0 91 77 25 	lds	r26, 0x2577
    b058:	b0 91 78 25 	lds	r27, 0x2578
    b05c:	8e 19       	sub	r24, r14
    b05e:	9f 09       	sbc	r25, r15
    b060:	a0 0b       	sbc	r26, r16
    b062:	b1 0b       	sbc	r27, r17
    b064:	82 17       	cp	r24, r18
    b066:	93 07       	cpc	r25, r19
    b068:	a4 07       	cpc	r26, r20
    b06a:	b5 07       	cpc	r27, r21
    b06c:	78 f3       	brcs	.-34     	; 0xb04c <Wait+0x1e>
}
    b06e:	1f 91       	pop	r17
    b070:	0f 91       	pop	r16
    b072:	ff 90       	pop	r15
    b074:	ef 90       	pop	r14
    b076:	08 95       	ret

0000b078 <timer_fine_tic>:
{
// set the 16 bit timer to zero, also set the prescaler to 64
// with prescaler = 64, counts happen every 32E6/64, so 1 counts are 2 us
// full count is (2^16)*(64)/(32E6) = 128 ms

TCF1.CTRLA = 0x05;     /*Prescaler = 64*/
    b078:	e0 e4       	ldi	r30, 0x40	; 64
    b07a:	fb e0       	ldi	r31, 0x0B	; 11
    b07c:	85 e0       	ldi	r24, 0x05	; 5
    b07e:	80 83       	st	Z, r24
TCF1.CNT = 0; //reset TCF1 
    b080:	10 a2       	std	Z+32, r1	; 0x20
    b082:	11 a2       	std	Z+33, r1	; 0x21
}
    b084:	08 95       	ret

0000b086 <timer_fine_toc>:

uint16_t timer_fine_toc(void)
{
// read and return the 16 bit timer
	uint16_t del_t;
	del_t = TCF1.CNT * 2;
    b086:	e0 e4       	ldi	r30, 0x40	; 64
    b088:	fb e0       	ldi	r31, 0x0B	; 11
    b08a:	20 a1       	ldd	r18, Z+32	; 0x20
    b08c:	31 a1       	ldd	r19, Z+33	; 0x21
    b08e:	22 0f       	add	r18, r18
    b090:	33 1f       	adc	r19, r19
	return del_t;
}	
    b092:	c9 01       	movw	r24, r18
    b094:	08 95       	ret

0000b096 <timer_coarse_tic>:
{
// set the 16 bit timer to zero, also set the prescaler to 8
// with prescaler = 8, and per = 4000, overflow happens every 1ms

	
	ticks=0;
    b096:	10 92 75 25 	sts	0x2575, r1
    b09a:	10 92 76 25 	sts	0x2576, r1
    b09e:	10 92 77 25 	sts	0x2577, r1
    b0a2:	10 92 78 25 	sts	0x2578, r1

  TCF0.CTRLA = 0x04;      // Prescaler: 8
    b0a6:	e0 e0       	ldi	r30, 0x00	; 0
    b0a8:	fb e0       	ldi	r31, 0x0B	; 11
    b0aa:	84 e0       	ldi	r24, 0x04	; 4
    b0ac:	80 83       	st	Z, r24
  TCF0.PER   = 3999;     // 1000Hz
    b0ae:	8f e9       	ldi	r24, 0x9F	; 159
    b0b0:	9f e0       	ldi	r25, 0x0F	; 15
    b0b2:	86 a3       	std	Z+38, r24	; 0x26
    b0b4:	97 a3       	std	Z+39, r25	; 0x27
  TCF0.INTCTRLA = 0x02;   // Timer overflow is a medium level interrupt
    b0b6:	82 e0       	ldi	r24, 0x02	; 2
    b0b8:	86 83       	std	Z+6, r24	; 0x06
  TCF0.CNT = 0;            //reset TCF0
    b0ba:	10 a2       	std	Z+32, r1	; 0x20
    b0bc:	11 a2       	std	Z+33, r1	; 0x21
}
    b0be:	08 95       	ret

0000b0c0 <timer_coarse_toc>:
uint32_t timer_coarse_toc(void)
{
// read and return the ticks counter
// to convert this value to ms - divide by 
	unsigned long del_t;	
	del_t = (uint32_t)ticks;
    b0c0:	20 91 75 25 	lds	r18, 0x2575
    b0c4:	30 91 76 25 	lds	r19, 0x2576
    b0c8:	40 91 77 25 	lds	r20, 0x2577
    b0cc:	50 91 78 25 	lds	r21, 0x2578
	return del_t;
}	
    b0d0:	b9 01       	movw	r22, r18
    b0d2:	ca 01       	movw	r24, r20
    b0d4:	08 95       	ret

0000b0d6 <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGE_SIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    b0d6:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    b0d8:	e0 ec       	ldi	r30, 0xC0	; 192
    b0da:	f1 e0       	ldi	r31, 0x01	; 1
    b0dc:	80 91 cf 01 	lds	r24, 0x01CF
    b0e0:	87 fd       	sbrc	r24, 7
    b0e2:	fa cf       	rjmp	.-12     	; 0xb0d8 <EEPROM_ReadByte+0x2>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE)
	                            |(byteAddr & (EEPROM_PAGE_SIZE-1));
    b0e4:	26 2f       	mov	r18, r22
    b0e6:	30 e0       	ldi	r19, 0x00	; 0
    b0e8:	2f 71       	andi	r18, 0x1F	; 31
    b0ea:	30 70       	andi	r19, 0x00	; 0
    b0ec:	89 2f       	mov	r24, r25
    b0ee:	90 e0       	ldi	r25, 0x00	; 0
    b0f0:	45 e0       	ldi	r20, 0x05	; 5
    b0f2:	88 0f       	add	r24, r24
    b0f4:	99 1f       	adc	r25, r25
    b0f6:	4a 95       	dec	r20
    b0f8:	e1 f7       	brne	.-8      	; 0xb0f2 <EEPROM_ReadByte+0x1c>
    b0fa:	28 2b       	or	r18, r24
    b0fc:	39 2b       	or	r19, r25

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    b0fe:	20 93 c0 01 	sts	0x01C0, r18
	NVM.ADDR1 = (address >> 8) & 0x1F;
    b102:	83 2f       	mov	r24, r19
    b104:	8f 71       	andi	r24, 0x1F	; 31
    b106:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    b108:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    b10a:	86 e0       	ldi	r24, 0x06	; 6
    b10c:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    b10e:	eb ec       	ldi	r30, 0xCB	; 203
    b110:	f1 e0       	ldi	r31, 0x01	; 1
    b112:	21 e0       	ldi	r18, 0x01	; 1
    b114:	30 e0       	ldi	r19, 0x00	; 0
    b116:	88 ed       	ldi	r24, 0xD8	; 216
    b118:	90 e0       	ldi	r25, 0x00	; 0
    b11a:	84 bf       	out	0x34, r24	; 52
    b11c:	20 83       	st	Z, r18

	/* Issue EEPROM Read command. */
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
        NVM_EXEC();

	return NVM.DATA0;
    b11e:	80 91 c4 01 	lds	r24, 0x01C4
}
    b122:	08 95       	ret

0000b124 <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    b124:	80 91 cf 01 	lds	r24, 0x01CF
    b128:	87 fd       	sbrc	r24, 7
    b12a:	fc cf       	rjmp	.-8      	; 0xb124 <EEPROM_WaitForNVM>
}
    b12c:	08 95       	ret

0000b12e <EEPROM_FlushBuffer>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    b12e:	80 91 cf 01 	lds	r24, 0x01CF
    b132:	87 fd       	sbrc	r24, 7
    b134:	fc cf       	rjmp	.-8      	; 0xb12e <EEPROM_FlushBuffer>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    b136:	80 91 cf 01 	lds	r24, 0x01CF
    b13a:	81 ff       	sbrs	r24, 1
    b13c:	0c c0       	rjmp	.+24     	; 0xb156 <EEPROM_FlushBuffer+0x28>
                NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    b13e:	86 e3       	ldi	r24, 0x36	; 54
    b140:	e0 ec       	ldi	r30, 0xC0	; 192
    b142:	f1 e0       	ldi	r31, 0x01	; 1
    b144:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    b146:	eb ec       	ldi	r30, 0xCB	; 203
    b148:	f1 e0       	ldi	r31, 0x01	; 1
    b14a:	21 e0       	ldi	r18, 0x01	; 1
    b14c:	30 e0       	ldi	r19, 0x00	; 0
    b14e:	88 ed       	ldi	r24, 0xD8	; 216
    b150:	90 e0       	ldi	r25, 0x00	; 0
    b152:	84 bf       	out	0x34, r24	; 52
    b154:	20 83       	st	Z, r18
    b156:	08 95       	ret

0000b158 <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGE_SIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    b158:	df 92       	push	r13
    b15a:	ef 92       	push	r14
    b15c:	ff 92       	push	r15
    b15e:	0f 93       	push	r16
    b160:	1f 93       	push	r17
    b162:	e8 2e       	mov	r14, r24
    b164:	06 2f       	mov	r16, r22
    b166:	d4 2e       	mov	r13, r20
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    b168:	0e 94 97 58 	call	0xb12e	; 0xb12e <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    b16c:	e0 ec       	ldi	r30, 0xC0	; 192
    b16e:	f1 e0       	ldi	r31, 0x01	; 1
    b170:	83 e3       	ldi	r24, 0x33	; 51
    b172:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE)
	                            |(byteAddr & (EEPROM_PAGE_SIZE-1));
    b174:	10 e0       	ldi	r17, 0x00	; 0
    b176:	0f 71       	andi	r16, 0x1F	; 31
    b178:	10 70       	andi	r17, 0x00	; 0
    b17a:	ff 24       	eor	r15, r15
    b17c:	55 e0       	ldi	r21, 0x05	; 5
    b17e:	ee 0c       	add	r14, r14
    b180:	ff 1c       	adc	r15, r15
    b182:	5a 95       	dec	r21
    b184:	e1 f7       	brne	.-8      	; 0xb17e <EEPROM_WriteByte+0x26>
    b186:	0e 29       	or	r16, r14
    b188:	1f 29       	or	r17, r15

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    b18a:	00 83       	st	Z, r16
	NVM.ADDR1 = (address >> 8) & 0x1F;
    b18c:	81 2f       	mov	r24, r17
    b18e:	8f 71       	andi	r24, 0x1F	; 31
    b190:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    b192:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    b194:	d4 82       	std	Z+4, r13	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    b196:	85 e3       	ldi	r24, 0x35	; 53
    b198:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    b19a:	eb ec       	ldi	r30, 0xCB	; 203
    b19c:	f1 e0       	ldi	r31, 0x01	; 1
    b19e:	21 e0       	ldi	r18, 0x01	; 1
    b1a0:	30 e0       	ldi	r19, 0x00	; 0
    b1a2:	88 ed       	ldi	r24, 0xD8	; 216
    b1a4:	90 e0       	ldi	r25, 0x00	; 0
    b1a6:	84 bf       	out	0x34, r24	; 52
    b1a8:	20 83       	st	Z, r18
	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
        NVM_EXEC_WRAPPER();
}
    b1aa:	1f 91       	pop	r17
    b1ac:	0f 91       	pop	r16
    b1ae:	ff 90       	pop	r15
    b1b0:	ef 90       	pop	r14
    b1b2:	df 90       	pop	r13
    b1b4:	08 95       	ret

0000b1b6 <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGE_SIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    b1b6:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    b1b8:	e0 ec       	ldi	r30, 0xC0	; 192
    b1ba:	f1 e0       	ldi	r31, 0x01	; 1
    b1bc:	80 91 cf 01 	lds	r24, 0x01CF
    b1c0:	87 fd       	sbrc	r24, 7
    b1c2:	fa cf       	rjmp	.-12     	; 0xb1b8 <EEPROM_LoadByte+0x2>
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    b1c4:	83 e3       	ldi	r24, 0x33	; 51
    b1c6:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    b1c8:	90 93 c0 01 	sts	0x01C0, r25
	NVM.ADDR1 = 0x00;
    b1cc:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    b1ce:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    b1d0:	64 83       	std	Z+4, r22	; 0x04
}
    b1d2:	08 95       	ret

0000b1d4 <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    b1d4:	dc 01       	movw	r26, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    b1d6:	e0 ec       	ldi	r30, 0xC0	; 192
    b1d8:	f1 e0       	ldi	r31, 0x01	; 1
    b1da:	80 91 cf 01 	lds	r24, 0x01CF
    b1de:	87 fd       	sbrc	r24, 7
    b1e0:	fa cf       	rjmp	.-12     	; 0xb1d6 <EEPROM_LoadPage+0x2>
 */
void EEPROM_LoadPage( const uint8_t * values )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    b1e2:	83 e3       	ldi	r24, 0x33	; 51
    b1e4:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    b1e6:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    b1e8:	12 82       	std	Z+2, r1	; 0x02
    b1ea:	90 e0       	ldi	r25, 0x00	; 0

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; ++i) {
		NVM.ADDR0 = i;
    b1ec:	90 93 c0 01 	sts	0x01C0, r25
		NVM.DATA0 = *values;
    b1f0:	8d 91       	ld	r24, X+
    b1f2:	84 83       	std	Z+4, r24	; 0x04
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    b1f4:	9f 5f       	subi	r25, 0xFF	; 255
    b1f6:	90 32       	cpi	r25, 0x20	; 32
    b1f8:	c9 f7       	brne	.-14     	; 0xb1ec <EEPROM_LoadPage+0x18>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    b1fa:	08 95       	ret

0000b1fc <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    b1fc:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    b1fe:	e0 ec       	ldi	r30, 0xC0	; 192
    b200:	f1 e0       	ldi	r31, 0x01	; 1
    b202:	80 91 cf 01 	lds	r24, 0x01CF
    b206:	87 fd       	sbrc	r24, 7
    b208:	fa cf       	rjmp	.-12     	; 0xb1fe <EEPROM_AtomicWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE);
    b20a:	89 2f       	mov	r24, r25
    b20c:	90 e0       	ldi	r25, 0x00	; 0
    b20e:	65 e0       	ldi	r22, 0x05	; 5
    b210:	88 0f       	add	r24, r24
    b212:	99 1f       	adc	r25, r25
    b214:	6a 95       	dec	r22
    b216:	e1 f7       	brne	.-8      	; 0xb210 <EEPROM_AtomicWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    b218:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    b21c:	89 2f       	mov	r24, r25
    b21e:	8f 71       	andi	r24, 0x1F	; 31
    b220:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    b222:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
        NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    b224:	85 e3       	ldi	r24, 0x35	; 53
    b226:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    b228:	eb ec       	ldi	r30, 0xCB	; 203
    b22a:	f1 e0       	ldi	r31, 0x01	; 1
    b22c:	21 e0       	ldi	r18, 0x01	; 1
    b22e:	30 e0       	ldi	r19, 0x00	; 0
    b230:	88 ed       	ldi	r24, 0xD8	; 216
    b232:	90 e0       	ldi	r25, 0x00	; 0
    b234:	84 bf       	out	0x34, r24	; 52
    b236:	20 83       	st	Z, r18
	NVM.ADDR2 = 0x00;

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
        NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
        NVM_EXEC();
}
    b238:	08 95       	ret

0000b23a <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    b23a:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    b23c:	e0 ec       	ldi	r30, 0xC0	; 192
    b23e:	f1 e0       	ldi	r31, 0x01	; 1
    b240:	80 91 cf 01 	lds	r24, 0x01CF
    b244:	87 fd       	sbrc	r24, 7
    b246:	fa cf       	rjmp	.-12     	; 0xb23c <EEPROM_ErasePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE);
    b248:	89 2f       	mov	r24, r25
    b24a:	90 e0       	ldi	r25, 0x00	; 0
    b24c:	75 e0       	ldi	r23, 0x05	; 5
    b24e:	88 0f       	add	r24, r24
    b250:	99 1f       	adc	r25, r25
    b252:	7a 95       	dec	r23
    b254:	e1 f7       	brne	.-8      	; 0xb24e <EEPROM_ErasePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    b256:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    b25a:	89 2f       	mov	r24, r25
    b25c:	8f 71       	andi	r24, 0x1F	; 31
    b25e:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    b260:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
        NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    b262:	82 e3       	ldi	r24, 0x32	; 50
    b264:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    b266:	eb ec       	ldi	r30, 0xCB	; 203
    b268:	f1 e0       	ldi	r31, 0x01	; 1
    b26a:	21 e0       	ldi	r18, 0x01	; 1
    b26c:	30 e0       	ldi	r19, 0x00	; 0
    b26e:	88 ed       	ldi	r24, 0xD8	; 216
    b270:	90 e0       	ldi	r25, 0x00	; 0
    b272:	84 bf       	out	0x34, r24	; 52
    b274:	20 83       	st	Z, r18
	NVM.ADDR2 = 0x00;

	/* Issue EEPROM Erase command. */
        NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
        NVM_EXEC_WRAPPER();
}
    b276:	08 95       	ret

0000b278 <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    b278:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    b27a:	e0 ec       	ldi	r30, 0xC0	; 192
    b27c:	f1 e0       	ldi	r31, 0x01	; 1
    b27e:	80 91 cf 01 	lds	r24, 0x01CF
    b282:	87 fd       	sbrc	r24, 7
    b284:	fa cf       	rjmp	.-12     	; 0xb27a <EEPROM_SplitWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE);
    b286:	89 2f       	mov	r24, r25
    b288:	90 e0       	ldi	r25, 0x00	; 0
    b28a:	a5 e0       	ldi	r26, 0x05	; 5
    b28c:	88 0f       	add	r24, r24
    b28e:	99 1f       	adc	r25, r25
    b290:	aa 95       	dec	r26
    b292:	e1 f7       	brne	.-8      	; 0xb28c <EEPROM_SplitWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    b294:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    b298:	89 2f       	mov	r24, r25
    b29a:	8f 71       	andi	r24, 0x1F	; 31
    b29c:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    b29e:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
        NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    b2a0:	84 e3       	ldi	r24, 0x34	; 52
    b2a2:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    b2a4:	eb ec       	ldi	r30, 0xCB	; 203
    b2a6:	f1 e0       	ldi	r31, 0x01	; 1
    b2a8:	21 e0       	ldi	r18, 0x01	; 1
    b2aa:	30 e0       	ldi	r19, 0x00	; 0
    b2ac:	88 ed       	ldi	r24, 0xD8	; 216
    b2ae:	90 e0       	ldi	r25, 0x00	; 0
    b2b0:	84 bf       	out	0x34, r24	; 52
    b2b2:	20 83       	st	Z, r18
	NVM.ADDR2 = 0x00;

	/* Issue EEPROM Split Write command. */
        NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
        NVM_EXEC_WRAPPER();
}
    b2b4:	08 95       	ret

0000b2b6 <EEPROM_EraseAll>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    b2b6:	80 91 cf 01 	lds	r24, 0x01CF
    b2ba:	87 fd       	sbrc	r24, 7
    b2bc:	fc cf       	rjmp	.-8      	; 0xb2b6 <EEPROM_EraseAll>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
        NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    b2be:	80 e3       	ldi	r24, 0x30	; 48
    b2c0:	e0 ec       	ldi	r30, 0xC0	; 192
    b2c2:	f1 e0       	ldi	r31, 0x01	; 1
    b2c4:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    b2c6:	eb ec       	ldi	r30, 0xCB	; 203
    b2c8:	f1 e0       	ldi	r31, 0x01	; 1
    b2ca:	21 e0       	ldi	r18, 0x01	; 1
    b2cc:	30 e0       	ldi	r19, 0x00	; 0
    b2ce:	88 ed       	ldi	r24, 0xD8	; 216
    b2d0:	90 e0       	ldi	r25, 0x00	; 0
    b2d2:	84 bf       	out	0x34, r24	; 52
    b2d4:	20 83       	st	Z, r18
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
        NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
        NVM_EXEC_WRAPPER();
}
    b2d6:	08 95       	ret

0000b2d8 <xputc>:

.global xputc
.func xputc
xputc:
#ifdef CR_CRLF
	cpi	r24, 10		;LF --> CRLF
    b2d8:	8a 30       	cpi	r24, 0x0A	; 10
	brne	1f		;
    b2da:	19 f4       	brne	.+6      	; 0xb2e2 <xputc+0xa>
	ldi	r24, 13		;
    b2dc:	8d e0       	ldi	r24, 0x0D	; 13
	rcall	1f		;
    b2de:	01 d0       	rcall	.+2      	; 0xb2e2 <xputc+0xa>
	ldi	r24, 10		;/
    b2e0:	8a e0       	ldi	r24, 0x0A	; 10
1:
#endif
	push	ZH
    b2e2:	ff 93       	push	r31
	push	ZL
    b2e4:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
    b2e6:	e0 91 79 25 	lds	r30, 0x2579
	lds	ZH, xfunc_out+1	;/
    b2ea:	f0 91 7a 25 	lds	r31, 0x257A
	icall
    b2ee:	09 95       	icall
	pop	ZL
    b2f0:	ef 91       	pop	r30
	pop	ZH
    b2f2:	ff 91       	pop	r31
	ret
    b2f4:	08 95       	ret

0000b2f6 <xputs>:

#ifdef USE_XPUTS
.global xputs
.func xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
    b2f6:	fc 01       	movw	r30, r24
1:	_LPMI	r24
    b2f8:	85 91       	lpm	r24, Z+
	cpi	r24, 0
    b2fa:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
    b2fc:	11 f0       	breq	.+4      	; 0xb302 <xputs+0xc>
	rcall	xputc
    b2fe:	ec df       	rcall	.-40     	; 0xb2d8 <xputc>
	rjmp	1b
    b300:	fb cf       	rjmp	.-10     	; 0xb2f8 <xputs+0x2>
2:	ret
    b302:	08 95       	ret

0000b304 <xitoa>:
#ifdef USE_XITOA
.global xitoa
.func xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
    b304:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
    b306:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
    b308:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
    b30a:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
    b30c:	0c c0       	rjmp	.+24     	; 0xb326 <xitoa+0x22>
	neg	r20		;
    b30e:	41 95       	neg	r20
	sbrs	r25, 7		;
    b310:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
    b312:	09 c0       	rjmp	.+18     	; 0xb326 <xitoa+0x22>
	ldi	r30, '-'	;
    b314:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
    b316:	60 95       	com	r22
	com	r23		;
    b318:	70 95       	com	r23
	com	r24		;
    b31a:	80 95       	com	r24
	com	r25		;
    b31c:	90 95       	com	r25
	adc	r22, r1		;
    b31e:	61 1d       	adc	r22, r1
	adc	r23, r1		;
    b320:	71 1d       	adc	r23, r1
	adc	r24, r1		;
    b322:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
    b324:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
    b326:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
    b328:	02 c0       	rjmp	.+4      	; 0xb32e <xitoa+0x2a>
	neg	r18		;
    b32a:	21 95       	neg	r18
	ldi	r19, '0'	;/
    b32c:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
    b32e:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
    b330:	aa 27       	eor	r26, r26
2:	lsl	r22		;
    b332:	66 0f       	add	r22, r22
	rol	r23		;
    b334:	77 1f       	adc	r23, r23
	rol	r24		;
    b336:	88 1f       	adc	r24, r24
	rol	r25		;
    b338:	99 1f       	adc	r25, r25
	rol	r26		;
    b33a:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
    b33c:	a4 17       	cp	r26, r20
	brcs	3f		;
    b33e:	10 f0       	brcs	.+4      	; 0xb344 <xitoa+0x40>
	sub	r26, r20	;
    b340:	a4 1b       	sub	r26, r20
	inc	r22		;
    b342:	63 95       	inc	r22
3:	dec	r21		;
    b344:	5a 95       	dec	r21
	brne	2b		;/
    b346:	a9 f7       	brne	.-22     	; 0xb332 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
    b348:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
    b34a:	08 f0       	brcs	.+2      	; 0xb34e <xitoa+0x4a>
	subi	r26, -7		;
    b34c:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
    b34e:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
    b350:	af 93       	push	r26
	inc	r31		;/
    b352:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
    b354:	61 15       	cp	r22, r1
	cpc	r23, r1		;
    b356:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
    b358:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
    b35a:	91 05       	cpc	r25, r1
	brne	1b		;/
    b35c:	41 f7       	brne	.-48     	; 0xb32e <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
    b35e:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
    b360:	11 f4       	brne	.+4      	; 0xb366 <xitoa+0x62>
	push	r30		;
    b362:	ef 93       	push	r30
	inc	r31		;/
    b364:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
    b366:	f2 17       	cp	r31, r18
	brcc	6f		;
    b368:	18 f4       	brcc	.+6      	; 0xb370 <xitoa+0x6c>
	push	r19		;
    b36a:	3f 93       	push	r19
	inc	r31		;
    b36c:	f3 95       	inc	r31
	rjmp	5b		;/
    b36e:	fb cf       	rjmp	.-10     	; 0xb366 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
    b370:	8f 91       	pop	r24
	rcall	xputc		;
    b372:	b2 df       	rcall	.-156    	; 0xb2d8 <xputc>
	dec	r31		;
    b374:	fa 95       	dec	r31
	brne	6b		;/
    b376:	e1 f7       	brne	.-8      	; 0xb370 <xitoa+0x6c>

	ret
    b378:	08 95       	ret

0000b37a <xprintf>:

#ifdef USE_XPRINTF
.global xprintf
.func xprintf
xprintf:
	push	YH
    b37a:	df 93       	push	r29
	push	YL
    b37c:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
    b37e:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
    b380:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
#if FLASHEND > 0x1FFFF
	adiw	YL, 6		;Y = pointer to arguments
    b382:	26 96       	adiw	r28, 0x06	; 6
#else
	adiw	YL, 5		;Y = pointer to arguments
#endif
	ld	ZL, Y+		;Z = pointer to format string
    b384:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
    b386:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
    b388:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
    b38a:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
    b38c:	21 f0       	breq	.+8      	; 0xb396 <xprintf+0x1c>
	cpi	r24, '%'	;Is format?
    b38e:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
    b390:	29 f0       	breq	.+10     	; 0xb39c <xprintf+0x22>
1:	rcall	xputc		;Put a normal character
    b392:	a2 df       	rcall	.-188    	; 0xb2d8 <xputc>
	rjmp	0b		;/
    b394:	f9 cf       	rjmp	.-14     	; 0xb388 <xprintf+0xe>
90:	pop	YL
    b396:	cf 91       	pop	r28
	pop	YH
    b398:	df 91       	pop	r29
	ret
    b39a:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
    b39c:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
    b39e:	e8 94       	clt
	_LPMI	r21		;Get flags
    b3a0:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
    b3a2:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
    b3a4:	b1 f3       	breq	.-20     	; 0xb392 <xprintf+0x18>
	cpi	r21, '0'	;Zero filled?
    b3a6:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
    b3a8:	11 f4       	brne	.+4      	; 0xb3ae <xprintf+0x34>
	set			;/
    b3aa:	68 94       	set
22:	_LPMI	r21		;Get width
    b3ac:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
    b3ae:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
    b3b0:	48 f4       	brcc	.+18     	; 0xb3c4 <xprintf+0x4a>
	subi	r21, '0'	;
    b3b2:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
    b3b4:	80 f3       	brcs	.-32     	; 0xb396 <xprintf+0x1c>
	lsl	r18		;
    b3b6:	22 0f       	add	r18, r18
	mov	r0, r18		;
    b3b8:	02 2e       	mov	r0, r18
	lsl	r18		;
    b3ba:	22 0f       	add	r18, r18
	lsl	r18		;
    b3bc:	22 0f       	add	r18, r18
	add	r18, r0		;
    b3be:	20 0d       	add	r18, r0
	add	r18, r21	;
    b3c0:	25 0f       	add	r18, r21
	rjmp	22b		;/
    b3c2:	f4 cf       	rjmp	.-24     	; 0xb3ac <xprintf+0x32>

24:	brtc	25f		;get value (low word)
    b3c4:	0e f4       	brtc	.+2      	; 0xb3c8 <xprintf+0x4e>
	neg	r18		;
    b3c6:	21 95       	neg	r18
25:	ld	r24, Y+		;
    b3c8:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
    b3ca:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
    b3cc:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
    b3ce:	09 f3       	breq	.-62     	; 0xb392 <xprintf+0x18>
	cpi	r21, 's'	;Is type RAM string?
    b3d0:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
    b3d2:	29 f1       	breq	.+74     	; 0xb41e <xprintf+0xa4>
	cpi	r21, 'S'	;Is type ROM string?
    b3d4:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
    b3d6:	59 f1       	breq	.+86     	; 0xb42e <xprintf+0xb4>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
    b3d8:	bc 01       	movw	r22, r24
	clr	r24		;
    b3da:	88 27       	eor	r24, r24
	clr	r25		;
    b3dc:	99 27       	eor	r25, r25
	clt			;/
    b3de:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
    b3e0:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
    b3e2:	21 f4       	brne	.+8      	; 0xb3ec <xprintf+0x72>
	ld	r24, Y+		;get value (high word)
    b3e4:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
    b3e6:	99 91       	ld	r25, Y+
	set			;
    b3e8:	68 94       	set
	_LPMI	r21		;/
    b3ea:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
    b3ec:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
    b3ee:	39 f4       	brne	.+14     	; 0xb3fe <xprintf+0x84>
	ldi	r20, -10	;
    b3f0:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
    b3f2:	7e f0       	brts	.+30     	; 0xb412 <xprintf+0x98>
	sbrs	r23, 7		;
    b3f4:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
    b3f6:	0d c0       	rjmp	.+26     	; 0xb412 <xprintf+0x98>
	ldi	r24, -1		;
    b3f8:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
    b3fa:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
    b3fc:	0a c0       	rjmp	.+20     	; 0xb412 <xprintf+0x98>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
    b3fe:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
    b400:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
    b402:	39 f0       	breq	.+14     	; 0xb412 <xprintf+0x98>
	cpi	r21, 'X'	;Is type hexdecimal?
    b404:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
    b406:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
    b408:	21 f0       	breq	.+8      	; 0xb412 <xprintf+0x98>
	cpi	r21, 'b'	;Is type binary?
    b40a:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
    b40c:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
    b40e:	09 f0       	breq	.+2      	; 0xb412 <xprintf+0x98>
	rjmp	90b		;abort
    b410:	c2 cf       	rjmp	.-124    	; 0xb396 <xprintf+0x1c>
40:	push	ZH		;Output the value
    b412:	ff 93       	push	r31
	push	ZL		;
    b414:	ef 93       	push	r30
	rcall	xitoa		;
    b416:	76 df       	rcall	.-276    	; 0xb304 <xitoa>
42:	pop	ZL		;
    b418:	ef 91       	pop	r30
	pop	ZH		;
    b41a:	ff 91       	pop	r31
	rjmp	0b		;/
    b41c:	b5 cf       	rjmp	.-150    	; 0xb388 <xprintf+0xe>

50:	push	ZH		;Put a string on the RAM
    b41e:	ff 93       	push	r31
	push	ZL
    b420:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
    b422:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
    b424:	81 91       	ld	r24, Z+
	cpi	r24, 0
    b426:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
    b428:	b9 f3       	breq	.-18     	; 0xb418 <xprintf+0x9e>
	rcall	xputc
    b42a:	56 df       	rcall	.-340    	; 0xb2d8 <xputc>
	rjmp	51b
    b42c:	fb cf       	rjmp	.-10     	; 0xb424 <xprintf+0xaa>

60:	push	ZH		;Put a string on the ROM
    b42e:	ff 93       	push	r31
	push	ZL
    b430:	ef 93       	push	r30
	rcall	xputs
    b432:	61 df       	rcall	.-318    	; 0xb2f6 <xputs>
	rjmp	42b
    b434:	f1 cf       	rjmp	.-30     	; 0xb418 <xprintf+0x9e>

0000b436 <xatoi>:

#ifdef USE_XATOI
.global xatoi
.func xatoi
xatoi:
	_MOVW	r1, r0, r23, r22
    b436:	0b 01       	movw	r0, r22
	_MOVW	XH, XL, r25, r24
    b438:	dc 01       	movw	r26, r24
	ld	ZL, X+
    b43a:	ed 91       	ld	r30, X+
	ld	ZH, X+
    b43c:	fd 91       	ld	r31, X+
	clr	r18		;r21:r18 = 0;
    b43e:	22 27       	eor	r18, r18
	clr	r19		;
    b440:	33 27       	eor	r19, r19
	clr	r20		;
    b442:	44 27       	eor	r20, r20
	clr	r21		;/
    b444:	55 27       	eor	r21, r21
	clt			;T = 0;
    b446:	e8 94       	clt

	ldi	r25, 10		;r25 = 10;
    b448:	9a e0       	ldi	r25, 0x0A	; 10
	rjmp	41f		;/
    b44a:	01 c0       	rjmp	.+2      	; 0xb44e <xatoi+0x18>
40:	adiw	ZL, 1		;Z++;
    b44c:	31 96       	adiw	r30, 0x01	; 1
41:	ld	r22, Z		;r22 = *Z;
    b44e:	60 81       	ld	r22, Z
	cpi	r22, ' '	;if(r22 == ' ') continue
    b450:	60 32       	cpi	r22, 0x20	; 32
	breq	40b		;/
    b452:	e1 f3       	breq	.-8      	; 0xb44c <xatoi+0x16>
	brcs	70f		;if(r22 < ' ') error;
    b454:	a8 f1       	brcs	.+106    	; 0xb4c0 <xatoi+0x8a>
	cpi	r22, '-'	;if(r22 == '-') {
    b456:	6d 32       	cpi	r22, 0x2D	; 45
	brne	42f		; T = 1;
    b458:	11 f4       	brne	.+4      	; 0xb45e <xatoi+0x28>
	set			; continue;
    b45a:	68 94       	set
	rjmp	40b		;}
    b45c:	f7 cf       	rjmp	.-18     	; 0xb44c <xatoi+0x16>
42:	cpi	r22, '9'+1	;if(r22 > '9') error;
    b45e:	6a 33       	cpi	r22, 0x3A	; 58
	brcc	70f		;/
    b460:	78 f5       	brcc	.+94     	; 0xb4c0 <xatoi+0x8a>
	cpi	r22, '0'	;if(r22 < '0') error;
    b462:	60 33       	cpi	r22, 0x30	; 48
	brcs	70f		;/
    b464:	68 f1       	brcs	.+90     	; 0xb4c0 <xatoi+0x8a>
	brne	51f		;if(r22 > '0') cv_start;
    b466:	71 f4       	brne	.+28     	; 0xb484 <xatoi+0x4e>
	ldi	r25, 8		;r25 = 8;
    b468:	98 e0       	ldi	r25, 0x08	; 8
	adiw	ZL, 1		;r22 = *(++Z);
    b46a:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;/
    b46c:	60 81       	ld	r22, Z
	cpi	r22, ' '+1	;if(r22 <= ' ') exit;
    b46e:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    b470:	48 f1       	brcs	.+82     	; 0xb4c4 <xatoi+0x8e>
	cpi	r22, 'b'	;if(r22 == 'b') {
    b472:	62 36       	cpi	r22, 0x62	; 98
	brne	43f		; r25 = 2;
    b474:	11 f4       	brne	.+4      	; 0xb47a <xatoi+0x44>
	ldi	r25, 2		; cv_start;
    b476:	92 e0       	ldi	r25, 0x02	; 2
	rjmp	50f		;}
    b478:	03 c0       	rjmp	.+6      	; 0xb480 <xatoi+0x4a>
43:	cpi	r22, 'x'	;if(r22 != 'x') error;
    b47a:	68 37       	cpi	r22, 0x78	; 120
	brne	51f		;/
    b47c:	19 f4       	brne	.+6      	; 0xb484 <xatoi+0x4e>
	ldi	r25, 16		;r25 = 16;
    b47e:	90 e1       	ldi	r25, 0x10	; 16

50:	adiw	ZL, 1		;Z++;
    b480:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;r22 = *Z;
    b482:	60 81       	ld	r22, Z
51:	cpi	r22, ' '+1	;if(r22 <= ' ') break;
    b484:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    b486:	f0 f0       	brcs	.+60     	; 0xb4c4 <xatoi+0x8e>
	cpi	r22, 'a'	;if(r22 >= 'a') r22 =- 0x20;
    b488:	61 36       	cpi	r22, 0x61	; 97
	brcs	52f		;
    b48a:	08 f0       	brcs	.+2      	; 0xb48e <xatoi+0x58>
	subi	r22, 0x20	;/
    b48c:	60 52       	subi	r22, 0x20	; 32
52:	subi	r22, '0'	;if((r22 -= '0') < 0) error;
    b48e:	60 53       	subi	r22, 0x30	; 48
	brcs	70f		;/
    b490:	b8 f0       	brcs	.+46     	; 0xb4c0 <xatoi+0x8a>
	cpi	r22, 10		;if(r22 >= 10) {
    b492:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	53f		; r22 -= 7;
    b494:	18 f0       	brcs	.+6      	; 0xb49c <xatoi+0x66>
	subi	r22, 7		; if(r22 < 10) 
    b496:	67 50       	subi	r22, 0x07	; 7
	cpi	r22, 10		;
    b498:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	70f		;}
    b49a:	90 f0       	brcs	.+36     	; 0xb4c0 <xatoi+0x8a>
53:	cp	r22, r25	;if(r22 >= r25) error;
    b49c:	69 17       	cp	r22, r25
	brcc	70f		;/
    b49e:	80 f4       	brcc	.+32     	; 0xb4c0 <xatoi+0x8a>
60:	ldi	r24, 33		;r21:r18 *= r25;
    b4a0:	81 e2       	ldi	r24, 0x21	; 33
	sub	r23, r23	;
    b4a2:	77 1b       	sub	r23, r23
61:	brcc	62f		;
    b4a4:	08 f4       	brcc	.+2      	; 0xb4a8 <xatoi+0x72>
	add	r23, r25	;
    b4a6:	79 0f       	add	r23, r25
62:	lsr	r23		;
    b4a8:	76 95       	lsr	r23
	ror	r21		;
    b4aa:	57 95       	ror	r21
	ror	r20		;
    b4ac:	47 95       	ror	r20
	ror	r19		;
    b4ae:	37 95       	ror	r19
	ror	r18		;
    b4b0:	27 95       	ror	r18
	dec	r24		;
    b4b2:	8a 95       	dec	r24
	brne	61b		;/
    b4b4:	b9 f7       	brne	.-18     	; 0xb4a4 <xatoi+0x6e>
	add	r18, r22	;r21:r18 += r22;
    b4b6:	26 0f       	add	r18, r22
	adc	r19, r24	;
    b4b8:	38 1f       	adc	r19, r24
	adc	r20, r24	;
    b4ba:	48 1f       	adc	r20, r24
	adc	r21, r24	;/
    b4bc:	58 1f       	adc	r21, r24
	rjmp	50b		;repeat
    b4be:	e0 cf       	rjmp	.-64     	; 0xb480 <xatoi+0x4a>

70:	ldi	r24, 0
    b4c0:	80 e0       	ldi	r24, 0x00	; 0
	rjmp	81f
    b4c2:	01 c0       	rjmp	.+2      	; 0xb4c6 <xatoi+0x90>
80:	ldi	r24, 1
    b4c4:	81 e0       	ldi	r24, 0x01	; 1
81:	brtc	82f
    b4c6:	4e f4       	brtc	.+18     	; 0xb4da <xatoi+0xa4>
	clr	r22
    b4c8:	66 27       	eor	r22, r22
	com	r18
    b4ca:	20 95       	com	r18
	com	r19
    b4cc:	30 95       	com	r19
	com	r20
    b4ce:	40 95       	com	r20
	com	r21
    b4d0:	50 95       	com	r21
	adc	r18, r22
    b4d2:	26 1f       	adc	r18, r22
	adc	r19, r22
    b4d4:	36 1f       	adc	r19, r22
	adc	r20, r22
    b4d6:	46 1f       	adc	r20, r22
	adc	r21, r22
    b4d8:	56 1f       	adc	r21, r22
82:	st	-X, ZH
    b4da:	fe 93       	st	-X, r31
	st	-X, ZL
    b4dc:	ee 93       	st	-X, r30
	_MOVW	XH, XL, r1, r0
    b4de:	d0 01       	movw	r26, r0
	st	X+, r18
    b4e0:	2d 93       	st	X+, r18
	st	X+, r19
    b4e2:	3d 93       	st	X+, r19
	st	X+, r20
    b4e4:	4d 93       	st	X+, r20
	st	X+, r21
    b4e6:	5d 93       	st	X+, r21
	clr	r1
    b4e8:	11 24       	eor	r1, r1
	ret
    b4ea:	08 95       	ret

0000b4ec <__mulsi3>:
    b4ec:	62 9f       	mul	r22, r18
    b4ee:	d0 01       	movw	r26, r0
    b4f0:	73 9f       	mul	r23, r19
    b4f2:	f0 01       	movw	r30, r0
    b4f4:	82 9f       	mul	r24, r18
    b4f6:	e0 0d       	add	r30, r0
    b4f8:	f1 1d       	adc	r31, r1
    b4fa:	64 9f       	mul	r22, r20
    b4fc:	e0 0d       	add	r30, r0
    b4fe:	f1 1d       	adc	r31, r1
    b500:	92 9f       	mul	r25, r18
    b502:	f0 0d       	add	r31, r0
    b504:	83 9f       	mul	r24, r19
    b506:	f0 0d       	add	r31, r0
    b508:	74 9f       	mul	r23, r20
    b50a:	f0 0d       	add	r31, r0
    b50c:	65 9f       	mul	r22, r21
    b50e:	f0 0d       	add	r31, r0
    b510:	99 27       	eor	r25, r25
    b512:	72 9f       	mul	r23, r18
    b514:	b0 0d       	add	r27, r0
    b516:	e1 1d       	adc	r30, r1
    b518:	f9 1f       	adc	r31, r25
    b51a:	63 9f       	mul	r22, r19
    b51c:	b0 0d       	add	r27, r0
    b51e:	e1 1d       	adc	r30, r1
    b520:	f9 1f       	adc	r31, r25
    b522:	bd 01       	movw	r22, r26
    b524:	cf 01       	movw	r24, r30
    b526:	11 24       	eor	r1, r1
    b528:	08 95       	ret

0000b52a <__udivmodhi4>:
    b52a:	aa 1b       	sub	r26, r26
    b52c:	bb 1b       	sub	r27, r27
    b52e:	51 e1       	ldi	r21, 0x11	; 17
    b530:	07 c0       	rjmp	.+14     	; 0xb540 <__udivmodhi4_ep>

0000b532 <__udivmodhi4_loop>:
    b532:	aa 1f       	adc	r26, r26
    b534:	bb 1f       	adc	r27, r27
    b536:	a6 17       	cp	r26, r22
    b538:	b7 07       	cpc	r27, r23
    b53a:	10 f0       	brcs	.+4      	; 0xb540 <__udivmodhi4_ep>
    b53c:	a6 1b       	sub	r26, r22
    b53e:	b7 0b       	sbc	r27, r23

0000b540 <__udivmodhi4_ep>:
    b540:	88 1f       	adc	r24, r24
    b542:	99 1f       	adc	r25, r25
    b544:	5a 95       	dec	r21
    b546:	a9 f7       	brne	.-22     	; 0xb532 <__udivmodhi4_loop>
    b548:	80 95       	com	r24
    b54a:	90 95       	com	r25
    b54c:	bc 01       	movw	r22, r24
    b54e:	cd 01       	movw	r24, r26
    b550:	08 95       	ret

0000b552 <__divmodhi4>:
    b552:	97 fb       	bst	r25, 7
    b554:	09 2e       	mov	r0, r25
    b556:	07 26       	eor	r0, r23
    b558:	0a d0       	rcall	.+20     	; 0xb56e <__divmodhi4_neg1>
    b55a:	77 fd       	sbrc	r23, 7
    b55c:	04 d0       	rcall	.+8      	; 0xb566 <__divmodhi4_neg2>
    b55e:	e5 df       	rcall	.-54     	; 0xb52a <__udivmodhi4>
    b560:	06 d0       	rcall	.+12     	; 0xb56e <__divmodhi4_neg1>
    b562:	00 20       	and	r0, r0
    b564:	1a f4       	brpl	.+6      	; 0xb56c <__divmodhi4_exit>

0000b566 <__divmodhi4_neg2>:
    b566:	70 95       	com	r23
    b568:	61 95       	neg	r22
    b56a:	7f 4f       	sbci	r23, 0xFF	; 255

0000b56c <__divmodhi4_exit>:
    b56c:	08 95       	ret

0000b56e <__divmodhi4_neg1>:
    b56e:	f6 f7       	brtc	.-4      	; 0xb56c <__divmodhi4_exit>
    b570:	90 95       	com	r25
    b572:	81 95       	neg	r24
    b574:	9f 4f       	sbci	r25, 0xFF	; 255
    b576:	08 95       	ret

0000b578 <__udivmodsi4>:
    b578:	a1 e2       	ldi	r26, 0x21	; 33
    b57a:	1a 2e       	mov	r1, r26
    b57c:	aa 1b       	sub	r26, r26
    b57e:	bb 1b       	sub	r27, r27
    b580:	fd 01       	movw	r30, r26
    b582:	0d c0       	rjmp	.+26     	; 0xb59e <__udivmodsi4_ep>

0000b584 <__udivmodsi4_loop>:
    b584:	aa 1f       	adc	r26, r26
    b586:	bb 1f       	adc	r27, r27
    b588:	ee 1f       	adc	r30, r30
    b58a:	ff 1f       	adc	r31, r31
    b58c:	a2 17       	cp	r26, r18
    b58e:	b3 07       	cpc	r27, r19
    b590:	e4 07       	cpc	r30, r20
    b592:	f5 07       	cpc	r31, r21
    b594:	20 f0       	brcs	.+8      	; 0xb59e <__udivmodsi4_ep>
    b596:	a2 1b       	sub	r26, r18
    b598:	b3 0b       	sbc	r27, r19
    b59a:	e4 0b       	sbc	r30, r20
    b59c:	f5 0b       	sbc	r31, r21

0000b59e <__udivmodsi4_ep>:
    b59e:	66 1f       	adc	r22, r22
    b5a0:	77 1f       	adc	r23, r23
    b5a2:	88 1f       	adc	r24, r24
    b5a4:	99 1f       	adc	r25, r25
    b5a6:	1a 94       	dec	r1
    b5a8:	69 f7       	brne	.-38     	; 0xb584 <__udivmodsi4_loop>
    b5aa:	60 95       	com	r22
    b5ac:	70 95       	com	r23
    b5ae:	80 95       	com	r24
    b5b0:	90 95       	com	r25
    b5b2:	9b 01       	movw	r18, r22
    b5b4:	ac 01       	movw	r20, r24
    b5b6:	bd 01       	movw	r22, r26
    b5b8:	cf 01       	movw	r24, r30
    b5ba:	08 95       	ret

0000b5bc <__divmodsi4>:
    b5bc:	97 fb       	bst	r25, 7
    b5be:	09 2e       	mov	r0, r25
    b5c0:	05 26       	eor	r0, r21
    b5c2:	0e d0       	rcall	.+28     	; 0xb5e0 <__divmodsi4_neg1>
    b5c4:	57 fd       	sbrc	r21, 7
    b5c6:	04 d0       	rcall	.+8      	; 0xb5d0 <__divmodsi4_neg2>
    b5c8:	d7 df       	rcall	.-82     	; 0xb578 <__udivmodsi4>
    b5ca:	0a d0       	rcall	.+20     	; 0xb5e0 <__divmodsi4_neg1>
    b5cc:	00 1c       	adc	r0, r0
    b5ce:	38 f4       	brcc	.+14     	; 0xb5de <__divmodsi4_exit>

0000b5d0 <__divmodsi4_neg2>:
    b5d0:	50 95       	com	r21
    b5d2:	40 95       	com	r20
    b5d4:	30 95       	com	r19
    b5d6:	21 95       	neg	r18
    b5d8:	3f 4f       	sbci	r19, 0xFF	; 255
    b5da:	4f 4f       	sbci	r20, 0xFF	; 255
    b5dc:	5f 4f       	sbci	r21, 0xFF	; 255

0000b5de <__divmodsi4_exit>:
    b5de:	08 95       	ret

0000b5e0 <__divmodsi4_neg1>:
    b5e0:	f6 f7       	brtc	.-4      	; 0xb5de <__divmodsi4_exit>
    b5e2:	90 95       	com	r25
    b5e4:	80 95       	com	r24
    b5e6:	70 95       	com	r23
    b5e8:	61 95       	neg	r22
    b5ea:	7f 4f       	sbci	r23, 0xFF	; 255
    b5ec:	8f 4f       	sbci	r24, 0xFF	; 255
    b5ee:	9f 4f       	sbci	r25, 0xFF	; 255
    b5f0:	08 95       	ret

0000b5f2 <__prologue_saves__>:
    b5f2:	2f 92       	push	r2
    b5f4:	3f 92       	push	r3
    b5f6:	4f 92       	push	r4
    b5f8:	5f 92       	push	r5
    b5fa:	6f 92       	push	r6
    b5fc:	7f 92       	push	r7
    b5fe:	8f 92       	push	r8
    b600:	9f 92       	push	r9
    b602:	af 92       	push	r10
    b604:	bf 92       	push	r11
    b606:	cf 92       	push	r12
    b608:	df 92       	push	r13
    b60a:	ef 92       	push	r14
    b60c:	ff 92       	push	r15
    b60e:	0f 93       	push	r16
    b610:	1f 93       	push	r17
    b612:	cf 93       	push	r28
    b614:	df 93       	push	r29
    b616:	cd b7       	in	r28, 0x3d	; 61
    b618:	de b7       	in	r29, 0x3e	; 62
    b61a:	ca 1b       	sub	r28, r26
    b61c:	db 0b       	sbc	r29, r27
    b61e:	0f b6       	in	r0, 0x3f	; 63
    b620:	f8 94       	cli
    b622:	de bf       	out	0x3e, r29	; 62
    b624:	0f be       	out	0x3f, r0	; 63
    b626:	cd bf       	out	0x3d, r28	; 61
    b628:	19 94       	eijmp

0000b62a <__epilogue_restores__>:
    b62a:	2a 88       	ldd	r2, Y+18	; 0x12
    b62c:	39 88       	ldd	r3, Y+17	; 0x11
    b62e:	48 88       	ldd	r4, Y+16	; 0x10
    b630:	5f 84       	ldd	r5, Y+15	; 0x0f
    b632:	6e 84       	ldd	r6, Y+14	; 0x0e
    b634:	7d 84       	ldd	r7, Y+13	; 0x0d
    b636:	8c 84       	ldd	r8, Y+12	; 0x0c
    b638:	9b 84       	ldd	r9, Y+11	; 0x0b
    b63a:	aa 84       	ldd	r10, Y+10	; 0x0a
    b63c:	b9 84       	ldd	r11, Y+9	; 0x09
    b63e:	c8 84       	ldd	r12, Y+8	; 0x08
    b640:	df 80       	ldd	r13, Y+7	; 0x07
    b642:	ee 80       	ldd	r14, Y+6	; 0x06
    b644:	fd 80       	ldd	r15, Y+5	; 0x05
    b646:	0c 81       	ldd	r16, Y+4	; 0x04
    b648:	1b 81       	ldd	r17, Y+3	; 0x03
    b64a:	aa 81       	ldd	r26, Y+2	; 0x02
    b64c:	b9 81       	ldd	r27, Y+1	; 0x01
    b64e:	ce 0f       	add	r28, r30
    b650:	d1 1d       	adc	r29, r1
    b652:	0f b6       	in	r0, 0x3f	; 63
    b654:	f8 94       	cli
    b656:	de bf       	out	0x3e, r29	; 62
    b658:	0f be       	out	0x3f, r0	; 63
    b65a:	cd bf       	out	0x3d, r28	; 61
    b65c:	ed 01       	movw	r28, r26
    b65e:	08 95       	ret

0000b660 <__tablejump2__>:
    b660:	ee 0f       	add	r30, r30
    b662:	ff 1f       	adc	r31, r31

0000b664 <__tablejump__>:
    b664:	05 90       	lpm	r0, Z+
    b666:	f4 91       	lpm	r31, Z+
    b668:	e0 2d       	mov	r30, r0
    b66a:	19 94       	eijmp

0000b66c <malloc>:
    b66c:	cf 93       	push	r28
    b66e:	df 93       	push	r29
    b670:	bc 01       	movw	r22, r24
    b672:	82 30       	cpi	r24, 0x02	; 2
    b674:	91 05       	cpc	r25, r1
    b676:	10 f4       	brcc	.+4      	; 0xb67c <malloc+0x10>
    b678:	62 e0       	ldi	r22, 0x02	; 2
    b67a:	70 e0       	ldi	r23, 0x00	; 0
    b67c:	a0 91 17 2c 	lds	r26, 0x2C17
    b680:	b0 91 18 2c 	lds	r27, 0x2C18
    b684:	ed 01       	movw	r28, r26
    b686:	e0 e0       	ldi	r30, 0x00	; 0
    b688:	f0 e0       	ldi	r31, 0x00	; 0
    b68a:	40 e0       	ldi	r20, 0x00	; 0
    b68c:	50 e0       	ldi	r21, 0x00	; 0
    b68e:	21 c0       	rjmp	.+66     	; 0xb6d2 <malloc+0x66>
    b690:	88 81       	ld	r24, Y
    b692:	99 81       	ldd	r25, Y+1	; 0x01
    b694:	86 17       	cp	r24, r22
    b696:	97 07       	cpc	r25, r23
    b698:	69 f4       	brne	.+26     	; 0xb6b4 <malloc+0x48>
    b69a:	8a 81       	ldd	r24, Y+2	; 0x02
    b69c:	9b 81       	ldd	r25, Y+3	; 0x03
    b69e:	30 97       	sbiw	r30, 0x00	; 0
    b6a0:	19 f0       	breq	.+6      	; 0xb6a8 <malloc+0x3c>
    b6a2:	82 83       	std	Z+2, r24	; 0x02
    b6a4:	93 83       	std	Z+3, r25	; 0x03
    b6a6:	04 c0       	rjmp	.+8      	; 0xb6b0 <malloc+0x44>
    b6a8:	80 93 17 2c 	sts	0x2C17, r24
    b6ac:	90 93 18 2c 	sts	0x2C18, r25
    b6b0:	fe 01       	movw	r30, r28
    b6b2:	34 c0       	rjmp	.+104    	; 0xb71c <malloc+0xb0>
    b6b4:	68 17       	cp	r22, r24
    b6b6:	79 07       	cpc	r23, r25
    b6b8:	38 f4       	brcc	.+14     	; 0xb6c8 <malloc+0x5c>
    b6ba:	41 15       	cp	r20, r1
    b6bc:	51 05       	cpc	r21, r1
    b6be:	19 f0       	breq	.+6      	; 0xb6c6 <malloc+0x5a>
    b6c0:	84 17       	cp	r24, r20
    b6c2:	95 07       	cpc	r25, r21
    b6c4:	08 f4       	brcc	.+2      	; 0xb6c8 <malloc+0x5c>
    b6c6:	ac 01       	movw	r20, r24
    b6c8:	fe 01       	movw	r30, r28
    b6ca:	8a 81       	ldd	r24, Y+2	; 0x02
    b6cc:	9b 81       	ldd	r25, Y+3	; 0x03
    b6ce:	9c 01       	movw	r18, r24
    b6d0:	e9 01       	movw	r28, r18
    b6d2:	20 97       	sbiw	r28, 0x00	; 0
    b6d4:	e9 f6       	brne	.-70     	; 0xb690 <malloc+0x24>
    b6d6:	41 15       	cp	r20, r1
    b6d8:	51 05       	cpc	r21, r1
    b6da:	a9 f1       	breq	.+106    	; 0xb746 <malloc+0xda>
    b6dc:	ca 01       	movw	r24, r20
    b6de:	86 1b       	sub	r24, r22
    b6e0:	97 0b       	sbc	r25, r23
    b6e2:	04 97       	sbiw	r24, 0x04	; 4
    b6e4:	08 f4       	brcc	.+2      	; 0xb6e8 <malloc+0x7c>
    b6e6:	ba 01       	movw	r22, r20
    b6e8:	e0 e0       	ldi	r30, 0x00	; 0
    b6ea:	f0 e0       	ldi	r31, 0x00	; 0
    b6ec:	2a c0       	rjmp	.+84     	; 0xb742 <malloc+0xd6>
    b6ee:	8d 91       	ld	r24, X+
    b6f0:	9c 91       	ld	r25, X
    b6f2:	11 97       	sbiw	r26, 0x01	; 1
    b6f4:	84 17       	cp	r24, r20
    b6f6:	95 07       	cpc	r25, r21
    b6f8:	f9 f4       	brne	.+62     	; 0xb738 <malloc+0xcc>
    b6fa:	64 17       	cp	r22, r20
    b6fc:	75 07       	cpc	r23, r21
    b6fe:	81 f4       	brne	.+32     	; 0xb720 <malloc+0xb4>
    b700:	12 96       	adiw	r26, 0x02	; 2
    b702:	8d 91       	ld	r24, X+
    b704:	9c 91       	ld	r25, X
    b706:	13 97       	sbiw	r26, 0x03	; 3
    b708:	30 97       	sbiw	r30, 0x00	; 0
    b70a:	19 f0       	breq	.+6      	; 0xb712 <malloc+0xa6>
    b70c:	82 83       	std	Z+2, r24	; 0x02
    b70e:	93 83       	std	Z+3, r25	; 0x03
    b710:	04 c0       	rjmp	.+8      	; 0xb71a <malloc+0xae>
    b712:	80 93 17 2c 	sts	0x2C17, r24
    b716:	90 93 18 2c 	sts	0x2C18, r25
    b71a:	fd 01       	movw	r30, r26
    b71c:	32 96       	adiw	r30, 0x02	; 2
    b71e:	4f c0       	rjmp	.+158    	; 0xb7be <malloc+0x152>
    b720:	ca 01       	movw	r24, r20
    b722:	86 1b       	sub	r24, r22
    b724:	97 0b       	sbc	r25, r23
    b726:	fd 01       	movw	r30, r26
    b728:	e8 0f       	add	r30, r24
    b72a:	f9 1f       	adc	r31, r25
    b72c:	61 93       	st	Z+, r22
    b72e:	71 93       	st	Z+, r23
    b730:	02 97       	sbiw	r24, 0x02	; 2
    b732:	8d 93       	st	X+, r24
    b734:	9c 93       	st	X, r25
    b736:	43 c0       	rjmp	.+134    	; 0xb7be <malloc+0x152>
    b738:	fd 01       	movw	r30, r26
    b73a:	82 81       	ldd	r24, Z+2	; 0x02
    b73c:	93 81       	ldd	r25, Z+3	; 0x03
    b73e:	9c 01       	movw	r18, r24
    b740:	d9 01       	movw	r26, r18
    b742:	10 97       	sbiw	r26, 0x00	; 0
    b744:	a1 f6       	brne	.-88     	; 0xb6ee <malloc+0x82>
    b746:	80 91 15 2c 	lds	r24, 0x2C15
    b74a:	90 91 16 2c 	lds	r25, 0x2C16
    b74e:	89 2b       	or	r24, r25
    b750:	41 f4       	brne	.+16     	; 0xb762 <malloc+0xf6>
    b752:	80 91 e3 24 	lds	r24, 0x24E3
    b756:	90 91 e4 24 	lds	r25, 0x24E4
    b75a:	80 93 15 2c 	sts	0x2C15, r24
    b75e:	90 93 16 2c 	sts	0x2C16, r25
    b762:	40 91 e5 24 	lds	r20, 0x24E5
    b766:	50 91 e6 24 	lds	r21, 0x24E6
    b76a:	41 15       	cp	r20, r1
    b76c:	51 05       	cpc	r21, r1
    b76e:	41 f4       	brne	.+16     	; 0xb780 <malloc+0x114>
    b770:	4d b7       	in	r20, 0x3d	; 61
    b772:	5e b7       	in	r21, 0x3e	; 62
    b774:	80 91 e1 24 	lds	r24, 0x24E1
    b778:	90 91 e2 24 	lds	r25, 0x24E2
    b77c:	48 1b       	sub	r20, r24
    b77e:	59 0b       	sbc	r21, r25
    b780:	20 91 15 2c 	lds	r18, 0x2C15
    b784:	30 91 16 2c 	lds	r19, 0x2C16
    b788:	24 17       	cp	r18, r20
    b78a:	35 07       	cpc	r19, r21
    b78c:	b0 f4       	brcc	.+44     	; 0xb7ba <malloc+0x14e>
    b78e:	ca 01       	movw	r24, r20
    b790:	82 1b       	sub	r24, r18
    b792:	93 0b       	sbc	r25, r19
    b794:	86 17       	cp	r24, r22
    b796:	97 07       	cpc	r25, r23
    b798:	80 f0       	brcs	.+32     	; 0xb7ba <malloc+0x14e>
    b79a:	ab 01       	movw	r20, r22
    b79c:	4e 5f       	subi	r20, 0xFE	; 254
    b79e:	5f 4f       	sbci	r21, 0xFF	; 255
    b7a0:	84 17       	cp	r24, r20
    b7a2:	95 07       	cpc	r25, r21
    b7a4:	50 f0       	brcs	.+20     	; 0xb7ba <malloc+0x14e>
    b7a6:	42 0f       	add	r20, r18
    b7a8:	53 1f       	adc	r21, r19
    b7aa:	40 93 15 2c 	sts	0x2C15, r20
    b7ae:	50 93 16 2c 	sts	0x2C16, r21
    b7b2:	f9 01       	movw	r30, r18
    b7b4:	61 93       	st	Z+, r22
    b7b6:	71 93       	st	Z+, r23
    b7b8:	02 c0       	rjmp	.+4      	; 0xb7be <malloc+0x152>
    b7ba:	e0 e0       	ldi	r30, 0x00	; 0
    b7bc:	f0 e0       	ldi	r31, 0x00	; 0
    b7be:	cf 01       	movw	r24, r30
    b7c0:	df 91       	pop	r29
    b7c2:	cf 91       	pop	r28
    b7c4:	08 95       	ret

0000b7c6 <free>:
    b7c6:	cf 93       	push	r28
    b7c8:	df 93       	push	r29
    b7ca:	00 97       	sbiw	r24, 0x00	; 0
    b7cc:	09 f4       	brne	.+2      	; 0xb7d0 <free+0xa>
    b7ce:	50 c0       	rjmp	.+160    	; 0xb870 <free+0xaa>
    b7d0:	ec 01       	movw	r28, r24
    b7d2:	22 97       	sbiw	r28, 0x02	; 2
    b7d4:	1a 82       	std	Y+2, r1	; 0x02
    b7d6:	1b 82       	std	Y+3, r1	; 0x03
    b7d8:	a0 91 17 2c 	lds	r26, 0x2C17
    b7dc:	b0 91 18 2c 	lds	r27, 0x2C18
    b7e0:	10 97       	sbiw	r26, 0x00	; 0
    b7e2:	09 f1       	breq	.+66     	; 0xb826 <free+0x60>
    b7e4:	40 e0       	ldi	r20, 0x00	; 0
    b7e6:	50 e0       	ldi	r21, 0x00	; 0
    b7e8:	ac 17       	cp	r26, r28
    b7ea:	bd 07       	cpc	r27, r29
    b7ec:	08 f1       	brcs	.+66     	; 0xb830 <free+0x6a>
    b7ee:	aa 83       	std	Y+2, r26	; 0x02
    b7f0:	bb 83       	std	Y+3, r27	; 0x03
    b7f2:	fe 01       	movw	r30, r28
    b7f4:	21 91       	ld	r18, Z+
    b7f6:	31 91       	ld	r19, Z+
    b7f8:	e2 0f       	add	r30, r18
    b7fa:	f3 1f       	adc	r31, r19
    b7fc:	ae 17       	cp	r26, r30
    b7fe:	bf 07       	cpc	r27, r31
    b800:	79 f4       	brne	.+30     	; 0xb820 <free+0x5a>
    b802:	8d 91       	ld	r24, X+
    b804:	9c 91       	ld	r25, X
    b806:	11 97       	sbiw	r26, 0x01	; 1
    b808:	28 0f       	add	r18, r24
    b80a:	39 1f       	adc	r19, r25
    b80c:	2e 5f       	subi	r18, 0xFE	; 254
    b80e:	3f 4f       	sbci	r19, 0xFF	; 255
    b810:	28 83       	st	Y, r18
    b812:	39 83       	std	Y+1, r19	; 0x01
    b814:	12 96       	adiw	r26, 0x02	; 2
    b816:	8d 91       	ld	r24, X+
    b818:	9c 91       	ld	r25, X
    b81a:	13 97       	sbiw	r26, 0x03	; 3
    b81c:	8a 83       	std	Y+2, r24	; 0x02
    b81e:	9b 83       	std	Y+3, r25	; 0x03
    b820:	41 15       	cp	r20, r1
    b822:	51 05       	cpc	r21, r1
    b824:	71 f4       	brne	.+28     	; 0xb842 <free+0x7c>
    b826:	c0 93 17 2c 	sts	0x2C17, r28
    b82a:	d0 93 18 2c 	sts	0x2C18, r29
    b82e:	20 c0       	rjmp	.+64     	; 0xb870 <free+0xaa>
    b830:	12 96       	adiw	r26, 0x02	; 2
    b832:	8d 91       	ld	r24, X+
    b834:	9c 91       	ld	r25, X
    b836:	13 97       	sbiw	r26, 0x03	; 3
    b838:	ad 01       	movw	r20, r26
    b83a:	00 97       	sbiw	r24, 0x00	; 0
    b83c:	11 f0       	breq	.+4      	; 0xb842 <free+0x7c>
    b83e:	dc 01       	movw	r26, r24
    b840:	d3 cf       	rjmp	.-90     	; 0xb7e8 <free+0x22>
    b842:	fa 01       	movw	r30, r20
    b844:	c2 83       	std	Z+2, r28	; 0x02
    b846:	d3 83       	std	Z+3, r29	; 0x03
    b848:	21 91       	ld	r18, Z+
    b84a:	31 91       	ld	r19, Z+
    b84c:	e2 0f       	add	r30, r18
    b84e:	f3 1f       	adc	r31, r19
    b850:	ce 17       	cp	r28, r30
    b852:	df 07       	cpc	r29, r31
    b854:	69 f4       	brne	.+26     	; 0xb870 <free+0xaa>
    b856:	88 81       	ld	r24, Y
    b858:	99 81       	ldd	r25, Y+1	; 0x01
    b85a:	28 0f       	add	r18, r24
    b85c:	39 1f       	adc	r19, r25
    b85e:	2e 5f       	subi	r18, 0xFE	; 254
    b860:	3f 4f       	sbci	r19, 0xFF	; 255
    b862:	fa 01       	movw	r30, r20
    b864:	20 83       	st	Z, r18
    b866:	31 83       	std	Z+1, r19	; 0x01
    b868:	8a 81       	ldd	r24, Y+2	; 0x02
    b86a:	9b 81       	ldd	r25, Y+3	; 0x03
    b86c:	82 83       	std	Z+2, r24	; 0x02
    b86e:	93 83       	std	Z+3, r25	; 0x03
    b870:	df 91       	pop	r29
    b872:	cf 91       	pop	r28
    b874:	08 95       	ret

0000b876 <strtoul>:
    b876:	3f 92       	push	r3
    b878:	4f 92       	push	r4
    b87a:	5f 92       	push	r5
    b87c:	6f 92       	push	r6
    b87e:	7f 92       	push	r7
    b880:	8f 92       	push	r8
    b882:	9f 92       	push	r9
    b884:	af 92       	push	r10
    b886:	bf 92       	push	r11
    b888:	cf 92       	push	r12
    b88a:	df 92       	push	r13
    b88c:	ef 92       	push	r14
    b88e:	ff 92       	push	r15
    b890:	0f 93       	push	r16
    b892:	1f 93       	push	r17
    b894:	cf 93       	push	r28
    b896:	df 93       	push	r29
    b898:	ec 01       	movw	r28, r24
    b89a:	2b 01       	movw	r4, r22
    b89c:	6a 01       	movw	r12, r20
    b89e:	61 15       	cp	r22, r1
    b8a0:	71 05       	cpc	r23, r1
    b8a2:	19 f0       	breq	.+6      	; 0xb8aa <strtoul+0x34>
    b8a4:	fb 01       	movw	r30, r22
    b8a6:	80 83       	st	Z, r24
    b8a8:	91 83       	std	Z+1, r25	; 0x01
    b8aa:	c1 14       	cp	r12, r1
    b8ac:	d1 04       	cpc	r13, r1
    b8ae:	49 f0       	breq	.+18     	; 0xb8c2 <strtoul+0x4c>
    b8b0:	c6 01       	movw	r24, r12
    b8b2:	02 97       	sbiw	r24, 0x02	; 2
    b8b4:	83 97       	sbiw	r24, 0x23	; 35
    b8b6:	28 f0       	brcs	.+10     	; 0xb8c2 <strtoul+0x4c>
    b8b8:	20 e0       	ldi	r18, 0x00	; 0
    b8ba:	30 e0       	ldi	r19, 0x00	; 0
    b8bc:	40 e0       	ldi	r20, 0x00	; 0
    b8be:	50 e0       	ldi	r21, 0x00	; 0
    b8c0:	dc c0       	rjmp	.+440    	; 0xba7a <strtoul+0x204>
    b8c2:	a9 90       	ld	r10, Y+
    b8c4:	8a 2d       	mov	r24, r10
    b8c6:	90 e0       	ldi	r25, 0x00	; 0
    b8c8:	0e 94 51 5d 	call	0xbaa2	; 0xbaa2 <isspace>
    b8cc:	89 2b       	or	r24, r25
    b8ce:	c9 f7       	brne	.-14     	; 0xb8c2 <strtoul+0x4c>
    b8d0:	fd e2       	ldi	r31, 0x2D	; 45
    b8d2:	af 16       	cp	r10, r31
    b8d4:	21 f4       	brne	.+8      	; 0xb8de <strtoul+0x68>
    b8d6:	a9 90       	ld	r10, Y+
    b8d8:	33 24       	eor	r3, r3
    b8da:	33 94       	inc	r3
    b8dc:	05 c0       	rjmp	.+10     	; 0xb8e8 <strtoul+0x72>
    b8de:	8b e2       	ldi	r24, 0x2B	; 43
    b8e0:	a8 16       	cp	r10, r24
    b8e2:	09 f4       	brne	.+2      	; 0xb8e6 <strtoul+0x70>
    b8e4:	a9 90       	ld	r10, Y+
    b8e6:	33 24       	eor	r3, r3
    b8e8:	c1 14       	cp	r12, r1
    b8ea:	d1 04       	cpc	r13, r1
    b8ec:	21 f0       	breq	.+8      	; 0xb8f6 <strtoul+0x80>
    b8ee:	e0 e1       	ldi	r30, 0x10	; 16
    b8f0:	ce 16       	cp	r12, r30
    b8f2:	d1 04       	cpc	r13, r1
    b8f4:	11 f5       	brne	.+68     	; 0xb93a <strtoul+0xc4>
    b8f6:	f0 e3       	ldi	r31, 0x30	; 48
    b8f8:	af 16       	cp	r10, r31
    b8fa:	69 f4       	brne	.+26     	; 0xb916 <strtoul+0xa0>
    b8fc:	88 81       	ld	r24, Y
    b8fe:	88 37       	cpi	r24, 0x78	; 120
    b900:	11 f0       	breq	.+4      	; 0xb906 <strtoul+0x90>
    b902:	88 35       	cpi	r24, 0x58	; 88
    b904:	41 f4       	brne	.+16     	; 0xb916 <strtoul+0xa0>
    b906:	a9 80       	ldd	r10, Y+1	; 0x01
    b908:	22 96       	adiw	r28, 0x02	; 2
    b90a:	82 e0       	ldi	r24, 0x02	; 2
    b90c:	38 2a       	or	r3, r24
    b90e:	20 e1       	ldi	r18, 0x10	; 16
    b910:	c2 2e       	mov	r12, r18
    b912:	d1 2c       	mov	r13, r1
    b914:	12 c0       	rjmp	.+36     	; 0xb93a <strtoul+0xc4>
    b916:	c1 14       	cp	r12, r1
    b918:	d1 04       	cpc	r13, r1
    b91a:	79 f4       	brne	.+30     	; 0xb93a <strtoul+0xc4>
    b91c:	e0 e3       	ldi	r30, 0x30	; 48
    b91e:	ae 16       	cp	r10, r30
    b920:	59 f1       	breq	.+86     	; 0xb978 <strtoul+0x102>
    b922:	99 e9       	ldi	r25, 0x99	; 153
    b924:	e9 2e       	mov	r14, r25
    b926:	99 e9       	ldi	r25, 0x99	; 153
    b928:	f9 2e       	mov	r15, r25
    b92a:	99 e9       	ldi	r25, 0x99	; 153
    b92c:	09 2f       	mov	r16, r25
    b92e:	99 e1       	ldi	r25, 0x19	; 25
    b930:	19 2f       	mov	r17, r25
    b932:	8a e0       	ldi	r24, 0x0A	; 10
    b934:	c8 2e       	mov	r12, r24
    b936:	d1 2c       	mov	r13, r1
    b938:	3a c0       	rjmp	.+116    	; 0xb9ae <strtoul+0x138>
    b93a:	fa e0       	ldi	r31, 0x0A	; 10
    b93c:	cf 16       	cp	r12, r31
    b93e:	d1 04       	cpc	r13, r1
    b940:	91 f0       	breq	.+36     	; 0xb966 <strtoul+0xf0>
    b942:	80 e1       	ldi	r24, 0x10	; 16
    b944:	c8 16       	cp	r12, r24
    b946:	d1 04       	cpc	r13, r1
    b948:	29 f0       	breq	.+10     	; 0xb954 <strtoul+0xde>
    b94a:	e8 e0       	ldi	r30, 0x08	; 8
    b94c:	ce 16       	cp	r12, r30
    b94e:	d1 04       	cpc	r13, r1
    b950:	f9 f4       	brne	.+62     	; 0xb990 <strtoul+0x11a>
    b952:	15 c0       	rjmp	.+42     	; 0xb97e <strtoul+0x108>
    b954:	bf ef       	ldi	r27, 0xFF	; 255
    b956:	eb 2e       	mov	r14, r27
    b958:	bf ef       	ldi	r27, 0xFF	; 255
    b95a:	fb 2e       	mov	r15, r27
    b95c:	bf ef       	ldi	r27, 0xFF	; 255
    b95e:	0b 2f       	mov	r16, r27
    b960:	bf e0       	ldi	r27, 0x0F	; 15
    b962:	1b 2f       	mov	r17, r27
    b964:	24 c0       	rjmp	.+72     	; 0xb9ae <strtoul+0x138>
    b966:	a9 e9       	ldi	r26, 0x99	; 153
    b968:	ea 2e       	mov	r14, r26
    b96a:	a9 e9       	ldi	r26, 0x99	; 153
    b96c:	fa 2e       	mov	r15, r26
    b96e:	a9 e9       	ldi	r26, 0x99	; 153
    b970:	0a 2f       	mov	r16, r26
    b972:	a9 e1       	ldi	r26, 0x19	; 25
    b974:	1a 2f       	mov	r17, r26
    b976:	1b c0       	rjmp	.+54     	; 0xb9ae <strtoul+0x138>
    b978:	f8 e0       	ldi	r31, 0x08	; 8
    b97a:	cf 2e       	mov	r12, r31
    b97c:	d1 2c       	mov	r13, r1
    b97e:	ef ef       	ldi	r30, 0xFF	; 255
    b980:	ee 2e       	mov	r14, r30
    b982:	ef ef       	ldi	r30, 0xFF	; 255
    b984:	fe 2e       	mov	r15, r30
    b986:	ef ef       	ldi	r30, 0xFF	; 255
    b988:	0e 2f       	mov	r16, r30
    b98a:	ef e1       	ldi	r30, 0x1F	; 31
    b98c:	1e 2f       	mov	r17, r30
    b98e:	0f c0       	rjmp	.+30     	; 0xb9ae <strtoul+0x138>
    b990:	96 01       	movw	r18, r12
    b992:	44 27       	eor	r20, r20
    b994:	37 fd       	sbrc	r19, 7
    b996:	40 95       	com	r20
    b998:	54 2f       	mov	r21, r20
    b99a:	6f ef       	ldi	r22, 0xFF	; 255
    b99c:	7f ef       	ldi	r23, 0xFF	; 255
    b99e:	8f ef       	ldi	r24, 0xFF	; 255
    b9a0:	9f ef       	ldi	r25, 0xFF	; 255
    b9a2:	0e 94 bc 5a 	call	0xb578	; 0xb578 <__udivmodsi4>
    b9a6:	c9 01       	movw	r24, r18
    b9a8:	da 01       	movw	r26, r20
    b9aa:	7c 01       	movw	r14, r24
    b9ac:	8d 01       	movw	r16, r26
    b9ae:	20 e0       	ldi	r18, 0x00	; 0
    b9b0:	30 e0       	ldi	r19, 0x00	; 0
    b9b2:	40 e0       	ldi	r20, 0x00	; 0
    b9b4:	50 e0       	ldi	r21, 0x00	; 0
    b9b6:	60 e0       	ldi	r22, 0x00	; 0
    b9b8:	36 01       	movw	r6, r12
    b9ba:	88 24       	eor	r8, r8
    b9bc:	77 fc       	sbrc	r7, 7
    b9be:	80 94       	com	r8
    b9c0:	98 2c       	mov	r9, r8
    b9c2:	70 ed       	ldi	r23, 0xD0	; 208
    b9c4:	b7 2e       	mov	r11, r23
    b9c6:	ba 0c       	add	r11, r10
    b9c8:	f9 e0       	ldi	r31, 0x09	; 9
    b9ca:	fb 15       	cp	r31, r11
    b9cc:	70 f4       	brcc	.+28     	; 0xb9ea <strtoul+0x174>
    b9ce:	8a 2d       	mov	r24, r10
    b9d0:	81 54       	subi	r24, 0x41	; 65
    b9d2:	8a 31       	cpi	r24, 0x1A	; 26
    b9d4:	18 f4       	brcc	.+6      	; 0xb9dc <strtoul+0x166>
    b9d6:	99 ec       	ldi	r25, 0xC9	; 201
    b9d8:	b9 2e       	mov	r11, r25
    b9da:	06 c0       	rjmp	.+12     	; 0xb9e8 <strtoul+0x172>
    b9dc:	8a 2d       	mov	r24, r10
    b9de:	81 56       	subi	r24, 0x61	; 97
    b9e0:	8a 31       	cpi	r24, 0x1A	; 26
    b9e2:	48 f5       	brcc	.+82     	; 0xba36 <strtoul+0x1c0>
    b9e4:	89 ea       	ldi	r24, 0xA9	; 169
    b9e6:	b8 2e       	mov	r11, r24
    b9e8:	ba 0c       	add	r11, r10
    b9ea:	8b 2d       	mov	r24, r11
    b9ec:	90 e0       	ldi	r25, 0x00	; 0
    b9ee:	8c 15       	cp	r24, r12
    b9f0:	9d 05       	cpc	r25, r13
    b9f2:	0c f5       	brge	.+66     	; 0xba36 <strtoul+0x1c0>
    b9f4:	6f 3f       	cpi	r22, 0xFF	; 255
    b9f6:	e9 f0       	breq	.+58     	; 0xba32 <strtoul+0x1bc>
    b9f8:	e2 16       	cp	r14, r18
    b9fa:	f3 06       	cpc	r15, r19
    b9fc:	04 07       	cpc	r16, r20
    b9fe:	15 07       	cpc	r17, r21
    ba00:	b8 f0       	brcs	.+46     	; 0xba30 <strtoul+0x1ba>
    ba02:	ca 01       	movw	r24, r20
    ba04:	b9 01       	movw	r22, r18
    ba06:	a4 01       	movw	r20, r8
    ba08:	93 01       	movw	r18, r6
    ba0a:	0e 94 76 5a 	call	0xb4ec	; 0xb4ec <__mulsi3>
    ba0e:	9b 01       	movw	r18, r22
    ba10:	ac 01       	movw	r20, r24
    ba12:	8b 2d       	mov	r24, r11
    ba14:	90 e0       	ldi	r25, 0x00	; 0
    ba16:	a0 e0       	ldi	r26, 0x00	; 0
    ba18:	b0 e0       	ldi	r27, 0x00	; 0
    ba1a:	28 0f       	add	r18, r24
    ba1c:	39 1f       	adc	r19, r25
    ba1e:	4a 1f       	adc	r20, r26
    ba20:	5b 1f       	adc	r21, r27
    ba22:	28 17       	cp	r18, r24
    ba24:	39 07       	cpc	r19, r25
    ba26:	4a 07       	cpc	r20, r26
    ba28:	5b 07       	cpc	r21, r27
    ba2a:	10 f0       	brcs	.+4      	; 0xba30 <strtoul+0x1ba>
    ba2c:	61 e0       	ldi	r22, 0x01	; 1
    ba2e:	01 c0       	rjmp	.+2      	; 0xba32 <strtoul+0x1bc>
    ba30:	6f ef       	ldi	r22, 0xFF	; 255
    ba32:	a9 90       	ld	r10, Y+
    ba34:	c6 cf       	rjmp	.-116    	; 0xb9c2 <strtoul+0x14c>
    ba36:	41 14       	cp	r4, r1
    ba38:	51 04       	cpc	r5, r1
    ba3a:	51 f0       	breq	.+20     	; 0xba50 <strtoul+0x1da>
    ba3c:	66 23       	and	r22, r22
    ba3e:	11 f0       	breq	.+4      	; 0xba44 <strtoul+0x1ce>
    ba40:	21 97       	sbiw	r28, 0x01	; 1
    ba42:	03 c0       	rjmp	.+6      	; 0xba4a <strtoul+0x1d4>
    ba44:	31 fe       	sbrs	r3, 1
    ba46:	04 c0       	rjmp	.+8      	; 0xba50 <strtoul+0x1da>
    ba48:	22 97       	sbiw	r28, 0x02	; 2
    ba4a:	f2 01       	movw	r30, r4
    ba4c:	c0 83       	st	Z, r28
    ba4e:	d1 83       	std	Z+1, r29	; 0x01
    ba50:	30 fe       	sbrs	r3, 0
    ba52:	07 c0       	rjmp	.+14     	; 0xba62 <strtoul+0x1ec>
    ba54:	50 95       	com	r21
    ba56:	40 95       	com	r20
    ba58:	30 95       	com	r19
    ba5a:	21 95       	neg	r18
    ba5c:	3f 4f       	sbci	r19, 0xFF	; 255
    ba5e:	4f 4f       	sbci	r20, 0xFF	; 255
    ba60:	5f 4f       	sbci	r21, 0xFF	; 255
    ba62:	67 ff       	sbrs	r22, 7
    ba64:	0a c0       	rjmp	.+20     	; 0xba7a <strtoul+0x204>
    ba66:	82 e2       	ldi	r24, 0x22	; 34
    ba68:	90 e0       	ldi	r25, 0x00	; 0
    ba6a:	80 93 19 2c 	sts	0x2C19, r24
    ba6e:	90 93 1a 2c 	sts	0x2C1A, r25
    ba72:	2f ef       	ldi	r18, 0xFF	; 255
    ba74:	3f ef       	ldi	r19, 0xFF	; 255
    ba76:	4f ef       	ldi	r20, 0xFF	; 255
    ba78:	5f ef       	ldi	r21, 0xFF	; 255
    ba7a:	b9 01       	movw	r22, r18
    ba7c:	ca 01       	movw	r24, r20
    ba7e:	df 91       	pop	r29
    ba80:	cf 91       	pop	r28
    ba82:	1f 91       	pop	r17
    ba84:	0f 91       	pop	r16
    ba86:	ff 90       	pop	r15
    ba88:	ef 90       	pop	r14
    ba8a:	df 90       	pop	r13
    ba8c:	cf 90       	pop	r12
    ba8e:	bf 90       	pop	r11
    ba90:	af 90       	pop	r10
    ba92:	9f 90       	pop	r9
    ba94:	8f 90       	pop	r8
    ba96:	7f 90       	pop	r7
    ba98:	6f 90       	pop	r6
    ba9a:	5f 90       	pop	r5
    ba9c:	4f 90       	pop	r4
    ba9e:	3f 90       	pop	r3
    baa0:	08 95       	ret

0000baa2 <isspace>:
    baa2:	91 11       	cpse	r25, r1
    baa4:	64 c2       	rjmp	.+1224   	; 0xbf6e <__ctype_isfalse>
    baa6:	80 32       	cpi	r24, 0x20	; 32
    baa8:	19 f0       	breq	.+6      	; 0xbab0 <isspace+0xe>
    baaa:	89 50       	subi	r24, 0x09	; 9
    baac:	85 50       	subi	r24, 0x05	; 5
    baae:	d0 f7       	brcc	.-12     	; 0xbaa4 <isspace+0x2>
    bab0:	08 95       	ret

0000bab2 <sprintf>:
    bab2:	0f 93       	push	r16
    bab4:	1f 93       	push	r17
    bab6:	df 93       	push	r29
    bab8:	cf 93       	push	r28
    baba:	cd b7       	in	r28, 0x3d	; 61
    babc:	de b7       	in	r29, 0x3e	; 62
    babe:	2e 97       	sbiw	r28, 0x0e	; 14
    bac0:	cd bf       	out	0x3d, r28	; 61
    bac2:	de bf       	out	0x3e, r29	; 62
    bac4:	0e 89       	ldd	r16, Y+22	; 0x16
    bac6:	1f 89       	ldd	r17, Y+23	; 0x17
    bac8:	86 e0       	ldi	r24, 0x06	; 6
    baca:	8c 83       	std	Y+4, r24	; 0x04
    bacc:	09 83       	std	Y+1, r16	; 0x01
    bace:	1a 83       	std	Y+2, r17	; 0x02
    bad0:	8f ef       	ldi	r24, 0xFF	; 255
    bad2:	9f e7       	ldi	r25, 0x7F	; 127
    bad4:	8d 83       	std	Y+5, r24	; 0x05
    bad6:	9e 83       	std	Y+6, r25	; 0x06
    bad8:	9e 01       	movw	r18, r28
    bada:	26 5e       	subi	r18, 0xE6	; 230
    badc:	3f 4f       	sbci	r19, 0xFF	; 255
    bade:	ce 01       	movw	r24, r28
    bae0:	01 96       	adiw	r24, 0x01	; 1
    bae2:	68 8d       	ldd	r22, Y+24	; 0x18
    bae4:	79 8d       	ldd	r23, Y+25	; 0x19
    bae6:	a9 01       	movw	r20, r18
    bae8:	0e 94 84 5d 	call	0xbb08	; 0xbb08 <vfprintf>
    baec:	2f 81       	ldd	r18, Y+7	; 0x07
    baee:	38 85       	ldd	r19, Y+8	; 0x08
    baf0:	02 0f       	add	r16, r18
    baf2:	13 1f       	adc	r17, r19
    baf4:	f8 01       	movw	r30, r16
    baf6:	10 82       	st	Z, r1
    baf8:	2e 96       	adiw	r28, 0x0e	; 14
    bafa:	cd bf       	out	0x3d, r28	; 61
    bafc:	de bf       	out	0x3e, r29	; 62
    bafe:	cf 91       	pop	r28
    bb00:	df 91       	pop	r29
    bb02:	1f 91       	pop	r17
    bb04:	0f 91       	pop	r16
    bb06:	08 95       	ret

0000bb08 <vfprintf>:
    bb08:	2f 92       	push	r2
    bb0a:	3f 92       	push	r3
    bb0c:	4f 92       	push	r4
    bb0e:	5f 92       	push	r5
    bb10:	6f 92       	push	r6
    bb12:	7f 92       	push	r7
    bb14:	8f 92       	push	r8
    bb16:	9f 92       	push	r9
    bb18:	af 92       	push	r10
    bb1a:	bf 92       	push	r11
    bb1c:	cf 92       	push	r12
    bb1e:	df 92       	push	r13
    bb20:	ef 92       	push	r14
    bb22:	ff 92       	push	r15
    bb24:	0f 93       	push	r16
    bb26:	1f 93       	push	r17
    bb28:	df 93       	push	r29
    bb2a:	cf 93       	push	r28
    bb2c:	cd b7       	in	r28, 0x3d	; 61
    bb2e:	de b7       	in	r29, 0x3e	; 62
    bb30:	2b 97       	sbiw	r28, 0x0b	; 11
    bb32:	cd bf       	out	0x3d, r28	; 61
    bb34:	de bf       	out	0x3e, r29	; 62
    bb36:	3c 01       	movw	r6, r24
    bb38:	2b 01       	movw	r4, r22
    bb3a:	5a 01       	movw	r10, r20
    bb3c:	fc 01       	movw	r30, r24
    bb3e:	16 82       	std	Z+6, r1	; 0x06
    bb40:	17 82       	std	Z+7, r1	; 0x07
    bb42:	83 81       	ldd	r24, Z+3	; 0x03
    bb44:	81 fd       	sbrc	r24, 1
    bb46:	03 c0       	rjmp	.+6      	; 0xbb4e <vfprintf+0x46>
    bb48:	6f ef       	ldi	r22, 0xFF	; 255
    bb4a:	7f ef       	ldi	r23, 0xFF	; 255
    bb4c:	c6 c1       	rjmp	.+908    	; 0xbeda <vfprintf+0x3d2>
    bb4e:	9a e0       	ldi	r25, 0x0A	; 10
    bb50:	89 2e       	mov	r8, r25
    bb52:	1e 01       	movw	r2, r28
    bb54:	08 94       	sec
    bb56:	21 1c       	adc	r2, r1
    bb58:	31 1c       	adc	r3, r1
    bb5a:	f3 01       	movw	r30, r6
    bb5c:	23 81       	ldd	r18, Z+3	; 0x03
    bb5e:	f2 01       	movw	r30, r4
    bb60:	23 fd       	sbrc	r18, 3
    bb62:	85 91       	lpm	r24, Z+
    bb64:	23 ff       	sbrs	r18, 3
    bb66:	81 91       	ld	r24, Z+
    bb68:	2f 01       	movw	r4, r30
    bb6a:	88 23       	and	r24, r24
    bb6c:	09 f4       	brne	.+2      	; 0xbb70 <vfprintf+0x68>
    bb6e:	b2 c1       	rjmp	.+868    	; 0xbed4 <vfprintf+0x3cc>
    bb70:	85 32       	cpi	r24, 0x25	; 37
    bb72:	39 f4       	brne	.+14     	; 0xbb82 <vfprintf+0x7a>
    bb74:	23 fd       	sbrc	r18, 3
    bb76:	85 91       	lpm	r24, Z+
    bb78:	23 ff       	sbrs	r18, 3
    bb7a:	81 91       	ld	r24, Z+
    bb7c:	2f 01       	movw	r4, r30
    bb7e:	85 32       	cpi	r24, 0x25	; 37
    bb80:	29 f4       	brne	.+10     	; 0xbb8c <vfprintf+0x84>
    bb82:	90 e0       	ldi	r25, 0x00	; 0
    bb84:	b3 01       	movw	r22, r6
    bb86:	0e 94 d0 5f 	call	0xbfa0	; 0xbfa0 <fputc>
    bb8a:	e7 cf       	rjmp	.-50     	; 0xbb5a <vfprintf+0x52>
    bb8c:	98 2f       	mov	r25, r24
    bb8e:	ff 24       	eor	r15, r15
    bb90:	ee 24       	eor	r14, r14
    bb92:	99 24       	eor	r9, r9
    bb94:	ff e1       	ldi	r31, 0x1F	; 31
    bb96:	ff 15       	cp	r31, r15
    bb98:	d0 f0       	brcs	.+52     	; 0xbbce <vfprintf+0xc6>
    bb9a:	9b 32       	cpi	r25, 0x2B	; 43
    bb9c:	69 f0       	breq	.+26     	; 0xbbb8 <vfprintf+0xb0>
    bb9e:	9c 32       	cpi	r25, 0x2C	; 44
    bba0:	28 f4       	brcc	.+10     	; 0xbbac <vfprintf+0xa4>
    bba2:	90 32       	cpi	r25, 0x20	; 32
    bba4:	59 f0       	breq	.+22     	; 0xbbbc <vfprintf+0xb4>
    bba6:	93 32       	cpi	r25, 0x23	; 35
    bba8:	91 f4       	brne	.+36     	; 0xbbce <vfprintf+0xc6>
    bbaa:	0e c0       	rjmp	.+28     	; 0xbbc8 <vfprintf+0xc0>
    bbac:	9d 32       	cpi	r25, 0x2D	; 45
    bbae:	49 f0       	breq	.+18     	; 0xbbc2 <vfprintf+0xba>
    bbb0:	90 33       	cpi	r25, 0x30	; 48
    bbb2:	69 f4       	brne	.+26     	; 0xbbce <vfprintf+0xc6>
    bbb4:	41 e0       	ldi	r20, 0x01	; 1
    bbb6:	24 c0       	rjmp	.+72     	; 0xbc00 <vfprintf+0xf8>
    bbb8:	52 e0       	ldi	r21, 0x02	; 2
    bbba:	f5 2a       	or	r15, r21
    bbbc:	84 e0       	ldi	r24, 0x04	; 4
    bbbe:	f8 2a       	or	r15, r24
    bbc0:	28 c0       	rjmp	.+80     	; 0xbc12 <vfprintf+0x10a>
    bbc2:	98 e0       	ldi	r25, 0x08	; 8
    bbc4:	f9 2a       	or	r15, r25
    bbc6:	25 c0       	rjmp	.+74     	; 0xbc12 <vfprintf+0x10a>
    bbc8:	e0 e1       	ldi	r30, 0x10	; 16
    bbca:	fe 2a       	or	r15, r30
    bbcc:	22 c0       	rjmp	.+68     	; 0xbc12 <vfprintf+0x10a>
    bbce:	f7 fc       	sbrc	r15, 7
    bbd0:	29 c0       	rjmp	.+82     	; 0xbc24 <vfprintf+0x11c>
    bbd2:	89 2f       	mov	r24, r25
    bbd4:	80 53       	subi	r24, 0x30	; 48
    bbd6:	8a 30       	cpi	r24, 0x0A	; 10
    bbd8:	70 f4       	brcc	.+28     	; 0xbbf6 <vfprintf+0xee>
    bbda:	f6 fe       	sbrs	r15, 6
    bbdc:	05 c0       	rjmp	.+10     	; 0xbbe8 <vfprintf+0xe0>
    bbde:	98 9c       	mul	r9, r8
    bbe0:	90 2c       	mov	r9, r0
    bbe2:	11 24       	eor	r1, r1
    bbe4:	98 0e       	add	r9, r24
    bbe6:	15 c0       	rjmp	.+42     	; 0xbc12 <vfprintf+0x10a>
    bbe8:	e8 9c       	mul	r14, r8
    bbea:	e0 2c       	mov	r14, r0
    bbec:	11 24       	eor	r1, r1
    bbee:	e8 0e       	add	r14, r24
    bbf0:	f0 e2       	ldi	r31, 0x20	; 32
    bbf2:	ff 2a       	or	r15, r31
    bbf4:	0e c0       	rjmp	.+28     	; 0xbc12 <vfprintf+0x10a>
    bbf6:	9e 32       	cpi	r25, 0x2E	; 46
    bbf8:	29 f4       	brne	.+10     	; 0xbc04 <vfprintf+0xfc>
    bbfa:	f6 fc       	sbrc	r15, 6
    bbfc:	6b c1       	rjmp	.+726    	; 0xbed4 <vfprintf+0x3cc>
    bbfe:	40 e4       	ldi	r20, 0x40	; 64
    bc00:	f4 2a       	or	r15, r20
    bc02:	07 c0       	rjmp	.+14     	; 0xbc12 <vfprintf+0x10a>
    bc04:	9c 36       	cpi	r25, 0x6C	; 108
    bc06:	19 f4       	brne	.+6      	; 0xbc0e <vfprintf+0x106>
    bc08:	50 e8       	ldi	r21, 0x80	; 128
    bc0a:	f5 2a       	or	r15, r21
    bc0c:	02 c0       	rjmp	.+4      	; 0xbc12 <vfprintf+0x10a>
    bc0e:	98 36       	cpi	r25, 0x68	; 104
    bc10:	49 f4       	brne	.+18     	; 0xbc24 <vfprintf+0x11c>
    bc12:	f2 01       	movw	r30, r4
    bc14:	23 fd       	sbrc	r18, 3
    bc16:	95 91       	lpm	r25, Z+
    bc18:	23 ff       	sbrs	r18, 3
    bc1a:	91 91       	ld	r25, Z+
    bc1c:	2f 01       	movw	r4, r30
    bc1e:	99 23       	and	r25, r25
    bc20:	09 f0       	breq	.+2      	; 0xbc24 <vfprintf+0x11c>
    bc22:	b8 cf       	rjmp	.-144    	; 0xbb94 <vfprintf+0x8c>
    bc24:	89 2f       	mov	r24, r25
    bc26:	85 54       	subi	r24, 0x45	; 69
    bc28:	83 30       	cpi	r24, 0x03	; 3
    bc2a:	18 f0       	brcs	.+6      	; 0xbc32 <vfprintf+0x12a>
    bc2c:	80 52       	subi	r24, 0x20	; 32
    bc2e:	83 30       	cpi	r24, 0x03	; 3
    bc30:	38 f4       	brcc	.+14     	; 0xbc40 <vfprintf+0x138>
    bc32:	44 e0       	ldi	r20, 0x04	; 4
    bc34:	50 e0       	ldi	r21, 0x00	; 0
    bc36:	a4 0e       	add	r10, r20
    bc38:	b5 1e       	adc	r11, r21
    bc3a:	5f e3       	ldi	r21, 0x3F	; 63
    bc3c:	59 83       	std	Y+1, r21	; 0x01
    bc3e:	0f c0       	rjmp	.+30     	; 0xbc5e <vfprintf+0x156>
    bc40:	93 36       	cpi	r25, 0x63	; 99
    bc42:	31 f0       	breq	.+12     	; 0xbc50 <vfprintf+0x148>
    bc44:	93 37       	cpi	r25, 0x73	; 115
    bc46:	79 f0       	breq	.+30     	; 0xbc66 <vfprintf+0x15e>
    bc48:	93 35       	cpi	r25, 0x53	; 83
    bc4a:	09 f0       	breq	.+2      	; 0xbc4e <vfprintf+0x146>
    bc4c:	56 c0       	rjmp	.+172    	; 0xbcfa <vfprintf+0x1f2>
    bc4e:	20 c0       	rjmp	.+64     	; 0xbc90 <vfprintf+0x188>
    bc50:	f5 01       	movw	r30, r10
    bc52:	80 81       	ld	r24, Z
    bc54:	89 83       	std	Y+1, r24	; 0x01
    bc56:	42 e0       	ldi	r20, 0x02	; 2
    bc58:	50 e0       	ldi	r21, 0x00	; 0
    bc5a:	a4 0e       	add	r10, r20
    bc5c:	b5 1e       	adc	r11, r21
    bc5e:	61 01       	movw	r12, r2
    bc60:	01 e0       	ldi	r16, 0x01	; 1
    bc62:	10 e0       	ldi	r17, 0x00	; 0
    bc64:	12 c0       	rjmp	.+36     	; 0xbc8a <vfprintf+0x182>
    bc66:	f5 01       	movw	r30, r10
    bc68:	c0 80       	ld	r12, Z
    bc6a:	d1 80       	ldd	r13, Z+1	; 0x01
    bc6c:	f6 fc       	sbrc	r15, 6
    bc6e:	03 c0       	rjmp	.+6      	; 0xbc76 <vfprintf+0x16e>
    bc70:	6f ef       	ldi	r22, 0xFF	; 255
    bc72:	7f ef       	ldi	r23, 0xFF	; 255
    bc74:	02 c0       	rjmp	.+4      	; 0xbc7a <vfprintf+0x172>
    bc76:	69 2d       	mov	r22, r9
    bc78:	70 e0       	ldi	r23, 0x00	; 0
    bc7a:	42 e0       	ldi	r20, 0x02	; 2
    bc7c:	50 e0       	ldi	r21, 0x00	; 0
    bc7e:	a4 0e       	add	r10, r20
    bc80:	b5 1e       	adc	r11, r21
    bc82:	c6 01       	movw	r24, r12
    bc84:	0e 94 c5 5f 	call	0xbf8a	; 0xbf8a <strnlen>
    bc88:	8c 01       	movw	r16, r24
    bc8a:	5f e7       	ldi	r21, 0x7F	; 127
    bc8c:	f5 22       	and	r15, r21
    bc8e:	14 c0       	rjmp	.+40     	; 0xbcb8 <vfprintf+0x1b0>
    bc90:	f5 01       	movw	r30, r10
    bc92:	c0 80       	ld	r12, Z
    bc94:	d1 80       	ldd	r13, Z+1	; 0x01
    bc96:	f6 fc       	sbrc	r15, 6
    bc98:	03 c0       	rjmp	.+6      	; 0xbca0 <vfprintf+0x198>
    bc9a:	6f ef       	ldi	r22, 0xFF	; 255
    bc9c:	7f ef       	ldi	r23, 0xFF	; 255
    bc9e:	02 c0       	rjmp	.+4      	; 0xbca4 <vfprintf+0x19c>
    bca0:	69 2d       	mov	r22, r9
    bca2:	70 e0       	ldi	r23, 0x00	; 0
    bca4:	42 e0       	ldi	r20, 0x02	; 2
    bca6:	50 e0       	ldi	r21, 0x00	; 0
    bca8:	a4 0e       	add	r10, r20
    bcaa:	b5 1e       	adc	r11, r21
    bcac:	c6 01       	movw	r24, r12
    bcae:	0e 94 ba 5f 	call	0xbf74	; 0xbf74 <strnlen_P>
    bcb2:	8c 01       	movw	r16, r24
    bcb4:	50 e8       	ldi	r21, 0x80	; 128
    bcb6:	f5 2a       	or	r15, r21
    bcb8:	f3 fe       	sbrs	r15, 3
    bcba:	07 c0       	rjmp	.+14     	; 0xbcca <vfprintf+0x1c2>
    bcbc:	1a c0       	rjmp	.+52     	; 0xbcf2 <vfprintf+0x1ea>
    bcbe:	80 e2       	ldi	r24, 0x20	; 32
    bcc0:	90 e0       	ldi	r25, 0x00	; 0
    bcc2:	b3 01       	movw	r22, r6
    bcc4:	0e 94 d0 5f 	call	0xbfa0	; 0xbfa0 <fputc>
    bcc8:	ea 94       	dec	r14
    bcca:	8e 2d       	mov	r24, r14
    bccc:	90 e0       	ldi	r25, 0x00	; 0
    bcce:	08 17       	cp	r16, r24
    bcd0:	19 07       	cpc	r17, r25
    bcd2:	a8 f3       	brcs	.-22     	; 0xbcbe <vfprintf+0x1b6>
    bcd4:	0e c0       	rjmp	.+28     	; 0xbcf2 <vfprintf+0x1ea>
    bcd6:	f6 01       	movw	r30, r12
    bcd8:	f7 fc       	sbrc	r15, 7
    bcda:	85 91       	lpm	r24, Z+
    bcdc:	f7 fe       	sbrs	r15, 7
    bcde:	81 91       	ld	r24, Z+
    bce0:	6f 01       	movw	r12, r30
    bce2:	90 e0       	ldi	r25, 0x00	; 0
    bce4:	b3 01       	movw	r22, r6
    bce6:	0e 94 d0 5f 	call	0xbfa0	; 0xbfa0 <fputc>
    bcea:	e1 10       	cpse	r14, r1
    bcec:	ea 94       	dec	r14
    bcee:	01 50       	subi	r16, 0x01	; 1
    bcf0:	10 40       	sbci	r17, 0x00	; 0
    bcf2:	01 15       	cp	r16, r1
    bcf4:	11 05       	cpc	r17, r1
    bcf6:	79 f7       	brne	.-34     	; 0xbcd6 <vfprintf+0x1ce>
    bcf8:	ea c0       	rjmp	.+468    	; 0xbece <vfprintf+0x3c6>
    bcfa:	94 36       	cpi	r25, 0x64	; 100
    bcfc:	11 f0       	breq	.+4      	; 0xbd02 <vfprintf+0x1fa>
    bcfe:	99 36       	cpi	r25, 0x69	; 105
    bd00:	69 f5       	brne	.+90     	; 0xbd5c <vfprintf+0x254>
    bd02:	f7 fe       	sbrs	r15, 7
    bd04:	08 c0       	rjmp	.+16     	; 0xbd16 <vfprintf+0x20e>
    bd06:	f5 01       	movw	r30, r10
    bd08:	20 81       	ld	r18, Z
    bd0a:	31 81       	ldd	r19, Z+1	; 0x01
    bd0c:	42 81       	ldd	r20, Z+2	; 0x02
    bd0e:	53 81       	ldd	r21, Z+3	; 0x03
    bd10:	84 e0       	ldi	r24, 0x04	; 4
    bd12:	90 e0       	ldi	r25, 0x00	; 0
    bd14:	0a c0       	rjmp	.+20     	; 0xbd2a <vfprintf+0x222>
    bd16:	f5 01       	movw	r30, r10
    bd18:	80 81       	ld	r24, Z
    bd1a:	91 81       	ldd	r25, Z+1	; 0x01
    bd1c:	9c 01       	movw	r18, r24
    bd1e:	44 27       	eor	r20, r20
    bd20:	37 fd       	sbrc	r19, 7
    bd22:	40 95       	com	r20
    bd24:	54 2f       	mov	r21, r20
    bd26:	82 e0       	ldi	r24, 0x02	; 2
    bd28:	90 e0       	ldi	r25, 0x00	; 0
    bd2a:	a8 0e       	add	r10, r24
    bd2c:	b9 1e       	adc	r11, r25
    bd2e:	9f e6       	ldi	r25, 0x6F	; 111
    bd30:	f9 22       	and	r15, r25
    bd32:	57 ff       	sbrs	r21, 7
    bd34:	09 c0       	rjmp	.+18     	; 0xbd48 <vfprintf+0x240>
    bd36:	50 95       	com	r21
    bd38:	40 95       	com	r20
    bd3a:	30 95       	com	r19
    bd3c:	21 95       	neg	r18
    bd3e:	3f 4f       	sbci	r19, 0xFF	; 255
    bd40:	4f 4f       	sbci	r20, 0xFF	; 255
    bd42:	5f 4f       	sbci	r21, 0xFF	; 255
    bd44:	e0 e8       	ldi	r30, 0x80	; 128
    bd46:	fe 2a       	or	r15, r30
    bd48:	ca 01       	movw	r24, r20
    bd4a:	b9 01       	movw	r22, r18
    bd4c:	a1 01       	movw	r20, r2
    bd4e:	2a e0       	ldi	r18, 0x0A	; 10
    bd50:	30 e0       	ldi	r19, 0x00	; 0
    bd52:	0e 94 fc 5f 	call	0xbff8	; 0xbff8 <__ultoa_invert>
    bd56:	d8 2e       	mov	r13, r24
    bd58:	d2 18       	sub	r13, r2
    bd5a:	40 c0       	rjmp	.+128    	; 0xbddc <vfprintf+0x2d4>
    bd5c:	95 37       	cpi	r25, 0x75	; 117
    bd5e:	29 f4       	brne	.+10     	; 0xbd6a <vfprintf+0x262>
    bd60:	1f 2d       	mov	r17, r15
    bd62:	1f 7e       	andi	r17, 0xEF	; 239
    bd64:	2a e0       	ldi	r18, 0x0A	; 10
    bd66:	30 e0       	ldi	r19, 0x00	; 0
    bd68:	1d c0       	rjmp	.+58     	; 0xbda4 <vfprintf+0x29c>
    bd6a:	1f 2d       	mov	r17, r15
    bd6c:	19 7f       	andi	r17, 0xF9	; 249
    bd6e:	9f 36       	cpi	r25, 0x6F	; 111
    bd70:	61 f0       	breq	.+24     	; 0xbd8a <vfprintf+0x282>
    bd72:	90 37       	cpi	r25, 0x70	; 112
    bd74:	20 f4       	brcc	.+8      	; 0xbd7e <vfprintf+0x276>
    bd76:	98 35       	cpi	r25, 0x58	; 88
    bd78:	09 f0       	breq	.+2      	; 0xbd7c <vfprintf+0x274>
    bd7a:	ac c0       	rjmp	.+344    	; 0xbed4 <vfprintf+0x3cc>
    bd7c:	0f c0       	rjmp	.+30     	; 0xbd9c <vfprintf+0x294>
    bd7e:	90 37       	cpi	r25, 0x70	; 112
    bd80:	39 f0       	breq	.+14     	; 0xbd90 <vfprintf+0x288>
    bd82:	98 37       	cpi	r25, 0x78	; 120
    bd84:	09 f0       	breq	.+2      	; 0xbd88 <vfprintf+0x280>
    bd86:	a6 c0       	rjmp	.+332    	; 0xbed4 <vfprintf+0x3cc>
    bd88:	04 c0       	rjmp	.+8      	; 0xbd92 <vfprintf+0x28a>
    bd8a:	28 e0       	ldi	r18, 0x08	; 8
    bd8c:	30 e0       	ldi	r19, 0x00	; 0
    bd8e:	0a c0       	rjmp	.+20     	; 0xbda4 <vfprintf+0x29c>
    bd90:	10 61       	ori	r17, 0x10	; 16
    bd92:	14 fd       	sbrc	r17, 4
    bd94:	14 60       	ori	r17, 0x04	; 4
    bd96:	20 e1       	ldi	r18, 0x10	; 16
    bd98:	30 e0       	ldi	r19, 0x00	; 0
    bd9a:	04 c0       	rjmp	.+8      	; 0xbda4 <vfprintf+0x29c>
    bd9c:	14 fd       	sbrc	r17, 4
    bd9e:	16 60       	ori	r17, 0x06	; 6
    bda0:	20 e1       	ldi	r18, 0x10	; 16
    bda2:	32 e0       	ldi	r19, 0x02	; 2
    bda4:	17 ff       	sbrs	r17, 7
    bda6:	08 c0       	rjmp	.+16     	; 0xbdb8 <vfprintf+0x2b0>
    bda8:	f5 01       	movw	r30, r10
    bdaa:	60 81       	ld	r22, Z
    bdac:	71 81       	ldd	r23, Z+1	; 0x01
    bdae:	82 81       	ldd	r24, Z+2	; 0x02
    bdb0:	93 81       	ldd	r25, Z+3	; 0x03
    bdb2:	44 e0       	ldi	r20, 0x04	; 4
    bdb4:	50 e0       	ldi	r21, 0x00	; 0
    bdb6:	08 c0       	rjmp	.+16     	; 0xbdc8 <vfprintf+0x2c0>
    bdb8:	f5 01       	movw	r30, r10
    bdba:	80 81       	ld	r24, Z
    bdbc:	91 81       	ldd	r25, Z+1	; 0x01
    bdbe:	bc 01       	movw	r22, r24
    bdc0:	80 e0       	ldi	r24, 0x00	; 0
    bdc2:	90 e0       	ldi	r25, 0x00	; 0
    bdc4:	42 e0       	ldi	r20, 0x02	; 2
    bdc6:	50 e0       	ldi	r21, 0x00	; 0
    bdc8:	a4 0e       	add	r10, r20
    bdca:	b5 1e       	adc	r11, r21
    bdcc:	a1 01       	movw	r20, r2
    bdce:	0e 94 fc 5f 	call	0xbff8	; 0xbff8 <__ultoa_invert>
    bdd2:	d8 2e       	mov	r13, r24
    bdd4:	d2 18       	sub	r13, r2
    bdd6:	8f e7       	ldi	r24, 0x7F	; 127
    bdd8:	f8 2e       	mov	r15, r24
    bdda:	f1 22       	and	r15, r17
    bddc:	f6 fe       	sbrs	r15, 6
    bdde:	0b c0       	rjmp	.+22     	; 0xbdf6 <vfprintf+0x2ee>
    bde0:	5e ef       	ldi	r21, 0xFE	; 254
    bde2:	f5 22       	and	r15, r21
    bde4:	d9 14       	cp	r13, r9
    bde6:	38 f4       	brcc	.+14     	; 0xbdf6 <vfprintf+0x2ee>
    bde8:	f4 fe       	sbrs	r15, 4
    bdea:	07 c0       	rjmp	.+14     	; 0xbdfa <vfprintf+0x2f2>
    bdec:	f2 fc       	sbrc	r15, 2
    bdee:	05 c0       	rjmp	.+10     	; 0xbdfa <vfprintf+0x2f2>
    bdf0:	8f ee       	ldi	r24, 0xEF	; 239
    bdf2:	f8 22       	and	r15, r24
    bdf4:	02 c0       	rjmp	.+4      	; 0xbdfa <vfprintf+0x2f2>
    bdf6:	1d 2d       	mov	r17, r13
    bdf8:	01 c0       	rjmp	.+2      	; 0xbdfc <vfprintf+0x2f4>
    bdfa:	19 2d       	mov	r17, r9
    bdfc:	f4 fe       	sbrs	r15, 4
    bdfe:	0d c0       	rjmp	.+26     	; 0xbe1a <vfprintf+0x312>
    be00:	fe 01       	movw	r30, r28
    be02:	ed 0d       	add	r30, r13
    be04:	f1 1d       	adc	r31, r1
    be06:	80 81       	ld	r24, Z
    be08:	80 33       	cpi	r24, 0x30	; 48
    be0a:	19 f4       	brne	.+6      	; 0xbe12 <vfprintf+0x30a>
    be0c:	99 ee       	ldi	r25, 0xE9	; 233
    be0e:	f9 22       	and	r15, r25
    be10:	08 c0       	rjmp	.+16     	; 0xbe22 <vfprintf+0x31a>
    be12:	1f 5f       	subi	r17, 0xFF	; 255
    be14:	f2 fe       	sbrs	r15, 2
    be16:	05 c0       	rjmp	.+10     	; 0xbe22 <vfprintf+0x31a>
    be18:	03 c0       	rjmp	.+6      	; 0xbe20 <vfprintf+0x318>
    be1a:	8f 2d       	mov	r24, r15
    be1c:	86 78       	andi	r24, 0x86	; 134
    be1e:	09 f0       	breq	.+2      	; 0xbe22 <vfprintf+0x31a>
    be20:	1f 5f       	subi	r17, 0xFF	; 255
    be22:	0f 2d       	mov	r16, r15
    be24:	f3 fc       	sbrc	r15, 3
    be26:	14 c0       	rjmp	.+40     	; 0xbe50 <vfprintf+0x348>
    be28:	f0 fe       	sbrs	r15, 0
    be2a:	0f c0       	rjmp	.+30     	; 0xbe4a <vfprintf+0x342>
    be2c:	1e 15       	cp	r17, r14
    be2e:	10 f0       	brcs	.+4      	; 0xbe34 <vfprintf+0x32c>
    be30:	9d 2c       	mov	r9, r13
    be32:	0b c0       	rjmp	.+22     	; 0xbe4a <vfprintf+0x342>
    be34:	9d 2c       	mov	r9, r13
    be36:	9e 0c       	add	r9, r14
    be38:	91 1a       	sub	r9, r17
    be3a:	1e 2d       	mov	r17, r14
    be3c:	06 c0       	rjmp	.+12     	; 0xbe4a <vfprintf+0x342>
    be3e:	80 e2       	ldi	r24, 0x20	; 32
    be40:	90 e0       	ldi	r25, 0x00	; 0
    be42:	b3 01       	movw	r22, r6
    be44:	0e 94 d0 5f 	call	0xbfa0	; 0xbfa0 <fputc>
    be48:	1f 5f       	subi	r17, 0xFF	; 255
    be4a:	1e 15       	cp	r17, r14
    be4c:	c0 f3       	brcs	.-16     	; 0xbe3e <vfprintf+0x336>
    be4e:	04 c0       	rjmp	.+8      	; 0xbe58 <vfprintf+0x350>
    be50:	1e 15       	cp	r17, r14
    be52:	10 f4       	brcc	.+4      	; 0xbe58 <vfprintf+0x350>
    be54:	e1 1a       	sub	r14, r17
    be56:	01 c0       	rjmp	.+2      	; 0xbe5a <vfprintf+0x352>
    be58:	ee 24       	eor	r14, r14
    be5a:	04 ff       	sbrs	r16, 4
    be5c:	0f c0       	rjmp	.+30     	; 0xbe7c <vfprintf+0x374>
    be5e:	80 e3       	ldi	r24, 0x30	; 48
    be60:	90 e0       	ldi	r25, 0x00	; 0
    be62:	b3 01       	movw	r22, r6
    be64:	0e 94 d0 5f 	call	0xbfa0	; 0xbfa0 <fputc>
    be68:	02 ff       	sbrs	r16, 2
    be6a:	1d c0       	rjmp	.+58     	; 0xbea6 <vfprintf+0x39e>
    be6c:	01 fd       	sbrc	r16, 1
    be6e:	03 c0       	rjmp	.+6      	; 0xbe76 <vfprintf+0x36e>
    be70:	88 e7       	ldi	r24, 0x78	; 120
    be72:	90 e0       	ldi	r25, 0x00	; 0
    be74:	0e c0       	rjmp	.+28     	; 0xbe92 <vfprintf+0x38a>
    be76:	88 e5       	ldi	r24, 0x58	; 88
    be78:	90 e0       	ldi	r25, 0x00	; 0
    be7a:	0b c0       	rjmp	.+22     	; 0xbe92 <vfprintf+0x38a>
    be7c:	80 2f       	mov	r24, r16
    be7e:	86 78       	andi	r24, 0x86	; 134
    be80:	91 f0       	breq	.+36     	; 0xbea6 <vfprintf+0x39e>
    be82:	01 ff       	sbrs	r16, 1
    be84:	02 c0       	rjmp	.+4      	; 0xbe8a <vfprintf+0x382>
    be86:	8b e2       	ldi	r24, 0x2B	; 43
    be88:	01 c0       	rjmp	.+2      	; 0xbe8c <vfprintf+0x384>
    be8a:	80 e2       	ldi	r24, 0x20	; 32
    be8c:	f7 fc       	sbrc	r15, 7
    be8e:	8d e2       	ldi	r24, 0x2D	; 45
    be90:	90 e0       	ldi	r25, 0x00	; 0
    be92:	b3 01       	movw	r22, r6
    be94:	0e 94 d0 5f 	call	0xbfa0	; 0xbfa0 <fputc>
    be98:	06 c0       	rjmp	.+12     	; 0xbea6 <vfprintf+0x39e>
    be9a:	80 e3       	ldi	r24, 0x30	; 48
    be9c:	90 e0       	ldi	r25, 0x00	; 0
    be9e:	b3 01       	movw	r22, r6
    bea0:	0e 94 d0 5f 	call	0xbfa0	; 0xbfa0 <fputc>
    bea4:	9a 94       	dec	r9
    bea6:	d9 14       	cp	r13, r9
    bea8:	c0 f3       	brcs	.-16     	; 0xbe9a <vfprintf+0x392>
    beaa:	da 94       	dec	r13
    beac:	f1 01       	movw	r30, r2
    beae:	ed 0d       	add	r30, r13
    beb0:	f1 1d       	adc	r31, r1
    beb2:	80 81       	ld	r24, Z
    beb4:	90 e0       	ldi	r25, 0x00	; 0
    beb6:	b3 01       	movw	r22, r6
    beb8:	0e 94 d0 5f 	call	0xbfa0	; 0xbfa0 <fputc>
    bebc:	dd 20       	and	r13, r13
    bebe:	a9 f7       	brne	.-22     	; 0xbeaa <vfprintf+0x3a2>
    bec0:	06 c0       	rjmp	.+12     	; 0xbece <vfprintf+0x3c6>
    bec2:	80 e2       	ldi	r24, 0x20	; 32
    bec4:	90 e0       	ldi	r25, 0x00	; 0
    bec6:	b3 01       	movw	r22, r6
    bec8:	0e 94 d0 5f 	call	0xbfa0	; 0xbfa0 <fputc>
    becc:	ea 94       	dec	r14
    bece:	ee 20       	and	r14, r14
    bed0:	c1 f7       	brne	.-16     	; 0xbec2 <vfprintf+0x3ba>
    bed2:	43 ce       	rjmp	.-890    	; 0xbb5a <vfprintf+0x52>
    bed4:	f3 01       	movw	r30, r6
    bed6:	66 81       	ldd	r22, Z+6	; 0x06
    bed8:	77 81       	ldd	r23, Z+7	; 0x07
    beda:	cb 01       	movw	r24, r22
    bedc:	2b 96       	adiw	r28, 0x0b	; 11
    bede:	cd bf       	out	0x3d, r28	; 61
    bee0:	de bf       	out	0x3e, r29	; 62
    bee2:	cf 91       	pop	r28
    bee4:	df 91       	pop	r29
    bee6:	1f 91       	pop	r17
    bee8:	0f 91       	pop	r16
    beea:	ff 90       	pop	r15
    beec:	ef 90       	pop	r14
    beee:	df 90       	pop	r13
    bef0:	cf 90       	pop	r12
    bef2:	bf 90       	pop	r11
    bef4:	af 90       	pop	r10
    bef6:	9f 90       	pop	r9
    bef8:	8f 90       	pop	r8
    befa:	7f 90       	pop	r7
    befc:	6f 90       	pop	r6
    befe:	5f 90       	pop	r5
    bf00:	4f 90       	pop	r4
    bf02:	3f 90       	pop	r3
    bf04:	2f 90       	pop	r2
    bf06:	08 95       	ret

0000bf08 <__eerd_byte_x128a1>:
    bf08:	03 d0       	rcall	.+6      	; 0xbf10 <eeprom_mapen>
    bf0a:	80 81       	ld	r24, Z
    bf0c:	99 27       	eor	r25, r25
    bf0e:	08 95       	ret

0000bf10 <eeprom_mapen>:
    bf10:	e0 ec       	ldi	r30, 0xC0	; 192
    bf12:	f1 e0       	ldi	r31, 0x01	; 1
    bf14:	37 85       	ldd	r19, Z+15	; 0x0f
    bf16:	37 fd       	sbrc	r19, 7
    bf18:	fd cf       	rjmp	.-6      	; 0xbf14 <eeprom_mapen+0x4>
    bf1a:	34 85       	ldd	r19, Z+12	; 0x0c
    bf1c:	38 60       	ori	r19, 0x08	; 8
    bf1e:	34 87       	std	Z+12, r19	; 0x0c
    bf20:	fc 01       	movw	r30, r24
    bf22:	e0 50       	subi	r30, 0x00	; 0
    bf24:	f0 4f       	sbci	r31, 0xF0	; 240
    bf26:	08 95       	ret

0000bf28 <__eewr_byte_x128a1>:
    bf28:	26 2f       	mov	r18, r22

0000bf2a <__eewr_r18_x128a1>:
    bf2a:	e0 ec       	ldi	r30, 0xC0	; 192
    bf2c:	f1 e0       	ldi	r31, 0x01	; 1
    bf2e:	37 85       	ldd	r19, Z+15	; 0x0f
    bf30:	37 fd       	sbrc	r19, 7
    bf32:	fd cf       	rjmp	.-6      	; 0xbf2e <__eewr_r18_x128a1+0x4>
    bf34:	34 85       	ldd	r19, Z+12	; 0x0c
    bf36:	37 7f       	andi	r19, 0xF7	; 247
    bf38:	34 87       	std	Z+12, r19	; 0x0c
    bf3a:	37 85       	ldd	r19, Z+15	; 0x0f
    bf3c:	31 ff       	sbrs	r19, 1
    bf3e:	09 c0       	rjmp	.+18     	; 0xbf52 <__eewr_r18_x128a1+0x28>
    bf40:	36 e3       	ldi	r19, 0x36	; 54
    bf42:	32 87       	std	Z+10, r19	; 0x0a
    bf44:	38 ed       	ldi	r19, 0xD8	; 216
    bf46:	34 bf       	out	0x34, r19	; 52
    bf48:	31 e0       	ldi	r19, 0x01	; 1
    bf4a:	33 87       	std	Z+11, r19	; 0x0b
    bf4c:	37 85       	ldd	r19, Z+15	; 0x0f
    bf4e:	37 fd       	sbrc	r19, 7
    bf50:	fd cf       	rjmp	.-6      	; 0xbf4c <__eewr_r18_x128a1+0x22>
    bf52:	33 e3       	ldi	r19, 0x33	; 51
    bf54:	32 87       	std	Z+10, r19	; 0x0a
    bf56:	80 83       	st	Z, r24
    bf58:	91 83       	std	Z+1, r25	; 0x01
    bf5a:	12 82       	std	Z+2, r1	; 0x02
    bf5c:	24 83       	std	Z+4, r18	; 0x04
    bf5e:	25 e3       	ldi	r18, 0x35	; 53
    bf60:	22 87       	std	Z+10, r18	; 0x0a
    bf62:	28 ed       	ldi	r18, 0xD8	; 216
    bf64:	31 e0       	ldi	r19, 0x01	; 1
    bf66:	24 bf       	out	0x34, r18	; 52
    bf68:	33 87       	std	Z+11, r19	; 0x0b
    bf6a:	01 96       	adiw	r24, 0x01	; 1
    bf6c:	08 95       	ret

0000bf6e <__ctype_isfalse>:
    bf6e:	99 27       	eor	r25, r25
    bf70:	88 27       	eor	r24, r24

0000bf72 <__ctype_istrue>:
    bf72:	08 95       	ret

0000bf74 <strnlen_P>:
    bf74:	fc 01       	movw	r30, r24
    bf76:	05 90       	lpm	r0, Z+
    bf78:	61 50       	subi	r22, 0x01	; 1
    bf7a:	70 40       	sbci	r23, 0x00	; 0
    bf7c:	01 10       	cpse	r0, r1
    bf7e:	d8 f7       	brcc	.-10     	; 0xbf76 <strnlen_P+0x2>
    bf80:	80 95       	com	r24
    bf82:	90 95       	com	r25
    bf84:	8e 0f       	add	r24, r30
    bf86:	9f 1f       	adc	r25, r31
    bf88:	08 95       	ret

0000bf8a <strnlen>:
    bf8a:	fc 01       	movw	r30, r24
    bf8c:	61 50       	subi	r22, 0x01	; 1
    bf8e:	70 40       	sbci	r23, 0x00	; 0
    bf90:	01 90       	ld	r0, Z+
    bf92:	01 10       	cpse	r0, r1
    bf94:	d8 f7       	brcc	.-10     	; 0xbf8c <strnlen+0x2>
    bf96:	80 95       	com	r24
    bf98:	90 95       	com	r25
    bf9a:	8e 0f       	add	r24, r30
    bf9c:	9f 1f       	adc	r25, r31
    bf9e:	08 95       	ret

0000bfa0 <fputc>:
    bfa0:	0f 93       	push	r16
    bfa2:	1f 93       	push	r17
    bfa4:	cf 93       	push	r28
    bfa6:	df 93       	push	r29
    bfa8:	8c 01       	movw	r16, r24
    bfaa:	eb 01       	movw	r28, r22
    bfac:	8b 81       	ldd	r24, Y+3	; 0x03
    bfae:	81 ff       	sbrs	r24, 1
    bfb0:	1b c0       	rjmp	.+54     	; 0xbfe8 <fputc+0x48>
    bfb2:	82 ff       	sbrs	r24, 2
    bfb4:	0d c0       	rjmp	.+26     	; 0xbfd0 <fputc+0x30>
    bfb6:	2e 81       	ldd	r18, Y+6	; 0x06
    bfb8:	3f 81       	ldd	r19, Y+7	; 0x07
    bfba:	8c 81       	ldd	r24, Y+4	; 0x04
    bfbc:	9d 81       	ldd	r25, Y+5	; 0x05
    bfbe:	28 17       	cp	r18, r24
    bfc0:	39 07       	cpc	r19, r25
    bfc2:	64 f4       	brge	.+24     	; 0xbfdc <fputc+0x3c>
    bfc4:	e8 81       	ld	r30, Y
    bfc6:	f9 81       	ldd	r31, Y+1	; 0x01
    bfc8:	01 93       	st	Z+, r16
    bfca:	e8 83       	st	Y, r30
    bfcc:	f9 83       	std	Y+1, r31	; 0x01
    bfce:	06 c0       	rjmp	.+12     	; 0xbfdc <fputc+0x3c>
    bfd0:	e8 85       	ldd	r30, Y+8	; 0x08
    bfd2:	f9 85       	ldd	r31, Y+9	; 0x09
    bfd4:	80 2f       	mov	r24, r16
    bfd6:	19 95       	eicall
    bfd8:	89 2b       	or	r24, r25
    bfda:	31 f4       	brne	.+12     	; 0xbfe8 <fputc+0x48>
    bfdc:	8e 81       	ldd	r24, Y+6	; 0x06
    bfde:	9f 81       	ldd	r25, Y+7	; 0x07
    bfe0:	01 96       	adiw	r24, 0x01	; 1
    bfe2:	8e 83       	std	Y+6, r24	; 0x06
    bfe4:	9f 83       	std	Y+7, r25	; 0x07
    bfe6:	02 c0       	rjmp	.+4      	; 0xbfec <fputc+0x4c>
    bfe8:	0f ef       	ldi	r16, 0xFF	; 255
    bfea:	1f ef       	ldi	r17, 0xFF	; 255
    bfec:	c8 01       	movw	r24, r16
    bfee:	df 91       	pop	r29
    bff0:	cf 91       	pop	r28
    bff2:	1f 91       	pop	r17
    bff4:	0f 91       	pop	r16
    bff6:	08 95       	ret

0000bff8 <__ultoa_invert>:
    bff8:	fa 01       	movw	r30, r20
    bffa:	aa 27       	eor	r26, r26
    bffc:	28 30       	cpi	r18, 0x08	; 8
    bffe:	51 f1       	breq	.+84     	; 0xc054 <__ultoa_invert+0x5c>
    c000:	20 31       	cpi	r18, 0x10	; 16
    c002:	81 f1       	breq	.+96     	; 0xc064 <__ultoa_invert+0x6c>
    c004:	e8 94       	clt
    c006:	6f 93       	push	r22
    c008:	6e 7f       	andi	r22, 0xFE	; 254
    c00a:	6e 5f       	subi	r22, 0xFE	; 254
    c00c:	7f 4f       	sbci	r23, 0xFF	; 255
    c00e:	8f 4f       	sbci	r24, 0xFF	; 255
    c010:	9f 4f       	sbci	r25, 0xFF	; 255
    c012:	af 4f       	sbci	r26, 0xFF	; 255
    c014:	b1 e0       	ldi	r27, 0x01	; 1
    c016:	3e d0       	rcall	.+124    	; 0xc094 <__ultoa_invert+0x9c>
    c018:	b4 e0       	ldi	r27, 0x04	; 4
    c01a:	3c d0       	rcall	.+120    	; 0xc094 <__ultoa_invert+0x9c>
    c01c:	67 0f       	add	r22, r23
    c01e:	78 1f       	adc	r23, r24
    c020:	89 1f       	adc	r24, r25
    c022:	9a 1f       	adc	r25, r26
    c024:	a1 1d       	adc	r26, r1
    c026:	68 0f       	add	r22, r24
    c028:	79 1f       	adc	r23, r25
    c02a:	8a 1f       	adc	r24, r26
    c02c:	91 1d       	adc	r25, r1
    c02e:	a1 1d       	adc	r26, r1
    c030:	6a 0f       	add	r22, r26
    c032:	71 1d       	adc	r23, r1
    c034:	81 1d       	adc	r24, r1
    c036:	91 1d       	adc	r25, r1
    c038:	a1 1d       	adc	r26, r1
    c03a:	20 d0       	rcall	.+64     	; 0xc07c <__ultoa_invert+0x84>
    c03c:	09 f4       	brne	.+2      	; 0xc040 <__ultoa_invert+0x48>
    c03e:	68 94       	set
    c040:	3f 91       	pop	r19
    c042:	2a e0       	ldi	r18, 0x0A	; 10
    c044:	26 9f       	mul	r18, r22
    c046:	11 24       	eor	r1, r1
    c048:	30 19       	sub	r19, r0
    c04a:	30 5d       	subi	r19, 0xD0	; 208
    c04c:	31 93       	st	Z+, r19
    c04e:	de f6       	brtc	.-74     	; 0xc006 <__ultoa_invert+0xe>
    c050:	cf 01       	movw	r24, r30
    c052:	08 95       	ret
    c054:	46 2f       	mov	r20, r22
    c056:	47 70       	andi	r20, 0x07	; 7
    c058:	40 5d       	subi	r20, 0xD0	; 208
    c05a:	41 93       	st	Z+, r20
    c05c:	b3 e0       	ldi	r27, 0x03	; 3
    c05e:	0f d0       	rcall	.+30     	; 0xc07e <__ultoa_invert+0x86>
    c060:	c9 f7       	brne	.-14     	; 0xc054 <__ultoa_invert+0x5c>
    c062:	f6 cf       	rjmp	.-20     	; 0xc050 <__ultoa_invert+0x58>
    c064:	46 2f       	mov	r20, r22
    c066:	4f 70       	andi	r20, 0x0F	; 15
    c068:	40 5d       	subi	r20, 0xD0	; 208
    c06a:	4a 33       	cpi	r20, 0x3A	; 58
    c06c:	18 f0       	brcs	.+6      	; 0xc074 <__ultoa_invert+0x7c>
    c06e:	49 5d       	subi	r20, 0xD9	; 217
    c070:	31 fd       	sbrc	r19, 1
    c072:	40 52       	subi	r20, 0x20	; 32
    c074:	41 93       	st	Z+, r20
    c076:	02 d0       	rcall	.+4      	; 0xc07c <__ultoa_invert+0x84>
    c078:	a9 f7       	brne	.-22     	; 0xc064 <__ultoa_invert+0x6c>
    c07a:	ea cf       	rjmp	.-44     	; 0xc050 <__ultoa_invert+0x58>
    c07c:	b4 e0       	ldi	r27, 0x04	; 4
    c07e:	a6 95       	lsr	r26
    c080:	97 95       	ror	r25
    c082:	87 95       	ror	r24
    c084:	77 95       	ror	r23
    c086:	67 95       	ror	r22
    c088:	ba 95       	dec	r27
    c08a:	c9 f7       	brne	.-14     	; 0xc07e <__ultoa_invert+0x86>
    c08c:	00 97       	sbiw	r24, 0x00	; 0
    c08e:	61 05       	cpc	r22, r1
    c090:	71 05       	cpc	r23, r1
    c092:	08 95       	ret
    c094:	9b 01       	movw	r18, r22
    c096:	ac 01       	movw	r20, r24
    c098:	0a 2e       	mov	r0, r26
    c09a:	06 94       	lsr	r0
    c09c:	57 95       	ror	r21
    c09e:	47 95       	ror	r20
    c0a0:	37 95       	ror	r19
    c0a2:	27 95       	ror	r18
    c0a4:	ba 95       	dec	r27
    c0a6:	c9 f7       	brne	.-14     	; 0xc09a <__ultoa_invert+0xa2>
    c0a8:	62 0f       	add	r22, r18
    c0aa:	73 1f       	adc	r23, r19
    c0ac:	84 1f       	adc	r24, r20
    c0ae:	95 1f       	adc	r25, r21
    c0b0:	a0 1d       	adc	r26, r0
    c0b2:	08 95       	ret

0000c0b4 <_exit>:
    c0b4:	f8 94       	cli

0000c0b6 <__stop_program>:
    c0b6:	ff cf       	rjmp	.-2      	; 0xc0b6 <__stop_program>
